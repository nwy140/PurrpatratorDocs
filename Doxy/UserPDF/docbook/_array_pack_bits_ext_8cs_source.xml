<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__array_pack_bits_ext_8cs_source" xml:lang="en-US">
<title>ArrayPackBitsExt.cs</title>
<indexterm><primary>C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArrayPackBitsExt.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__array_pack_bits_ext_8cs_source_1l00001"/>00001 <emphasis role="comment">/*</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00002"/>00002 <emphasis role="comment">*&#32;The&#32;MIT&#32;License&#32;(MIT)</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00003"/>00003 <emphasis role="comment">*&#32;</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00004"/>00004 <emphasis role="comment">*&#32;Copyright&#32;(c)&#32;2018-2019&#32;Davin&#32;Carten&#32;(emotitron)&#32;(davincarten@gmail.com)</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00005"/>00005 <emphasis role="comment">*&#32;</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00006"/>00006 <emphasis role="comment">*&#32;Permission&#32;is&#32;hereby&#32;granted,&#32;free&#32;of&#32;charge,&#32;to&#32;any&#32;person&#32;obtaining&#32;a&#32;copy</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00007"/>00007 <emphasis role="comment">*&#32;of&#32;this&#32;software&#32;and&#32;associated&#32;documentation&#32;files&#32;(the&#32;&quot;Software&quot;),&#32;to&#32;deal</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00008"/>00008 <emphasis role="comment">*&#32;in&#32;the&#32;Software&#32;without&#32;restriction,&#32;including&#32;without&#32;limitation&#32;the&#32;rights</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00009"/>00009 <emphasis role="comment">*&#32;to&#32;use,&#32;copy,&#32;modify,&#32;merge,&#32;publish,&#32;distribute,&#32;sublicense,&#32;and/or&#32;sell</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00010"/>00010 <emphasis role="comment">*&#32;copies&#32;of&#32;the&#32;Software,&#32;and&#32;to&#32;permit&#32;persons&#32;to&#32;whom&#32;the&#32;Software&#32;is</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00011"/>00011 <emphasis role="comment">*&#32;furnished&#32;to&#32;do&#32;so,&#32;subject&#32;to&#32;the&#32;following&#32;conditions:</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00012"/>00012 <emphasis role="comment">*&#32;</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00013"/>00013 <emphasis role="comment">*&#32;The&#32;above&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;shall&#32;be&#32;included&#32;in</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00014"/>00014 <emphasis role="comment">*&#32;all&#32;copies&#32;or&#32;substantial&#32;portions&#32;of&#32;the&#32;Software.</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00015"/>00015 <emphasis role="comment">*&#32;</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00016"/>00016 <emphasis role="comment">*&#32;THE&#32;SOFTWARE&#32;IS&#32;PROVIDED&#32;&quot;AS&#32;IS&quot;,&#32;WITHOUT&#32;WARRANTY&#32;OF&#32;ANY&#32;KIND,&#32;EXPRESS&#32;OR</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00017"/>00017 <emphasis role="comment">*&#32;IMPLIED,&#32;INCLUDING&#32;BUT&#32;NOT&#32;LIMITED&#32;TO&#32;THE&#32;WARRANTIES&#32;OF&#32;MERCHANTABILITY,</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00018"/>00018 <emphasis role="comment">*&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE&#32;AND&#32;NONINFRINGEMENT.&#32;IN&#32;NO&#32;EVENT&#32;SHALL&#32;THE</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00019"/>00019 <emphasis role="comment">*&#32;AUTHORS&#32;OR&#32;COPYRIGHT&#32;HOLDERS&#32;BE&#32;LIABLE&#32;FOR&#32;ANY&#32;CLAIM,&#32;DAMAGES&#32;OR&#32;OTHER</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00020"/>00020 <emphasis role="comment">*&#32;LIABILITY,&#32;WHETHER&#32;IN&#32;AN&#32;ACTION&#32;OF&#32;CONTRACT,&#32;TORT&#32;OR&#32;OTHERWISE,&#32;ARISING&#32;FROM,</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00021"/>00021 <emphasis role="comment">*&#32;OUT&#32;OF&#32;OR&#32;IN&#32;CONNECTION&#32;WITH&#32;THE&#32;SOFTWARE&#32;OR&#32;THE&#32;USE&#32;OR&#32;OTHER&#32;DEALINGS&#32;IN</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00022"/>00022 <emphasis role="comment">*&#32;THE&#32;SOFTWARE.</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00023"/>00023 <emphasis role="comment">*/</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00024"/>00024 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00025"/>00025 <emphasis role="preprocessor">#if&#32;DEVELOPMENT_BUILD</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00026"/>00026 <emphasis role="preprocessor">#define&#32;UNITY_ASSERTIONS</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00027"/>00027 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00028"/>00028 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00029"/><link linkend="_namespace_photon_1_1_compression">00029</link> <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_photon_1_1_compression">Photon.Compression</link>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00030"/>00030 {
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00034"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext">00034</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext">ArrayPackBitsExt</link>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00035"/>00035 &#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00036"/>00036 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Primary&#32;Write&#32;Packed</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00037"/>00037 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00042"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a7aa4bf5228a942524e44499747ea30f7">00042</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;unsafe&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a7aa4bf5228a942524e44499747ea30f7">WritePackedBits</link>(ulong*&#32;uPtr,&#32;ulong&#32;value,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bits&#32;==&#32;0)
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00046"/>00046 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;valuebits&#32;=&#32;value.UsedBitCount();
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sizebits&#32;=&#32;bits.UsedBitCount();
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe">ArraySerializeUnsafe</link>.<link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1">Write</link>(uPtr,&#32;(uint)(valuebits),&#32;ref&#32;bitposition,&#32;sizebits);
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe">ArraySerializeUnsafe</link>.<link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1">Write</link>(uPtr,&#32;value,&#32;ref&#32;bitposition,&#32;valuebits);
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00051"/>00051 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//UnityEngine.Debug.Log(&quot;Write&#32;Unsafe&#32;PBits&#32;&quot;&#32;+&#32;value&#32;+&#32;&quot;&#32;=&#32;&quot;&#32;+&#32;sizebits&#32;+&#32;&quot;&#32;:&#32;&quot;&#32;+&#32;valuebits);</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00054"/>00054 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00059"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a3b849e1c6d450d974ed2abea73aef8c5">00059</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a3b849e1c6d450d974ed2abea73aef8c5">WritePackedBits</link>(<emphasis role="keyword">this</emphasis>&#32;ulong[]&#32;buffer,&#32;ulong&#32;value,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bits&#32;==&#32;0)
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00063"/>00063 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;valuebits&#32;=&#32;value.UsedBitCount();
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sizebits&#32;=&#32;bits.UsedBitCount();
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write((uint)(valuebits),&#32;ref&#32;bitposition,&#32;(<emphasis role="keywordtype">int</emphasis>)sizebits);
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write(value,&#32;ref&#32;bitposition,&#32;valuebits);
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00068"/>00068 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//UnityEngine.Debug.Log(&quot;Write&#32;ulong[]&#32;PBits&#32;&quot;&#32;+&#32;value&#32;+&#32;&quot;&#32;=&#32;&quot;&#32;+&#32;sizebits&#32;+&#32;&quot;&#32;:&#32;&quot;&#32;+&#32;valuebits);</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00071"/>00071 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00076"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a0272281b2501bf0b94b5dff51c31aa9f">00076</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a0272281b2501bf0b94b5dff51c31aa9f">WritePackedBits</link>(<emphasis role="keyword">this</emphasis>&#32;uint[]&#32;buffer,&#32;ulong&#32;value,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bits&#32;==&#32;0)
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00080"/>00080 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;valuebits&#32;=&#32;value.UsedBitCount();
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sizebits&#32;=&#32;bits.UsedBitCount();
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write((ulong)(valuebits),&#32;ref&#32;bitposition,&#32;(<emphasis role="keywordtype">int</emphasis>)sizebits);
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write(value,&#32;ref&#32;bitposition,&#32;valuebits);
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00085"/>00085 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//UnityEngine.Debug.Log(&quot;Write&#32;uint[]&#32;PBits&#32;&quot;&#32;+&#32;value&#32;+&#32;&quot;&#32;=&#32;&quot;&#32;+&#32;sizebits&#32;+&#32;&quot;&#32;:&#32;&quot;&#32;+&#32;valuebits);</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00092"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a5ed8dc40ce421494abee8a7288e087fc">00092</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a5ed8dc40ce421494abee8a7288e087fc">WritePackedBits</link>(<emphasis role="keyword">this</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ulong&#32;value,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;valuebits&#32;=&#32;value.UsedBitCount();
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sizebits&#32;=&#32;bits.UsedBitCount();
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write((uint)(valuebits),&#32;ref&#32;bitposition,&#32;(<emphasis role="keywordtype">int</emphasis>)sizebits);
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write(value,&#32;ref&#32;bitposition,&#32;valuebits);
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00098"/>00098 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//UnityEngine.Debug.Log(&quot;Write&#32;byte[]&#32;PBits&#32;&quot;&#32;+&#32;value&#32;+&#32;&quot;&#32;=&#32;&quot;&#32;+&#32;sizebits&#32;+&#32;&quot;&#32;:&#32;&quot;&#32;+&#32;valuebits);</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00101"/>00101 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00102"/>00102 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00103"/>00103 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00104"/>00104 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Primary&#32;Read&#32;Packed</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00105"/>00105 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00109"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a47724a2140489273a73215fb045ed016">00109</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;unsafe&#32;<emphasis role="keyword">static</emphasis>&#32;ulong&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a47724a2140489273a73215fb045ed016">ReadPackedBits</link>(ulong*&#32;uPtr,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bits&#32;==&#32;0)
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00113"/>00113 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sizebits&#32;=&#32;bits.UsedBitCount();
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;valuebits&#32;=&#32;(int)<link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe">ArraySerializeUnsafe</link>.<link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1aed2650eee9804de6bf8b43e12da2748b">Read</link>(uPtr,&#32;ref&#32;bitposition,&#32;sizebits);
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//UnityEngine.Debug.Log(&quot;Read&#32;Packedunsafe&#32;sizer/value&#32;:&#32;&quot;&#32;+&#32;sizebits&#32;+&#32;&quot;&#32;:&#32;&quot;&#32;+&#32;valuebits);</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe">ArraySerializeUnsafe</link>.<link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1aed2650eee9804de6bf8b43e12da2748b">Read</link>(uPtr,&#32;ref&#32;bitposition,&#32;valuebits);
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00119"/>00119 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00123"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a13d85c233f3f68aea3ad5e7a14297869">00123</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;ulong&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a13d85c233f3f68aea3ad5e7a14297869">ReadPackedBits</link>(<emphasis role="keyword">this</emphasis>&#32;ulong[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bits&#32;==&#32;0)
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00127"/>00127 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sizebits&#32;=&#32;bits.UsedBitCount();
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;valuebits&#32;=&#32;(int)buffer.Read(ref&#32;bitposition,&#32;sizebits);
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ulong&#32;value&#32;=&#32;buffer.Read(ref&#32;bitposition,&#32;valuebits);
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//UnityEngine.Debug.Log(&quot;Read&#32;Packed&#32;ulong[]&#32;&quot;&#32;+&#32;value&#32;+&#32;&quot;&#32;sizer/value&#32;:&#32;&quot;&#32;+&#32;sizebits&#32;+&#32;&quot;&#32;:&#32;&quot;&#32;+&#32;valuebits);</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;value;
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00137"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1ab10e6b857477acde6663173ea9f9dec3">00137</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;ulong&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1ab10e6b857477acde6663173ea9f9dec3">ReadPackedBits</link>(<emphasis role="keyword">this</emphasis>&#32;uint[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bits&#32;==&#32;0)
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00141"/>00141 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sizebits&#32;=&#32;bits.UsedBitCount();
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;valuebits&#32;=&#32;(int)buffer.Read(ref&#32;bitposition,&#32;sizebits);
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ulong&#32;value&#32;=&#32;buffer.Read(ref&#32;bitposition,&#32;valuebits);
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//UnityEngine.Debug.Log(&quot;Read&#32;Packed&#32;uint[]&#32;&quot;&#32;+&#32;value&#32;+&#32;&quot;&#32;sizer/value&#32;:&#32;&quot;&#32;+&#32;sizebits&#32;+&#32;&quot;&#32;:&#32;&quot;&#32;+&#32;valuebits);</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00146"/>00146 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;value;
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00148"/>00148 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00149"/>00149 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00154"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a289fcdbd38546d0bc24be8efb795c049">00154</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;ulong&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a289fcdbd38546d0bc24be8efb795c049">ReadPackedBits</link>(<emphasis role="keyword">this</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bits&#32;==&#32;0)
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00158"/>00158 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sizebits&#32;=&#32;bits.UsedBitCount();
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;valuebits&#32;=&#32;(int)buffer.Read(ref&#32;bitposition,&#32;sizebits);
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ulong&#32;value&#32;=&#32;buffer.Read(ref&#32;bitposition,&#32;valuebits);
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//UnityEngine.Debug.Log(&quot;Read&#32;Packed&#32;byte[]&#32;&quot;&#32;+&#32;value&#32;+&#32;&quot;&#32;sizer/value&#32;:&#32;&quot;&#32;+&#32;sizebits&#32;+&#32;&quot;&#32;:&#32;&quot;&#32;+&#32;valuebits);</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;value;
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00165"/>00165 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00166"/>00166 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00167"/>00167 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00168"/>00168 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Packed&#32;Signed</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00169"/>00169 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Unsafe</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00171"/>00171 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00176"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a6c2a4459af37d41b70a3f5d88dff7886">00176</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;unsafe&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a6c2a4459af37d41b70a3f5d88dff7886">WriteSignedPackedBits</link>(ulong*&#32;uPtr,&#32;<emphasis role="keywordtype">int</emphasis>&#32;value,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;zigzag&#32;=&#32;(uint)((value&#32;&lt;&lt;&#32;1)&#32;^&#32;(value&#32;&gt;&gt;&#32;31));
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a7aa4bf5228a942524e44499747ea30f7">WritePackedBits</link>(uPtr,&#32;zigzag,&#32;ref&#32;bitposition,&#32;bits);
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00181"/>00181 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00186"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1ab32db61412b91fa8c2a732729c7d6939">00186</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;unsafe&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1ab32db61412b91fa8c2a732729c7d6939">ReadSignedPackedBits</link>(ulong*&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;value&#32;=&#32;(uint)<link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a47724a2140489273a73215fb045ed016">ReadPackedBits</link>(buffer,&#32;ref&#32;bitposition,&#32;bits);
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;zagzig&#32;=&#32;(int)((value&#32;&gt;&gt;&#32;1)&#32;^&#32;(-(int)(value&#32;&amp;&#32;1)));
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;zagzig;
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ulong[]</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00193"/>00193 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00198"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a58418af5b8c92b833969fd47a99a788e">00198</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a58418af5b8c92b833969fd47a99a788e">WriteSignedPackedBits</link>(<emphasis role="keyword">this</emphasis>&#32;ulong[]&#32;buffer,&#32;<emphasis role="keywordtype">int</emphasis>&#32;value,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;zigzag&#32;=&#32;(uint)((value&#32;&lt;&lt;&#32;1)&#32;^&#32;(value&#32;&gt;&gt;&#32;31));
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.WritePackedBits(zigzag,&#32;ref&#32;bitposition,&#32;bits);
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00207"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a5d4dc2d2713632a8b7a59bea29627e6b">00207</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a5d4dc2d2713632a8b7a59bea29627e6b">ReadSignedPackedBits</link>(<emphasis role="keyword">this</emphasis>&#32;ulong[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;value&#32;=&#32;(uint)buffer.ReadPackedBits(ref&#32;bitposition,&#32;bits);
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;zagzig&#32;=&#32;(int)((value&#32;&gt;&gt;&#32;1)&#32;^&#32;(-(int)(value&#32;&amp;&#32;1)));
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;zagzig;
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00213"/>00213 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//uint[]</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00215"/>00215 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00220"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a2908035f3a482091f5dfecd596aa143c">00220</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a2908035f3a482091f5dfecd596aa143c">WriteSignedPackedBits</link>(<emphasis role="keyword">this</emphasis>&#32;uint[]&#32;buffer,&#32;<emphasis role="keywordtype">int</emphasis>&#32;value,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;zigzag&#32;=&#32;(uint)((value&#32;&lt;&lt;&#32;1)&#32;^&#32;(value&#32;&gt;&gt;&#32;31));
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00223"/>00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.WritePackedBits(zigzag,&#32;ref&#32;bitposition,&#32;bits);
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00229"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1aec220a902869e135d64dad9618d6a1ec">00229</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1aec220a902869e135d64dad9618d6a1ec">ReadSignedPackedBits</link>(<emphasis role="keyword">this</emphasis>&#32;uint[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00231"/>00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;value&#32;=&#32;(uint)buffer.ReadPackedBits(ref&#32;bitposition,&#32;bits);
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00232"/>00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;zagzig&#32;=&#32;(int)((value&#32;&gt;&gt;&#32;1)&#32;^&#32;(-(int)(value&#32;&amp;&#32;1)));
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00233"/>00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;zagzig;
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00234"/>00234 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00235"/>00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00236"/>00236 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00237"/>00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;byte[]</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00238"/>00238 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00243"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1aece6270685beb00f756679b85911caf0">00243</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1aece6270685beb00f756679b85911caf0">WriteSignedPackedBits</link>(<emphasis role="keyword">this</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;<emphasis role="keywordtype">int</emphasis>&#32;value,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00245"/>00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;zigzag&#32;=&#32;(uint)((value&#32;&lt;&lt;&#32;1)&#32;^&#32;(value&#32;&gt;&gt;&#32;31));
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.WritePackedBits(zigzag,&#32;ref&#32;bitposition,&#32;bits);
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00252"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a610c0972bbd1236d2183344e8492de21">00252</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a610c0972bbd1236d2183344e8492de21">ReadSignedPackedBits</link>(<emphasis role="keyword">this</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00253"/>00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00254"/>00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;value&#32;=&#32;(uint)buffer.ReadPackedBits(ref&#32;bitposition,&#32;bits);
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00255"/>00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;zagzig&#32;=&#32;(int)((value&#32;&gt;&gt;&#32;1)&#32;^&#32;(-(int)(value&#32;&amp;&#32;1)));
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00256"/>00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;zagzig;
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00257"/>00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00258"/>00258 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00259"/>00259 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00264"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1aa3968be741b713a9598369bed5c913db">00264</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1aa3968be741b713a9598369bed5c913db">WriteSignedPackedBits64</link>(<emphasis role="keyword">this</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;<emphasis role="keywordtype">long</emphasis>&#32;value,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ulong&#32;zig&#32;=&#32;(ulong)((value&#32;&lt;&lt;&#32;1)&#32;^&#32;(value&#32;&gt;&gt;&#32;63));
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.WritePackedBits(zig,&#32;ref&#32;bitposition,&#32;bits);
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00273"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1af428f144064c18baf10b2ce471e6f2b7">00273</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1af428f144064c18baf10b2ce471e6f2b7">ReadSignedPackedBits64</link>(<emphasis role="keyword">this</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00275"/>00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ulong&#32;zig&#32;=&#32;buffer.ReadPackedBits(ref&#32;bitposition,&#32;bits);
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00276"/>00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;zag&#32;=&#32;(long)((<emphasis role="keywordtype">long</emphasis>)(zig&#32;&gt;&gt;&#32;1)&#32;^&#32;(-(<emphasis role="keywordtype">long</emphasis>)(zig&#32;&amp;&#32;1)));
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00277"/>00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;zag;
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00278"/>00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00279"/>00279 
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00280"/>00280 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00281"/>00281 &#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00282"/>00282 }
<anchor xml:id="__array_pack_bits_ext_8cs_source_1l00283"/>00283 
</programlisting></section>
