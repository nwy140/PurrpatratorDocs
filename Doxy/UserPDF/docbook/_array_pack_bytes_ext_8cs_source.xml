<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__array_pack_bytes_ext_8cs_source" xml:lang="en-US">
<title>ArrayPackBytesExt.cs</title>
<indexterm><primary>C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArrayPackBytesExt.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00001"/>00001 <emphasis role="comment">/*</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00002"/>00002 <emphasis role="comment">*&#32;The&#32;MIT&#32;License&#32;(MIT)</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00003"/>00003 <emphasis role="comment">*&#32;</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00004"/>00004 <emphasis role="comment">*&#32;Copyright&#32;(c)&#32;2018-2019&#32;Davin&#32;Carten&#32;(emotitron)&#32;(davincarten@gmail.com)</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00005"/>00005 <emphasis role="comment">*&#32;</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00006"/>00006 <emphasis role="comment">*&#32;Permission&#32;is&#32;hereby&#32;granted,&#32;free&#32;of&#32;charge,&#32;to&#32;any&#32;person&#32;obtaining&#32;a&#32;copy</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00007"/>00007 <emphasis role="comment">*&#32;of&#32;this&#32;software&#32;and&#32;associated&#32;documentation&#32;files&#32;(the&#32;&quot;Software&quot;),&#32;to&#32;deal</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00008"/>00008 <emphasis role="comment">*&#32;in&#32;the&#32;Software&#32;without&#32;restriction,&#32;including&#32;without&#32;limitation&#32;the&#32;rights</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00009"/>00009 <emphasis role="comment">*&#32;to&#32;use,&#32;copy,&#32;modify,&#32;merge,&#32;publish,&#32;distribute,&#32;sublicense,&#32;and/or&#32;sell</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00010"/>00010 <emphasis role="comment">*&#32;copies&#32;of&#32;the&#32;Software,&#32;and&#32;to&#32;permit&#32;persons&#32;to&#32;whom&#32;the&#32;Software&#32;is</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00011"/>00011 <emphasis role="comment">*&#32;furnished&#32;to&#32;do&#32;so,&#32;subject&#32;to&#32;the&#32;following&#32;conditions:</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00012"/>00012 <emphasis role="comment">*&#32;</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00013"/>00013 <emphasis role="comment">*&#32;The&#32;above&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;shall&#32;be&#32;included&#32;in</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00014"/>00014 <emphasis role="comment">*&#32;all&#32;copies&#32;or&#32;substantial&#32;portions&#32;of&#32;the&#32;Software.</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00015"/>00015 <emphasis role="comment">*&#32;</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00016"/>00016 <emphasis role="comment">*&#32;THE&#32;SOFTWARE&#32;IS&#32;PROVIDED&#32;&quot;AS&#32;IS&quot;,&#32;WITHOUT&#32;WARRANTY&#32;OF&#32;ANY&#32;KIND,&#32;EXPRESS&#32;OR</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00017"/>00017 <emphasis role="comment">*&#32;IMPLIED,&#32;INCLUDING&#32;BUT&#32;NOT&#32;LIMITED&#32;TO&#32;THE&#32;WARRANTIES&#32;OF&#32;MERCHANTABILITY,</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00018"/>00018 <emphasis role="comment">*&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE&#32;AND&#32;NONINFRINGEMENT.&#32;IN&#32;NO&#32;EVENT&#32;SHALL&#32;THE</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00019"/>00019 <emphasis role="comment">*&#32;AUTHORS&#32;OR&#32;COPYRIGHT&#32;HOLDERS&#32;BE&#32;LIABLE&#32;FOR&#32;ANY&#32;CLAIM,&#32;DAMAGES&#32;OR&#32;OTHER</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00020"/>00020 <emphasis role="comment">*&#32;LIABILITY,&#32;WHETHER&#32;IN&#32;AN&#32;ACTION&#32;OF&#32;CONTRACT,&#32;TORT&#32;OR&#32;OTHERWISE,&#32;ARISING&#32;FROM,</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00021"/>00021 <emphasis role="comment">*&#32;OUT&#32;OF&#32;OR&#32;IN&#32;CONNECTION&#32;WITH&#32;THE&#32;SOFTWARE&#32;OR&#32;THE&#32;USE&#32;OR&#32;OTHER&#32;DEALINGS&#32;IN</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00022"/>00022 <emphasis role="comment">*&#32;THE&#32;SOFTWARE.</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00023"/>00023 <emphasis role="comment">*/</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00024"/>00024 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00025"/>00025 <emphasis role="preprocessor">#if&#32;DEVELOPMENT_BUILD</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00026"/>00026 <emphasis role="preprocessor">#define&#32;UNITY_ASSERTIONS</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00027"/>00027 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00028"/>00028 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00029"/>00029 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_photon_1_1_compression">Photon.Compression</link>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00030"/>00030 {
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00034"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext">00034</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext">ArrayPackBytesExt</link>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00035"/>00035 &#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00036"/>00036 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Primary&#32;Write&#32;Packed</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00037"/>00037 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00041"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1a179b27d80930ed160627d753d4a12717">00041</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;unsafe&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1a179b27d80930ed160627d753d4a12717">WritePackedBytes</link>(ulong*&#32;uPtr,&#32;ulong&#32;value,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bits&#32;==&#32;0)
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00045"/>00045 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bytes&#32;=&#32;(bits&#32;+&#32;7)&#32;&gt;&gt;&#32;3;
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sizebits&#32;=&#32;bytes.UsedBitCount();
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;valuebytes&#32;=&#32;value.UsedByteCount();
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00049"/>00049 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe">ArraySerializeUnsafe</link>.<link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1">Write</link>(uPtr,&#32;(uint)(valuebytes),&#32;ref&#32;bitposition,&#32;(<emphasis role="keywordtype">int</emphasis>)sizebits);
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe">ArraySerializeUnsafe</link>.<link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1">Write</link>(uPtr,&#32;value,&#32;ref&#32;bitposition,&#32;valuebytes&#32;&lt;&lt;&#32;3);
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00052"/>00052 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//UnityEngine.Debug.Log(value&#32;+&#32;&quot;&#32;buff:&quot;&#32;+&#32;buffer&#32;+&#32;&quot;bytes&#32;&quot;&#32;+&#32;bytes&#32;+</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&quot;&#32;=&#32;[&quot;&#32;+&#32;(int)sizebits&#32;+&#32;&quot;&#32;:&#32;&quot;&#32;+&#32;(valuebytes&#32;&lt;&lt;&#32;3)&#32;+&#32;&quot;]&#32;&#32;total&#32;bits:&#32;&quot;&#32;+&#32;((int)sizebits&#32;+&#32;(valuebytes&#32;&lt;&lt;&#32;3)));</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00056"/>00056 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00060"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1aab56f506cb976ed6ec9f629b9781db2d">00060</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1aab56f506cb976ed6ec9f629b9781db2d">WritePackedBytes</link>(<emphasis role="keyword">this</emphasis>&#32;ulong[]&#32;buffer,&#32;ulong&#32;value,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bits&#32;==&#32;0)
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00064"/>00064 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bytes&#32;=&#32;(bits&#32;+&#32;7)&#32;&gt;&gt;&#32;3;
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sizebits&#32;=&#32;bytes.UsedBitCount();
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;valuebytes&#32;=&#32;value.UsedByteCount();
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00068"/>00068 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write((uint)(valuebytes),&#32;ref&#32;bitposition,&#32;(<emphasis role="keywordtype">int</emphasis>)sizebits);
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write(value,&#32;ref&#32;bitposition,&#32;valuebytes&#32;&lt;&lt;&#32;3);
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00071"/>00071 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//UnityEngine.Debug.Log(value&#32;+&#32;&quot;&#32;buff:&quot;&#32;+&#32;buffer&#32;+&#32;&quot;bytes&#32;&quot;&#32;+&#32;bytes&#32;+</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&quot;&#32;=&#32;[&quot;&#32;+&#32;(int)sizebits&#32;+&#32;&quot;&#32;:&#32;&quot;&#32;+&#32;(valuebytes&#32;&lt;&lt;&#32;3)&#32;+&#32;&quot;]&#32;&#32;total&#32;bits:&#32;&quot;&#32;+&#32;((int)sizebits&#32;+&#32;(valuebytes&#32;&lt;&lt;&#32;3)));</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00078"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1ac302e74f3a402ee011b0d29c209e5ed5">00078</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1ac302e74f3a402ee011b0d29c209e5ed5">WritePackedBytes</link>(<emphasis role="keyword">this</emphasis>&#32;uint[]&#32;buffer,&#32;ulong&#32;value,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bits&#32;==&#32;0)
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00082"/>00082 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bytes&#32;=&#32;(bits&#32;+&#32;7)&#32;&gt;&gt;&#32;3;
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sizebits&#32;=&#32;bytes.UsedBitCount();
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;valuebytes&#32;=&#32;value.UsedByteCount();
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00086"/>00086 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write((uint)(valuebytes),&#32;ref&#32;bitposition,&#32;sizebits);
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write(value,&#32;ref&#32;bitposition,&#32;valuebytes&#32;&lt;&lt;&#32;3);
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00089"/>00089 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//UnityEngine.Debug.Log(value&#32;+&#32;&quot;&#32;buff:&quot;&#32;+&#32;buffer&#32;+&#32;&quot;bytes&#32;&quot;&#32;+&#32;bytes&#32;+</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&quot;&#32;=&#32;[&quot;&#32;+&#32;(int)sizebits&#32;+&#32;&quot;&#32;:&#32;&quot;&#32;+&#32;(valuebits&#32;&lt;&lt;&#32;3)&#32;+&#32;&quot;]&#32;&#32;total&#32;bits:&#32;&quot;&#32;+&#32;((int)sizebits&#32;+&#32;(valuebits&#32;&lt;&lt;&#32;3)));</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00096"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1ae1994616f1f90d8fda28e4c708ef78b7">00096</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1ae1994616f1f90d8fda28e4c708ef78b7">WritePackedBytes</link>(<emphasis role="keyword">this</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ulong&#32;value,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bits&#32;==&#32;0)
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00100"/>00100 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bytes&#32;=&#32;(bits&#32;+&#32;7)&#32;&gt;&gt;&#32;3;
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sizebits&#32;=&#32;bytes.UsedBitCount();
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;valuebytes&#32;=&#32;value.UsedByteCount();
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00104"/>00104 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write((uint)(valuebytes),&#32;ref&#32;bitposition,&#32;sizebits);
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write(value,&#32;ref&#32;bitposition,&#32;valuebytes&#32;&lt;&lt;&#32;3);
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00107"/>00107 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//UnityEngine.Debug.Log(value&#32;+&#32;&quot;&#32;buff:&quot;&#32;+&#32;buffer&#32;+&#32;&quot;bytes&#32;&quot;&#32;+&#32;bytes&#32;+</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&quot;&#32;=&#32;[&quot;&#32;+&#32;(int)sizebits&#32;+&#32;&quot;&#32;:&#32;&quot;&#32;+&#32;(valuebits&#32;&lt;&lt;&#32;3)&#32;+&#32;&quot;]&#32;&#32;total&#32;bits:&#32;&quot;&#32;+&#32;((int)sizebits&#32;+&#32;(valuebits&#32;&lt;&lt;&#32;3)));</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00111"/>00111 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00112"/>00112 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00113"/>00113 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00114"/>00114 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Primary&#32;Read&#32;Packed</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00115"/>00115 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00119"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1aa6896584b72385f1a9d0aaa06c39318e">00119</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;unsafe&#32;<emphasis role="keyword">static</emphasis>&#32;ulong&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1aa6896584b72385f1a9d0aaa06c39318e">ReadPackedBytes</link>(ulong*&#32;uPtr,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bits&#32;==&#32;0)
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00123"/>00123 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bytes&#32;=&#32;(bits&#32;+&#32;7)&#32;&gt;&gt;&#32;3;
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sizebits&#32;=&#32;bytes.UsedBitCount();
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;valuebits&#32;=&#32;(int)<link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe">ArraySerializeUnsafe</link>.<link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1aed2650eee9804de6bf8b43e12da2748b">Read</link>(uPtr,&#32;ref&#32;bitposition,&#32;sizebits)&#32;&lt;&lt;&#32;3;
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe">ArraySerializeUnsafe</link>.<link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1aed2650eee9804de6bf8b43e12da2748b">Read</link>(uPtr,&#32;ref&#32;bitposition,&#32;valuebits);
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00132"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1a63189039e54a13b5a5413b9fd39cab02">00132</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;ulong&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1a63189039e54a13b5a5413b9fd39cab02">ReadPackedBytes</link>(<emphasis role="keyword">this</emphasis>&#32;ulong[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bits&#32;==&#32;0)
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00136"/>00136 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bytes&#32;=&#32;(bits&#32;+&#32;7)&#32;&gt;&gt;&#32;3;
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sizebits&#32;=&#32;bytes.UsedBitCount();
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;valuebits&#32;=&#32;(int)buffer.Read(ref&#32;bitposition,&#32;sizebits)&#32;&lt;&lt;&#32;3;
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;buffer.Read(ref&#32;bitposition,&#32;valuebits);
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00145"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1a40613e53e1c8103d09083bd0816ea3bc">00145</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;ulong&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1a40613e53e1c8103d09083bd0816ea3bc">ReadPackedBytes</link>(<emphasis role="keyword">this</emphasis>&#32;uint[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bits&#32;==&#32;0)
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00149"/>00149 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bytes&#32;=&#32;(bits&#32;+&#32;7)&#32;&gt;&gt;&#32;3;
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sizebits&#32;=&#32;bytes.UsedBitCount();
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;valuebits&#32;=&#32;(int)buffer.Read(ref&#32;bitposition,&#32;sizebits)&#32;&lt;&lt;&#32;3;
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;buffer.Read(ref&#32;bitposition,&#32;valuebits);
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00158"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1adb6c5866c515c0f7ec14d5f0046dd1d0">00158</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;ulong&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1adb6c5866c515c0f7ec14d5f0046dd1d0">ReadPackedBytes</link>(<emphasis role="keyword">this</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bits&#32;==&#32;0)
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00162"/>00162 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bytes&#32;=&#32;(bits&#32;+&#32;7)&#32;&gt;&gt;&#32;3;
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sizebits&#32;=&#32;bytes.UsedBitCount();
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;valuebits&#32;=&#32;(int)buffer.Read(ref&#32;bitposition,&#32;sizebits)&#32;&lt;&lt;&#32;3;
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;buffer.Read(ref&#32;bitposition,&#32;valuebits);
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00168"/>00168 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00169"/>00169 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00170"/>00170 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00171"/>00171 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Packed&#32;Signed</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00172"/>00172 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Unsafe</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00174"/>00174 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00178"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1a00239421ecc84833e9998f59335a2e82">00178</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;unsafe&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1a00239421ecc84833e9998f59335a2e82">WriteSignedPackedBytes</link>(ulong*&#32;uPtr,&#32;<emphasis role="keywordtype">int</emphasis>&#32;value,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;zigzag&#32;=&#32;(uint)((value&#32;&lt;&lt;&#32;1)&#32;^&#32;(value&#32;&gt;&gt;&#32;31));
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1a179b27d80930ed160627d753d4a12717">WritePackedBytes</link>(uPtr,&#32;zigzag,&#32;ref&#32;bitposition,&#32;bits);
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00186"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1a8b514b000b155bfe9a214270fcaab643">00186</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;unsafe&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1a8b514b000b155bfe9a214270fcaab643">ReadSignedPackedBytes</link>(ulong*&#32;uPtr,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;value&#32;=&#32;(uint)<link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1aa6896584b72385f1a9d0aaa06c39318e">ReadPackedBytes</link>(uPtr,&#32;ref&#32;bitposition,&#32;bits);
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;zagzig&#32;=&#32;(int)((value&#32;&gt;&gt;&#32;1)&#32;^&#32;(-(int)(value&#32;&amp;&#32;1)));
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;zagzig;
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00192"/>00192 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ulong[]</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00194"/>00194 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00198"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1a35da1fb6f9165cded4e183019df22189">00198</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1a35da1fb6f9165cded4e183019df22189">WriteSignedPackedBytes</link>(<emphasis role="keyword">this</emphasis>&#32;ulong[]&#32;buffer,&#32;<emphasis role="keywordtype">int</emphasis>&#32;value,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;zigzag&#32;=&#32;(uint)((value&#32;&lt;&lt;&#32;1)&#32;^&#32;(value&#32;&gt;&gt;&#32;31));
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.WritePackedBytes(zigzag,&#32;ref&#32;bitposition,&#32;bits);
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00206"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1a04ef8aff8656ddb0aecda908a2ab830b">00206</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1a04ef8aff8656ddb0aecda908a2ab830b">ReadSignedPackedBytes</link>(<emphasis role="keyword">this</emphasis>&#32;ulong[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;value&#32;=&#32;(uint)buffer.ReadPackedBytes(ref&#32;bitposition,&#32;bits);
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;zagzig&#32;=&#32;(int)((value&#32;&gt;&gt;&#32;1)&#32;^&#32;(-(int)(value&#32;&amp;&#32;1)));
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;zagzig;
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00212"/>00212 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;uint[]</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00214"/>00214 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00218"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1a7358529f550d86d984075feb99a7419e">00218</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1a7358529f550d86d984075feb99a7419e">WriteSignedPackedBytes</link>(<emphasis role="keyword">this</emphasis>&#32;uint[]&#32;buffer,&#32;<emphasis role="keywordtype">int</emphasis>&#32;value,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;zigzag&#32;=&#32;(uint)((value&#32;&lt;&lt;&#32;1)&#32;^&#32;(value&#32;&gt;&gt;&#32;31));
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.WritePackedBytes(zigzag,&#32;ref&#32;bitposition,&#32;bits);
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00226"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1a0d437a49ca159746659581d9810b6d04">00226</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1a0d437a49ca159746659581d9810b6d04">ReadSignedPackedBytes</link>(<emphasis role="keyword">this</emphasis>&#32;uint[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00228"/>00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;value&#32;=&#32;(uint)buffer.ReadPackedBytes(ref&#32;bitposition,&#32;bits);
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00229"/>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;zagzig&#32;=&#32;(int)((value&#32;&gt;&gt;&#32;1)&#32;^&#32;(-(int)(value&#32;&amp;&#32;1)));
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;zagzig;
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00231"/>00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00232"/>00232 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00233"/>00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;byte[]</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00234"/>00234 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00238"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1ade902e21e3cb4e1c35860b31542c17ca">00238</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1ade902e21e3cb4e1c35860b31542c17ca">WriteSignedPackedBytes</link>(<emphasis role="keyword">this</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;<emphasis role="keywordtype">int</emphasis>&#32;value,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00239"/>00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00240"/>00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;zigzag&#32;=&#32;(uint)((value&#32;&lt;&lt;&#32;1)&#32;^&#32;(value&#32;&gt;&gt;&#32;31));
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00241"/>00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.WritePackedBytes(zigzag,&#32;ref&#32;bitposition,&#32;bits);
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00246"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1affa65bd568db585b0a6569ea25b11eec">00246</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1affa65bd568db585b0a6569ea25b11eec">ReadSignedPackedBytes</link>(<emphasis role="keyword">this</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;value&#32;=&#32;(uint)buffer.ReadPackedBytes(ref&#32;bitposition,&#32;bits);
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;zagzig&#32;=&#32;(int)((value&#32;&gt;&gt;&#32;1)&#32;^&#32;(-(int)(value&#32;&amp;&#32;1)));
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;zagzig;
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00252"/>00252 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00256"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1ae481eaca479e3c270ab97714e9a7280b">00256</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1ae481eaca479e3c270ab97714e9a7280b">WriteSignedPackedBytes64</link>(<emphasis role="keyword">this</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;<emphasis role="keywordtype">long</emphasis>&#32;value,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00257"/>00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ulong&#32;zig&#32;=&#32;(ulong)((value&#32;&lt;&lt;&#32;1)&#32;^&#32;(value&#32;&gt;&gt;&#32;63));
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00259"/>00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.WritePackedBytes(zig,&#32;ref&#32;bitposition,&#32;bits);
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00264"/><link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1a8a9e6068f56b5741bba1690060ef8a9c">00264</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_array_pack_bytes_ext_1a8a9e6068f56b5741bba1690060ef8a9c">ReadSignedPackedBytes64</link>(<emphasis role="keyword">this</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ulong&#32;zig&#32;=&#32;buffer.ReadPackedBytes(ref&#32;bitposition,&#32;bits);
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;zag&#32;=&#32;(long)((<emphasis role="keywordtype">long</emphasis>)(zig&#32;&gt;&gt;&#32;1)&#32;^&#32;(-(<emphasis role="keywordtype">long</emphasis>)(zig&#32;&amp;&#32;1)));
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;zag;
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00269"/>00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00270"/>00270 
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00271"/>00271 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00272"/>00272 &#32;&#32;&#32;&#32;}
<anchor xml:id="__array_pack_bytes_ext_8cs_source_1l00273"/>00273 }
</programlisting></section>
