<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__bezier_spline_inspector_8cs_source" xml:lang="en-US">
<title>BezierSplineInspector.cs</title>
<indexterm><primary>C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUnityNetworking/Demos/DemoSlotRacer/Scripts/BezierCurve/Editor/BezierSplineInspector.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__bezier_spline_inspector_8cs_source_1l00001"/>00001 <emphasis role="comment">//&#32;--------------------------------------------------------------------------------------------------------------------</emphasis>
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00002"/>00002 <emphasis role="comment">//&#32;&lt;copyright&#32;file=&quot;BezierSplineInspector.cs&quot;&#32;company=&quot;Exit&#32;Games&#32;GmbH&quot;&gt;</emphasis>
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00003"/>00003 <emphasis role="comment">//&#32;&#32;&#32;Part&#32;of:&#32;Photon&#32;Unity&#32;Networking&#32;Demos</emphasis>
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00004"/>00004 <emphasis role="comment">//&#32;&lt;/copyright&gt;</emphasis>
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00005"/>00005 <emphasis role="comment">//&#32;&lt;summary&gt;</emphasis>
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00006"/>00006 <emphasis role="comment">//&#32;&#32;Original:&#32;http://catlikecoding.com/unity/tutorials/curves-and-splines/</emphasis>
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00007"/>00007 <emphasis role="comment">//&#32;&#32;Used&#32;in&#32;SlotRacer&#32;Demo</emphasis>
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00008"/>00008 <emphasis role="comment">//&#32;&lt;/summary&gt;</emphasis>
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00009"/>00009 <emphasis role="comment">//&#32;&lt;author&gt;developer@exitgames.com&lt;/author&gt;</emphasis>
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00010"/>00010 <emphasis role="comment">//&#32;--------------------------------------------------------------------------------------------------------------------</emphasis>
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00011"/>00011 
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00012"/>00012 <emphasis role="keyword">using</emphasis>&#32;UnityEditor;
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00013"/>00013 <emphasis role="keyword">using</emphasis>&#32;UnityEngine;
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00014"/>00014 
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00015"/>00015 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_photon_1_1_pun_1_1_demo_1_1_slot_racer_1_1_utils">Photon.Pun.Demo.SlotRacer.Utils</link>
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00016"/>00016 {
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00017"/>00017 &#32;&#32;&#32;&#32;[CustomEditor(typeof(BezierSpline))]
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00018"/><link linkend="_class_photon_1_1_pun_1_1_demo_1_1_slot_racer_1_1_utils_1_1_bezier_spline_inspector">00018</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_photon_1_1_pun_1_1_demo_1_1_slot_racer_1_1_utils_1_1_bezier_spline_inspector">BezierSplineInspector</link>&#32;:&#32;Editor
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00019"/>00019 &#32;&#32;&#32;&#32;{
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;stepsPerCurve&#32;=&#32;10;
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;directionScale&#32;=&#32;0.5f;
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;handleSize&#32;=&#32;0.04f;
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;pickSize&#32;=&#32;0.06f;
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00024"/>00024 
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Color[]&#32;modeColors&#32;=&#32;{
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Color.white,
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Color.yellow,
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Color.cyan
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00030"/>00030 
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_demo_1_1_slot_racer_1_1_utils_1_1_bezier_spline">BezierSpline</link>&#32;spline;
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Transform&#32;handleTransform;
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Quaternion&#32;handleRotation;
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;selectedIndex&#32;=&#32;-1;
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00035"/>00035 
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00036"/><link linkend="_class_photon_1_1_pun_1_1_demo_1_1_slot_racer_1_1_utils_1_1_bezier_spline_inspector_1a8e75e652ee006f1a1af7b47dbfd88b0f">00036</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_demo_1_1_slot_racer_1_1_utils_1_1_bezier_spline_inspector_1a8e75e652ee006f1a1af7b47dbfd88b0f">OnInspectorGUI</link>()
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;spline&#32;=&#32;target&#32;as&#32;<link linkend="_class_photon_1_1_pun_1_1_demo_1_1_slot_racer_1_1_utils_1_1_bezier_spline">BezierSpline</link>;
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorGUI.BeginChangeCheck();
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;loop&#32;=&#32;EditorGUILayout.Toggle(<emphasis role="stringliteral">&quot;Loop&quot;</emphasis>,&#32;spline.<link linkend="_class_photon_1_1_pun_1_1_demo_1_1_slot_racer_1_1_utils_1_1_bezier_spline_1a7293fb1a280fb743d588fbe3242463cd">Loop</link>);
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(EditorGUI.EndChangeCheck())
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Undo.RecordObject(spline,&#32;<emphasis role="stringliteral">&quot;Toggle&#32;Loop&quot;</emphasis>);
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorUtility.SetDirty(spline);
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;spline.<link linkend="_class_photon_1_1_pun_1_1_demo_1_1_slot_racer_1_1_utils_1_1_bezier_spline_1a7293fb1a280fb743d588fbe3242463cd">Loop</link>&#32;=&#32;loop;
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00047"/>00047 
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(selectedIndex&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;selectedIndex&#32;&lt;&#32;spline.<link linkend="_class_photon_1_1_pun_1_1_demo_1_1_slot_racer_1_1_utils_1_1_bezier_spline_1acfd3abeb1020e4c3f04d274d88d8fb7a">ControlPointCount</link>)
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DrawSelectedPointInspector();
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00052"/>00052 
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(GUILayout.Button(<emphasis role="stringliteral">&quot;Add&#32;Curve&quot;</emphasis>))
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Undo.RecordObject(spline,&#32;<emphasis role="stringliteral">&quot;Add&#32;Curve&quot;</emphasis>);
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;spline.<link linkend="_class_photon_1_1_pun_1_1_demo_1_1_slot_racer_1_1_utils_1_1_bezier_spline_1a6fd38285f4e828f299c22c045b32429f">AddCurve</link>();
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorUtility.SetDirty(spline);
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00060"/>00060 
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;DrawSelectedPointInspector()
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GUILayout.Label(<emphasis role="stringliteral">&quot;Selected&#32;Point&quot;</emphasis>);
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorGUI.BeginChangeCheck();
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;point&#32;=&#32;EditorGUILayout.Vector3Field(<emphasis role="stringliteral">&quot;Position&quot;</emphasis>,&#32;spline.<link linkend="_class_photon_1_1_pun_1_1_demo_1_1_slot_racer_1_1_utils_1_1_bezier_spline_1a82b7b22d343a6ab62d76d9562c59beaf">GetControlPoint</link>(selectedIndex));
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(EditorGUI.EndChangeCheck())
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Undo.RecordObject(spline,&#32;<emphasis role="stringliteral">&quot;Move&#32;Point&quot;</emphasis>);
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorUtility.SetDirty(spline);
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;spline.<link linkend="_class_photon_1_1_pun_1_1_demo_1_1_slot_racer_1_1_utils_1_1_bezier_spline_1aa32483d6a9ccf491be4d29fafa2b1d1d">SetControlPoint</link>(selectedIndex,&#32;point);
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorGUI.BeginChangeCheck();
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_photon_1_1_pun_1_1_demo_1_1_slot_racer_1_1_utils_1a23f89bced10ef110018bd903488b51a1">BezierControlPointMode</link>&#32;mode&#32;=&#32;(<link linkend="_namespace_photon_1_1_pun_1_1_demo_1_1_slot_racer_1_1_utils_1a23f89bced10ef110018bd903488b51a1">BezierControlPointMode</link>)EditorGUILayout.EnumPopup(<emphasis role="stringliteral">&quot;Mode&quot;</emphasis>,&#32;spline.<link linkend="_class_photon_1_1_pun_1_1_demo_1_1_slot_racer_1_1_utils_1_1_bezier_spline_1a3b7d3dbe4bb98d09407bba590bffb9dd">GetControlPointMode</link>(selectedIndex));
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(EditorGUI.EndChangeCheck())
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Undo.RecordObject(spline,&#32;<emphasis role="stringliteral">&quot;Change&#32;Point&#32;Mode&quot;</emphasis>);
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;spline.<link linkend="_class_photon_1_1_pun_1_1_demo_1_1_slot_racer_1_1_utils_1_1_bezier_spline_1aad3dac668441bdea39be3d56d0990b57">SetControlPointMode</link>(selectedIndex,&#32;mode);
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorUtility.SetDirty(spline);
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00081"/>00081 
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnSceneGUI()
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;spline&#32;=&#32;target&#32;as&#32;BezierSpline;
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handleTransform&#32;=&#32;spline.transform;
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handleRotation&#32;=&#32;Tools.pivotRotation&#32;==&#32;PivotRotation.Local&#32;?
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;handleTransform.rotation&#32;:&#32;Quaternion.identity;
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;p0&#32;=&#32;ShowPoint(0);
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;spline.<link linkend="_class_photon_1_1_pun_1_1_demo_1_1_slot_racer_1_1_utils_1_1_bezier_spline_1acfd3abeb1020e4c3f04d274d88d8fb7a">ControlPointCount</link>;&#32;i&#32;+=&#32;3)
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;p1&#32;=&#32;ShowPoint(i);
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;p2&#32;=&#32;ShowPoint(i&#32;+&#32;1);
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;p3&#32;=&#32;ShowPoint(i&#32;+&#32;2);
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Handles.color&#32;=&#32;Color.gray;
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Handles.DrawLine(p0,&#32;p1);
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Handles.DrawLine(p2,&#32;p3);
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Handles.DrawBezier(p0,&#32;p3,&#32;p1,&#32;p2,&#32;Color.white,&#32;<emphasis role="keyword">null</emphasis>,&#32;2f);
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p0&#32;=&#32;p3;
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ShowDirections();
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00105"/>00105 
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;ShowDirections()
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Handles.color&#32;=&#32;Color.green;
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;point&#32;=&#32;spline.<link linkend="_class_photon_1_1_pun_1_1_demo_1_1_slot_racer_1_1_utils_1_1_bezier_spline_1a781ddf5344420bfeb2f5bf8413fcaa54">GetPoint</link>(0f);
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Handles.DrawLine(point,&#32;point&#32;+&#32;spline.<link linkend="_class_photon_1_1_pun_1_1_demo_1_1_slot_racer_1_1_utils_1_1_bezier_spline_1ab35c04ba6acf62df7603be053f4f7d22">GetDirection</link>(0f)&#32;*&#32;directionScale);
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;steps&#32;=&#32;stepsPerCurve&#32;*&#32;spline.<link linkend="_class_photon_1_1_pun_1_1_demo_1_1_slot_racer_1_1_utils_1_1_bezier_spline_1aa70f2eeddf5169433ac9c299a18bac2b">CurveCount</link>;
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;=&#32;steps;&#32;i++)
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;point&#32;=&#32;spline.<link linkend="_class_photon_1_1_pun_1_1_demo_1_1_slot_racer_1_1_utils_1_1_bezier_spline_1a781ddf5344420bfeb2f5bf8413fcaa54">GetPoint</link>(i&#32;/&#32;(<emphasis role="keywordtype">float</emphasis>)steps);
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Handles.DrawLine(point,&#32;point&#32;+&#32;spline.<link linkend="_class_photon_1_1_pun_1_1_demo_1_1_slot_racer_1_1_utils_1_1_bezier_spline_1ab35c04ba6acf62df7603be053f4f7d22">GetDirection</link>(i&#32;/&#32;(<emphasis role="keywordtype">float</emphasis>)steps)&#32;*&#32;directionScale);
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00118"/>00118 
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Vector3&#32;ShowPoint(<emphasis role="keywordtype">int</emphasis>&#32;index)
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;point&#32;=&#32;handleTransform.TransformPoint(spline.<link linkend="_class_photon_1_1_pun_1_1_demo_1_1_slot_racer_1_1_utils_1_1_bezier_spline_1a82b7b22d343a6ab62d76d9562c59beaf">GetControlPoint</link>(index));
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;size&#32;=&#32;HandleUtility.GetHandleSize(point);
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(index&#32;==&#32;0)
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;*=&#32;2f;
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Handles.color&#32;=&#32;modeColors[(int)spline.<link linkend="_class_photon_1_1_pun_1_1_demo_1_1_slot_racer_1_1_utils_1_1_bezier_spline_1a3b7d3dbe4bb98d09407bba590bffb9dd">GetControlPointMode</link>(index)];
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00128"/>00128 
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00129"/>00129 
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00130"/>00130 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;UNITY_5_6_OR_NEWER</emphasis>
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Handles.Button(point,&#32;handleRotation,&#32;size&#32;*&#32;handleSize,&#32;size&#32;*&#32;pickSize,&#32;Handles.DotHandleCap))&#32;
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Handles.Button(point,&#32;handleRotation,&#32;size&#32;*&#32;handleSize,&#32;size&#32;*&#32;pickSize,&#32;Handles.DotCap))
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;selectedIndex&#32;=&#32;index;
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Repaint();
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00139"/>00139 
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(selectedIndex&#32;==&#32;index)
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorGUI.BeginChangeCheck();
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;point&#32;=&#32;Handles.DoPositionHandle(point,&#32;handleRotation);
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(EditorGUI.EndChangeCheck())
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Undo.RecordObject(spline,&#32;<emphasis role="stringliteral">&quot;Move&#32;Point&quot;</emphasis>);
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorUtility.SetDirty(spline);
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;spline.<link linkend="_class_photon_1_1_pun_1_1_demo_1_1_slot_racer_1_1_utils_1_1_bezier_spline_1aa32483d6a9ccf491be4d29fafa2b1d1d">SetControlPoint</link>(index,&#32;handleTransform.InverseTransformPoint(point));
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;point;
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00153"/>00153 &#32;&#32;&#32;&#32;}
<anchor xml:id="__bezier_spline_inspector_8cs_source_1l00154"/>00154 }
</programlisting></section>
