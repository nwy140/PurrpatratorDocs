<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__custom_types_unity_8cs_source" xml:lang="en-US">
<title>CustomTypesUnity.cs</title>
<indexterm><primary>C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonRealtime/Code/CustomTypesUnity.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__custom_types_unity_8cs_source_1l00001"/>00001 <emphasis role="comment">//&#32;----------------------------------------------------------------------------</emphasis>
<anchor xml:id="__custom_types_unity_8cs_source_1l00002"/>00002 <emphasis role="comment">//&#32;&lt;copyright&#32;file=&quot;CustomTypes.cs&quot;&#32;company=&quot;Exit&#32;Games&#32;GmbH&quot;&gt;</emphasis>
<anchor xml:id="__custom_types_unity_8cs_source_1l00003"/>00003 <emphasis role="comment">//&#32;&#32;&#32;PhotonNetwork&#32;Framework&#32;for&#32;Unity&#32;-&#32;Copyright&#32;(C)&#32;2018&#32;Exit&#32;Games&#32;GmbH</emphasis>
<anchor xml:id="__custom_types_unity_8cs_source_1l00004"/>00004 <emphasis role="comment">//&#32;&lt;/copyright&gt;</emphasis>
<anchor xml:id="__custom_types_unity_8cs_source_1l00005"/>00005 <emphasis role="comment">//&#32;&lt;summary&gt;</emphasis>
<anchor xml:id="__custom_types_unity_8cs_source_1l00006"/>00006 <emphasis role="comment">//&#32;Sets&#32;up&#32;support&#32;for&#32;Unity-specific&#32;types.&#32;Can&#32;be&#32;a&#32;blueprint&#32;how&#32;to&#32;register&#32;your&#32;own&#32;Custom&#32;Types&#32;for&#32;sending.</emphasis>
<anchor xml:id="__custom_types_unity_8cs_source_1l00007"/>00007 <emphasis role="comment">//&#32;&lt;/summary&gt;</emphasis>
<anchor xml:id="__custom_types_unity_8cs_source_1l00008"/>00008 <emphasis role="comment">//&#32;&lt;author&gt;developer@exitgames.com&lt;/author&gt;</emphasis>
<anchor xml:id="__custom_types_unity_8cs_source_1l00009"/>00009 <emphasis role="comment">//&#32;----------------------------------------------------------------------------</emphasis>
<anchor xml:id="__custom_types_unity_8cs_source_1l00010"/>00010 
<anchor xml:id="__custom_types_unity_8cs_source_1l00011"/>00011 <emphasis role="preprocessor">#if&#32;UNITY_4_7&#32;||&#32;UNITY_5&#32;||&#32;UNITY_5_3_OR_NEWER</emphasis>
<anchor xml:id="__custom_types_unity_8cs_source_1l00012"/>00012 <emphasis role="preprocessor">#define&#32;SUPPORTED_UNITY</emphasis>
<anchor xml:id="__custom_types_unity_8cs_source_1l00013"/>00013 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__custom_types_unity_8cs_source_1l00014"/>00014 
<anchor xml:id="__custom_types_unity_8cs_source_1l00015"/>00015 <emphasis role="preprocessor">#if&#32;SUPPORTED_UNITY</emphasis>
<anchor xml:id="__custom_types_unity_8cs_source_1l00016"/>00016 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_photon_1_1_realtime">Photon.Realtime</link>
<anchor xml:id="__custom_types_unity_8cs_source_1l00017"/>00017 {
<anchor xml:id="__custom_types_unity_8cs_source_1l00018"/>00018 &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_photon">Photon</link>.<link linkend="_namespace_photon_1_1_realtime">Realtime</link>;
<anchor xml:id="__custom_types_unity_8cs_source_1l00019"/>00019 &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;ExitGames.Client.<link linkend="_namespace_exit_games_1_1_client_1_1_photon">Photon</link>;
<anchor xml:id="__custom_types_unity_8cs_source_1l00020"/>00020 &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;UnityEngine;
<anchor xml:id="__custom_types_unity_8cs_source_1l00021"/>00021 &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>&#32;=&#32;UnityEngine.Debug;
<anchor xml:id="__custom_types_unity_8cs_source_1l00022"/>00022 
<anchor xml:id="__custom_types_unity_8cs_source_1l00023"/>00023 
<anchor xml:id="__custom_types_unity_8cs_source_1l00028"/>00028 &#32;&#32;&#32;&#32;<emphasis role="keyword">internal</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>CustomTypesUnity
<anchor xml:id="__custom_types_unity_8cs_source_1l00029"/>00029 &#32;&#32;&#32;&#32;{
<anchor xml:id="__custom_types_unity_8cs_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;SizeV2&#32;=&#32;2&#32;*&#32;4;
<anchor xml:id="__custom_types_unity_8cs_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;SizeV3&#32;=&#32;3&#32;*&#32;4;
<anchor xml:id="__custom_types_unity_8cs_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;SizeQuat&#32;=&#32;4&#32;*&#32;4;
<anchor xml:id="__custom_types_unity_8cs_source_1l00033"/>00033 
<anchor xml:id="__custom_types_unity_8cs_source_1l00034"/>00034 
<anchor xml:id="__custom_types_unity_8cs_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">internal</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Register()
<anchor xml:id="__custom_types_unity_8cs_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__custom_types_unity_8cs_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonPeer.RegisterType(typeof(Vector2),&#32;(<emphasis role="keywordtype">byte</emphasis>)&#32;<emphasis role="charliteral">&apos;W&apos;</emphasis>,&#32;SerializeVector2,&#32;DeserializeVector2);
<anchor xml:id="__custom_types_unity_8cs_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonPeer.RegisterType(typeof(Vector3),&#32;(<emphasis role="keywordtype">byte</emphasis>)&#32;<emphasis role="charliteral">&apos;V&apos;</emphasis>,&#32;SerializeVector3,&#32;DeserializeVector3);
<anchor xml:id="__custom_types_unity_8cs_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonPeer.RegisterType(typeof(Quaternion),&#32;(<emphasis role="keywordtype">byte</emphasis>)&#32;<emphasis role="charliteral">&apos;Q&apos;</emphasis>,&#32;SerializeQuaternion,&#32;DeserializeQuaternion);
<anchor xml:id="__custom_types_unity_8cs_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__custom_types_unity_8cs_source_1l00042"/>00042 
<anchor xml:id="__custom_types_unity_8cs_source_1l00043"/>00043 
<anchor xml:id="__custom_types_unity_8cs_source_1l00044"/>00044 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Custom&#32;De/Serializer&#32;Methods</emphasis>
<anchor xml:id="__custom_types_unity_8cs_source_1l00045"/>00045 
<anchor xml:id="__custom_types_unity_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;readonly&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;memVector3&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>[SizeV3];
<anchor xml:id="__custom_types_unity_8cs_source_1l00047"/>00047 
<anchor xml:id="__custom_types_unity_8cs_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;SerializeVector3(StreamBuffer&#32;outStream,&#32;<emphasis role="keywordtype">object</emphasis>&#32;customobject)
<anchor xml:id="__custom_types_unity_8cs_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__custom_types_unity_8cs_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;vo&#32;=&#32;(Vector3)&#32;customobject;
<anchor xml:id="__custom_types_unity_8cs_source_1l00051"/>00051 
<anchor xml:id="__custom_types_unity_8cs_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;index&#32;=&#32;0;
<anchor xml:id="__custom_types_unity_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lock&#32;(memVector3)
<anchor xml:id="__custom_types_unity_8cs_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__custom_types_unity_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes&#32;=&#32;memVector3;
<anchor xml:id="__custom_types_unity_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Protocol.Serialize(vo.x,&#32;bytes,&#32;ref&#32;index);
<anchor xml:id="__custom_types_unity_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Protocol.Serialize(vo.y,&#32;bytes,&#32;ref&#32;index);
<anchor xml:id="__custom_types_unity_8cs_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Protocol.Serialize(vo.z,&#32;bytes,&#32;ref&#32;index);
<anchor xml:id="__custom_types_unity_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outStream.Write(bytes,&#32;0,&#32;SizeV3);
<anchor xml:id="__custom_types_unity_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__custom_types_unity_8cs_source_1l00061"/>00061 
<anchor xml:id="__custom_types_unity_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;SizeV3;
<anchor xml:id="__custom_types_unity_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__custom_types_unity_8cs_source_1l00064"/>00064 
<anchor xml:id="__custom_types_unity_8cs_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">object</emphasis>&#32;DeserializeVector3(StreamBuffer&#32;inStream,&#32;<emphasis role="keywordtype">short</emphasis>&#32;length)
<anchor xml:id="__custom_types_unity_8cs_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__custom_types_unity_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;vo&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3();
<anchor xml:id="__custom_types_unity_8cs_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(length&#32;!=&#32;SizeV3)
<anchor xml:id="__custom_types_unity_8cs_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__custom_types_unity_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vo;
<anchor xml:id="__custom_types_unity_8cs_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__custom_types_unity_8cs_source_1l00072"/>00072 
<anchor xml:id="__custom_types_unity_8cs_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lock&#32;(memVector3)
<anchor xml:id="__custom_types_unity_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__custom_types_unity_8cs_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inStream.Read(memVector3,&#32;0,&#32;SizeV3);
<anchor xml:id="__custom_types_unity_8cs_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;index&#32;=&#32;0;
<anchor xml:id="__custom_types_unity_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Protocol.Deserialize(out&#32;vo.x,&#32;memVector3,&#32;ref&#32;index);
<anchor xml:id="__custom_types_unity_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Protocol.Deserialize(out&#32;vo.y,&#32;memVector3,&#32;ref&#32;index);
<anchor xml:id="__custom_types_unity_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Protocol.Deserialize(out&#32;vo.z,&#32;memVector3,&#32;ref&#32;index);
<anchor xml:id="__custom_types_unity_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__custom_types_unity_8cs_source_1l00081"/>00081 
<anchor xml:id="__custom_types_unity_8cs_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vo;
<anchor xml:id="__custom_types_unity_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__custom_types_unity_8cs_source_1l00084"/>00084 
<anchor xml:id="__custom_types_unity_8cs_source_1l00085"/>00085 
<anchor xml:id="__custom_types_unity_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;readonly&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;memVector2&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>[SizeV2];
<anchor xml:id="__custom_types_unity_8cs_source_1l00087"/>00087 
<anchor xml:id="__custom_types_unity_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;SerializeVector2(StreamBuffer&#32;outStream,&#32;<emphasis role="keywordtype">object</emphasis>&#32;customobject)
<anchor xml:id="__custom_types_unity_8cs_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__custom_types_unity_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector2&#32;vo&#32;=&#32;(Vector2)&#32;customobject;
<anchor xml:id="__custom_types_unity_8cs_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lock&#32;(memVector2)
<anchor xml:id="__custom_types_unity_8cs_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__custom_types_unity_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes&#32;=&#32;memVector2;
<anchor xml:id="__custom_types_unity_8cs_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;index&#32;=&#32;0;
<anchor xml:id="__custom_types_unity_8cs_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Protocol.Serialize(vo.x,&#32;bytes,&#32;ref&#32;index);
<anchor xml:id="__custom_types_unity_8cs_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Protocol.Serialize(vo.y,&#32;bytes,&#32;ref&#32;index);
<anchor xml:id="__custom_types_unity_8cs_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outStream.Write(bytes,&#32;0,&#32;SizeV2);
<anchor xml:id="__custom_types_unity_8cs_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__custom_types_unity_8cs_source_1l00099"/>00099 
<anchor xml:id="__custom_types_unity_8cs_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;SizeV2;
<anchor xml:id="__custom_types_unity_8cs_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__custom_types_unity_8cs_source_1l00102"/>00102 
<anchor xml:id="__custom_types_unity_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">object</emphasis>&#32;DeserializeVector2(StreamBuffer&#32;inStream,&#32;<emphasis role="keywordtype">short</emphasis>&#32;length)
<anchor xml:id="__custom_types_unity_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__custom_types_unity_8cs_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector2&#32;vo&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Vector2();
<anchor xml:id="__custom_types_unity_8cs_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(length&#32;!=&#32;SizeV2)
<anchor xml:id="__custom_types_unity_8cs_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__custom_types_unity_8cs_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vo;
<anchor xml:id="__custom_types_unity_8cs_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__custom_types_unity_8cs_source_1l00110"/>00110 
<anchor xml:id="__custom_types_unity_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lock&#32;(memVector2)
<anchor xml:id="__custom_types_unity_8cs_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__custom_types_unity_8cs_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inStream.Read(memVector2,&#32;0,&#32;SizeV2);
<anchor xml:id="__custom_types_unity_8cs_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;index&#32;=&#32;0;
<anchor xml:id="__custom_types_unity_8cs_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Protocol.Deserialize(out&#32;vo.x,&#32;memVector2,&#32;ref&#32;index);
<anchor xml:id="__custom_types_unity_8cs_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Protocol.Deserialize(out&#32;vo.y,&#32;memVector2,&#32;ref&#32;index);
<anchor xml:id="__custom_types_unity_8cs_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__custom_types_unity_8cs_source_1l00118"/>00118 
<anchor xml:id="__custom_types_unity_8cs_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vo;
<anchor xml:id="__custom_types_unity_8cs_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__custom_types_unity_8cs_source_1l00121"/>00121 
<anchor xml:id="__custom_types_unity_8cs_source_1l00122"/>00122 
<anchor xml:id="__custom_types_unity_8cs_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;readonly&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;memQuarternion&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>[SizeQuat];
<anchor xml:id="__custom_types_unity_8cs_source_1l00124"/>00124 
<anchor xml:id="__custom_types_unity_8cs_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;SerializeQuaternion(StreamBuffer&#32;outStream,&#32;<emphasis role="keywordtype">object</emphasis>&#32;customobject)
<anchor xml:id="__custom_types_unity_8cs_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__custom_types_unity_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Quaternion&#32;o&#32;=&#32;(Quaternion)&#32;customobject;
<anchor xml:id="__custom_types_unity_8cs_source_1l00128"/>00128 
<anchor xml:id="__custom_types_unity_8cs_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lock&#32;(memQuarternion)
<anchor xml:id="__custom_types_unity_8cs_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__custom_types_unity_8cs_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;bytes&#32;=&#32;memQuarternion;
<anchor xml:id="__custom_types_unity_8cs_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;index&#32;=&#32;0;
<anchor xml:id="__custom_types_unity_8cs_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Protocol.Serialize(o.w,&#32;bytes,&#32;ref&#32;index);
<anchor xml:id="__custom_types_unity_8cs_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Protocol.Serialize(o.x,&#32;bytes,&#32;ref&#32;index);
<anchor xml:id="__custom_types_unity_8cs_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Protocol.Serialize(o.y,&#32;bytes,&#32;ref&#32;index);
<anchor xml:id="__custom_types_unity_8cs_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Protocol.Serialize(o.z,&#32;bytes,&#32;ref&#32;index);
<anchor xml:id="__custom_types_unity_8cs_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outStream.Write(bytes,&#32;0,&#32;SizeQuat);
<anchor xml:id="__custom_types_unity_8cs_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__custom_types_unity_8cs_source_1l00139"/>00139 
<anchor xml:id="__custom_types_unity_8cs_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;4&#32;*&#32;4;
<anchor xml:id="__custom_types_unity_8cs_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__custom_types_unity_8cs_source_1l00142"/>00142 
<anchor xml:id="__custom_types_unity_8cs_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">object</emphasis>&#32;DeserializeQuaternion(StreamBuffer&#32;inStream,&#32;<emphasis role="keywordtype">short</emphasis>&#32;length)
<anchor xml:id="__custom_types_unity_8cs_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__custom_types_unity_8cs_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Quaternion&#32;o&#32;=&#32;Quaternion.identity;
<anchor xml:id="__custom_types_unity_8cs_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(length&#32;!=&#32;SizeQuat)
<anchor xml:id="__custom_types_unity_8cs_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__custom_types_unity_8cs_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;o;
<anchor xml:id="__custom_types_unity_8cs_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__custom_types_unity_8cs_source_1l00150"/>00150 
<anchor xml:id="__custom_types_unity_8cs_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lock&#32;(memQuarternion)
<anchor xml:id="__custom_types_unity_8cs_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__custom_types_unity_8cs_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inStream.Read(memQuarternion,&#32;0,&#32;SizeQuat);
<anchor xml:id="__custom_types_unity_8cs_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;index&#32;=&#32;0;
<anchor xml:id="__custom_types_unity_8cs_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Protocol.Deserialize(out&#32;o.w,&#32;memQuarternion,&#32;ref&#32;index);
<anchor xml:id="__custom_types_unity_8cs_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Protocol.Deserialize(out&#32;o.x,&#32;memQuarternion,&#32;ref&#32;index);
<anchor xml:id="__custom_types_unity_8cs_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Protocol.Deserialize(out&#32;o.y,&#32;memQuarternion,&#32;ref&#32;index);
<anchor xml:id="__custom_types_unity_8cs_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Protocol.Deserialize(out&#32;o.z,&#32;memQuarternion,&#32;ref&#32;index);
<anchor xml:id="__custom_types_unity_8cs_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__custom_types_unity_8cs_source_1l00160"/>00160 
<anchor xml:id="__custom_types_unity_8cs_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;o;
<anchor xml:id="__custom_types_unity_8cs_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__custom_types_unity_8cs_source_1l00163"/>00163 
<anchor xml:id="__custom_types_unity_8cs_source_1l00164"/>00164 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__custom_types_unity_8cs_source_1l00165"/>00165 &#32;&#32;&#32;&#32;}
<anchor xml:id="__custom_types_unity_8cs_source_1l00166"/>00166 }
<anchor xml:id="__custom_types_unity_8cs_source_1l00167"/>00167 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
