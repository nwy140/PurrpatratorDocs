<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__fast_bit_mask64_8cs_source" xml:lang="en-US">
<title>FastBitMask64.cs</title>
<indexterm><primary>C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/FastBitMask/FastBitMask64.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__fast_bit_mask64_8cs_source_1l00001"/>00001 <emphasis role="comment">//&#32;---------------------------------------------------------------------------------------------</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00002"/>00002 <emphasis role="comment">//&#32;&lt;copyright&gt;PhotonNetwork&#32;Framework&#32;for&#32;Unity&#32;-&#32;Copyright&#32;(C)&#32;2020&#32;Exit&#32;Games&#32;GmbH&lt;/copyright&gt;</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00003"/>00003 <emphasis role="comment">//&#32;&lt;author&gt;developer@exitgames.com&lt;/author&gt;</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00004"/>00004 <emphasis role="comment">//&#32;---------------------------------------------------------------------------------------------</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00005"/>00005 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00006"/>00006 <emphasis role="keyword">using</emphasis>&#32;UnityEngine;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00007"/>00007 <emphasis role="keyword">using</emphasis>&#32;System.Text;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00008"/>00008 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00009"/>00009 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_photon_1_1_utilities">Photon.Utilities</link>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00010"/>00010 {
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00015"/><link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64">00015</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64">FastBitMask64</link>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00016"/>00016 &#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00017"/><link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">00017</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;ulong&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00018"/>00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitcount;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;ulong&#32;alltrue;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00020"/>00020 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00024"/><link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ae7a595c23d5d45519850a2ff20085d5d">00024</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ae7a595c23d5d45519850a2ff20085d5d">BitCount</link>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;bitcount;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00030"/>00030 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">set</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00033"/>00033 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00034"/>00034 <emphasis role="preprocessor">#if&#32;UNITY_EDITOR&#32;||&#32;DEVELOPMENT_BUILD</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value&#32;&gt;&#32;64)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogError(<emphasis role="stringliteral">&quot;Attempting&#32;to&#32;set&#32;&quot;</emphasis>&#32;+&#32;typeof(<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64">FastBitMask64</link>).Name&#32;+&#32;<emphasis role="stringliteral">&quot;.bitcount&#32;to&#32;&quot;</emphasis>&#32;+&#32;value&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;but&#32;the&#32;max&#32;allowed&#32;is&#32;64.&quot;</emphasis>);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bitcount&#32;=&#32;64;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value&#32;&lt;&#32;0)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogError(<emphasis role="stringliteral">&quot;Attempting&#32;to&#32;set&#32;&quot;</emphasis>&#32;+&#32;typeof(<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64">FastBitMask64</link>).Name&#32;+&#32;<emphasis role="stringliteral">&quot;.bitcount&#32;to&#32;&quot;</emphasis>&#32;+&#32;value&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;but&#32;the&#32;min&#32;allowed&#32;is&#32;0.&quot;</emphasis>);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bitcount&#32;=&#32;0;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bitcount&#32;=&#32;value;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00047"/>00047 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bitcount&#32;=&#32;value;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00049"/>00049 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00050"/>00050 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;alltrue&#32;=
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(bitcount&#32;&lt;&#32;64)&#32;?&#32;((ulong)1&#32;&lt;&lt;&#32;bitcount)&#32;-&#32;1&#32;:
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ulong.MaxValue;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00054"/>00054 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Clear&#32;any&#32;old&#32;bits&#32;that&#32;are&#32;no&#32;longer&#32;in&#32;use&#32;-&#32;allows&#32;for&#32;very&#32;unchecked&#32;testing&#32;if&#32;we&#32;can&#32;assume&#32;they&#32;are&#32;all&#32;zero</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>&#32;=&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>&#32;&amp;&#32;alltrue;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00059"/>00059 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00060"/><link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1aa16cc3276ecef6d335fdef44d383ee49">00060</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1aa16cc3276ecef6d335fdef44d383ee49">FastBitMask64</link>(<emphasis role="keywordtype">int</emphasis>&#32;bitcount)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00062"/>00062 <emphasis role="preprocessor">#if&#32;UNITY_EDITOR&#32;||&#32;DEVELOPMENT_BUILD</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bitcount&#32;&gt;&#32;63&#32;||&#32;bitcount&#32;&lt;&#32;0)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RangeError(bitcount);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00065"/>00065 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.bitmask&#32;=&#32;0;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.bitcount&#32;=&#32;bitcount;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00068"/>00068 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;alltrue&#32;=
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(bitcount&#32;&lt;&#32;64)&#32;?&#32;((ulong)1&#32;&lt;&lt;&#32;bitcount)&#32;-&#32;1&#32;:
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ulong.MaxValue;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00073"/>00073 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1aa16cc3276ecef6d335fdef44d383ee49">FastBitMask64</link>(<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64">FastBitMask64</link>&#32;copyFrom)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.bitmask&#32;=&#32;copyFrom.<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.bitcount&#32;=&#32;copyFrom.bitcount;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.alltrue&#32;=&#32;copyFrom.alltrue;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00080"/>00080 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00081"/><link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1a0073359d106eb4a507e154cd73647705">00081</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<emphasis role="keyword">this</emphasis>[<emphasis role="keywordtype">int</emphasis>&#32;bit]
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00085"/>00085 <emphasis role="preprocessor">#if&#32;UNITY_EDITOR&#32;||&#32;DEVELOPMENT_BUILD</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bit&#32;&gt;&#32;63&#32;||&#32;bit&#32;&lt;&#32;0)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RangeError(bit);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00088"/>00088 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>&#32;&amp;&#32;((ulong)1&#32;&lt;&lt;&#32;bit))&#32;!=&#32;0;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00091"/>00091 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">set</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00094"/>00094 <emphasis role="preprocessor">#if&#32;UNITY_EDITOR&#32;||&#32;DEVELOPMENT_BUILD</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bit&#32;&gt;&#32;63&#32;||&#32;bit&#32;&lt;&#32;0)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RangeError(bit);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00097"/>00097 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>&#32;|=&#32;((ulong)1&#32;&lt;&lt;&#32;bit);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>&#32;&amp;=&#32;~((ulong)1&#32;&lt;&lt;&#32;bit);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00108"/>00108 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00109"/><link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ab84034f0c31666af4941b1b5e4a8eede">00109</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ab84034f0c31666af4941b1b5e4a8eede">Get</link>(<emphasis role="keywordtype">int</emphasis>&#32;bit)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00111"/>00111 <emphasis role="preprocessor">#if&#32;UNITY_EDITOR&#32;||&#32;DEVELOPMENT_BUILD</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bit&#32;&gt;&#32;63&#32;||&#32;bit&#32;&lt;&#32;0)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RangeError(bit);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00114"/>00114 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>&#32;&amp;&#32;((ulong)1&#32;&lt;&lt;&#32;bit))&#32;!=&#32;0;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00117"/>00117 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00118"/><link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1aa81343145fd0d903df87422dce68c7d0">00118</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1aa81343145fd0d903df87422dce68c7d0">Set</link>(<emphasis role="keywordtype">int</emphasis>&#32;bit,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;value)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00120"/>00120 <emphasis role="preprocessor">#if&#32;UNITY_EDITOR&#32;||&#32;DEVELOPMENT_BUILD</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bit&#32;&gt;&#32;63&#32;||&#32;bit&#32;&lt;&#32;0)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RangeError(bit);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00123"/>00123 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//bitmask&#32;|=&#32;singlemasks[bit];</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>&#32;|=&#32;((ulong)1&#32;&lt;&lt;&#32;bit);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>&#32;&amp;=&#32;~((ulong)1&#32;&lt;&lt;&#32;bit);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00134"/>00134 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00135"/><link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1af4b2f0fec564560ea875253843d9770c">00135</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1af4b2f0fec564560ea875253843d9770c">SetTrue</link>(<emphasis role="keywordtype">int</emphasis>&#32;bit)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00137"/>00137 <emphasis role="preprocessor">#if&#32;UNITY_EDITOR&#32;||&#32;DEVELOPMENT_BUILD</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bit&#32;&gt;&#32;63&#32;||&#32;bit&#32;&lt;&#32;0)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RangeError(bit);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00140"/>00140 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>&#32;|=&#32;((ulong)1&#32;&lt;&lt;&#32;bit);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00143"/>00143 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00144"/><link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1a58227225ee700ab2d7e4eff4b5667274">00144</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1a58227225ee700ab2d7e4eff4b5667274">SetFalse</link>(<emphasis role="keywordtype">int</emphasis>&#32;bit)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00146"/>00146 <emphasis role="preprocessor">#if&#32;UNITY_EDITOR&#32;||&#32;DEVELOPMENT_BUILD</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bit&#32;&gt;&#32;63&#32;||&#32;bit&#32;&lt;&#32;0)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RangeError(bit);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00149"/>00149 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>&#32;&amp;=&#32;~((ulong)1&#32;&lt;&lt;&#32;bit);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00152"/>00152 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00153"/><link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1aa419dfa2377421da351d361273fe5039">00153</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1aa419dfa2377421da351d361273fe5039">SetAllTrue</link>()
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>&#32;=&#32;alltrue;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00157"/>00157 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00158"/><link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1a63d02a13ef54cc736cb21309a0bcbd66">00158</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1a63d02a13ef54cc736cb21309a0bcbd66">SetAllFalse</link>()
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>&#32;=&#32;0;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00162"/>00162 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00166"/><link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ac1865770f1b2bbc06f3e0ded071919db">00166</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ac1865770f1b2bbc06f3e0ded071919db">AllAreFalse</link>&#32;{&#32;<emphasis role="keyword">get</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;bitcount&#32;!=&#32;0&#32;&amp;&amp;&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>&#32;==&#32;0;&#32;}&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00167"/><link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1a569737a473f8c3e0fa91ec3155deb181">00167</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1a569737a473f8c3e0fa91ec3155deb181">AllAreTrue</link>&#32;{&#32;<emphasis role="keyword">get</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;bitcount&#32;==&#32;0&#32;||&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>&#32;==&#32;alltrue;&#32;}&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00168"/>00168 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00169"/><link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1acc1e05412ef5705f34bb1bed7d07f204">00169</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1acc1e05412ef5705f34bb1bed7d07f204">OR</link>(<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64">FastBitMask64</link>&#32;other)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>&#32;|=&#32;other.<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00173"/>00173 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00174"/><link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1a6f7b7e456b08ed85a8cfe0246708beac">00174</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1a6f7b7e456b08ed85a8cfe0246708beac">AND</link>(<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64">FastBitMask64</link>&#32;other)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>&#32;&amp;=&#32;other.<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00178"/>00178 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00179"/><link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1a25da02c8d5e356c8a6507736cb627ff6">00179</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1a25da02c8d5e356c8a6507736cb627ff6">XOR</link>(<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64">FastBitMask64</link>&#32;other)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>&#32;^=&#32;other.<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00183"/>00183 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00184"/>00184 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;these&#32;could&#32;be&#32;faster</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00186"/><link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1afa29d2e149ae0f7a97d89ecbf5616d3a">00186</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1afa29d2e149ae0f7a97d89ecbf5616d3a">CountTrue</link>()
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00188"/>00188 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;truecount;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00190"/>00190 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>&#32;==&#32;0)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;truecount&#32;=&#32;0;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>&#32;==&#32;alltrue)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;truecount&#32;=&#32;bitcount;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;truecount&#32;=&#32;0;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ulong&#32;scratch&#32;=&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00199"/>00199 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(scratch&#32;!=&#32;0)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((scratch&#32;&amp;&#32;1)&#32;==&#32;1)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;truecount++;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00204"/>00204 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;scratch&#32;=&#32;scratch&#32;&gt;&gt;&#32;1;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;truecount;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00210"/>00210 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;these&#32;could&#32;be&#32;faster</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00212"/><link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ac2f1b2cb4b8b0068858cc8e3c806682c">00212</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ac2f1b2cb4b8b0068858cc8e3c806682c">CountFalse</link>()
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>&#32;==&#32;0)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;bitcount;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00216"/>00216 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00217"/>00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>&#32;==&#32;alltrue)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00218"/>00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00219"/>00219 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;falsecount&#32;=&#32;0;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00221"/>00221 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0,&#32;cnt&#32;=&#32;bitcount;&#32;i&#32;&lt;&#32;cnt;&#32;++i)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00223"/>00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>&#32;&amp;&#32;((ulong)1&#32;&lt;&lt;&#32;i))&#32;==&#32;0)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;falsecount++;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00225"/>00225 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;falsecount;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00228"/>00228 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00229"/>00229 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00236"/><link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1a99e2b0217c9d5a20a46389683923c3c4">00236</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1a99e2b0217c9d5a20a46389683923c3c4">ClearBitsBefore</link>(<emphasis role="keywordtype">int</emphasis>&#32;start,&#32;<emphasis role="keywordtype">int</emphasis>&#32;count)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00237"/>00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00238"/>00238 <emphasis role="preprocessor">#if&#32;UNITY_EDITOR&#32;||&#32;DEVELOPMENT_BUILD</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00239"/>00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(start&#32;&gt;&#32;63&#32;||&#32;start&#32;&lt;&#32;0)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00240"/>00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RangeError(start);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00241"/>00241 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ulong&#32;mask&#32;=&#32;count&#32;==&#32;64&#32;?&#32;ulong.MaxValue&#32;:&#32;((ulong)1&#32;&lt;&lt;&#32;count)&#32;-&#32;1;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ulong&#32;mask1,&#32;mask2;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset&#32;=&#32;start&#32;-&#32;count;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00245"/>00245 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00246"/>00246 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(offset&#32;&gt;=&#32;0)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mask1&#32;=&#32;mask&#32;&lt;&lt;&#32;offset;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mask2&#32;=&#32;mask&#32;&gt;&gt;&#32;(bitcount&#32;-&#32;offset);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00253"/>00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00254"/>00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mask1&#32;=&#32;mask&#32;&gt;&gt;&#32;-offset;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00255"/>00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mask2&#32;=&#32;mask&#32;&lt;&lt;&#32;(bitcount&#32;+&#32;offset);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00256"/>00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00257"/>00257 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>&#32;&amp;=&#32;~mask1&#32;&amp;&#32;~mask2&#32;&amp;&#32;alltrue;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00259"/>00259 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00264"/><link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1acb57c2adbd1eca5e03ce3fa26ffc90ce">00264</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1acb57c2adbd1eca5e03ce3fa26ffc90ce">CountValidRange</link>(<emphasis role="keywordtype">int</emphasis>&#32;start,&#32;<emphasis role="keywordtype">int</emphasis>&#32;lookahead)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00266"/>00266 <emphasis role="preprocessor">#if&#32;UNITY_EDITOR&#32;||&#32;DEVELOPMENT_BUILD</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(start&#32;&gt;&#32;63&#32;||&#32;start&#32;&lt;&#32;0)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RangeError(start);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00269"/>00269 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00271"/>00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;lookahead;&#32;i&#32;&gt;=&#32;0;&#32;--i)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00272"/>00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00273"/>00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;b&#32;=&#32;start&#32;+&#32;i;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(b&#32;&gt;=&#32;bitcount)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00275"/>00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;b&#32;-=&#32;bitcount;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00276"/>00276 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00277"/>00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>&#32;&amp;&#32;((ulong)1&#32;&lt;&lt;&#32;b))&#32;!=&#32;0)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00278"/>00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;i&#32;+&#32;1;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00279"/>00279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00280"/>00280 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00281"/>00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00283"/>00283 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00284"/><link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1a73456b9adc2052a7e5009d598e764ac5">00284</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1a73456b9adc2052a7e5009d598e764ac5">Copy</link>(<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64">FastBitMask64</link>&#32;other)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bitcount&#32;=&#32;other.bitcount;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>&#32;=&#32;other.<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00288"/>00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;alltrue&#32;=&#32;other.alltrue;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00289"/>00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00290"/>00290 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00291"/><link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad195ab8d00fcf2ea1d8b039b74b7fef6">00291</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad195ab8d00fcf2ea1d8b039b74b7fef6">Compare</link>(<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64">FastBitMask64</link>&#32;other)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00292"/>00292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00294"/>00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bitcount&#32;==&#32;other.bitcount&#32;&amp;&amp;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>&#32;==&#32;other.<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ad519ab84919fe74cd598dcf9ca12ac81">bitmask</link>;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00297"/>00297 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00298"/>00298 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00299"/>00299 <emphasis role="preprocessor">#if&#32;UNITY_EDITOR&#32;||&#32;DEVELOPMENT_BUILD</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00300"/>00300 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00301"/>00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;RangeError(<emphasis role="keywordtype">int</emphasis>&#32;bit)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00302"/>00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogError(<emphasis role="stringliteral">&quot;Value&#32;of&#32;&quot;</emphasis>&#32;+&#32;bit&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;is&#32;out&#32;of&#32;the&#32;valid&#32;index&#32;range&#32;(0-63)&#32;for&#32;&quot;</emphasis>&#32;+&#32;typeof(<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64">FastBitMask64</link>).Name&#32;+&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00304"/>00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00305"/>00305 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00306"/>00306 &#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00307"/>00307 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00308"/><link linkend="_class_photon_1_1_utilities_1_1_fast_bit_mask64_ext">00308</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_photon_1_1_utilities_1_1_fast_bit_mask64_ext">FastBitMask64Ext</link>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00309"/>00309 &#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00310"/>00310 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00311"/>00311 <emphasis role="preprocessor">#if&#32;DEBUG&#32;||&#32;UNITY_EDITOR&#32;||&#32;DEVELOPMENT_BUILD</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00312"/>00312 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00313"/>00313 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;str&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;StringBuilder(512);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00315"/>00315 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;PrintMask(<emphasis role="keyword">this</emphasis>&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64">FastBitMask64</link>&#32;ba,&#32;<emphasis role="keywordtype">int</emphasis>&#32;greenbit&#32;=&#32;-1,&#32;<emphasis role="keywordtype">int</emphasis>&#32;redbit&#32;=&#32;-1)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00317"/>00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00318"/>00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Length&#32;=&#32;0;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00319"/>00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append(<emphasis role="stringliteral">&quot;[&quot;</emphasis>);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00320"/>00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;ba.<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ae7a595c23d5d45519850a2ff20085d5d">BitCount</link>&#32;-&#32;1;&#32;i&#32;&gt;=&#32;0;&#32;--i)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00321"/>00321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00322"/>00322 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00323"/>00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;==&#32;greenbit)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00324"/>00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append(<emphasis role="stringliteral">&quot;&lt;color=green&gt;&quot;</emphasis>).Append(ba[i]&#32;?&#32;1&#32;:&#32;0).Append(<emphasis role="stringliteral">&quot;&lt;/color&gt;&quot;</emphasis>);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00325"/>00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;==&#32;redbit)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00326"/>00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append(<emphasis role="stringliteral">&quot;&lt;color=red&gt;&quot;</emphasis>).Append(ba[i]&#32;?&#32;1&#32;:&#32;0).Append(<emphasis role="stringliteral">&quot;&lt;/color&gt;&quot;</emphasis>);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00327"/>00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00328"/>00328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append(ba[i]&#32;?&#32;<emphasis role="stringliteral">&quot;1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;&lt;color=#0f0f0f&gt;0&lt;/color&gt;&quot;</emphasis>);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00329"/>00329 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00330"/>00330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;%&#32;32&#32;==&#32;0)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00331"/>00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append((i&#32;==&#32;0)&#32;?&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;]&#32;[&quot;</emphasis>);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00332"/>00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;%&#32;8&#32;==&#32;0&#32;&amp;&amp;&#32;i&#32;!=&#32;0)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00333"/>00333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append(<emphasis role="stringliteral">&quot;:&quot;</emphasis>);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00334"/>00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00335"/>00335 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00336"/>00336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00337"/>00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00338"/>00338 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00339"/>00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;PrintMask(<emphasis role="keyword">this</emphasis>&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64">FastBitMask64</link>&#32;ba,&#32;<emphasis role="keywordtype">int</emphasis>&#32;greenbit&#32;=&#32;-1,&#32;<emphasis role="keywordtype">bool</emphasis>[]&#32;redbits&#32;=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00340"/>00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00341"/>00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Length&#32;=&#32;0;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00342"/>00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append(<emphasis role="stringliteral">&quot;[&quot;</emphasis>);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00343"/>00343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;ba.<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ae7a595c23d5d45519850a2ff20085d5d">BitCount</link>&#32;-&#32;1;&#32;i&#32;&gt;=&#32;0;&#32;--i)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00344"/>00344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00345"/>00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;==&#32;greenbit)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00346"/>00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append(<emphasis role="stringliteral">&quot;&lt;color=green&gt;&quot;</emphasis>).Append(ba[i]&#32;?&#32;1&#32;:&#32;0).Append(<emphasis role="stringliteral">&quot;&lt;/color&gt;&quot;</emphasis>);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00347"/>00347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(redbits&#32;!=&#32;<emphasis role="keyword">null</emphasis>&#32;&amp;&amp;&#32;i&#32;&lt;&#32;redbits.Length&#32;&amp;&amp;&#32;redbits[i])
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00348"/>00348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append(<emphasis role="stringliteral">&quot;&lt;color=red&gt;&quot;</emphasis>).Append(ba[i]&#32;?&#32;1&#32;:&#32;0).Append(<emphasis role="stringliteral">&quot;&lt;/color&gt;&quot;</emphasis>);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00349"/>00349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00350"/>00350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append(ba[i]&#32;?&#32;<emphasis role="stringliteral">&quot;1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;&lt;color=#0f0f0f&gt;0&lt;/color&gt;&quot;</emphasis>);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00351"/>00351 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00352"/>00352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;%&#32;32&#32;==&#32;0)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00353"/>00353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append((i&#32;==&#32;0)&#32;?&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;]&#32;[&quot;</emphasis>);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00354"/>00354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;%&#32;8&#32;==&#32;0&#32;&amp;&amp;&#32;i&#32;!=&#32;0)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00355"/>00355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append(<emphasis role="stringliteral">&quot;:&quot;</emphasis>);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00356"/>00356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00357"/>00357 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00358"/>00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00359"/>00359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00360"/>00360 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00361"/>00361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;PrintMask(<emphasis role="keyword">this</emphasis>&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64">FastBitMask64</link>&#32;ba,&#32;StringBuilder[]&#32;colorbits&#32;=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00362"/>00362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00363"/>00363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Length&#32;=&#32;0;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00364"/>00364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append(<emphasis role="stringliteral">&quot;[&quot;</emphasis>);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00365"/>00365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;ba.<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask64_1ae7a595c23d5d45519850a2ff20085d5d">BitCount</link>&#32;-&#32;1;&#32;i&#32;&gt;=&#32;0;&#32;--i)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00366"/>00366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00367"/>00367 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00368"/>00368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(colorbits&#32;!=&#32;<emphasis role="keyword">null</emphasis>&#32;&amp;&amp;&#32;i&#32;&lt;&#32;colorbits.Length&#32;&amp;&amp;&#32;colorbits[i]&#32;!=&#32;<emphasis role="keyword">null</emphasis>&#32;&amp;&amp;&#32;colorbits[i].ToString()&#32;!=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00369"/>00369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append(<emphasis role="stringliteral">&quot;&lt;b&gt;&lt;color=&quot;</emphasis>&#32;+&#32;colorbits[i].ToString()&#32;+&#32;<emphasis role="stringliteral">&quot;&gt;&quot;</emphasis>&#32;+&#32;(ba[i]&#32;?&#32;1&#32;:&#32;0)&#32;+&#32;<emphasis role="stringliteral">&quot;&lt;/color&gt;&lt;/b&gt;&quot;</emphasis>);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00370"/>00370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00371"/>00371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append(ba[i]&#32;?&#32;<emphasis role="stringliteral">&quot;1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;&lt;color=#0f0f0f&gt;0&lt;/color&gt;&quot;</emphasis>);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00372"/>00372 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00373"/>00373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;%&#32;32&#32;==&#32;0)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00374"/>00374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append((i&#32;==&#32;0)&#32;?&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;]&#32;[&quot;</emphasis>);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00375"/>00375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;%&#32;8&#32;==&#32;0&#32;&amp;&amp;&#32;i&#32;!=&#32;0)
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00376"/>00376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append(<emphasis role="stringliteral">&quot;:&quot;</emphasis>);
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00377"/>00377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00378"/>00378 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00379"/>00379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00380"/>00380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00381"/>00381 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00382"/>00382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00383"/>00383 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00384"/>00384 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00385"/>00385 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00386"/>00386 &#32;&#32;&#32;&#32;}
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00387"/>00387 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00388"/>00388 
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00389"/>00389 }
<anchor xml:id="__fast_bit_mask64_8cs_source_1l00390"/>00390 
</programlisting></section>
