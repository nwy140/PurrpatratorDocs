<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__float_crusher_extensions_8cs_source" xml:lang="en-US">
<title>FloatCrusherExtensions.cs</title>
<indexterm><primary>C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/TransformCrusher/Extensions/FloatCrusherExtensions.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__float_crusher_extensions_8cs_source_1l00001"/>00001 <emphasis role="comment">//&#32;---------------------------------------------------------------------------------------------</emphasis>
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00002"/>00002 <emphasis role="comment">//&#32;&lt;copyright&gt;PhotonNetwork&#32;Framework&#32;for&#32;Unity&#32;-&#32;Copyright&#32;(C)&#32;2020&#32;Exit&#32;Games&#32;GmbH&lt;/copyright&gt;</emphasis>
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00003"/>00003 <emphasis role="comment">//&#32;&lt;author&gt;developer@exitgames.com&lt;/author&gt;</emphasis>
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00004"/>00004 <emphasis role="comment">//&#32;---------------------------------------------------------------------------------------------</emphasis>
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00005"/>00005 
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00006"/>00006 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespaceemotitron">emotitron</link>.Compression;
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00007"/>00007 
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00008"/>00008 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_photon_1_1_compression">Photon.Compression</link>
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00009"/>00009 {
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00010"/><link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions">00010</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions">FloatCrusherExtensions</link>
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00011"/>00011 &#32;&#32;&#32;&#32;{
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00012"/>00012 
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00013"/>00013 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Primitive&#32;Buffer&#32;Writers</emphasis>
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00014"/>00014 
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00024"/><link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1a0297630e5acd86b10c1aca27da140480">00024</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;CompressedFloat&#32;<link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1a0297630e5acd86b10c1aca27da140480">Write</link>(<emphasis role="keyword">this</emphasis>&#32;FloatCrusher&#32;fc,&#32;<emphasis role="keywordtype">float</emphasis>&#32;f,&#32;ref&#32;ulong&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;BitCullingLevel&#32;bcl&#32;=&#32;BitCullingLevel.NoCulling)
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits&#32;=&#32;fc._bits[(int)bcl];
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CompressedFloat&#32;c&#32;=&#32;fc.Compress(f);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c.cvalue.Inject(ref&#32;buffer,&#32;ref&#32;bitposition,&#32;bits);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c;
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00040"/><link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1a36df302f4b85d37da195629635c38bee">00040</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;CompressedFloat&#32;<link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1a36df302f4b85d37da195629635c38bee">Write</link>(<emphasis role="keyword">this</emphasis>&#32;FloatCrusher&#32;fc,&#32;<emphasis role="keywordtype">float</emphasis>&#32;f,&#32;ref&#32;uint&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;BitCullingLevel&#32;bcl&#32;=&#32;BitCullingLevel.NoCulling)
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits&#32;=&#32;fc._bits[(int)bcl];
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CompressedFloat&#32;c&#32;=&#32;fc.Compress(f);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c.cvalue.Inject(ref&#32;buffer,&#32;ref&#32;bitposition,&#32;bits);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c;
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00056"/><link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1ab277dccc1d2368c5411396a4939b6991">00056</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;CompressedFloat&#32;<link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1ab277dccc1d2368c5411396a4939b6991">Write</link>(<emphasis role="keyword">this</emphasis>&#32;FloatCrusher&#32;fc,&#32;<emphasis role="keywordtype">float</emphasis>&#32;f,&#32;ref&#32;ushort&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;BitCullingLevel&#32;bcl&#32;=&#32;BitCullingLevel.NoCulling)
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits&#32;=&#32;fc._bits[(int)bcl];
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CompressedFloat&#32;c&#32;=&#32;fc.Compress(f);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c.cvalue.Inject(ref&#32;buffer,&#32;ref&#32;bitposition,&#32;bits);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c;
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00072"/><link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1af94a9dea8b2e1f0c6acfc45d01321344">00072</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;CompressedFloat&#32;<link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1af94a9dea8b2e1f0c6acfc45d01321344">Write</link>(<emphasis role="keyword">this</emphasis>&#32;FloatCrusher&#32;fc,&#32;<emphasis role="keywordtype">float</emphasis>&#32;f,&#32;ref&#32;<emphasis role="keywordtype">byte</emphasis>&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;BitCullingLevel&#32;bcl&#32;=&#32;BitCullingLevel.NoCulling)
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits&#32;=&#32;fc._bits[(int)bcl];
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CompressedFloat&#32;c&#32;=&#32;fc.Compress(f);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c.cvalue.Inject(ref&#32;buffer,&#32;ref&#32;bitposition,&#32;bits);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c;
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00079"/>00079 
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00088"/><link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1a6a1351567693b29598594598d923286d">00088</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;CompressedFloat&#32;<link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1a6a1351567693b29598594598d923286d">Write</link>(<emphasis role="keyword">this</emphasis>&#32;FloatCrusher&#32;fc,&#32;CompressedFloat&#32;c,&#32;ref&#32;ulong&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;BitCullingLevel&#32;bcl&#32;=&#32;BitCullingLevel.NoCulling)
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c.cvalue.Inject(ref&#32;buffer,&#32;ref&#32;bitposition,&#32;fc._bits[(<emphasis role="keywordtype">int</emphasis>)bcl]);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c;
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00093"/>00093 
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00094"/>00094 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00095"/>00095 
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00096"/>00096 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;ULong&#32;Primitive&#32;Buffer&#32;Readers</emphasis>
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00097"/>00097 
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//UNTESTED</emphasis>
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00106"/><link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1af52a59e1020854f8238e9a44c09094a3">00106</link> <emphasis role="comment"></emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1af52a59e1020854f8238e9a44c09094a3">ReadAndDecompress</link>(<emphasis role="keyword">this</emphasis>&#32;FloatCrusher&#32;fc,&#32;ulong&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;BitCullingLevel&#32;bcl&#32;=&#32;BitCullingLevel.NoCulling)
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits&#32;=&#32;fc._bits[(int)bcl];
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;c&#32;=&#32;(uint)buffer.Read(ref&#32;bitposition,&#32;bits);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;fc.Decompress(c);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00112"/>00112 
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00113"/>00113 
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//UNTESTED</emphasis>
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00122"/><link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1ae9e94f84059630ad8b786d784fd88886">00122</link> <emphasis role="comment"></emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;CompressedFloat&#32;<link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1ae9e94f84059630ad8b786d784fd88886">Read</link>(<emphasis role="keyword">this</emphasis>&#32;FloatCrusher&#32;fc,&#32;ulong&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;BitCullingLevel&#32;bcl&#32;=&#32;BitCullingLevel.NoCulling)
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits&#32;=&#32;fc._bits[(int)bcl];
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;c&#32;=&#32;(uint)buffer.Read(ref&#32;bitposition,&#32;bits);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;CompressedFloat(fc,&#32;c);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[System.Obsolete(<emphasis role="stringliteral">&quot;No&#32;reason&#32;for&#32;buffer&#32;to&#32;be&#32;a&#32;ref&quot;</emphasis>)]
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00136"/><link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1a4071e9d9db6f038e69e41bf347cb66e8">00136</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;CompressedFloat&#32;<link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1a4071e9d9db6f038e69e41bf347cb66e8">Read</link>(<emphasis role="keyword">this</emphasis>&#32;FloatCrusher&#32;fc,&#32;ref&#32;ulong&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;BitCullingLevel&#32;bcl&#32;=&#32;BitCullingLevel.NoCulling)
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits&#32;=&#32;fc._bits[(int)bcl];
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;mask&#32;=&#32;fc.masks[(int)bcl];
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;c&#32;=&#32;(uint)((buffer&#32;&gt;&gt;&#32;bitposition)&#32;&amp;&#32;mask);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00141"/>00141 
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bitposition&#32;+=&#32;bits;
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;CompressedFloat(fc,&#32;c);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00145"/>00145 
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00146"/>00146 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00147"/>00147 
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00148"/>00148 
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00149"/>00149 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Array&#32;Buffer&#32;Writers</emphasis>
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00150"/>00150 
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00159"/><link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1afc55286e62fa14665186ff0f76da1683">00159</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;CompressedFloat&#32;<link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1afc55286e62fa14665186ff0f76da1683">Write</link>(<emphasis role="keyword">this</emphasis>&#32;FloatCrusher&#32;fc,&#32;CompressedFloat&#32;c,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;BitCullingLevel&#32;bcl&#32;=&#32;BitCullingLevel.NoCulling)
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits&#32;=&#32;fc._bits[(int)bcl];
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write(c.cvalue,&#32;ref&#32;bitposition,&#32;bits);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c;
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00165"/>00165 
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00174"/>00174 
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00175"/><link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1a56f07607af4e0a2e0312dc03e3c44e6d">00175</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;CompressedFloat&#32;<link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1a56f07607af4e0a2e0312dc03e3c44e6d">Write</link>(<emphasis role="keyword">this</emphasis>&#32;FloatCrusher&#32;fc,&#32;CompressedFloat&#32;c,&#32;uint[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;BitCullingLevel&#32;bcl&#32;=&#32;BitCullingLevel.NoCulling)
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits&#32;=&#32;fc._bits[(int)bcl];
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write(c.cvalue,&#32;ref&#32;bitposition,&#32;bits);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c;
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00189"/><link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1ad764ab48c2153909f66984251f3f1694">00189</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;CompressedFloat&#32;<link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1ad764ab48c2153909f66984251f3f1694">Write</link>(<emphasis role="keyword">this</emphasis>&#32;FloatCrusher&#32;fc,&#32;CompressedFloat&#32;c,&#32;ulong[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;BitCullingLevel&#32;bcl&#32;=&#32;BitCullingLevel.NoCulling)
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits&#32;=&#32;fc._bits[(int)bcl];
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write(c.cvalue,&#32;ref&#32;bitposition,&#32;bits);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c;
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00195"/>00195 
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00204"/><link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1aed190b38cfe2e641ddd5529df5d7d755">00204</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;CompressedFloat&#32;<link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1aed190b38cfe2e641ddd5529df5d7d755">Write</link>(<emphasis role="keyword">this</emphasis>&#32;FloatCrusher&#32;fc,&#32;uint&#32;c,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;BitCullingLevel&#32;bcl&#32;=&#32;BitCullingLevel.NoCulling)
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits&#32;=&#32;fc._bits[(int)bcl];
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write(c,&#32;ref&#32;bitposition,&#32;bits);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;CompressedFloat(fc,&#32;c);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00210"/>00210 
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00219"/><link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1a45192c9c0b197a3d75ee1db774625ac3">00219</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;CompressedFloat&#32;<link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1a45192c9c0b197a3d75ee1db774625ac3">Write</link>(<emphasis role="keyword">this</emphasis>&#32;FloatCrusher&#32;fc,&#32;uint&#32;c,&#32;uint[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;BitCullingLevel&#32;bcl&#32;=&#32;BitCullingLevel.NoCulling)
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits&#32;=&#32;fc._bits[(int)bcl];
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write(c,&#32;ref&#32;bitposition,&#32;bits);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00223"/>00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;CompressedFloat(fc,&#32;c);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00225"/>00225 
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00234"/><link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1ac44b0871380c0a0e2b8faa96711f4e4b">00234</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;CompressedFloat&#32;<link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1ac44b0871380c0a0e2b8faa96711f4e4b">Write</link>(<emphasis role="keyword">this</emphasis>&#32;FloatCrusher&#32;fc,&#32;uint&#32;c,&#32;ulong[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;BitCullingLevel&#32;bcl&#32;=&#32;BitCullingLevel.NoCulling)
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00235"/>00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00236"/>00236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits&#32;=&#32;fc._bits[(int)bcl];
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00237"/>00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write(c,&#32;ref&#32;bitposition,&#32;bits);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00238"/>00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;CompressedFloat(fc,&#32;c);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00239"/>00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00240"/>00240 
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00249"/><link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1aa57e77f92883b2c5aff764d7f2a816f3">00249</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;CompressedFloat&#32;<link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1aa57e77f92883b2c5aff764d7f2a816f3">Write</link>(<emphasis role="keyword">this</emphasis>&#32;FloatCrusher&#32;fc,&#32;<emphasis role="keywordtype">float</emphasis>&#32;f,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;BitCullingLevel&#32;bcl&#32;=&#32;BitCullingLevel.NoCulling)
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;c&#32;=&#32;fc.Compress(f);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits&#32;=&#32;fc._bits[(int)bcl];
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00253"/>00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write(c,&#32;ref&#32;bitposition,&#32;bits);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00254"/>00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;CompressedFloat(fc,&#32;c);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00255"/>00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00264"/><link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1a387a3483ef223f4bba0226225b1467f5">00264</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;CompressedFloat&#32;<link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1a387a3483ef223f4bba0226225b1467f5">Write</link>(<emphasis role="keyword">this</emphasis>&#32;FloatCrusher&#32;fc,&#32;<emphasis role="keywordtype">float</emphasis>&#32;f,&#32;uint[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;BitCullingLevel&#32;bcl&#32;=&#32;BitCullingLevel.NoCulling)
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits&#32;=&#32;fc._bits[(int)bcl];
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;c&#32;=&#32;fc.Compress(f);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write(c,&#32;ref&#32;bitposition,&#32;bits);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00269"/>00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;CompressedFloat(fc,&#32;c);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00270"/>00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00271"/>00271 
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00280"/><link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1a16673f791941085ba8871284bf232157">00280</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;CompressedFloat&#32;<link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1a16673f791941085ba8871284bf232157">Write</link>(<emphasis role="keyword">this</emphasis>&#32;FloatCrusher&#32;fc,&#32;<emphasis role="keywordtype">float</emphasis>&#32;f,&#32;ulong[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;BitCullingLevel&#32;bcl&#32;=&#32;BitCullingLevel.NoCulling)
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00281"/>00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits&#32;=&#32;fc._bits[(int)bcl];
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00283"/>00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;c&#32;=&#32;fc.Compress(f);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write(c,&#32;ref&#32;bitposition,&#32;bits);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;CompressedFloat(fc,&#32;c);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00287"/>00287 
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00288"/>00288 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00289"/>00289 
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00290"/>00290 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Array&#32;Buffer&#32;Readers</emphasis>
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00291"/>00291 
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00299"/><link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1a77c3488784b59269f70501ec55fab108">00299</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;CompressedFloat&#32;<link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1a77c3488784b59269f70501ec55fab108">Read</link>(<emphasis role="keyword">this</emphasis>&#32;FloatCrusher&#32;fc,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;BitCullingLevel&#32;bcl&#32;=&#32;BitCullingLevel.NoCulling)
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00301"/>00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits&#32;=&#32;fc._bits[(int)bcl];
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00302"/>00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;CompressedFloat(fc,&#32;buffer.ReadUInt32(ref&#32;bitposition,&#32;bits));
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00311"/><link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1a713392b80a947b05242b45c89fb6b6da">00311</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;CompressedFloat&#32;<link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1a713392b80a947b05242b45c89fb6b6da">Read</link>(<emphasis role="keyword">this</emphasis>&#32;FloatCrusher&#32;fc,&#32;uint[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;BitCullingLevel&#32;bcl&#32;=&#32;BitCullingLevel.NoCulling)
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00312"/>00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits&#32;=&#32;fc._bits[(int)bcl];
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;CompressedFloat(fc,&#32;buffer.ReadUInt32(ref&#32;bitposition,&#32;bits));
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00323"/><link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1a951da8c4e6abeaeb611a4c804179bf0c">00323</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;CompressedFloat&#32;<link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1a951da8c4e6abeaeb611a4c804179bf0c">Read</link>(<emphasis role="keyword">this</emphasis>&#32;FloatCrusher&#32;fc,&#32;ulong[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;BitCullingLevel&#32;bcl&#32;=&#32;BitCullingLevel.NoCulling)
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00324"/>00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00325"/>00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits&#32;=&#32;fc._bits[(int)bcl];
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00326"/>00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;CompressedFloat(fc,&#32;buffer.ReadUInt32(ref&#32;bitposition,&#32;bits));
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00327"/>00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00328"/>00328 
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00335"/><link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1a855a45ac17fa2a1f24e05a9f395753fb">00335</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1a855a45ac17fa2a1f24e05a9f395753fb">ReadAndDecompress</link>(<emphasis role="keyword">this</emphasis>&#32;FloatCrusher&#32;fc,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition)
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00336"/>00336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00337"/>00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;c&#32;=&#32;buffer.ReadUInt32(ref&#32;bitposition,&#32;fc._bits[0]);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00338"/>00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;fc.Decompress(c);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00339"/>00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00346"/><link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1a5bb794c7dfe522c3e65134f2bf3dd9a4">00346</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1a5bb794c7dfe522c3e65134f2bf3dd9a4">ReadAndDecompress</link>(<emphasis role="keyword">this</emphasis>&#32;FloatCrusher&#32;fc,&#32;uint[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition)
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00347"/>00347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00348"/>00348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;c&#32;=&#32;buffer.ReadUInt32(ref&#32;bitposition,&#32;fc._bits[0]);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00349"/>00349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;fc.Decompress(c);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00350"/>00350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00357"/><link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1a84c43a060fa36aebd77a32ec2d3ccc0f">00357</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_float_crusher_extensions_1a84c43a060fa36aebd77a32ec2d3ccc0f">ReadAndDecompress</link>(<emphasis role="keyword">this</emphasis>&#32;FloatCrusher&#32;fc,&#32;ulong[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition)
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00358"/>00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00359"/>00359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;c&#32;=&#32;buffer.ReadUInt32(ref&#32;bitposition,&#32;fc._bits[0]);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00360"/>00360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;fc.Decompress(c);
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00361"/>00361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00362"/>00362 
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00363"/>00363 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00364"/>00364 &#32;&#32;&#32;&#32;}
<anchor xml:id="__float_crusher_extensions_8cs_source_1l00365"/>00365 }
</programlisting></section>
