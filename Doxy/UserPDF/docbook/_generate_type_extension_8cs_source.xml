<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__generate_type_extension_8cs_source" xml:lang="en-US">
<title>GenerateTypeExtension.cs</title>
<indexterm><primary>C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/PackObject/CodeGen/GenerateTypeExtension.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__generate_type_extension_8cs_source_1l00001"/>00001 <emphasis role="comment">//&#32;---------------------------------------------------------------------------------------------</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00002"/>00002 <emphasis role="comment">//&#32;&lt;copyright&gt;PhotonNetwork&#32;Framework&#32;for&#32;Unity&#32;-&#32;Copyright&#32;(C)&#32;2020&#32;Exit&#32;Games&#32;GmbH&lt;/copyright&gt;</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00003"/>00003 <emphasis role="comment">//&#32;&lt;author&gt;developer@exitgames.com&lt;/author&gt;</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00004"/>00004 <emphasis role="comment">//&#32;---------------------------------------------------------------------------------------------</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00005"/>00005 
<anchor xml:id="__generate_type_extension_8cs_source_1l00006"/>00006 <emphasis role="preprocessor">#if&#32;UNITY_EDITOR</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00007"/>00007 
<anchor xml:id="__generate_type_extension_8cs_source_1l00008"/>00008 <emphasis role="keyword">using</emphasis>&#32;System;
<anchor xml:id="__generate_type_extension_8cs_source_1l00009"/>00009 <emphasis role="keyword">using</emphasis>&#32;System.Collections;
<anchor xml:id="__generate_type_extension_8cs_source_1l00010"/>00010 <emphasis role="keyword">using</emphasis>&#32;System.Collections.Generic;
<anchor xml:id="__generate_type_extension_8cs_source_1l00011"/>00011 <emphasis role="keyword">using</emphasis>&#32;System.IO;
<anchor xml:id="__generate_type_extension_8cs_source_1l00012"/>00012 <emphasis role="keyword">using</emphasis>&#32;System.Reflection;
<anchor xml:id="__generate_type_extension_8cs_source_1l00013"/>00013 <emphasis role="keyword">using</emphasis>&#32;System.Text;
<anchor xml:id="__generate_type_extension_8cs_source_1l00014"/>00014 <emphasis role="keyword">using</emphasis>&#32;UnityEngine;
<anchor xml:id="__generate_type_extension_8cs_source_1l00015"/>00015 
<anchor xml:id="__generate_type_extension_8cs_source_1l00016"/>00016 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_photon_1_1_compression_1_1_internal">Photon.Compression.Internal</link>
<anchor xml:id="__generate_type_extension_8cs_source_1l00017"/>00017 {
<anchor xml:id="__generate_type_extension_8cs_source_1l00018"/>00018 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>GenerateTypeExt
<anchor xml:id="__generate_type_extension_8cs_source_1l00019"/>00019 &#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00020"/>00020 
<anchor xml:id="__generate_type_extension_8cs_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;PACK_PREFIX&#32;=&#32;<emphasis role="stringliteral">&quot;Pack_&quot;</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;PACKFRM_PREFIX&#32;=&#32;<emphasis role="stringliteral">&quot;PackFrame_&quot;</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;PREV_FRM_NAME&#32;=&#32;<emphasis role="stringliteral">&quot;prevFrame&quot;</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;PREV_NAME&#32;=&#32;<emphasis role="stringliteral">&quot;prev&quot;</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00025"/>00025 
<anchor xml:id="__generate_type_extension_8cs_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;SUPRESS_UNUSED&#32;=&#32;<emphasis role="stringliteral">&quot;#pragma&#32;warning&#32;disable&#32;1635&quot;</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;RESTORE_UNUSED&#32;=&#32;<emphasis role="stringliteral">&quot;#pragma&#32;warning&#32;restore&#32;1635&quot;</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;SUPRESS_UNUSED2&#32;=&#32;<emphasis role="stringliteral">&quot;#pragma&#32;warning&#32;disable&#32;0219&quot;</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;RESTORE_UNUSED2&#32;=&#32;<emphasis role="stringliteral">&quot;#pragma&#32;warning&#32;disable&#32;0219&quot;</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00030"/>00030 
<anchor xml:id="__generate_type_extension_8cs_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;sb&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;StringBuilder();
<anchor xml:id="__generate_type_extension_8cs_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;sbFrame&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;StringBuilder();
<anchor xml:id="__generate_type_extension_8cs_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;sbFactory&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;StringBuilder();
<anchor xml:id="__generate_type_extension_8cs_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;sbSnapshot&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;StringBuilder();
<anchor xml:id="__generate_type_extension_8cs_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;sbCopyToFrame&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;StringBuilder();
<anchor xml:id="__generate_type_extension_8cs_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__generate_type_extension_8cs_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;sbCapture&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;StringBuilder();
<anchor xml:id="__generate_type_extension_8cs_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;sbApplyToObj&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;StringBuilder();
<anchor xml:id="__generate_type_extension_8cs_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;sbCopyFrameToFrame&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;StringBuilder();
<anchor xml:id="__generate_type_extension_8cs_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;sbInterpToObj&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;StringBuilder();
<anchor xml:id="__generate_type_extension_8cs_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;sbInterpToFrame&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;StringBuilder();
<anchor xml:id="__generate_type_extension_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;sbDelegates&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;StringBuilder();
<anchor xml:id="__generate_type_extension_8cs_source_1l00043"/>00043 
<anchor xml:id="__generate_type_extension_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;sbInit&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;StringBuilder();
<anchor xml:id="__generate_type_extension_8cs_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;sbPack&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;StringBuilder();
<anchor xml:id="__generate_type_extension_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;sbUnpack&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;StringBuilder();
<anchor xml:id="__generate_type_extension_8cs_source_1l00047"/>00047 
<anchor xml:id="__generate_type_extension_8cs_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;hasSnapCallbacks;
<anchor xml:id="__generate_type_extension_8cs_source_1l00049"/>00049 
<anchor xml:id="__generate_type_extension_8cs_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;serializationFlags&#32;=&#32;typeof(<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>).Name;
<anchor xml:id="__generate_type_extension_8cs_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;serializationFlagsLine1&#32;=&#32;serializationFlags&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;flags&#32;=&#32;&quot;</emphasis>&#32;+&#32;serializationFlags&#32;+&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>&#32;+&#32;System.Enum.GetName(typeof(<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>),&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.None)&#32;+&#32;<emphasis role="stringliteral">&quot;;\n&quot;</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00052"/>00052 
<anchor xml:id="__generate_type_extension_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;GeneratePackCode(<emphasis role="keyword">this</emphasis>&#32;Type&#32;objType,&#32;TypeInfo&#32;objTypeInfo,&#32;PackObjectAttribute&#32;pObjAttr)
<anchor xml:id="__generate_type_extension_8cs_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isStruct&#32;=&#32;objType.IsValueType;
<anchor xml:id="__generate_type_extension_8cs_source_1l00056"/>00056 
<anchor xml:id="__generate_type_extension_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;objTypeName&#32;=&#32;objType.Name;
<anchor xml:id="__generate_type_extension_8cs_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;objTypeNamespace&#32;=&#32;objType.Namespace;
<anchor xml:id="__generate_type_extension_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;ffulltype&#32;=&#32;(objType.Namespace&#32;==&#32;<emphasis role="keyword">null</emphasis>&#32;||&#32;objType.Namespace&#32;==&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)&#32;?&#32;objType.Name&#32;:&#32;(objType.Namespace&#32;+&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>&#32;+&#32;objType.Name);
<anchor xml:id="__generate_type_extension_8cs_source_1l00060"/>00060 
<anchor xml:id="__generate_type_extension_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;structCast&#32;=&#32;isStruct&#32;?&#32;<emphasis role="stringliteral">&quot;*(&quot;</emphasis>&#32;+&#32;ffulltype&#32;+&#32;<emphasis role="stringliteral">&quot;*)&quot;</emphasis>&#32;:&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00062"/>00062 
<anchor xml:id="__generate_type_extension_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;packFrameName&#32;=&#32;<emphasis role="stringliteral">&quot;PackFrame_&quot;</emphasis>&#32;+&#32;objTypeName;
<anchor xml:id="__generate_type_extension_8cs_source_1l00064"/>00064 
<anchor xml:id="__generate_type_extension_8cs_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;fullClass&#32;=&#32;ReplacePlusWithPeriod(objType.FullName);
<anchor xml:id="__generate_type_extension_8cs_source_1l00066"/>00066 
<anchor xml:id="__generate_type_extension_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;derefObj&#32;=&#32;objType.IsValueType&#32;?&#32;<emphasis role="stringliteral">&quot;(*(&quot;</emphasis>&#32;+&#32;ffulltype&#32;+&#32;<emphasis role="stringliteral">&quot;*)trg)&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;t&quot;</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00068"/>00068 
<anchor xml:id="__generate_type_extension_8cs_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GenerateFields(objType);
<anchor xml:id="__generate_type_extension_8cs_source_1l00070"/>00070 
<anchor xml:id="__generate_type_extension_8cs_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;fullObjName&#32;=&#32;objType.FullName;&#32;<emphasis role="comment">//&#32;(objTypeNamespace&#32;==&#32;null&#32;||&#32;objTypeNamespace&#32;==&#32;&quot;&quot;)&#32;?&#32;objTypeName&#32;:&#32;(objTypeNamespace&#32;+&#32;&quot;.&quot;&#32;+&#32;objTypeName);</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00072"/>00072 
<anchor xml:id="__generate_type_extension_8cs_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.Length&#32;=&#32;0;
<anchor xml:id="__generate_type_extension_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(<emphasis role="stringliteral">&quot;using&#32;System;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(<emphasis role="stringliteral">&quot;using&#32;System.Reflection;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(<emphasis role="stringliteral">&quot;using&#32;System.Collections;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(<emphasis role="stringliteral">&quot;using&#32;Photon.Utilities;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(<emphasis role="stringliteral">&quot;using&#32;UnityEngine;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00079"/>00079 
<anchor xml:id="__generate_type_extension_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(SUPRESS_UNUSED).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(SUPRESS_UNUSED2).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(<emphasis role="stringliteral">&quot;namespace&#32;Photon.Compression.Internal&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(<emphasis role="stringliteral">&quot;{&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00086"/>00086 
<anchor xml:id="__generate_type_extension_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.__(<emphasis role="stringliteral">&quot;public&#32;class&#32;&quot;</emphasis>,&#32;packFrameName,&#32;<emphasis role="stringliteral">&quot;&#32;:&#32;PackFrame&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.__(<emphasis role="stringliteral">&quot;{&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00091"/>00091 
<anchor xml:id="__generate_type_extension_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(sbFrame.ToString());
<anchor xml:id="__generate_type_extension_8cs_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00095"/>00095 
<anchor xml:id="__generate_type_extension_8cs_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;public&#32;static&#32;void&#32;Interpolate(PackFrame&#32;start,&#32;PackFrame&#32;end,&#32;PackFrame&#32;trg,&#32;float&#32;time,&#32;ref&#32;FastBitMask128&#32;readyMask,&#32;ref&#32;int&#32;maskOffset)&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00098"/>00098 
<anchor xml:id="__generate_type_extension_8cs_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;{&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00100"/>00100 
<anchor xml:id="__generate_type_extension_8cs_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sbInterpToFrame.Length&#32;!=&#32;0)
<anchor xml:id="__generate_type_extension_8cs_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;var&#32;s&#32;=&#32;start&#32;as&#32;&quot;</emphasis>,&#32;packFrameName,&#32;<emphasis role="stringliteral">&quot;;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;var&#32;e&#32;=&#32;end&#32;as&#32;&quot;</emphasis>,&#32;packFrameName,&#32;<emphasis role="stringliteral">&quot;;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;var&#32;t&#32;=&#32;trg&#32;as&#32;&quot;</emphasis>,&#32;packFrameName,&#32;<emphasis role="stringliteral">&quot;;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//sb.____(&quot;int&#32;maskOffset&#32;=&#32;0;&quot;).EOL();</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;var&#32;mask&#32;=&#32;end.mask;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00108"/>00108 
<anchor xml:id="__generate_type_extension_8cs_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.Append(sbInterpToFrame);
<anchor xml:id="__generate_type_extension_8cs_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00111"/>00111 
<anchor xml:id="__generate_type_extension_8cs_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;}&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00113"/>00113 
<anchor xml:id="__generate_type_extension_8cs_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isStruct)
<anchor xml:id="__generate_type_extension_8cs_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;public&#32;static&#32;void&#32;Interpolate(PackFrame&#32;start,&#32;PackFrame&#32;end,&#32;IntPtr&#32;trg,&#32;float&#32;time,&#32;ref&#32;FastBitMask128&#32;readyMask,&#32;ref&#32;int&#32;maskOffset)&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;public&#32;static&#32;void&#32;Interpolate(PackFrame&#32;start,&#32;PackFrame&#32;end,&#32;System.Object&#32;trg,&#32;float&#32;time,&#32;ref&#32;FastBitMask128&#32;readyMask,&#32;ref&#32;int&#32;maskOffset)&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00119"/>00119 
<anchor xml:id="__generate_type_extension_8cs_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;{&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00121"/>00121 
<anchor xml:id="__generate_type_extension_8cs_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sbInterpToObj.Length&#32;!=&#32;0)
<anchor xml:id="__generate_type_extension_8cs_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;var&#32;s&#32;=&#32;start&#32;as&#32;&quot;</emphasis>,&#32;packFrameName,&#32;<emphasis role="stringliteral">&quot;;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;var&#32;e&#32;=&#32;end&#32;as&#32;&quot;</emphasis>,&#32;packFrameName,&#32;<emphasis role="stringliteral">&quot;;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!isStruct)
<anchor xml:id="__generate_type_extension_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;var&#32;t&#32;=&#32;trg&#32;as&#32;&quot;</emphasis>,&#32;fullObjName,&#32;<emphasis role="stringliteral">&quot;;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;var&#32;mask&#32;=&#32;end.mask;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00129"/>00129 
<anchor xml:id="__generate_type_extension_8cs_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.Append(sbInterpToObj);
<anchor xml:id="__generate_type_extension_8cs_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__generate_type_extension_8cs_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;}&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00134"/>00134 
<anchor xml:id="__generate_type_extension_8cs_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isStruct)
<anchor xml:id="__generate_type_extension_8cs_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;public&#32;static&#32;void&#32;SnapshotCallback(PackFrame&#32;snapframe,&#32;PackFrame&#32;targframe,&#32;IntPtr&#32;trg,&#32;ref&#32;FastBitMask128&#32;readyMask,&#32;ref&#32;int&#32;maskOffset)&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;public&#32;static&#32;void&#32;SnapshotCallback(PackFrame&#32;snapframe,&#32;PackFrame&#32;targframe,&#32;System.Object&#32;trg,&#32;ref&#32;FastBitMask128&#32;readyMask,&#32;ref&#32;int&#32;maskOffset)&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00141"/>00141 
<anchor xml:id="__generate_type_extension_8cs_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;{&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00143"/>00143 
<anchor xml:id="__generate_type_extension_8cs_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(hasSnapCallbacks<emphasis role="comment">/*&#32;sbSnapshot.Length&#32;!=&#32;0*/</emphasis>)
<anchor xml:id="__generate_type_extension_8cs_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;var&#32;snap&#32;=&#32;snapframe&#32;as&#32;&quot;</emphasis>,&#32;packFrameName,&#32;<emphasis role="stringliteral">&quot;;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;var&#32;targ&#32;=&#32;targframe&#32;as&#32;&quot;</emphasis>,&#32;packFrameName,&#32;<emphasis role="stringliteral">&quot;;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!isStruct)
<anchor xml:id="__generate_type_extension_8cs_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;var&#32;t&#32;=&#32;trg&#32;as&#32;&quot;</emphasis>,&#32;fullObjName,&#32;<emphasis role="stringliteral">&quot;;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;var&#32;snapmask&#32;=&#32;snapframe.mask;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;var&#32;targmask&#32;=&#32;targframe.mask;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00152"/>00152 
<anchor xml:id="__generate_type_extension_8cs_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.Append(sbSnapshot);
<anchor xml:id="__generate_type_extension_8cs_source_1l00154"/>00154 
<anchor xml:id="__generate_type_extension_8cs_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pObjAttr.postSnapCallback&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__generate_type_extension_8cs_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____((isStruct&#32;?&#32;<emphasis role="stringliteral">&quot;unsafe&#32;&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>),&#32;<emphasis role="stringliteral">&quot;{&#32;&quot;</emphasis>&#32;,derefObj,&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>,&#32;pObjAttr.postSnapCallback,&#32;<emphasis role="stringliteral">&quot;();&#32;}&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00159"/>00159 
<anchor xml:id="__generate_type_extension_8cs_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00161"/>00161 
<anchor xml:id="__generate_type_extension_8cs_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;}&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00164"/>00164 
<anchor xml:id="__generate_type_extension_8cs_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isStruct)
<anchor xml:id="__generate_type_extension_8cs_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;public&#32;static&#32;void&#32;Capture(IntPtr&#32;src,&#32;PackFrame&#32;trg)&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;public&#32;static&#32;void&#32;Capture(System.Object&#32;src,&#32;PackFrame&#32;trg)&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00171"/>00171 
<anchor xml:id="__generate_type_extension_8cs_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;{&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00173"/>00173 
<anchor xml:id="__generate_type_extension_8cs_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sbCapture.Length&#32;!=&#32;0)
<anchor xml:id="__generate_type_extension_8cs_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!isStruct)
<anchor xml:id="__generate_type_extension_8cs_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;var&#32;s&#32;=&#32;src&#32;as&#32;&quot;</emphasis>,&#32;fullObjName,&#32;<emphasis role="stringliteral">&quot;;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00178"/>00178 
<anchor xml:id="__generate_type_extension_8cs_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;var&#32;t&#32;=&#32;trg&#32;as&#32;&quot;</emphasis>,&#32;packFrameName,&#32;<emphasis role="stringliteral">&quot;;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.Append(sbCapture);
<anchor xml:id="__generate_type_extension_8cs_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__generate_type_extension_8cs_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;}&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00185"/>00185 
<anchor xml:id="__generate_type_extension_8cs_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;postApplyCallback&#32;=&#32;pObjAttr.postApplyCallback;
<anchor xml:id="__generate_type_extension_8cs_source_1l00189"/>00189 
<anchor xml:id="__generate_type_extension_8cs_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isStruct)
<anchor xml:id="__generate_type_extension_8cs_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;public&#32;static&#32;void&#32;Apply(PackFrame&#32;src,&#32;IntPtr&#32;trg,&#32;ref&#32;FastBitMask128&#32;mask,&#32;ref&#32;int&#32;maskOffset)&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;public&#32;static&#32;void&#32;Apply(PackFrame&#32;src,&#32;System.Object&#32;trg,&#32;ref&#32;FastBitMask128&#32;mask,&#32;ref&#32;int&#32;maskOffset)&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00194"/>00194 
<anchor xml:id="__generate_type_extension_8cs_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;{&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00196"/>00196 
<anchor xml:id="__generate_type_extension_8cs_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sbApplyToObj.Length&#32;!=&#32;0)
<anchor xml:id="__generate_type_extension_8cs_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;var&#32;s&#32;=&#32;src&#32;as&#32;&quot;</emphasis>,&#32;packFrameName,&#32;<emphasis role="stringliteral">&quot;;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00200"/>00200 
<anchor xml:id="__generate_type_extension_8cs_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!isStruct)
<anchor xml:id="__generate_type_extension_8cs_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;var&#32;t&#32;=&#32;trg&#32;as&#32;&quot;</emphasis>,&#32;fullObjName,&#32;<emphasis role="stringliteral">&quot;;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00203"/>00203 
<anchor xml:id="__generate_type_extension_8cs_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(postApplyCallback&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__generate_type_extension_8cs_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;bool&#32;haschanged&#32;=&#32;false;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00206"/>00206 
<anchor xml:id="__generate_type_extension_8cs_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.Append(sbApplyToObj);
<anchor xml:id="__generate_type_extension_8cs_source_1l00208"/>00208 
<anchor xml:id="__generate_type_extension_8cs_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(postApplyCallback&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__generate_type_extension_8cs_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____((isStruct&#32;?&#32;<emphasis role="stringliteral">&quot;unsafe&#32;&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>),&#32;<emphasis role="stringliteral">&quot;{&#32;if&#32;(haschanged)&#32;&quot;</emphasis>,&#32;derefObj,&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>,&#32;postApplyCallback,&#32;<emphasis role="stringliteral">&quot;();&#32;}&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00214"/>00214 
<anchor xml:id="__generate_type_extension_8cs_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;}&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00217"/>00217 
<anchor xml:id="__generate_type_extension_8cs_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;public&#32;static&#32;void&#32;Copy(PackFrame&#32;src,&#32;PackFrame&#32;trg)&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00221"/>00221 
<anchor xml:id="__generate_type_extension_8cs_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;{&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00223"/>00223 
<anchor xml:id="__generate_type_extension_8cs_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sbCopyFrameToFrame.Length&#32;!=&#32;0)
<anchor xml:id="__generate_type_extension_8cs_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;var&#32;s&#32;=&#32;src&#32;as&#32;&quot;</emphasis>,&#32;packFrameName,&#32;<emphasis role="stringliteral">&quot;;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;var&#32;t&#32;=&#32;trg&#32;as&#32;&quot;</emphasis>,&#32;packFrameName,&#32;<emphasis role="stringliteral">&quot;;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00228"/>00228 
<anchor xml:id="__generate_type_extension_8cs_source_1l00229"/>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.Append(sbCopyFrameToFrame);
<anchor xml:id="__generate_type_extension_8cs_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00231"/>00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__generate_type_extension_8cs_source_1l00232"/>00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;}&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00233"/>00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00234"/>00234 
<anchor xml:id="__generate_type_extension_8cs_source_1l00235"/>00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00236"/>00236 
<anchor xml:id="__generate_type_extension_8cs_source_1l00238"/>00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;public&#32;static&#32;PackFrame&#32;Factory()&#32;{&#32;return&#32;new&#32;&quot;</emphasis>,&#32;packFrameName,&#32;<emphasis role="stringliteral">&quot;(){&#32;mask&#32;=&#32;new&#32;FastBitMask128(&quot;</emphasis>,&#32;PACK_PREFIX,&#32;objTypeName,&#32;<emphasis role="stringliteral">&quot;.TOTAL_FIELDS),&#32;&quot;</emphasis>)
<anchor xml:id="__generate_type_extension_8cs_source_1l00239"/>00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._(<emphasis role="stringliteral">&quot;isCompleteMask&#32;=&#32;new&#32;FastBitMask128(&quot;</emphasis>,&#32;PACK_PREFIX,&#32;objTypeName,&#32;<emphasis role="stringliteral">&quot;.TOTAL_FIELDS)&#32;};&#32;}&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00240"/>00240 
<anchor xml:id="__generate_type_extension_8cs_source_1l00241"/>00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isStruct)
<anchor xml:id="__generate_type_extension_8cs_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;public&#32;static&#32;PackFrame[]&#32;Factory(IntPtr&#32;trg,&#32;int&#32;count){&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;public&#32;static&#32;PackFrame[]&#32;Factory(System.Object&#32;trg,&#32;int&#32;count){&#32;var&#32;t&#32;=&#32;trg&#32;as&#32;&quot;</emphasis>,&#32;fullObjName,&#32;<emphasis role="stringliteral">&quot;;&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00245"/>00245 
<anchor xml:id="__generate_type_extension_8cs_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(<emphasis role="stringliteral">&quot;var&#32;frames&#32;=&#32;new&#32;&quot;</emphasis>,&#32;packFrameName,&#32;<emphasis role="stringliteral">&quot;[count];&#32;&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00247"/>00247 
<anchor xml:id="__generate_type_extension_8cs_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(<emphasis role="stringliteral">&quot;for&#32;(int&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;count;&#32;++i)&#32;{&#32;&quot;</emphasis>)
<anchor xml:id="__generate_type_extension_8cs_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._(<emphasis role="stringliteral">&quot;var&#32;frame&#32;=&#32;new&#32;&quot;</emphasis>,&#32;packFrameName,&#32;<emphasis role="stringliteral">&quot;(){&#32;mask&#32;=&#32;new&#32;FastBitMask128(&quot;</emphasis>,&#32;PACK_PREFIX,&#32;objTypeName,&#32;<emphasis role="stringliteral">&quot;.TOTAL_FIELDS),&#32;&quot;</emphasis>)
<anchor xml:id="__generate_type_extension_8cs_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._(<emphasis role="stringliteral">&quot;isCompleteMask&#32;=&#32;new&#32;FastBitMask128(&quot;</emphasis>,&#32;PACK_PREFIX,&#32;objTypeName,&#32;<emphasis role="stringliteral">&quot;.TOTAL_FIELDS)&#32;};&#32;&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00251"/>00251 
<anchor xml:id="__generate_type_extension_8cs_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.Append(sbFactory);
<anchor xml:id="__generate_type_extension_8cs_source_1l00253"/>00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(<emphasis role="stringliteral">&quot;&#32;frames[i]&#32;=&#32;frame;&#32;}&#32;&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00254"/>00254 
<anchor xml:id="__generate_type_extension_8cs_source_1l00255"/>00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(<emphasis role="stringliteral">&quot;return&#32;frames;&#32;}&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00256"/>00256 
<anchor xml:id="__generate_type_extension_8cs_source_1l00257"/>00257 
<anchor xml:id="__generate_type_extension_8cs_source_1l00258"/>00258 
<anchor xml:id="__generate_type_extension_8cs_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.__(<emphasis role="stringliteral">&quot;}&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00261"/>00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00262"/>00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00263"/>00263 
<anchor xml:id="__generate_type_extension_8cs_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.__(<emphasis role="stringliteral">&quot;public&#32;static&#32;class&#32;&quot;</emphasis>,&#32;PACK_PREFIX,&#32;objTypeName).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.__(<emphasis role="stringliteral">&quot;{&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00268"/>00268 
<anchor xml:id="__generate_type_extension_8cs_source_1l00269"/>00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;public&#32;const&#32;int&#32;LOCAL_FIELDS&#32;=&#32;&quot;</emphasis>)._(objTypeInfo.localFieldCount)._(<emphasis role="stringliteral">&quot;;&quot;</emphasis>).EOL().EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00270"/>00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;public&#32;const&#32;int&#32;TOTAL_FIELDS&#32;=&#32;&quot;</emphasis>)._(objTypeInfo.totalFieldCount)._(<emphasis role="stringliteral">&quot;;&quot;</emphasis>).EOL().EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00271"/>00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;public&#32;static&#32;PackObjectDatabase.PackObjectInfo&#32;packObjInfo;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00272"/>00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(sbDelegates.ToString());
<anchor xml:id="__generate_type_extension_8cs_source_1l00273"/>00273 
<anchor xml:id="__generate_type_extension_8cs_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;public&#32;static&#32;bool&#32;initialized;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00275"/>00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;public&#32;static&#32;bool&#32;isInitializing;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00276"/>00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00277"/>00277 
<anchor xml:id="__generate_type_extension_8cs_source_1l00279"/>00279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00280"/>00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00281"/>00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;public&#32;static&#32;void&#32;Initialize()&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;{&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00283"/>00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;if&#32;(initialized)&#32;return;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;isInitializing&#32;=&#32;true;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;int&#32;maxBits&#32;=&#32;0;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;var&#32;pObjAttr&#32;=&#32;(typeof(&quot;</emphasis>,&#32;ffulltype,&#32;<emphasis role="stringliteral">&quot;).GetCustomAttributes(typeof(PackObjectAttribute),&#32;false)[0]&#32;as&#32;PackObjectAttribute);&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;var&#32;defaultKeyRate&#32;=&#32;pObjAttr.defaultKeyRate;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00288"/>00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;FastBitMask128&#32;defReadyMask&#32;=&#32;new&#32;FastBitMask128(TOTAL_FIELDS);&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00289"/>00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;int&#32;fieldindex&#32;=&#32;0;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00290"/>00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00291"/>00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(sbInit.ToString());
<anchor xml:id="__generate_type_extension_8cs_source_1l00292"/>00292 
<anchor xml:id="__generate_type_extension_8cs_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;packObjInfo&#32;=&#32;new&#32;PackObjectDatabase.PackObjectInfo(&quot;</emphasis>&#32;+
<anchor xml:id="__generate_type_extension_8cs_source_1l00294"/>00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&quot;,&#32;typeof(&quot;,&#32;packFrameName,&#32;&quot;)&quot;&#32;+</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;defReadyMask,&#32;Pack,&#32;Pack,&#32;Unpack&quot;</emphasis>&#32;+
<anchor xml:id="__generate_type_extension_8cs_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;,&#32;maxBits&quot;</emphasis>)
<anchor xml:id="__generate_type_extension_8cs_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._(<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>,&#32;packFrameName,&#32;<emphasis role="stringliteral">&quot;.Factory&quot;</emphasis>)
<anchor xml:id="__generate_type_extension_8cs_source_1l00298"/>00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._(<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>,&#32;packFrameName,&#32;<emphasis role="stringliteral">&quot;.Factory&quot;</emphasis>)
<anchor xml:id="__generate_type_extension_8cs_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._(<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>,&#32;packFrameName,&#32;<emphasis role="stringliteral">&quot;.Apply&quot;</emphasis>)
<anchor xml:id="__generate_type_extension_8cs_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._(<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>,&#32;packFrameName,&#32;<emphasis role="stringliteral">&quot;.Capture&quot;</emphasis>)
<anchor xml:id="__generate_type_extension_8cs_source_1l00301"/>00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._(<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>,&#32;packFrameName,&#32;<emphasis role="stringliteral">&quot;.Copy&quot;</emphasis>)
<anchor xml:id="__generate_type_extension_8cs_source_1l00302"/>00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._(<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>,&#32;packFrameName,&#32;<emphasis role="stringliteral">&quot;.SnapshotCallback&quot;</emphasis>)
<anchor xml:id="__generate_type_extension_8cs_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._(<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>,&#32;packFrameName,&#32;<emphasis role="stringliteral">&quot;.Interpolate&quot;</emphasis>)
<anchor xml:id="__generate_type_extension_8cs_source_1l00304"/>00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._(<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>,&#32;packFrameName,&#32;<emphasis role="stringliteral">&quot;.Interpolate&quot;</emphasis>)
<anchor xml:id="__generate_type_extension_8cs_source_1l00305"/>00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._(<emphasis role="stringliteral">&quot;,&#32;TOTAL_FIELDS&quot;</emphasis>)
<anchor xml:id="__generate_type_extension_8cs_source_1l00306"/>00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._(<emphasis role="stringliteral">&quot;);&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00307"/>00307 
<anchor xml:id="__generate_type_extension_8cs_source_1l00308"/>00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;PackObjectDatabase.packObjInfoLookup.Add(typeof(&quot;</emphasis>,&#32;fullClass,&#32;<emphasis role="stringliteral">&quot;),&#32;packObjInfo);&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00309"/>00309 
<anchor xml:id="__generate_type_extension_8cs_source_1l00310"/>00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;isInitializing&#32;=&#32;false;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00311"/>00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;initialized&#32;=&#32;true;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00312"/>00312 
<anchor xml:id="__generate_type_extension_8cs_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;}&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00315"/>00315 
<anchor xml:id="__generate_type_extension_8cs_source_1l00317"/>00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00318"/>00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;stdArgsPack&#32;=&#32;<emphasis role="stringliteral">&quot;ref&#32;FastBitMask128&#32;mask,&#32;ref&#32;int&#32;maskOffset,&#32;byte[]&#32;buffer,&#32;ref&#32;int&#32;bitposition,&#32;int&#32;frameId,&#32;SerializationFlags&#32;writeFlags&quot;</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00319"/>00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;stdArgsUPck&#32;=&#32;<emphasis role="stringliteral">&quot;ref&#32;FastBitMask128&#32;mask,&#32;ref&#32;FastBitMask128&#32;isCompleteMask,&#32;ref&#32;int&#32;maskOffset,&#32;byte[]&#32;buffer,&#32;ref&#32;int&#32;bitposition,&#32;int&#32;frameId,&#32;SerializationFlags&#32;writeFlags&quot;</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00320"/>00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;prevFrameCast&#32;=&#32;<emphasis role="stringliteral">&quot;var&#32;prev&#32;=&#32;&quot;</emphasis>&#32;+&#32;PREV_FRM_NAME&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;as&#32;&quot;</emphasis>&#32;+&#32;PACKFRM_PREFIX&#32;+&#32;objTypeName&#32;+&#32;<emphasis role="stringliteral">&quot;;\n&quot;</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00321"/>00321 
<anchor xml:id="__generate_type_extension_8cs_source_1l00322"/>00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isStruct)
<anchor xml:id="__generate_type_extension_8cs_source_1l00323"/>00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00325"/>00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;public&#32;static&#32;SerializationFlags&#32;Pack(IntPtr&#32;obj,&#32;PackFrame&#32;prevFrame,&#32;&quot;</emphasis>&#32;+&#32;stdArgsPack&#32;+&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00326"/>00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;{&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00327"/>00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(ffulltype,&#32;<emphasis role="stringliteral">&quot;&#32;packable;&#32;unsafe&#32;{&#32;packable&#32;=&#32;&quot;</emphasis>,&#32;structCast,&#32;<emphasis role="stringliteral">&quot;obj;&#32;}&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00328"/>00328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(prevFrameCast);
<anchor xml:id="__generate_type_extension_8cs_source_1l00329"/>00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(serializationFlagsLine1);
<anchor xml:id="__generate_type_extension_8cs_source_1l00330"/>00330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(sbPack.ToString());
<anchor xml:id="__generate_type_extension_8cs_source_1l00331"/>00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;return&#32;flags;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00332"/>00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;}&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00333"/>00333 
<anchor xml:id="__generate_type_extension_8cs_source_1l00335"/>00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//sb.___(&quot;public&#32;static&#32;SerializationFlags&#32;Unpack(IntPtr&#32;obj,&#32;PackFrame&#32;prevFrame,&#32;&quot;&#32;+&#32;standardArgs&#32;+&#32;&quot;)&quot;).EOL();</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00336"/>00336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//sb.___(&quot;{&quot;).EOL();</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00337"/>00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//sb.___(&quot;Debug.LogError(\&quot;What&#32;is&#32;using&#32;this??\&quot;);&#32;return&#32;0;&quot;).EOL();</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00338"/>00338 
<anchor xml:id="__generate_type_extension_8cs_source_1l00344"/>00344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//sb.___(&quot;}&quot;).EOL();</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00345"/>00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00346"/>00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00347"/>00347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00349"/>00349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;public&#32;static&#32;SerializationFlags&#32;Pack(ref&#32;System.Object&#32;obj,&#32;PackFrame&#32;prevFrame,&#32;&quot;</emphasis>&#32;+&#32;stdArgsPack&#32;+&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00350"/>00350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;{&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00351"/>00351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;var&#32;packable&#32;=&#32;obj&#32;as&#32;&quot;</emphasis>,&#32;fullClass,&#32;<emphasis role="stringliteral">&quot;;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00352"/>00352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(prevFrameCast);
<anchor xml:id="__generate_type_extension_8cs_source_1l00353"/>00353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(serializationFlagsLine1);
<anchor xml:id="__generate_type_extension_8cs_source_1l00354"/>00354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(sbPack.ToString());
<anchor xml:id="__generate_type_extension_8cs_source_1l00355"/>00355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;return&#32;flags;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00356"/>00356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;}&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00357"/>00357 
<anchor xml:id="__generate_type_extension_8cs_source_1l00359"/>00359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//sb.___(&quot;public&#32;static&#32;SerializationFlags&#32;Unpack(ref&#32;System.Object&#32;obj,&#32;PackFrame&#32;prevFrame,&#32;&quot;&#32;+&#32;standardArgs&#32;+&#32;&quot;)&quot;).EOL();</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00360"/>00360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//sb.___(&quot;{&quot;).EOL();</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00361"/>00361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//sb.___(&quot;Debug.LogError(\&quot;What&#32;is&#32;using&#32;this??\&quot;);&#32;return&#32;0;&quot;).EOL();</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00362"/>00362 
<anchor xml:id="__generate_type_extension_8cs_source_1l00368"/>00368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//sb.___(&quot;}&quot;).EOL();</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00369"/>00369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00370"/>00370 
<anchor xml:id="__generate_type_extension_8cs_source_1l00372"/>00372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;public&#32;static&#32;SerializationFlags&#32;Pack(ref&#32;&quot;</emphasis>,&#32;fullClass,&#32;<emphasis role="stringliteral">&quot;&#32;packable,&#32;PackFrame&#32;prevFrame,&#32;&quot;</emphasis>&#32;+&#32;stdArgsPack&#32;+&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00373"/>00373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;{&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00374"/>00374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(prevFrameCast);
<anchor xml:id="__generate_type_extension_8cs_source_1l00375"/>00375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(serializationFlagsLine1);
<anchor xml:id="__generate_type_extension_8cs_source_1l00376"/>00376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(sbPack.ToString());
<anchor xml:id="__generate_type_extension_8cs_source_1l00377"/>00377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;return&#32;flags;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00378"/>00378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;}&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00379"/>00379 
<anchor xml:id="__generate_type_extension_8cs_source_1l00381"/>00381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//sb.___(&quot;public&#32;static&#32;SerializationFlags&#32;Unpack(ref&#32;&quot;,&#32;fullClass,&#32;&quot;&#32;packable,&#32;PackFrame&#32;prevFrame,&#32;&quot;&#32;+&#32;standardArgs&#32;+&#32;&quot;)&quot;).EOL();</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00382"/>00382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//sb.___(&quot;{&quot;).EOL();</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00383"/>00383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//sb.___(&quot;Debug.LogError(\&quot;What&#32;is&#32;using&#32;this??\&quot;);&#32;return&#32;0;&quot;).EOL();</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00384"/>00384 
<anchor xml:id="__generate_type_extension_8cs_source_1l00389"/>00389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//sb.___(&quot;}&quot;).EOL();</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00390"/>00390 
<anchor xml:id="__generate_type_extension_8cs_source_1l00392"/>00392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;public&#32;static&#32;SerializationFlags&#32;Pack(PackFrame&#32;obj,&#32;PackFrame&#32;prevFrame,&#32;&quot;</emphasis>&#32;+&#32;stdArgsPack&#32;+&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00393"/>00393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;{&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00394"/>00394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;var&#32;packable&#32;=&#32;obj&#32;as&#32;&quot;</emphasis>,&#32;packFrameName,&#32;<emphasis role="stringliteral">&quot;;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00395"/>00395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(prevFrameCast);
<anchor xml:id="__generate_type_extension_8cs_source_1l00396"/>00396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(serializationFlagsLine1);
<anchor xml:id="__generate_type_extension_8cs_source_1l00397"/>00397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(sbPack.ToString());
<anchor xml:id="__generate_type_extension_8cs_source_1l00398"/>00398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;return&#32;flags;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00399"/>00399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;}&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00401"/>00401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;public&#32;static&#32;SerializationFlags&#32;Unpack(PackFrame&#32;obj,&#32;&quot;</emphasis>&#32;+&#32;stdArgsUPck&#32;+&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00402"/>00402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;{&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00403"/>00403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;var&#32;packable&#32;=&#32;obj&#32;as&#32;&quot;</emphasis>,&#32;packFrameName,&#32;<emphasis role="stringliteral">&quot;;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00404"/>00404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//sb.____(prevFrameCast);</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00405"/>00405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(serializationFlagsLine1);
<anchor xml:id="__generate_type_extension_8cs_source_1l00406"/>00406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(sbUnpack.ToString());
<anchor xml:id="__generate_type_extension_8cs_source_1l00407"/>00407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;return&#32;flags;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00408"/>00408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;}&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00409"/>00409 
<anchor xml:id="__generate_type_extension_8cs_source_1l00411"/>00411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;public&#32;static&#32;SerializationFlags&#32;Pack(ref&#32;&quot;</emphasis>,&#32;packFrameName,&#32;<emphasis role="stringliteral">&quot;&#32;packable,&#32;PackFrame&#32;prevFrame,&#32;&quot;</emphasis>&#32;+&#32;stdArgsPack&#32;+&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00412"/>00412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;{&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00413"/>00413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(prevFrameCast);
<anchor xml:id="__generate_type_extension_8cs_source_1l00414"/>00414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(serializationFlagsLine1);
<anchor xml:id="__generate_type_extension_8cs_source_1l00415"/>00415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(sbPack.ToString());
<anchor xml:id="__generate_type_extension_8cs_source_1l00416"/>00416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;return&#32;flags;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00417"/>00417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;}&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00419"/>00419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;public&#32;static&#32;SerializationFlags&#32;Unpack(ref&#32;&quot;</emphasis>,&#32;packFrameName,&#32;<emphasis role="stringliteral">&quot;&#32;packable,&#32;&quot;</emphasis>&#32;+&#32;stdArgsUPck&#32;+&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00420"/>00420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;{&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00421"/>00421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//sb.____(prevFrameCast);</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00422"/>00422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(serializationFlagsLine1);
<anchor xml:id="__generate_type_extension_8cs_source_1l00423"/>00423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(sbUnpack.ToString());
<anchor xml:id="__generate_type_extension_8cs_source_1l00424"/>00424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;return&#32;flags;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00425"/>00425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;}&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00426"/>00426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00427"/>00427 
<anchor xml:id="__generate_type_extension_8cs_source_1l00428"/>00428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.__(<emphasis role="stringliteral">&quot;}&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00429"/>00429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00430"/>00430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(<emphasis role="stringliteral">&quot;}&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00431"/>00431 
<anchor xml:id="__generate_type_extension_8cs_source_1l00432"/>00432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00433"/>00433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(RESTORE_UNUSED2).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00434"/>00434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(RESTORE_UNUSED).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00435"/>00435 
<anchor xml:id="__generate_type_extension_8cs_source_1l00436"/>00436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00437"/>00437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb;
<anchor xml:id="__generate_type_extension_8cs_source_1l00438"/>00438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00439"/>00439 
<anchor xml:id="__generate_type_extension_8cs_source_1l00440"/>00440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;GenerateFields(Type&#32;pObjType)
<anchor xml:id="__generate_type_extension_8cs_source_1l00441"/>00441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00442"/>00442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sbFrame.Length&#32;=&#32;0;
<anchor xml:id="__generate_type_extension_8cs_source_1l00443"/>00443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sbFactory.Length&#32;=&#32;0;
<anchor xml:id="__generate_type_extension_8cs_source_1l00444"/>00444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sbSnapshot.Length&#32;=&#32;0;
<anchor xml:id="__generate_type_extension_8cs_source_1l00445"/>00445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sbCopyToFrame.Length&#32;=&#32;0;
<anchor xml:id="__generate_type_extension_8cs_source_1l00446"/>00446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sbCapture.Length&#32;=&#32;0;
<anchor xml:id="__generate_type_extension_8cs_source_1l00447"/>00447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sbApplyToObj.Length&#32;=&#32;0;
<anchor xml:id="__generate_type_extension_8cs_source_1l00448"/>00448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sbCopyFrameToFrame.Length&#32;=&#32;0;
<anchor xml:id="__generate_type_extension_8cs_source_1l00449"/>00449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sbInterpToObj.Length&#32;=&#32;0;
<anchor xml:id="__generate_type_extension_8cs_source_1l00450"/>00450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sbInterpToFrame.Length&#32;=&#32;0;
<anchor xml:id="__generate_type_extension_8cs_source_1l00451"/>00451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sbDelegates.Length&#32;=&#32;0;
<anchor xml:id="__generate_type_extension_8cs_source_1l00452"/>00452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sbInit.Length&#32;=&#32;0;
<anchor xml:id="__generate_type_extension_8cs_source_1l00453"/>00453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sbPack.Length&#32;=&#32;0;
<anchor xml:id="__generate_type_extension_8cs_source_1l00454"/>00454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sbUnpack.Length&#32;=&#32;0;
<anchor xml:id="__generate_type_extension_8cs_source_1l00455"/>00455 
<anchor xml:id="__generate_type_extension_8cs_source_1l00456"/>00456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hasSnapCallbacks&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00457"/>00457 
<anchor xml:id="__generate_type_extension_8cs_source_1l00458"/>00458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;pObjAttr&#32;=&#32;(pObjType.GetCustomAttributes(typeof(PackObjectAttribute),&#32;<emphasis role="keyword">false</emphasis>)[0]&#32;as&#32;PackObjectAttribute);
<anchor xml:id="__generate_type_extension_8cs_source_1l00459"/>00459 
<anchor xml:id="__generate_type_extension_8cs_source_1l00460"/>00460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;defaultInclusion&#32;=&#32;pObjAttr.defaultInclusion;
<anchor xml:id="__generate_type_extension_8cs_source_1l00461"/>00461 
<anchor xml:id="__generate_type_extension_8cs_source_1l00462"/>00462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;fields&#32;=&#32;pObjType.GetFields(BindingFlags.Public&#32;|&#32;BindingFlags.Instance&#32;|&#32;BindingFlags.NonPublic);
<anchor xml:id="__generate_type_extension_8cs_source_1l00463"/>00463 
<anchor xml:id="__generate_type_extension_8cs_source_1l00464"/>00464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0,&#32;cnt&#32;=&#32;fields.Length;&#32;i&#32;&lt;&#32;cnt;&#32;++i)
<anchor xml:id="__generate_type_extension_8cs_source_1l00465"/>00465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00466"/>00466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;fieldinfo&#32;=&#32;fields[i];
<anchor xml:id="__generate_type_extension_8cs_source_1l00467"/>00467 
<anchor xml:id="__generate_type_extension_8cs_source_1l00468"/>00468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;fname&#32;=&#32;fieldinfo.Name;
<anchor xml:id="__generate_type_extension_8cs_source_1l00469"/>00469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;objNamespace&#32;=&#32;pObjType.Namespace;
<anchor xml:id="__generate_type_extension_8cs_source_1l00470"/>00470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;objTypeName&#32;=&#32;(objNamespace&#32;!=&#32;<emphasis role="keyword">null</emphasis>&#32;&amp;&amp;&#32;objNamespace&#32;!=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)&#32;?&#32;(pObjType.Namespace&#32;+&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>&#32;+&#32;pObjType.Name)&#32;:&#32;pObjType.Name;
<anchor xml:id="__generate_type_extension_8cs_source_1l00471"/>00471 
<anchor xml:id="__generate_type_extension_8cs_source_1l00472"/>00472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Type&#32;ftype&#32;=&#32;fieldinfo.FieldType;
<anchor xml:id="__generate_type_extension_8cs_source_1l00473"/>00473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;ftypename&#32;=&#32;fieldinfo.FieldType.Name;
<anchor xml:id="__generate_type_extension_8cs_source_1l00474"/>00474 
<anchor xml:id="__generate_type_extension_8cs_source_1l00475"/>00475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;ffulltype;
<anchor xml:id="__generate_type_extension_8cs_source_1l00476"/>00476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;genericarg;
<anchor xml:id="__generate_type_extension_8cs_source_1l00477"/>00477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;primitive;
<anchor xml:id="__generate_type_extension_8cs_source_1l00478"/>00478 
<anchor xml:id="__generate_type_extension_8cs_source_1l00479"/>00479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ftype.IsGenericType)
<anchor xml:id="__generate_type_extension_8cs_source_1l00480"/>00480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00481"/>00481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;primitive&#32;=&#32;ftype.GetGenericArguments()[0].ToString();
<anchor xml:id="__generate_type_extension_8cs_source_1l00482"/>00482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ffulltype&#32;=&#32;ftype.FullName.ToString().Replace(<emphasis role="stringliteral">&quot;`1[&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&lt;&quot;</emphasis>).Replace(<emphasis role="stringliteral">&quot;]&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&gt;&quot;</emphasis>).Replace(<emphasis role="stringliteral">&quot;+&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00483"/>00483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;genericarg&#32;=&#32;<emphasis role="stringliteral">&quot;&lt;&quot;</emphasis>&#32;+&#32;primitive&#32;+&#32;<emphasis role="stringliteral">&quot;&gt;&quot;</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00484"/>00484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ftypename&#32;=&#32;fieldinfo.FieldType.Name.Replace(<emphasis role="stringliteral">&quot;`1&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00485"/>00485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00486"/>00486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00487"/>00487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00488"/>00488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ffulltype&#32;=&#32;ftype.FullName.Replace(<emphasis role="stringliteral">&quot;+&quot;</emphasis>,<emphasis role="stringliteral">&quot;.&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00489"/>00489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ftypename&#32;=&#32;fieldinfo.FieldType.Name;
<anchor xml:id="__generate_type_extension_8cs_source_1l00490"/>00490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;primitive&#32;=&#32;ffulltype;
<anchor xml:id="__generate_type_extension_8cs_source_1l00491"/>00491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;genericarg&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00492"/>00492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00493"/>00493 
<anchor xml:id="__generate_type_extension_8cs_source_1l00494"/>00494 
<anchor xml:id="__generate_type_extension_8cs_source_1l00496"/>00496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;packAttrs&#32;=&#32;fieldinfo.GetCustomAttributes(typeof(SyncVarBaseAttribute),&#32;<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00497"/>00497 
<anchor xml:id="__generate_type_extension_8cs_source_1l00498"/>00498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isExplicitInclusion&#32;=&#32;defaultInclusion&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1a535ded54d55f8097015f0b0417493c38">DefaultPackInclusion</link>.Explicit;
<anchor xml:id="__generate_type_extension_8cs_source_1l00499"/>00499 
<anchor xml:id="__generate_type_extension_8cs_source_1l00500"/>00500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isExplicitInclusion&#32;&amp;&amp;&#32;packAttrs.Length&#32;==&#32;0)
<anchor xml:id="__generate_type_extension_8cs_source_1l00501"/>00501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00502"/>00502 
<anchor xml:id="__generate_type_extension_8cs_source_1l00503"/>00503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SyncVarBaseAttribute&#32;packAttr;&#32;<emphasis role="comment">//&#32;=&#32;(objType.GetCustomAttributes(typeof(SyncVarBaseAttribute),&#32;false)[0]&#32;as&#32;SyncVarBaseAttribute);</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00504"/>00504 
<anchor xml:id="__generate_type_extension_8cs_source_1l00505"/>00505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ftype.IsValueType&#32;&amp;&amp;&#32;!ftype.IsUnManaged())
<anchor xml:id="__generate_type_extension_8cs_source_1l00506"/>00506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00507"/>00507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogWarning(ftypename&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;is&#32;a&#32;PackObject,&#32;but&#32;cannot&#32;be&#32;packed&#32;because&#32;it&#32;is&#32;a&#32;managed&#32;type.&#32;Structs&#32;cannot&#32;contain&#32;references&#32;or&#32;any&#32;managed&#32;types&#32;to&#32;be&#32;packable.&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00508"/>00508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00509"/>00509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00510"/>00510 
<anchor xml:id="__generate_type_extension_8cs_source_1l00511"/>00511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isPublic&#32;=&#32;fieldinfo.IsPublic;
<anchor xml:id="__generate_type_extension_8cs_source_1l00512"/>00512 
<anchor xml:id="__generate_type_extension_8cs_source_1l00513"/>00513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;generatePackAttribute;
<anchor xml:id="__generate_type_extension_8cs_source_1l00515"/>00515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(packAttrs.Length&#32;==&#32;0)
<anchor xml:id="__generate_type_extension_8cs_source_1l00516"/>00516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00517"/>00517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Only&#32;add&#32;attributes&#32;automatically&#32;if&#32;field&#32;is&#32;public.&#32;Otherwise&#32;including&#32;all&#32;public&#32;fields</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00518"/>00518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Will&#32;find&#32;all&#32;kinds&#32;of&#32;MonoB&#32;internals.</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00519"/>00519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!isPublic)
<anchor xml:id="__generate_type_extension_8cs_source_1l00520"/>00520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00521"/>00521 
<anchor xml:id="__generate_type_extension_8cs_source_1l00522"/>00522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;packAttr&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;SyncVarAttribute();
<anchor xml:id="__generate_type_extension_8cs_source_1l00523"/>00523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;generatePackAttribute&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00524"/>00524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00525"/>00525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00526"/>00526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00527"/>00527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;make&#32;this&#32;a&#32;loop&#32;in&#32;case&#32;other&#32;attributes&#32;are&#32;also&#32;on&#32;this&#32;field.</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00528"/>00528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;packAttr&#32;=&#32;packAttrs[0]&#32;as&#32;SyncVarBaseAttribute;
<anchor xml:id="__generate_type_extension_8cs_source_1l00529"/>00529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;generatePackAttribute&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00530"/>00530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00531"/>00531 
<anchor xml:id="__generate_type_extension_8cs_source_1l00532"/>00532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;typeIsSupported&#32;=&#32;TypeIsHandled(ftype,&#32;packAttr);
<anchor xml:id="__generate_type_extension_8cs_source_1l00533"/>00533 
<anchor xml:id="__generate_type_extension_8cs_source_1l00534"/>00534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;attrname&#32;=&#32;packAttr.GetType().Name;
<anchor xml:id="__generate_type_extension_8cs_source_1l00535"/>00535 
<anchor xml:id="__generate_type_extension_8cs_source_1l00536"/>00536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(typeIsSupported&#32;&amp;&amp;&#32;!isPublic)
<anchor xml:id="__generate_type_extension_8cs_source_1l00537"/>00537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00538"/>00538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogWarning(<emphasis role="stringliteral">&quot;&lt;b&gt;[&quot;</emphasis>&#32;+&#32;attrname.Replace(<emphasis role="stringliteral">&quot;Attribute&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)&#32;+&#32;<emphasis role="stringliteral">&quot;]&lt;/b&gt;&#32;on&#32;field&#32;&lt;b&gt;&quot;</emphasis>&#32;+&#32;ftypename&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;+&#32;fname&#32;+&#32;<emphasis role="stringliteral">&quot;&lt;/b&gt;&#32;of&#32;&lt;b&gt;&quot;</emphasis>&#32;+&#32;objTypeName&#32;+&#32;<emphasis role="stringliteral">&quot;&lt;/b&gt;&#32;supports&#32;type,&#32;but&#32;field&#32;is&#32;not&#32;public.&#32;Change&#32;field&#32;to&#32;public&#32;to&#32;include&#32;in&#32;packing.&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00539"/>00539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00540"/>00540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00541"/>00541 
<anchor xml:id="__generate_type_extension_8cs_source_1l00542"/>00542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;nestedPackObjAttrs&#32;=&#32;ftype.GetCustomAttributes(typeof(PackObjectAttribute),&#32;<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00543"/>00543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PackObjectAttribute&#32;nestedPackObjAttr&#32;=&#32;nestedPackObjAttrs.Length&#32;==&#32;0&#32;?&#32;null&#32;:&#32;(nestedPackObjAttrs[0]&#32;as&#32;PackObjectAttribute);
<anchor xml:id="__generate_type_extension_8cs_source_1l00544"/>00544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isNestedPackObj&#32;=&#32;nestedPackObjAttr&#32;!=&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00545"/>00545 
<anchor xml:id="__generate_type_extension_8cs_source_1l00546"/>00546 <emphasis role="preprocessor">#if&#32;UNITY_2018_1_OR_NEWER</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00547"/>00547 
<anchor xml:id="__generate_type_extension_8cs_source_1l00548"/>00548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNestedPackObj&#32;&amp;&amp;&#32;!UnityEditor.PlayerSettings.allowUnsafeCode&#32;&amp;&amp;&#32;ftype.IsValueType)
<anchor xml:id="__generate_type_extension_8cs_source_1l00549"/>00549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00550"/>00550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogWarning(<emphasis role="stringliteral">&quot;Cannot&#32;use&#32;&quot;</emphasis>&#32;+&#32;typeof(PackObjectAttribute).Name&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;on&#32;struct/value&#32;types&#32;unless&#32;PlayerSettings.allowUnsafeCode&#32;==&#32;true.&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00551"/>00551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00552"/>00552 
<anchor xml:id="__generate_type_extension_8cs_source_1l00553"/>00553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00554"/>00554 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00555"/>00555 
<anchor xml:id="__generate_type_extension_8cs_source_1l00557"/>00557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!typeIsSupported)
<anchor xml:id="__generate_type_extension_8cs_source_1l00558"/>00558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00559"/>00559 
<anchor xml:id="__generate_type_extension_8cs_source_1l00561"/>00561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!isNestedPackObj)
<anchor xml:id="__generate_type_extension_8cs_source_1l00562"/>00562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00564"/>00564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!generatePackAttribute)
<anchor xml:id="__generate_type_extension_8cs_source_1l00565"/>00565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00566"/>00566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogWarning(<emphasis role="stringliteral">&quot;&lt;b&gt;[&quot;</emphasis>&#32;+&#32;attrname.Replace(<emphasis role="stringliteral">&quot;Attribute&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)&#32;+&#32;<emphasis role="stringliteral">&quot;]&lt;/b&gt;&#32;on&#32;field&#32;&lt;b&gt;&quot;</emphasis>&#32;+&#32;ftypename&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;+&#32;fname&#32;+&#32;<emphasis role="stringliteral">&quot;&lt;/b&gt;&#32;of&#32;&lt;b&gt;&quot;</emphasis>&#32;+&#32;objTypeName&#32;+&#32;fname&#32;+&#32;<emphasis role="stringliteral">&quot;&lt;/b&gt;&#32;does&#32;not&#32;support&#32;type&#32;&lt;b&gt;&quot;</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00567"/>00567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;ftypename&#32;+&#32;<emphasis role="stringliteral">&quot;&lt;/b&gt;.&#32;Will&#32;be&#32;ignored.&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00568"/>00568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00569"/>00569 
<anchor xml:id="__generate_type_extension_8cs_source_1l00570"/>00570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00571"/>00571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00572"/>00572 
<anchor xml:id="__generate_type_extension_8cs_source_1l00573"/>00573 
<anchor xml:id="__generate_type_extension_8cs_source_1l00575"/>00575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CheckForNestedLoop(pObjType,&#32;ftype))
<anchor xml:id="__generate_type_extension_8cs_source_1l00576"/>00576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00577"/>00577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogWarning(<emphasis role="stringliteral">&quot;Field&#32;&lt;b&gt;&quot;</emphasis>&#32;+&#32;ftypename&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;+&#32;fname&#32;+&#32;<emphasis role="stringliteral">&quot;&lt;/b&gt;&#32;of&#32;&lt;b&gt;&quot;</emphasis>&#32;+&#32;objTypeName&#32;+&#32;<emphasis role="stringliteral">&quot;&lt;/b&gt;&#32;contains&#32;an&#32;infinite&#32;nested&#32;loop&#32;with&#32;field&#32;&lt;b&gt;&quot;</emphasis>&#32;+&#32;&#32;<emphasis role="stringliteral">&quot;&lt;/b&gt;.&#32;Will&#32;not&#32;be&#32;included&#32;in&#32;serialization.&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00578"/>00578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00579"/>00579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00580"/>00580 
<anchor xml:id="__generate_type_extension_8cs_source_1l00581"/>00581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isNestedPackObj&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00582"/>00582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00583"/>00583 
<anchor xml:id="__generate_type_extension_8cs_source_1l00584"/>00584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isEnum&#32;=&#32;fieldinfo.FieldType.IsEnum;
<anchor xml:id="__generate_type_extension_8cs_source_1l00585"/>00585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;enumUnderType&#32;=&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00586"/>00586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;enumType&#32;=&#32;<emphasis role="keyword">null</emphasis>;&#32;;
<anchor xml:id="__generate_type_extension_8cs_source_1l00587"/>00587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isEnum)
<anchor xml:id="__generate_type_extension_8cs_source_1l00588"/>00588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00589"/>00589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enumUnderType&#32;=&#32;<emphasis role="stringliteral">&quot;(&quot;</emphasis>&#32;+&#32;System.Enum.GetUnderlyingType(fieldinfo.FieldType).Name&#32;+&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00590"/>00590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enumType&#32;=&#32;<emphasis role="stringliteral">&quot;(&quot;</emphasis>&#32;+&#32;ffulltype&#32;+&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00591"/>00591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00592"/>00592 
<anchor xml:id="__generate_type_extension_8cs_source_1l00593"/>00593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Generate_FieldFrame(fieldinfo,&#32;sbFrame,&#32;fname,&#32;ftypename,&#32;ffulltype,&#32;isNestedPackObj,&#32;packAttr);
<anchor xml:id="__generate_type_extension_8cs_source_1l00594"/>00594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Generate_Factory(fieldinfo,&#32;sbFactory,&#32;objTypeName,&#32;fname,&#32;ftypename,&#32;ffulltype,&#32;isNestedPackObj,&#32;pObjType,&#32;packAttr);
<anchor xml:id="__generate_type_extension_8cs_source_1l00595"/>00595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Generate_Snapshot(fieldinfo,&#32;sbSnapshot,&#32;objTypeName,&#32;fname,&#32;ftypename,&#32;ffulltype,&#32;isNestedPackObj,&#32;pObjType,&#32;packAttr);
<anchor xml:id="__generate_type_extension_8cs_source_1l00596"/>00596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Generate_Capture(fieldinfo,&#32;sbCapture,&#32;objTypeName,&#32;fname,&#32;ftypename,&#32;ffulltype,&#32;isNestedPackObj,&#32;pObjType,&#32;pObjAttr,&#32;packAttr);
<anchor xml:id="__generate_type_extension_8cs_source_1l00597"/>00597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Generate_CopyTo(fieldinfo,&#32;sbCopyToFrame,&#32;objTypeName,&#32;fname,&#32;ftypename,&#32;ffulltype,&#32;isNestedPackObj,&#32;pObjType,&#32;packAttr);
<anchor xml:id="__generate_type_extension_8cs_source_1l00598"/>00598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Generate_ApplyToObj(fieldinfo,&#32;sbApplyToObj,&#32;objTypeName,&#32;fname,&#32;ftypename,&#32;ffulltype,&#32;isNestedPackObj,&#32;pObjType,&#32;pObjAttr,&#32;packAttr);
<anchor xml:id="__generate_type_extension_8cs_source_1l00599"/>00599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Generate_CopyFrameToFrame(fieldinfo,&#32;sbCopyFrameToFrame,&#32;objTypeName,&#32;fname,&#32;ftypename,&#32;ffulltype,&#32;isNestedPackObj,&#32;pObjType,&#32;packAttr);
<anchor xml:id="__generate_type_extension_8cs_source_1l00600"/>00600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Generate_InterpToObj(fieldinfo,&#32;sbInterpToObj,&#32;objTypeName,&#32;fname,&#32;ftypename,&#32;ffulltype,&#32;isNestedPackObj,&#32;pObjType,&#32;packAttr);
<anchor xml:id="__generate_type_extension_8cs_source_1l00601"/>00601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Generate_InterpToFrame(fieldinfo,&#32;sbInterpToFrame,&#32;objTypeName,&#32;fname,&#32;ftypename,&#32;ffulltype,&#32;isNestedPackObj,&#32;pObjType,&#32;packAttr);
<anchor xml:id="__generate_type_extension_8cs_source_1l00602"/>00602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Generate_FieldDelegates(fieldinfo,&#32;sbDelegates,&#32;fname,&#32;ftypename,&#32;genericarg,&#32;isNestedPackObj);
<anchor xml:id="__generate_type_extension_8cs_source_1l00603"/>00603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Generate_FieldInit(fieldinfo,&#32;sbInit,&#32;fname,&#32;ftypename,&#32;ffulltype,&#32;genericarg,&#32;primitive,&#32;isNestedPackObj,&#32;generatePackAttribute,&#32;packAttr);
<anchor xml:id="__generate_type_extension_8cs_source_1l00604"/>00604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Generate_FieldPack(fieldinfo,&#32;sbPack,&#32;fname,&#32;ftypename,&#32;ffulltype,&#32;isNestedPackObj,&#32;enumUnderType,&#32;enumType);
<anchor xml:id="__generate_type_extension_8cs_source_1l00605"/>00605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Generate_FieldUnpack(fieldinfo,&#32;sbUnpack,&#32;fname,&#32;ftypename,&#32;ffulltype,&#32;isNestedPackObj,&#32;enumUnderType,&#32;enumType,&#32;packAttr);
<anchor xml:id="__generate_type_extension_8cs_source_1l00606"/>00606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00607"/>00607 
<anchor xml:id="__generate_type_extension_8cs_source_1l00608"/>00608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00609"/>00609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00610"/>00610 
<anchor xml:id="__generate_type_extension_8cs_source_1l00611"/>00611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Generate_Factory(FieldInfo&#32;fInfo,&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;objName,&#32;<emphasis role="keywordtype">string</emphasis>&#32;fname,&#32;<emphasis role="keywordtype">string</emphasis>&#32;ftypename,&#32;<emphasis role="keywordtype">string</emphasis>&#32;ffulltype,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isNest,&#32;Type&#32;pObjType,&#32;SyncVarBaseAttribute&#32;fAttr)
<anchor xml:id="__generate_type_extension_8cs_source_1l00612"/>00612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00613"/>00613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;t&#32;=&#32;pObjType.IsValueType&#32;?&#32;<emphasis role="stringliteral">&quot;(*(&quot;</emphasis>&#32;+&#32;objName&#32;+&#32;<emphasis role="stringliteral">&quot;*)trg)&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;t&quot;</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00614"/>00614 
<anchor xml:id="__generate_type_extension_8cs_source_1l00616"/>00616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fInfo.FieldType.IsGenericType&#32;&amp;&amp;&#32;fInfo.FieldType.GetGenericTypeDefinition().IsAssignableFrom(typeof(List&lt;&gt;)))
<anchor xml:id="__generate_type_extension_8cs_source_1l00617"/>00617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(<emphasis role="stringliteral">&quot;frame.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;.AddRange(&quot;</emphasis>,&#32;t,<emphasis role="stringliteral">&quot;.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;);&#32;&quot;</emphasis>)._(<emphasis role="stringliteral">&quot;frame.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;_mask&#32;=&#32;new&#32;BitArray(frame.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;.Count);&#32;&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00618"/>00618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00619"/>00619 
<anchor xml:id="__generate_type_extension_8cs_source_1l00620"/>00620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Generate_FieldFrame(FieldInfo&#32;fInfo,&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;fname,&#32;<emphasis role="keywordtype">string</emphasis>&#32;ftypename,&#32;<emphasis role="keywordtype">string</emphasis>&#32;ffulltype,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isNest,&#32;SyncVarBaseAttribute&#32;fAttr)
<anchor xml:id="__generate_type_extension_8cs_source_1l00621"/>00621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00622"/>00622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNest)
<anchor xml:id="__generate_type_extension_8cs_source_1l00623"/>00623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;public&#32;PackFrame_&quot;</emphasis>,&#32;ftypename,&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;&#32;=&#32;new&#32;PackFrame_&quot;</emphasis>,&#32;ftypename,&#32;<emphasis role="stringliteral">&quot;();&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00624"/>00624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00625"/>00625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00626"/>00626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;fielddeclare&#32;=&#32;fAttr.GetFieldDeclareCodeGen(fInfo.FieldType,&#32;ffulltype,&#32;fname);
<anchor xml:id="__generate_type_extension_8cs_source_1l00627"/>00627 
<anchor xml:id="__generate_type_extension_8cs_source_1l00628"/>00628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(fielddeclare).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00629"/>00629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//sb.___(&quot;public&#32;&quot;,&#32;ffulltype,&#32;&quot;&#32;&quot;,&#32;fname,&#32;&quot;;&quot;).EOL();</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00630"/>00630 
<anchor xml:id="__generate_type_extension_8cs_source_1l00631"/>00631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00632"/>00632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00633"/>00633 
<anchor xml:id="__generate_type_extension_8cs_source_1l00634"/>00634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;IsSyncAsTrigger(PackObjectAttribute&#32;pObjAttr,&#32;SyncVarBaseAttribute&#32;fAttr)
<anchor xml:id="__generate_type_extension_8cs_source_1l00635"/>00635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00636"/>00636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;syncAs&#32;=&#32;fAttr.syncAs;
<anchor xml:id="__generate_type_extension_8cs_source_1l00637"/>00637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00638"/>00638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;syncAs&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1a316c25ff520f46923c1acc8c4ab4096b">SyncAs</link>.Auto&#32;?&#32;(pObjAttr.syncAs&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1a316c25ff520f46923c1acc8c4ab4096b">SyncAs</link>.Auto&#32;?&#32;false&#32;:&#32;pObjAttr.syncAs&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1a316c25ff520f46923c1acc8c4ab4096b">SyncAs</link>.Trigger)&#32;:
<anchor xml:id="__generate_type_extension_8cs_source_1l00639"/>00639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;syncAs&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1a316c25ff520f46923c1acc8c4ab4096b">SyncAs</link>.Trigger&#32;?&#32;<emphasis role="keyword">true</emphasis>&#32;:&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00640"/>00640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00641"/>00641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Generate_Capture(FieldInfo&#32;fInfo,&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;objName,&#32;<emphasis role="keywordtype">string</emphasis>&#32;fname,&#32;<emphasis role="keywordtype">string</emphasis>&#32;ftypename,&#32;<emphasis role="keywordtype">string</emphasis>&#32;ffulltype,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isNest,&#32;Type&#32;pObjType,&#32;PackObjectAttribute&#32;pObjAttr,&#32;SyncVarBaseAttribute&#32;fAttr)
<anchor xml:id="__generate_type_extension_8cs_source_1l00642"/>00642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00643"/>00643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;s&#32;=&#32;pObjType.IsValueType&#32;?&#32;<emphasis role="stringliteral">&quot;(*(&quot;</emphasis>&#32;+&#32;objName&#32;+&#32;<emphasis role="stringliteral">&quot;*)src)&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;s&quot;</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00644"/>00644 
<anchor xml:id="__generate_type_extension_8cs_source_1l00645"/>00645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isTrigger&#32;=&#32;IsSyncAsTrigger(pObjAttr,&#32;fAttr);
<anchor xml:id="__generate_type_extension_8cs_source_1l00646"/>00646 
<anchor xml:id="__generate_type_extension_8cs_source_1l00647"/>00647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;triggerReset&#32;=&#32;(isTrigger)&#32;?&#32;s&#32;+&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>&#32;+&#32;fname&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;=&#32;new&#32;&quot;</emphasis>&#32;+&#32;ffulltype&#32;+&#32;<emphasis role="stringliteral">&quot;();&#32;&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;;
<anchor xml:id="__generate_type_extension_8cs_source_1l00648"/>00648 
<anchor xml:id="__generate_type_extension_8cs_source_1l00649"/>00649 
<anchor xml:id="__generate_type_extension_8cs_source_1l00650"/>00650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNest)
<anchor xml:id="__generate_type_extension_8cs_source_1l00651"/>00651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00652"/>00652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fInfo.FieldType.IsValueType)
<anchor xml:id="__generate_type_extension_8cs_source_1l00653"/>00653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;unsafe&#32;{&#32;fixed&#32;(&quot;</emphasis>,&#32;ffulltype,&#32;<emphasis role="stringliteral">&quot;*&#32;p&#32;=&#32;&amp;s.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;)&#32;PackFrame_&quot;</emphasis>,&#32;ftypename,&#32;<emphasis role="stringliteral">&quot;.Capture((IntPtr)p,&#32;t.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;);&#32;}&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00654"/>00654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00655"/>00655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;PackFrame_&quot;</emphasis>,&#32;ftypename,&#32;<emphasis role="stringliteral">&quot;.Capture(&quot;</emphasis>,&#32;s,&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;,&#32;t.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;);&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00656"/>00656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00657"/>00657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00658"/>00658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00659"/>00659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;captureField&#32;=&#32;fAttr.GetCaptureCodeGen(fInfo.FieldType,&#32;fname,&#32;s,&#32;<emphasis role="stringliteral">&quot;t&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00660"/>00660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pObjType.IsValueType)
<anchor xml:id="__generate_type_extension_8cs_source_1l00661"/>00661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;unsafe&#32;{&#32;&quot;</emphasis>,&#32;captureField,&#32;triggerReset,<emphasis role="stringliteral">&quot;&#32;}&#32;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00662"/>00662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00663"/>00663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(captureField,&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>,&#32;triggerReset).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00664"/>00664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//sb.____(&quot;t.&quot;,&#32;fname,&#32;&quot;&#32;=&#32;&quot;,&#32;s,&#32;&quot;.&quot;,&#32;fname,&#32;&quot;;&quot;).EOL();</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00665"/>00665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00666"/>00666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00667"/>00667 
<anchor xml:id="__generate_type_extension_8cs_source_1l00668"/>00668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Generate_CopyTo(FieldInfo&#32;fInfo,&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;objName,&#32;<emphasis role="keywordtype">string</emphasis>&#32;fname,&#32;<emphasis role="keywordtype">string</emphasis>&#32;ftypename,&#32;<emphasis role="keywordtype">string</emphasis>&#32;ffulltype,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isNest,&#32;Type&#32;pObjType,&#32;SyncVarBaseAttribute&#32;fAttr)
<anchor xml:id="__generate_type_extension_8cs_source_1l00669"/>00669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00670"/>00670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;s&#32;=&#32;pObjType.IsValueType&#32;?&#32;<emphasis role="stringliteral">&quot;(*(&quot;</emphasis>&#32;+&#32;objName&#32;+&#32;<emphasis role="stringliteral">&quot;*)src)&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;s&quot;</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00671"/>00671 
<anchor xml:id="__generate_type_extension_8cs_source_1l00672"/>00672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNest)
<anchor xml:id="__generate_type_extension_8cs_source_1l00673"/>00673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00674"/>00674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fInfo.FieldType.IsValueType)
<anchor xml:id="__generate_type_extension_8cs_source_1l00675"/>00675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;unsafe&#32;{&#32;fixed&#32;(&quot;</emphasis>,&#32;ffulltype,&#32;<emphasis role="stringliteral">&quot;*&#32;p&#32;=&#32;&amp;s.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;)&#32;PackFrame_&quot;</emphasis>,&#32;ftypename,&#32;<emphasis role="stringliteral">&quot;.Copy((IntPtr)p,&#32;t.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;);&#32;}&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00676"/>00676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00677"/>00677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;PackFrame_&quot;</emphasis>,&#32;ftypename,&#32;<emphasis role="stringliteral">&quot;.Copy(&quot;</emphasis>,&#32;s,&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;,&#32;t.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;);&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00678"/>00678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00679"/>00679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00680"/>00680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00681"/>00681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;copyfield&#32;=&#32;fAttr.GetCopyCodeGen(fInfo.FieldType,&#32;fname,&#32;s,&#32;<emphasis role="stringliteral">&quot;t&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00682"/>00682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pObjType.IsValueType)
<anchor xml:id="__generate_type_extension_8cs_source_1l00683"/>00683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;unsafe&#32;{&#32;&quot;</emphasis>,copyfield,&#32;<emphasis role="stringliteral">&quot;&#32;}&#32;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00684"/>00684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00685"/>00685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(copyfield).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00686"/>00686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//sb.____(&quot;t.&quot;,&#32;fname,&#32;&quot;&#32;=&#32;&quot;,&#32;s,&#32;&quot;.&quot;,&#32;fname,&#32;&quot;;&quot;).EOL();</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00687"/>00687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00688"/>00688 
<anchor xml:id="__generate_type_extension_8cs_source_1l00689"/>00689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00690"/>00690 
<anchor xml:id="__generate_type_extension_8cs_source_1l00692"/>00692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Generate_Snapshot(FieldInfo&#32;fInfo,&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;objName,&#32;<emphasis role="keywordtype">string</emphasis>&#32;fname,&#32;<emphasis role="keywordtype">string</emphasis>&#32;ftypename,&#32;<emphasis role="keywordtype">string</emphasis>&#32;ffulltype,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;inNest,&#32;Type&#32;pObjType,&#32;SyncVarBaseAttribute&#32;fAttr)
<anchor xml:id="__generate_type_extension_8cs_source_1l00693"/>00693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00694"/>00694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;t&#32;=&#32;pObjType.IsValueType&#32;?&#32;<emphasis role="stringliteral">&quot;(*(&quot;</emphasis>&#32;+&#32;objName&#32;+&#32;<emphasis role="stringliteral">&quot;*)trg)&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;t&quot;</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00695"/>00695 
<anchor xml:id="__generate_type_extension_8cs_source_1l00696"/>00696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(inNest)
<anchor xml:id="__generate_type_extension_8cs_source_1l00697"/>00697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00698"/>00698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fInfo.FieldType.IsValueType)
<anchor xml:id="__generate_type_extension_8cs_source_1l00699"/>00699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;unsafe&#32;{&#32;fixed&#32;(&quot;</emphasis>,&#32;ffulltype,&#32;<emphasis role="stringliteral">&quot;*&#32;p&#32;=&#32;&amp;t.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;)&#32;PackFrame_&quot;</emphasis>,&#32;ftypename)._(<emphasis role="stringliteral">&quot;.SnapshotCallback(snap.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;,&#32;targ.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;,&#32;(IntPtr)p,&#32;ref&#32;readyMask,&#32;ref&#32;maskOffset);&#32;}&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00700"/>00700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00701"/>00701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;PackFrame_&quot;</emphasis>,&#32;ftypename)._(<emphasis role="stringliteral">&quot;.SnapshotCallback(snap.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;,&#32;targ.&quot;</emphasis>,&#32;fname)._(<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>,&#32;t,&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;,&#32;ref&#32;readyMask,&#32;ref&#32;maskOffset);&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00702"/>00702 
<anchor xml:id="__generate_type_extension_8cs_source_1l00703"/>00703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hasSnapCallbacks&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00704"/>00704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00705"/>00705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00706"/>00706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00707"/>00707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;callback&#32;=&#32;fAttr.snapshotCallback;
<anchor xml:id="__generate_type_extension_8cs_source_1l00708"/>00708 
<anchor xml:id="__generate_type_extension_8cs_source_1l00710"/>00710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MethodInfo&#32;callbackInfo&#32;=&#32;fInfo.HashCallback(fAttr.snapshotCallback,&#32;<emphasis role="keyword">null</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00711"/>00711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(callbackInfo&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;&#32;<emphasis role="comment">//&#32;TryGetCallbackInfo(fInfo,&#32;callback,&#32;objType,&#32;out&#32;callbackInfo))</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00712"/>00712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00713"/>00713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hasSnapCallbacks&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00714"/>00714 
<anchor xml:id="__generate_type_extension_8cs_source_1l00715"/>00715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pObjType.IsValueType)
<anchor xml:id="__generate_type_extension_8cs_source_1l00716"/>00716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;if(readyMask[maskOffset])&#32;unsafe&#32;{&#32;&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00717"/>00717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00718"/>00718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;if(readyMask[maskOffset])&#32;{&#32;&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00719"/>00719 
<anchor xml:id="__generate_type_extension_8cs_source_1l00720"/>00720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;gens&#32;=&#32;callbackInfo.ContainsGenericParameters;
<anchor xml:id="__generate_type_extension_8cs_source_1l00721"/>00721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(<emphasis role="stringliteral">&quot;var&#32;snapval&#32;=&#32;snapmask[maskOffset]&#32;?&#32;snap.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;&#32;:&#32;&quot;</emphasis>,&#32;t,&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;;&#32;&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00722"/>00722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(<emphasis role="stringliteral">&quot;var&#32;targval&#32;=&#32;targmask[maskOffset]&#32;?&#32;targ.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;&#32;:&#32;snapval;&#32;&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00723"/>00723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(t,&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>,&#32;callback,&#32;<emphasis role="stringliteral">&quot;(snapval,&#32;&#32;targval);&#32;&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00724"/>00724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(<emphasis role="stringliteral">&quot;}&#32;maskOffset++;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00725"/>00725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00726"/>00726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00727"/>00727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;maskOffset++;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00728"/>00728 
<anchor xml:id="__generate_type_extension_8cs_source_1l00729"/>00729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00730"/>00730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00732"/>00732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Generate_ApplyToObj(FieldInfo&#32;fInfo,&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;objName,&#32;<emphasis role="keywordtype">string</emphasis>&#32;fname,&#32;<emphasis role="keywordtype">string</emphasis>&#32;ftypename,&#32;<emphasis role="keywordtype">string</emphasis>&#32;ffulltype,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;inNest,&#32;Type&#32;pObjType,&#32;PackObjectAttribute&#32;pObjAttr,&#32;SyncVarBaseAttribute&#32;fAttr)
<anchor xml:id="__generate_type_extension_8cs_source_1l00733"/>00733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00734"/>00734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;t&#32;=&#32;pObjType.IsValueType&#32;?&#32;<emphasis role="stringliteral">&quot;(*(&quot;</emphasis>&#32;+&#32;objName&#32;+&#32;<emphasis role="stringliteral">&quot;*)trg)&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;t&quot;</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00735"/>00735 
<anchor xml:id="__generate_type_extension_8cs_source_1l00736"/>00736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(inNest)
<anchor xml:id="__generate_type_extension_8cs_source_1l00737"/>00737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00738"/>00738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fInfo.FieldType.IsValueType)
<anchor xml:id="__generate_type_extension_8cs_source_1l00739"/>00739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;unsafe&#32;{&#32;fixed&#32;(&quot;</emphasis>,&#32;ffulltype,&#32;<emphasis role="stringliteral">&quot;*&#32;p&#32;=&#32;&amp;t.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;)&#32;PackFrame_&quot;</emphasis>,&#32;ftypename,&#32;<emphasis role="stringliteral">&quot;.Apply(s.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;,&#32;(IntPtr)p,&#32;ref&#32;mask,&#32;ref&#32;maskOffset);&#32;}&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00740"/>00740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00741"/>00741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;PackFrame_&quot;</emphasis>,&#32;ftypename,&#32;<emphasis role="stringliteral">&quot;.Apply(s.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>,&#32;t,&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;,&#32;ref&#32;mask,&#32;ref&#32;maskOffset);&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00742"/>00742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00743"/>00743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00744"/>00744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00745"/>00745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;copyfield&#32;=&#32;fAttr.GetCopyCodeGen(fInfo.FieldType,&#32;fname,&#32;<emphasis role="stringliteral">&quot;s&quot;</emphasis>,&#32;t);
<anchor xml:id="__generate_type_extension_8cs_source_1l00746"/>00746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;callback&#32;=&#32;fAttr.applyCallback;
<anchor xml:id="__generate_type_extension_8cs_source_1l00747"/>00747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_photon_1_1_compression_1a4a2216e94f11fe2b72f7c5e7698232cd">SetValueTiming</link>&#32;callbackSetValue&#32;=&#32;fAttr.setValueTiming;
<anchor xml:id="__generate_type_extension_8cs_source_1l00748"/>00748 
<anchor xml:id="__generate_type_extension_8cs_source_1l00749"/>00749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;hasChangedSegment&#32;=&#32;pObjAttr.postApplyCallback&#32;==&#32;<emphasis role="keyword">null</emphasis>&#32;?&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;&#32;haschanged&#32;=&#32;true;&#32;&quot;</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00750"/>00750 
<anchor xml:id="__generate_type_extension_8cs_source_1l00751"/>00751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pObjType.IsValueType)
<anchor xml:id="__generate_type_extension_8cs_source_1l00752"/>00752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;unsafe&#32;{&#32;if&#32;(mask[maskOffset])&#32;{&#32;&quot;</emphasis>,&#32;hasChangedSegment);
<anchor xml:id="__generate_type_extension_8cs_source_1l00753"/>00753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00754"/>00754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;{&#32;if&#32;(mask[maskOffset]){&#32;&quot;</emphasis>,&#32;hasChangedSegment);
<anchor xml:id="__generate_type_extension_8cs_source_1l00755"/>00755 
<anchor xml:id="__generate_type_extension_8cs_source_1l00757"/>00757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MethodInfo&#32;callbackInfo&#32;=&#32;fInfo.HashCallback(fAttr.applyCallback,&#32;<emphasis role="keyword">null</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00758"/>00758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(callbackInfo&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;&#32;<emphasis role="comment">//&#32;TryGetCallbackInfo(fInfo,&#32;callback,&#32;objType,&#32;out&#32;callbackInfo))</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00759"/>00759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00760"/>00760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(callbackSetValue&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1a4a2216e94f11fe2b72f7c5e7698232cd">SetValueTiming</link>.AfterCallback)
<anchor xml:id="__generate_type_extension_8cs_source_1l00761"/>00761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00762"/>00762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(t,&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>,&#32;callback,&#32;<emphasis role="stringliteral">&quot;(s.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>)._(t,&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;);&#32;&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00763"/>00763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(copyfield,&#32;<emphasis role="stringliteral">&quot;&#32;}&#32;&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00764"/>00764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00765"/>00765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(callbackSetValue&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1a4a2216e94f11fe2b72f7c5e7698232cd">SetValueTiming</link>.BeforeCallback)
<anchor xml:id="__generate_type_extension_8cs_source_1l00766"/>00766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00767"/>00767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(<emphasis role="stringliteral">&quot;var&#32;hold&#32;=&#32;&quot;</emphasis>,&#32;t,&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;;&#32;&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00768"/>00768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(copyfield);
<anchor xml:id="__generate_type_extension_8cs_source_1l00769"/>00769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(t,&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>,&#32;callback,&#32;<emphasis role="stringliteral">&quot;(s.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;,&#32;hold);&#32;}&#32;&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00770"/>00770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00771"/>00771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00772"/>00772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00773"/>00773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(t,&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>,&#32;callback,&#32;<emphasis role="stringliteral">&quot;(s.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>)._(t,&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;);&#32;}&#32;&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00774"/>00774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00775"/>00775 
<anchor xml:id="__generate_type_extension_8cs_source_1l00776"/>00776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00778"/>00778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00779"/>00779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(copyfield,&#32;<emphasis role="stringliteral">&quot;&#32;}&#32;&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00780"/>00780 
<anchor xml:id="__generate_type_extension_8cs_source_1l00781"/>00781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isTrigger&#32;=&#32;IsSyncAsTrigger(pObjAttr,&#32;fAttr);
<anchor xml:id="__generate_type_extension_8cs_source_1l00782"/>00782 
<anchor xml:id="__generate_type_extension_8cs_source_1l00783"/>00783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isTrigger)
<anchor xml:id="__generate_type_extension_8cs_source_1l00784"/>00784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(<emphasis role="stringliteral">&quot;else&#32;{&#32;&quot;</emphasis>,&#32;t,&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;&#32;=&#32;new&#32;&quot;</emphasis>,&#32;ffulltype,&#32;<emphasis role="stringliteral">&quot;();&#32;}&#32;&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00785"/>00785 
<anchor xml:id="__generate_type_extension_8cs_source_1l00786"/>00786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(<emphasis role="stringliteral">&quot;}&#32;maskOffset++;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00787"/>00787 
<anchor xml:id="__generate_type_extension_8cs_source_1l00788"/>00788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00789"/>00789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00790"/>00790 
<anchor xml:id="__generate_type_extension_8cs_source_1l00792"/>00792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Generate_InterpToObj(FieldInfo&#32;fInfo,&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;objName,&#32;<emphasis role="keywordtype">string</emphasis>&#32;fname,&#32;<emphasis role="keywordtype">string</emphasis>&#32;ftypename,&#32;<emphasis role="keywordtype">string</emphasis>&#32;ffulltype,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;inNest,&#32;Type&#32;pObjType,&#32;SyncVarBaseAttribute&#32;fAttr)
<anchor xml:id="__generate_type_extension_8cs_source_1l00793"/>00793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00794"/>00794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//if&#32;(!fAttr.interpolate)</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00795"/>00795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;return;</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00796"/>00796 
<anchor xml:id="__generate_type_extension_8cs_source_1l00797"/>00797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;t&#32;=&#32;pObjType.IsValueType&#32;?&#32;<emphasis role="stringliteral">&quot;(*(&quot;</emphasis>&#32;+&#32;objName&#32;+&#32;<emphasis role="stringliteral">&quot;*)trg)&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;t&quot;</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00798"/>00798 
<anchor xml:id="__generate_type_extension_8cs_source_1l00799"/>00799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(inNest)
<anchor xml:id="__generate_type_extension_8cs_source_1l00800"/>00800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00801"/>00801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fInfo.FieldType.IsValueType)
<anchor xml:id="__generate_type_extension_8cs_source_1l00802"/>00802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;unsafe&#32;{&#32;fixed&#32;(&quot;</emphasis>,&#32;ffulltype,&#32;<emphasis role="stringliteral">&quot;*&#32;p&#32;=&#32;&amp;t.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;)&#32;PackFrame_&quot;</emphasis>,&#32;ftypename)._(<emphasis role="stringliteral">&quot;.Interpolate(s.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;,&#32;e.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;,&#32;(IntPtr)p,&#32;time,&#32;ref&#32;mask,&#32;ref&#32;maskOffset);&#32;}&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00803"/>00803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00804"/>00804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;PackFrame_&quot;</emphasis>,&#32;ftypename,&#32;<emphasis role="stringliteral">&quot;.Interpolate(s.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;,&#32;e.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>)._(t,&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;,&#32;time,&#32;ref&#32;mask,&#32;ref&#32;maskOffset);&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00805"/>00805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00806"/>00806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00807"/>00807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00808"/>00808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fAttr.interpolate)
<anchor xml:id="__generate_type_extension_8cs_source_1l00809"/>00809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00810"/>00810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;interpfield&#32;=&#32;fAttr.GetInterpolateCode(fInfo.FieldType,&#32;fname,&#32;<emphasis role="stringliteral">&quot;s&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;e&quot;</emphasis>,&#32;t);
<anchor xml:id="__generate_type_extension_8cs_source_1l00811"/>00811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(interpfield&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__generate_type_extension_8cs_source_1l00812"/>00812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00813"/>00813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pObjType.IsValueType)
<anchor xml:id="__generate_type_extension_8cs_source_1l00814"/>00814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;if&#32;(mask[maskOffset])&#32;unsafe&#32;{&#32;&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00815"/>00815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00816"/>00816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;if&#32;(readyMask[maskOffset]&#32;&amp;&amp;&#32;mask[maskOffset]){&#32;&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00817"/>00817 
<anchor xml:id="__generate_type_extension_8cs_source_1l00818"/>00818 
<anchor xml:id="__generate_type_extension_8cs_source_1l00819"/>00819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(interpfield,&#32;<emphasis role="stringliteral">&quot;&#32;}&#32;maskOffset++;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00820"/>00820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00821"/>00821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00822"/>00822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00823"/>00823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;maskOffset++;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00824"/>00824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00825"/>00825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00826"/>00826 
<anchor xml:id="__generate_type_extension_8cs_source_1l00827"/>00827 
<anchor xml:id="__generate_type_extension_8cs_source_1l00829"/>00829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Generate_InterpToFrame(FieldInfo&#32;fInfo,&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;objName,&#32;<emphasis role="keywordtype">string</emphasis>&#32;fname,&#32;<emphasis role="keywordtype">string</emphasis>&#32;ftypename,&#32;<emphasis role="keywordtype">string</emphasis>&#32;ffulltype,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;inNest,&#32;Type&#32;pObjType,&#32;SyncVarBaseAttribute&#32;fAttr)
<anchor xml:id="__generate_type_extension_8cs_source_1l00830"/>00830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00831"/>00831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//if&#32;(!fAttr.interpolate)</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00832"/>00832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;return;</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00833"/>00833 
<anchor xml:id="__generate_type_extension_8cs_source_1l00834"/>00834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;t&#32;=&#32;<emphasis role="stringliteral">&quot;t&quot;</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00835"/>00835 
<anchor xml:id="__generate_type_extension_8cs_source_1l00836"/>00836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(inNest)
<anchor xml:id="__generate_type_extension_8cs_source_1l00837"/>00837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00838"/>00838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//if&#32;(fInfo.FieldType.IsValueType)</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00839"/>00839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;sb.____(&quot;unsafe&#32;{&#32;fixed&#32;(&quot;,&#32;ffulltype,&#32;&quot;*&#32;p&#32;=&#32;&amp;t.&quot;,&#32;fname,&#32;&quot;)&#32;PackFrame_&quot;,&#32;ftypename)._(&quot;.Interpolate(s.&quot;,&#32;fname,&#32;&quot;,&#32;e.&quot;,&#32;fname,&#32;&quot;,&#32;t.&quot;,&#32;fname,&#32;&quot;,&#32;time,&#32;ref&#32;mask,&#32;ref&#32;maskOffset);&#32;}&quot;).EOL();</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00840"/>00840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00841"/>00841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;PackFrame_&quot;</emphasis>,&#32;ftypename,&#32;<emphasis role="stringliteral">&quot;.Interpolate(s.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;,&#32;e.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>)._(t,&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;,&#32;time,&#32;ref&#32;mask,&#32;ref&#32;maskOffset);&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00842"/>00842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00843"/>00843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00844"/>00844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00845"/>00845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;interpfield&#32;=&#32;fAttr.GetInterpolateCode(fInfo.FieldType,&#32;fname,&#32;<emphasis role="stringliteral">&quot;s&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;e&quot;</emphasis>,&#32;t);
<anchor xml:id="__generate_type_extension_8cs_source_1l00846"/>00846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(interpfield&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__generate_type_extension_8cs_source_1l00847"/>00847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00848"/>00848 
<anchor xml:id="__generate_type_extension_8cs_source_1l00849"/>00849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pObjType.IsValueType)
<anchor xml:id="__generate_type_extension_8cs_source_1l00850"/>00850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;if&#32;(mask[maskOffset])&#32;unsafe&#32;{&#32;&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00851"/>00851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00852"/>00852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;if&#32;(mask[maskOffset]){&#32;&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00853"/>00853 
<anchor xml:id="__generate_type_extension_8cs_source_1l00854"/>00854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(interpfield);
<anchor xml:id="__generate_type_extension_8cs_source_1l00855"/>00855 
<anchor xml:id="__generate_type_extension_8cs_source_1l00856"/>00856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._(<emphasis role="stringliteral">&quot;}&#32;maskOffset++;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00857"/>00857 
<anchor xml:id="__generate_type_extension_8cs_source_1l00858"/>00858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00859"/>00859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00860"/>00860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//private&#32;static&#32;bool&#32;TryGetCallbackInfo(FieldInfo&#32;finfo,&#32;string&#32;callback,&#32;Type&#32;objType,&#32;out&#32;MethodInfo&#32;callbackInfo)</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00861"/>00861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//{</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00862"/>00862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;///&#32;No&#32;callback&#32;declared.&#32;Normal&#32;case.</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00863"/>00863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;if&#32;(callback&#32;==&#32;null)</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00864"/>00864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;{</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00865"/>00865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;callbackInfo&#32;=&#32;null;</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00866"/>00866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;return&#32;false;</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00867"/>00867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;}</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00868"/>00868 
<anchor xml:id="__generate_type_extension_8cs_source_1l00869"/>00869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;Type&#32;ftype&#32;=&#32;finfo.FieldType;</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00870"/>00870 
<anchor xml:id="__generate_type_extension_8cs_source_1l00871"/>00871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;callbackInfo&#32;=&#32;objType.GetMethod(callback,&#32;BindingFlags.Public&#32;|&#32;BindingFlags.NonPublic&#32;|&#32;BindingFlags.Static&#32;|&#32;BindingFlags.Instance);</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00872"/>00872 
<anchor xml:id="__generate_type_extension_8cs_source_1l00873"/>00873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;///&#32;Callback&#32;is&#32;invalid</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00874"/>00874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;if&#32;(callbackInfo&#32;==&#32;null)</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00875"/>00875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;{</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00876"/>00876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;//Debug.LogWarning(&quot;Method&#32;named&#32;&lt;b&gt;&apos;&quot;&#32;+&#32;callback&#32;&#32;+&quot;&apos;&lt;/b&gt;&#32;referenced&#32;by&#32;PackObj&#32;&lt;b&gt;&apos;&quot;&#32;+&#32;(objType.IsValueType&#32;?&#32;&quot;struct&#32;&quot;&#32;:&#32;&quot;class&#32;&quot;)&#32;+&#32;objType.Name&#32;+&quot;&#32;.&quot;+&#32;finfo.Name&#32;+&#32;&quot;&apos;&lt;/b&gt;&#32;does&#32;not&#32;exist.&#32;Check&#32;spelling&#32;and&#32;use&#32;nameof()&#32;rather&#32;than&#32;a&#32;string.&quot;);</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00877"/>00877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;return&#32;false;</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00878"/>00878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;}</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00879"/>00879 
<anchor xml:id="__generate_type_extension_8cs_source_1l00880"/>00880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;var&#32;parms&#32;=&#32;callbackInfo.GetParameters();</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00881"/>00881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;bool&#32;isStatic&#32;=&#32;callbackInfo.IsStatic;</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00882"/>00882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;bool&#32;isPublic&#32;=&#32;callbackInfo.IsPublic;</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00883"/>00883 
<anchor xml:id="__generate_type_extension_8cs_source_1l00884"/>00884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;if&#32;(callbackInfo&#32;==&#32;null)</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00885"/>00885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;goto&#32;BadCallback;</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00886"/>00886 
<anchor xml:id="__generate_type_extension_8cs_source_1l00887"/>00887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;if&#32;(!callbackInfo.IsPublic)</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00888"/>00888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;goto&#32;BadCallback;</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00889"/>00889 
<anchor xml:id="__generate_type_extension_8cs_source_1l00890"/>00890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;if&#32;(parms.Length&#32;!=&#32;2)</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00891"/>00891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;goto&#32;BadCallback;</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00892"/>00892 
<anchor xml:id="__generate_type_extension_8cs_source_1l00893"/>00893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;if&#32;(parms[0].ParameterType&#32;==&#32;ftype&#32;&amp;&amp;&#32;parms[1].ParameterType&#32;==&#32;ftype)</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00894"/>00894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;return&#32;true;</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00895"/>00895 
<anchor xml:id="__generate_type_extension_8cs_source_1l00896"/>00896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;BadCallback:</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00897"/>00897 
<anchor xml:id="__generate_type_extension_8cs_source_1l00898"/>00898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;//string&#32;staticString&#32;=&#32;isStatic&#32;?&#32;&quot;static&#32;&quot;&#32;:&#32;&quot;&quot;;</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00899"/>00899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;//string&#32;accessString&#32;=&#32;isPublic&#32;?&#32;&quot;public&#32;&quot;&#32;:&#32;&quot;private&#32;&quot;;</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00900"/>00900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;//string&#32;typename&#32;=&#32;ftype.Name;</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00901"/>00901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;//string&#32;parmstring&#32;=&#32;&quot;&quot;;</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00902"/>00902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;//for&#32;(int&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;parms.Length;&#32;++i)</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00903"/>00903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;//&#32;&#32;parmstring&#32;+=&#32;(i&#32;==&#32;0&#32;?&#32;&quot;&quot;&#32;:&#32;&quot;,&#32;&quot;)&#32;+&#32;parms[i].ParameterType.Name;</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00904"/>00904 
<anchor xml:id="__generate_type_extension_8cs_source_1l00905"/>00905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;//Debug.LogWarning(&quot;&lt;b&gt;Invalid&#32;Callback&lt;/b&gt;&#32;&lt;i&gt;&apos;&quot;&#32;+&#32;accessString&#32;+&#32;staticString&#32;+&#32;callback&#32;+&#32;&quot;(&quot;&#32;+&#32;parmstring&#32;+&#32;&quot;)&apos;&lt;/i&gt;&#32;on&#32;&lt;b&gt;&quot;&#32;+&#32;objType.Name&#32;+&#32;&quot;&lt;/b&gt;&quot;&#32;+</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00906"/>00906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;//&#32;&#32;&quot;.&#32;Needs&#32;to&#32;have&#32;format:&#32;&lt;i&gt;&apos;public&#32;&quot;&#32;+&#32;callback&#32;+&#32;&quot;(&quot;&#32;+&#32;typename&#32;+&#32;&quot;,&#32;&quot;&#32;+&#32;typename&#32;+&#32;&quot;)&apos;&lt;/i&gt;&quot;);</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00907"/>00907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;return&#32;false;</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00908"/>00908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//}</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00909"/>00909 
<anchor xml:id="__generate_type_extension_8cs_source_1l00910"/>00910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Generate_CopyFrameToFrame(FieldInfo&#32;fInfo,&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;objName,&#32;<emphasis role="keywordtype">string</emphasis>&#32;fname,&#32;<emphasis role="keywordtype">string</emphasis>&#32;ftypename,&#32;<emphasis role="keywordtype">string</emphasis>&#32;ffulltype,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isNest,&#32;Type&#32;pObjType,&#32;SyncVarBaseAttribute&#32;fAttr)
<anchor xml:id="__generate_type_extension_8cs_source_1l00911"/>00911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00912"/>00912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;copyfield&#32;=&#32;fAttr.GetCopyCodeGen(fInfo.FieldType,&#32;fname,&#32;<emphasis role="stringliteral">&quot;s&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;t&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l00913"/>00913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__generate_type_extension_8cs_source_1l00914"/>00914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(copyfield).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00915"/>00915 
<anchor xml:id="__generate_type_extension_8cs_source_1l00916"/>00916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//sb.____(&quot;t.&quot;,&#32;fname,&#32;&quot;&#32;=&#32;s.&quot;,&#32;fname,&#32;&quot;;&quot;).EOL();</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00917"/>00917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00918"/>00918 
<anchor xml:id="__generate_type_extension_8cs_source_1l00919"/>00919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Generate_FieldDelegates(FieldInfo&#32;fInfo,&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;fname,&#32;<emphasis role="keywordtype">string</emphasis>&#32;ftype,&#32;<emphasis role="keywordtype">string</emphasis>&#32;genericarg,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isNest)
<anchor xml:id="__generate_type_extension_8cs_source_1l00920"/>00920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00921"/>00921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNest)
<anchor xml:id="__generate_type_extension_8cs_source_1l00922"/>00922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l00923"/>00923 
<anchor xml:id="__generate_type_extension_8cs_source_1l00924"/>00924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fInfo.FieldType.IsEnum)
<anchor xml:id="__generate_type_extension_8cs_source_1l00925"/>00925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ftype&#32;=&#32;System.Enum.GetUnderlyingType(fInfo.FieldType).Name;
<anchor xml:id="__generate_type_extension_8cs_source_1l00926"/>00926 
<anchor xml:id="__generate_type_extension_8cs_source_1l00927"/>00927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fInfo.FieldType.IsGenericType)
<anchor xml:id="__generate_type_extension_8cs_source_1l00928"/>00928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00929"/>00929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;static&#32;Pack&quot;</emphasis>,&#32;ftype,&#32;<emphasis role="stringliteral">&quot;Delegate&quot;</emphasis>,&#32;genericarg,&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;Packer;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00930"/>00930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;static&#32;Unpack&quot;</emphasis>,&#32;ftype,&#32;<emphasis role="stringliteral">&quot;Delegate&quot;</emphasis>,&#32;genericarg,&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;Unpacker;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00931"/>00931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00932"/>00932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00933"/>00933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00934"/>00934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;static&#32;PackDelegate&lt;&quot;</emphasis>,&#32;ftype,&#32;<emphasis role="stringliteral">&quot;&gt;&quot;</emphasis>,&#32;genericarg,&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;Packer;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00935"/>00935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.___(<emphasis role="stringliteral">&quot;static&#32;UnpackDelegate&lt;&quot;</emphasis>,&#32;ftype,&#32;<emphasis role="stringliteral">&quot;&gt;&quot;</emphasis>,&#32;genericarg,&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;Unpacker;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00936"/>00936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00937"/>00937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__generate_type_extension_8cs_source_1l00938"/>00938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00939"/>00939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00940"/>00940 
<anchor xml:id="__generate_type_extension_8cs_source_1l00941"/>00941 
<anchor xml:id="__generate_type_extension_8cs_source_1l00942"/>00942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Generate_FieldInit(FieldInfo&#32;fInfo,&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;fname,&#32;<emphasis role="keywordtype">string</emphasis>&#32;ftypename,&#32;<emphasis role="keywordtype">string</emphasis>&#32;ffulltype,&#32;<emphasis role="keywordtype">string</emphasis>&#32;genericarg,&#32;<emphasis role="keywordtype">string</emphasis>&#32;primitive,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isNest,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;generateAttr,&#32;SyncVarBaseAttribute&#32;fAttr)
<anchor xml:id="__generate_type_extension_8cs_source_1l00943"/>00943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00944"/>00944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Type&#32;ftype&#32;=&#32;fInfo.FieldType;
<anchor xml:id="__generate_type_extension_8cs_source_1l00945"/>00945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Type&#32;declrType&#32;=&#32;fInfo.DeclaringType;
<anchor xml:id="__generate_type_extension_8cs_source_1l00946"/>00946 
<anchor xml:id="__generate_type_extension_8cs_source_1l00947"/>00947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isEnum&#32;=&#32;fInfo.FieldType.IsEnum;
<anchor xml:id="__generate_type_extension_8cs_source_1l00948"/>00948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isEnum)
<anchor xml:id="__generate_type_extension_8cs_source_1l00949"/>00949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ftypename&#32;=&#32;System.Enum.GetUnderlyingType(fInfo.FieldType).Name;
<anchor xml:id="__generate_type_extension_8cs_source_1l00950"/>00950 
<anchor xml:id="__generate_type_extension_8cs_source_1l00951"/>00951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;fullDeclaring&#32;=&#32;(declrType.Namespace&#32;==&#32;<emphasis role="keyword">null</emphasis>&#32;||&#32;declrType.Namespace&#32;==&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)&#32;?&#32;declrType.Name&#32;:&#32;(declrType.Namespace&#32;+&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>&#32;+&#32;declrType.Name);
<anchor xml:id="__generate_type_extension_8cs_source_1l00952"/>00952 
<anchor xml:id="__generate_type_extension_8cs_source_1l00954"/>00954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNest)
<anchor xml:id="__generate_type_extension_8cs_source_1l00955"/>00955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00956"/>00956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;if&#32;(!&quot;</emphasis>,&#32;PACK_PREFIX,&#32;ftypename,&#32;<emphasis role="stringliteral">&quot;.isInitializing)&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00957"/>00957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;{&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00958"/>00958 
<anchor xml:id="__generate_type_extension_8cs_source_1l00959"/>00959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._____(PACK_PREFIX,&#32;ftypename,&#32;<emphasis role="stringliteral">&quot;.Initialize();&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00960"/>00960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._____(<emphasis role="stringliteral">&quot;var&#32;packObjInfo&#32;=&#32;&quot;</emphasis>,&#32;typeof(PackObjectDatabase).Name,&#32;<emphasis role="stringliteral">&quot;.GetPackObjectInfo(typeof(&quot;</emphasis>,&#32;ffulltype,&#32;<emphasis role="stringliteral">&quot;));&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00961"/>00961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._____(<emphasis role="stringliteral">&quot;defReadyMask.OR(packObjInfo.defaultReadyMask,&#32;fieldindex);&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00962"/>00962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._____(<emphasis role="stringliteral">&quot;maxBits&#32;+=&#32;packObjInfo.maxBits;&#32;fieldindex++;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00963"/>00963 
<anchor xml:id="__generate_type_extension_8cs_source_1l00964"/>00964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;}&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00965"/>00965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00966"/>00966 
<anchor xml:id="__generate_type_extension_8cs_source_1l00968"/>00968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00969"/>00969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00970"/>00970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(generateAttr)
<anchor xml:id="__generate_type_extension_8cs_source_1l00971"/>00971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;PackAttribute&#32;&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;PackAttr&#32;=&#32;new&#32;PackAttribute();&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00972"/>00972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00973"/>00973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(fAttr.GetType().Name,&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;PackAttr&#32;=&#32;(&quot;</emphasis>,&#32;fAttr.GetType().Name,&#32;<emphasis role="stringliteral">&quot;)(typeof(&quot;</emphasis>,&#32;fullDeclaring)._(<emphasis role="stringliteral">&quot;).GetField(\&quot;&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;\&quot;).GetCustomAttributes(typeof(SyncVarBaseAttribute),&#32;false)[0]&#32;as&#32;&quot;</emphasis>,&#32;fAttr.GetType().Name,&#32;<emphasis role="stringliteral">&quot;);&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00974"/>00974 
<anchor xml:id="__generate_type_extension_8cs_source_1l00975"/>00975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(fname,&#32;<emphasis role="stringliteral">&quot;Packer&#32;=&#32;(&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;PackAttr&#32;as&#32;IPack&quot;</emphasis>,&#32;ftypename,&#32;genericarg,&#32;<emphasis role="stringliteral">&quot;).Pack;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00976"/>00976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(fname,&#32;<emphasis role="stringliteral">&quot;Unpacker&#32;=&#32;(&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;PackAttr&#32;as&#32;IPack&quot;</emphasis>,&#32;ftypename,&#32;genericarg,&#32;<emphasis role="stringliteral">&quot;).Unpack;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00977"/>00977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(fname,&#32;<emphasis role="stringliteral">&quot;PackAttr.Initialize(typeof(&quot;</emphasis>,&#32;primitive,&#32;<emphasis role="stringliteral">&quot;));&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00978"/>00978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;if&#32;(&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;PackAttr.keyRate&#32;==&#32;KeyRate.UseDefault)&#32;&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;PackAttr.keyRate&#32;=&#32;(KeyRate)defaultKeyRate;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00979"/>00979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;if&#32;(&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;PackAttr.syncAs&#32;==&#32;SyncAs.Auto)&#32;&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;PackAttr.syncAs&#32;=&#32;pObjAttr.syncAs;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00980"/>00980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;if&#32;(&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;PackAttr.syncAs&#32;==&#32;SyncAs.Auto)&#32;&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;PackAttr.syncAs&#32;=&#32;SyncAs.State;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00981"/>00981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;if&#32;(&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;PackAttr.syncAs&#32;==&#32;SyncAs.Trigger)&#32;&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;defReadyMask[fieldindex]&#32;=&#32;true;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00982"/>00982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;maxBits&#32;+=&#32;&quot;</emphasis>,&#32;fAttr.GetMaxBits(fInfo.FieldType).ToString(),&#32;<emphasis role="stringliteral">&quot;;&#32;fieldindex++;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00983"/>00983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//sb.____(&quot;maxBits&#32;+=&#32;&quot;,&#32;fname,&#32;&quot;PackAttr.GetMaxBits(typeof(&quot;,&#32;ffulltype,&#32;&quot;));&quot;).EOL();</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00984"/>00984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00985"/>00985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00986"/>00986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l00987"/>00987 
<anchor xml:id="__generate_type_extension_8cs_source_1l00988"/>00988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Generate_FieldPack(FieldInfo&#32;fInfo,&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;fname,&#32;<emphasis role="keywordtype">string</emphasis>&#32;ftypename,&#32;<emphasis role="keywordtype">string</emphasis>&#32;ffulltype,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isNest,&#32;<emphasis role="keywordtype">string</emphasis>&#32;enumUnderCast,&#32;<emphasis role="keywordtype">string</emphasis>&#32;enumTypeCast)
<anchor xml:id="__generate_type_extension_8cs_source_1l00989"/>00989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00990"/>00990 
<anchor xml:id="__generate_type_extension_8cs_source_1l00991"/>00991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNest)
<anchor xml:id="__generate_type_extension_8cs_source_1l00992"/>00992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;flags&#32;|=&#32;&quot;</emphasis>)
<anchor xml:id="__generate_type_extension_8cs_source_1l00993"/>00993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._(PACK_PREFIX,&#32;ftypename,&#32;<emphasis role="stringliteral">&quot;.Pack(ref&#32;packable.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>&#32;+&#32;PREV_NAME&#32;+&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;,&#32;ref&#32;mask,&#32;ref&#32;maskOffset,&#32;buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00994"/>00994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l00995"/>00995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l00996"/>00996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;{&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l00998"/>00998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(enumTypeCast&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__generate_type_extension_8cs_source_1l00999"/>00999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01000"/>01000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._____(<emphasis role="stringliteral">&quot;var&#32;temp&#32;=&#32;&quot;</emphasis>,&#32;enumUnderCast,&#32;<emphasis role="stringliteral">&quot;packable.&quot;</emphasis>,fname,<emphasis role="stringliteral">&quot;;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l01001"/>01001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._____(<emphasis role="stringliteral">&quot;var&#32;flag&#32;=&#32;&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;Packer(ref&#32;temp,&#32;&quot;</emphasis>)._(enumUnderCast,&#32;PREV_NAME,&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;,&#32;buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l01002"/>01002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01004"/>01004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l01005"/>01005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._____(<emphasis role="stringliteral">&quot;var&#32;flag&#32;=&#32;&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;Packer(ref&#32;packable.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>)._(PREV_NAME,&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;,&#32;buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l01006"/>01006 
<anchor xml:id="__generate_type_extension_8cs_source_1l01007"/>01007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._____(<emphasis role="stringliteral">&quot;mask[maskOffset]&#32;=&#32;flag&#32;!=&#32;&quot;</emphasis>,&#32;typeof(<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>).Name,<emphasis role="stringliteral">&quot;.&quot;</emphasis>,&#32;Enum.GetName(typeof(<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>),&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.None),&#32;<emphasis role="stringliteral">&quot;;&#32;&#32;flags&#32;|=&#32;flag;&#32;maskOffset++;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l01008"/>01008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;}&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l01009"/>01009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01010"/>01010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01011"/>01011 
<anchor xml:id="__generate_type_extension_8cs_source_1l01012"/>01012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Generate_FieldUnpack(FieldInfo&#32;fInfo,&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;fname,&#32;<emphasis role="keywordtype">string</emphasis>&#32;ftypename,&#32;<emphasis role="keywordtype">string</emphasis>&#32;ffulltype,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isNestedPackObj,&#32;<emphasis role="keywordtype">string</emphasis>&#32;enumUnderCast,&#32;<emphasis role="keywordtype">string</emphasis>&#32;enumTypeCast,&#32;SyncVarBaseAttribute&#32;fAttr)
<anchor xml:id="__generate_type_extension_8cs_source_1l01013"/>01013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01014"/>01014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNestedPackObj)
<anchor xml:id="__generate_type_extension_8cs_source_1l01015"/>01015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;flags&#32;|=&#32;&quot;</emphasis>)
<anchor xml:id="__generate_type_extension_8cs_source_1l01016"/>01016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._(PACK_PREFIX,&#32;ftypename,&#32;<emphasis role="stringliteral">&quot;.Unpack(ref&#32;packable.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;,&#32;ref&#32;mask,&#32;ref&#32;isCompleteMask,&#32;ref&#32;maskOffset,&#32;buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l01017"/>01017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l01018"/>01018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01019"/>01019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;{&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l01020"/>01020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._____(<emphasis role="stringliteral">&quot;if&#32;(mask[maskOffset])&#32;{&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l01021"/>01021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(enumTypeCast&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__generate_type_extension_8cs_source_1l01022"/>01022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01023"/>01023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.______(<emphasis role="stringliteral">&quot;var&#32;temp&#32;=&#32;&quot;</emphasis>,&#32;enumUnderCast,&#32;<emphasis role="stringliteral">&quot;packable.&quot;</emphasis>,&#32;fname,<emphasis role="stringliteral">&quot;;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l01024"/>01024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.______(<emphasis role="stringliteral">&quot;var&#32;flag&#32;=&#32;&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;Unpacker(ref&#32;temp,&#32;buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l01025"/>01025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.______(<emphasis role="stringliteral">&quot;packable.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;&#32;=&#32;&quot;</emphasis>,&#32;enumTypeCast,&#32;<emphasis role="stringliteral">&quot;temp;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l01026"/>01026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01027"/>01027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fInfo.FieldType.IsGenericType)
<anchor xml:id="__generate_type_extension_8cs_source_1l01028"/>01028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.______(<emphasis role="stringliteral">&quot;var&#32;flag&#32;=&#32;&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;Unpacker(ref&#32;packable.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;,&#32;packable.&quot;</emphasis>,fname,<emphasis role="stringliteral">&quot;_mask,&#32;buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l01029"/>01029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l01030"/>01030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.______(<emphasis role="stringliteral">&quot;var&#32;flag&#32;=&#32;&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;Unpacker(ref&#32;packable.&quot;</emphasis>,&#32;fname,&#32;<emphasis role="stringliteral">&quot;,&#32;buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l01031"/>01031 
<anchor xml:id="__generate_type_extension_8cs_source_1l01032"/>01032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fAttr.syncAs&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1a316c25ff520f46923c1acc8c4ab4096b">SyncAs</link>.Trigger)
<anchor xml:id="__generate_type_extension_8cs_source_1l01033"/>01033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.______(<emphasis role="stringliteral">&quot;mask[maskOffset]&#32;=&#32;flag&#32;!=&#32;0;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l01034"/>01034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l01035"/>01035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.______(<emphasis role="stringliteral">&quot;isCompleteMask[maskOffset]&#32;=&#32;(flag&#32;&amp;&#32;SerializationFlags.IsComplete)&#32;!=&#32;0;&#32;mask[maskOffset]&#32;=&#32;flag&#32;!=&#32;0;&#32;flags&#32;|=&#32;flag;&#32;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l01036"/>01036 
<anchor xml:id="__generate_type_extension_8cs_source_1l01038"/>01038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fAttr.syncAs&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1a316c25ff520f46923c1acc8c4ab4096b">SyncAs</link>.Trigger)
<anchor xml:id="__generate_type_extension_8cs_source_1l01039"/>01039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._____(<emphasis role="stringliteral">&quot;&#32;}&#32;isCompleteMask[maskOffset]&#32;=&#32;true;&#32;maskOffset++;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l01040"/>01040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l01041"/>01041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb._____(<emphasis role="stringliteral">&quot;&#32;}&#32;maskOffset++;&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l01042"/>01042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.____(<emphasis role="stringliteral">&quot;}&quot;</emphasis>).EOL();
<anchor xml:id="__generate_type_extension_8cs_source_1l01043"/>01043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01044"/>01044 
<anchor xml:id="__generate_type_extension_8cs_source_1l01045"/>01045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01046"/>01046 
<anchor xml:id="__generate_type_extension_8cs_source_1l01047"/>01047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;TypeIsHandled(Type&#32;fieldType,&#32;SyncVarBaseAttribute&#32;packAttr)
<anchor xml:id="__generate_type_extension_8cs_source_1l01048"/>01048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01049"/>01049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fieldType.IsEnum)
<anchor xml:id="__generate_type_extension_8cs_source_1l01050"/>01050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fieldType&#32;=&#32;Enum.GetUnderlyingType(fieldType);
<anchor xml:id="__generate_type_extension_8cs_source_1l01051"/>01051 
<anchor xml:id="__generate_type_extension_8cs_source_1l01052"/>01052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;interfaces&#32;=&#32;packAttr.GetType().GetInterfaces();
<anchor xml:id="__generate_type_extension_8cs_source_1l01053"/>01053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;interfaces)
<anchor xml:id="__generate_type_extension_8cs_source_1l01054"/>01054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01055"/>01055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;isupporteds&#32;=&#32;i.GetCustomAttributes(typeof(PackSupportedTypesAttribute),&#32;<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l01056"/>01056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__generate_type_extension_8cs_source_1l01057"/>01057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isupporteds.Length&#32;==&#32;0)
<anchor xml:id="__generate_type_extension_8cs_source_1l01058"/>01058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l01059"/>01059 
<anchor xml:id="__generate_type_extension_8cs_source_1l01060"/>01060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;supportedTypeAttr&#32;=&#32;isupporteds[0]&#32;as&#32;PackSupportedTypesAttribute;
<anchor xml:id="__generate_type_extension_8cs_source_1l01061"/>01061 
<anchor xml:id="__generate_type_extension_8cs_source_1l01062"/>01062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;supportedType&#32;=&#32;supportedTypeAttr.supportedType;
<anchor xml:id="__generate_type_extension_8cs_source_1l01063"/>01063 
<anchor xml:id="__generate_type_extension_8cs_source_1l01064"/>01064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(supportedType.IsGenericType&#32;&amp;&amp;&#32;supportedType.IsGenericTypeDefinition)
<anchor xml:id="__generate_type_extension_8cs_source_1l01065"/>01065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01066"/>01066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__generate_type_extension_8cs_source_1l01067"/>01067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;supportedType&#32;=&#32;supportedType.GetGenericArguments()[0];
<anchor xml:id="__generate_type_extension_8cs_source_1l01068"/>01068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.Log(<emphasis role="stringliteral">&quot;Found&#32;Generic&#32;type&#32;using&#32;&quot;</emphasis>&#32;+&#32;supportedType.Name&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;allowing&#32;it&#32;until&#32;I&#32;revisit&#32;this&#32;code&#32;and&#32;make&#32;it&#32;more&#32;restrictive.&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l01069"/>01069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l01070"/>01070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01071"/>01071 
<anchor xml:id="__generate_type_extension_8cs_source_1l01072"/>01072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Debug.Log(supportedType.IsGenericParameter&#32;+&#32;&quot;&#32;&quot;&#32;+&#32;supportedType.IsGenericType&#32;+&#32;&quot;&#32;&quot;&#32;+&#32;supportedType.IsGenericTypeDefinition&#32;+&#32;&quot;&#32;&quot;+&#32;supportedType.type);</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l01073"/>01073 
<anchor xml:id="__generate_type_extension_8cs_source_1l01074"/>01074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(supportedType&#32;==&#32;fieldType)
<anchor xml:id="__generate_type_extension_8cs_source_1l01075"/>01075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l01076"/>01076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01077"/>01077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l01078"/>01078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01079"/>01079 
<anchor xml:id="__generate_type_extension_8cs_source_1l01080"/>01080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;ReplacePlusWithPeriod(<emphasis role="keywordtype">string</emphasis>&#32;str)
<anchor xml:id="__generate_type_extension_8cs_source_1l01081"/>01081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01082"/>01082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str.Replace(<emphasis role="stringliteral">&quot;+&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l01083"/>01083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01084"/>01084 
<anchor xml:id="__generate_type_extension_8cs_source_1l01085"/>01085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;safetycounter;
<anchor xml:id="__generate_type_extension_8cs_source_1l01086"/>01086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;List&lt;Type&gt;&#32;nestCheck&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;Type&gt;();
<anchor xml:id="__generate_type_extension_8cs_source_1l01087"/>01087 
<anchor xml:id="__generate_type_extension_8cs_source_1l01088"/>01088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;CheckForNestedLoop(Type&#32;type,&#32;Type&#32;checkIn)
<anchor xml:id="__generate_type_extension_8cs_source_1l01089"/>01089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01090"/>01090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nestCheck.Clear();
<anchor xml:id="__generate_type_extension_8cs_source_1l01091"/>01091 
<anchor xml:id="__generate_type_extension_8cs_source_1l01093"/>01093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;attrs&#32;=&#32;checkIn.GetCustomAttributes(typeof(PackObjectAttribute),&#32;<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l01094"/>01094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(attrs.Length&#32;==&#32;0)
<anchor xml:id="__generate_type_extension_8cs_source_1l01095"/>01095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l01096"/>01096 
<anchor xml:id="__generate_type_extension_8cs_source_1l01097"/>01097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;safetycounter++;
<anchor xml:id="__generate_type_extension_8cs_source_1l01098"/>01098 
<anchor xml:id="__generate_type_extension_8cs_source_1l01099"/>01099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(safetycounter&#32;&gt;&#32;200)
<anchor xml:id="__generate_type_extension_8cs_source_1l01100"/>01100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01101"/>01101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.Log(<emphasis role="stringliteral">&quot;Ouch&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l01102"/>01102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l01103"/>01103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01104"/>01104 
<anchor xml:id="__generate_type_extension_8cs_source_1l01105"/>01105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;fields&#32;=&#32;checkIn.GetFields();
<anchor xml:id="__generate_type_extension_8cs_source_1l01106"/>01106 
<anchor xml:id="__generate_type_extension_8cs_source_1l01107"/>01107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;field&#32;<emphasis role="keywordflow">in</emphasis>&#32;fields)
<anchor xml:id="__generate_type_extension_8cs_source_1l01108"/>01108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01109"/>01109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(field.FieldType&#32;==&#32;type)
<anchor xml:id="__generate_type_extension_8cs_source_1l01110"/>01110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l01111"/>01111 
<anchor xml:id="__generate_type_extension_8cs_source_1l01113"/>01113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(field.FieldType.GetCustomAttributes(typeof(SyncVarBaseAttribute),&#32;<emphasis role="keyword">false</emphasis>).Length&#32;!=&#32;0)
<anchor xml:id="__generate_type_extension_8cs_source_1l01114"/>01114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CheckForNestedLoop(type,&#32;field.FieldType))
<anchor xml:id="__generate_type_extension_8cs_source_1l01115"/>01115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l01116"/>01116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01117"/>01117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__generate_type_extension_8cs_source_1l01118"/>01118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01119"/>01119 
<anchor xml:id="__generate_type_extension_8cs_source_1l01120"/>01120 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;SB&#32;extensions</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l01121"/>01121 
<anchor xml:id="__generate_type_extension_8cs_source_1l01122"/>01122 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;No&#32;Indent</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l01123"/>01123 
<anchor xml:id="__generate_type_extension_8cs_source_1l01124"/>01124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;_(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text)
<anchor xml:id="__generate_type_extension_8cs_source_1l01125"/>01125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01126"/>01126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(text);
<anchor xml:id="__generate_type_extension_8cs_source_1l01127"/>01127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01128"/>01128 
<anchor xml:id="__generate_type_extension_8cs_source_1l01129"/>01129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;_(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2)
<anchor xml:id="__generate_type_extension_8cs_source_1l01130"/>01130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01131"/>01131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(text).Append(text2);
<anchor xml:id="__generate_type_extension_8cs_source_1l01132"/>01132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01133"/>01133 
<anchor xml:id="__generate_type_extension_8cs_source_1l01134"/>01134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;_(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3)
<anchor xml:id="__generate_type_extension_8cs_source_1l01135"/>01135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01136"/>01136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(text).Append(text2).Append(text3);
<anchor xml:id="__generate_type_extension_8cs_source_1l01137"/>01137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01138"/>01138 
<anchor xml:id="__generate_type_extension_8cs_source_1l01139"/>01139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;_(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text4)
<anchor xml:id="__generate_type_extension_8cs_source_1l01140"/>01140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01141"/>01141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(text).Append(text2).Append(text3).Append(text4);
<anchor xml:id="__generate_type_extension_8cs_source_1l01142"/>01142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01143"/>01143 
<anchor xml:id="__generate_type_extension_8cs_source_1l01144"/>01144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;_(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text4,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text5)
<anchor xml:id="__generate_type_extension_8cs_source_1l01145"/>01145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01146"/>01146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(text).Append(text2).Append(text3).Append(text4).Append(text5);
<anchor xml:id="__generate_type_extension_8cs_source_1l01147"/>01147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01148"/>01148 
<anchor xml:id="__generate_type_extension_8cs_source_1l01149"/>01149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;_(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text4,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text5,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text6)
<anchor xml:id="__generate_type_extension_8cs_source_1l01150"/>01150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01151"/>01151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(text).Append(text2).Append(text3).Append(text4).Append(text5).Append(text6);
<anchor xml:id="__generate_type_extension_8cs_source_1l01152"/>01152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01153"/>01153 
<anchor xml:id="__generate_type_extension_8cs_source_1l01154"/>01154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;_(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text4,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text5,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text6,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text7)
<anchor xml:id="__generate_type_extension_8cs_source_1l01155"/>01155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01156"/>01156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(text).Append(text2).Append(text3).Append(text4).Append(text5).Append(text6).Append(text7);
<anchor xml:id="__generate_type_extension_8cs_source_1l01157"/>01157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01158"/>01158 
<anchor xml:id="__generate_type_extension_8cs_source_1l01159"/>01159 
<anchor xml:id="__generate_type_extension_8cs_source_1l01160"/>01160 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l01161"/>01161 
<anchor xml:id="__generate_type_extension_8cs_source_1l01162"/>01162 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Indent&#32;1</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l01163"/>01163 
<anchor xml:id="__generate_type_extension_8cs_source_1l01164"/>01164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;__(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text)
<anchor xml:id="__generate_type_extension_8cs_source_1l01165"/>01165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01166"/>01166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t&quot;</emphasis>).Append(text);
<anchor xml:id="__generate_type_extension_8cs_source_1l01167"/>01167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01168"/>01168 
<anchor xml:id="__generate_type_extension_8cs_source_1l01169"/>01169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;__(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2)
<anchor xml:id="__generate_type_extension_8cs_source_1l01170"/>01170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01171"/>01171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t&quot;</emphasis>).Append(text).Append(text2);
<anchor xml:id="__generate_type_extension_8cs_source_1l01172"/>01172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01173"/>01173 
<anchor xml:id="__generate_type_extension_8cs_source_1l01174"/>01174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;__(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3)
<anchor xml:id="__generate_type_extension_8cs_source_1l01175"/>01175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01176"/>01176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t&quot;</emphasis>).Append(text).Append(text2).Append(text3);
<anchor xml:id="__generate_type_extension_8cs_source_1l01177"/>01177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01178"/>01178 
<anchor xml:id="__generate_type_extension_8cs_source_1l01179"/>01179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;__(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text4)
<anchor xml:id="__generate_type_extension_8cs_source_1l01180"/>01180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01181"/>01181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t&quot;</emphasis>).Append(text).Append(text2).Append(text3).Append(text4);
<anchor xml:id="__generate_type_extension_8cs_source_1l01182"/>01182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01183"/>01183 
<anchor xml:id="__generate_type_extension_8cs_source_1l01184"/>01184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;__(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text4,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text5)
<anchor xml:id="__generate_type_extension_8cs_source_1l01185"/>01185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01186"/>01186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t&quot;</emphasis>).Append(text).Append(text2).Append(text3).Append(text4).Append(text5);
<anchor xml:id="__generate_type_extension_8cs_source_1l01187"/>01187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01188"/>01188 
<anchor xml:id="__generate_type_extension_8cs_source_1l01189"/>01189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;__(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text4,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text5,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text6)
<anchor xml:id="__generate_type_extension_8cs_source_1l01190"/>01190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01191"/>01191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t&quot;</emphasis>).Append(text).Append(text2).Append(text3).Append(text4).Append(text5).Append(text6);
<anchor xml:id="__generate_type_extension_8cs_source_1l01192"/>01192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01193"/>01193 
<anchor xml:id="__generate_type_extension_8cs_source_1l01194"/>01194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;__(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text4,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text5,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text6,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text7)
<anchor xml:id="__generate_type_extension_8cs_source_1l01195"/>01195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01196"/>01196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t&quot;</emphasis>).Append(text).Append(text2).Append(text3).Append(text4).Append(text5).Append(text6).Append(text7);
<anchor xml:id="__generate_type_extension_8cs_source_1l01197"/>01197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01198"/>01198 
<anchor xml:id="__generate_type_extension_8cs_source_1l01199"/>01199 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l01200"/>01200 
<anchor xml:id="__generate_type_extension_8cs_source_1l01201"/>01201 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Indent&#32;2</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l01202"/>01202 
<anchor xml:id="__generate_type_extension_8cs_source_1l01203"/>01203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;___(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text)
<anchor xml:id="__generate_type_extension_8cs_source_1l01204"/>01204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01205"/>01205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t\t&quot;</emphasis>).Append(text);
<anchor xml:id="__generate_type_extension_8cs_source_1l01206"/>01206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01207"/>01207 
<anchor xml:id="__generate_type_extension_8cs_source_1l01208"/>01208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;___(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2)
<anchor xml:id="__generate_type_extension_8cs_source_1l01209"/>01209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01210"/>01210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t\t&quot;</emphasis>).Append(text).Append(text2);
<anchor xml:id="__generate_type_extension_8cs_source_1l01211"/>01211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01212"/>01212 
<anchor xml:id="__generate_type_extension_8cs_source_1l01213"/>01213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;___(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3)
<anchor xml:id="__generate_type_extension_8cs_source_1l01214"/>01214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01215"/>01215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t\t&quot;</emphasis>).Append(text).Append(text2).Append(text3);
<anchor xml:id="__generate_type_extension_8cs_source_1l01216"/>01216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01217"/>01217 
<anchor xml:id="__generate_type_extension_8cs_source_1l01218"/>01218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;___(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text4)
<anchor xml:id="__generate_type_extension_8cs_source_1l01219"/>01219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01220"/>01220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t\t&quot;</emphasis>).Append(text).Append(text2).Append(text3).Append(text4);
<anchor xml:id="__generate_type_extension_8cs_source_1l01221"/>01221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01222"/>01222 
<anchor xml:id="__generate_type_extension_8cs_source_1l01223"/>01223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;___(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text4,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text5)
<anchor xml:id="__generate_type_extension_8cs_source_1l01224"/>01224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01225"/>01225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t\t&quot;</emphasis>).Append(text).Append(text2).Append(text3).Append(text4).Append(text5);
<anchor xml:id="__generate_type_extension_8cs_source_1l01226"/>01226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01227"/>01227 
<anchor xml:id="__generate_type_extension_8cs_source_1l01228"/>01228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;___(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text4,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text5,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text6)
<anchor xml:id="__generate_type_extension_8cs_source_1l01229"/>01229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01230"/>01230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t\t&quot;</emphasis>).Append(text).Append(text2).Append(text3).Append(text4).Append(text5).Append(text6);
<anchor xml:id="__generate_type_extension_8cs_source_1l01231"/>01231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01232"/>01232 
<anchor xml:id="__generate_type_extension_8cs_source_1l01233"/>01233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;___(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text4,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text5,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text6,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text7)
<anchor xml:id="__generate_type_extension_8cs_source_1l01234"/>01234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01235"/>01235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t\t&quot;</emphasis>).Append(text).Append(text2).Append(text3).Append(text4).Append(text5).Append(text6).Append(text7);
<anchor xml:id="__generate_type_extension_8cs_source_1l01236"/>01236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01237"/>01237 
<anchor xml:id="__generate_type_extension_8cs_source_1l01238"/>01238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;___(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text4,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text5,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text6,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text7,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text8)
<anchor xml:id="__generate_type_extension_8cs_source_1l01239"/>01239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01240"/>01240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t\t&quot;</emphasis>).Append(text).Append(text2).Append(text3).Append(text4).Append(text5).Append(text6).Append(text7).Append(text8);
<anchor xml:id="__generate_type_extension_8cs_source_1l01241"/>01241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01242"/>01242 
<anchor xml:id="__generate_type_extension_8cs_source_1l01243"/>01243 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l01244"/>01244 
<anchor xml:id="__generate_type_extension_8cs_source_1l01245"/>01245 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Indent&#32;3</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l01246"/>01246 
<anchor xml:id="__generate_type_extension_8cs_source_1l01247"/>01247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;____(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb)
<anchor xml:id="__generate_type_extension_8cs_source_1l01248"/>01248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01249"/>01249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t\t\t&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l01250"/>01250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01251"/>01251 
<anchor xml:id="__generate_type_extension_8cs_source_1l01252"/>01252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;____(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text)
<anchor xml:id="__generate_type_extension_8cs_source_1l01253"/>01253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01254"/>01254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t\t\t&quot;</emphasis>).Append(text);
<anchor xml:id="__generate_type_extension_8cs_source_1l01255"/>01255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01256"/>01256 
<anchor xml:id="__generate_type_extension_8cs_source_1l01257"/>01257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;____(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2)
<anchor xml:id="__generate_type_extension_8cs_source_1l01258"/>01258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01259"/>01259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t\t\t&quot;</emphasis>).Append(text).Append(text2);
<anchor xml:id="__generate_type_extension_8cs_source_1l01260"/>01260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01261"/>01261 
<anchor xml:id="__generate_type_extension_8cs_source_1l01262"/>01262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;____(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3)
<anchor xml:id="__generate_type_extension_8cs_source_1l01263"/>01263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01264"/>01264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t\t\t&quot;</emphasis>).Append(text).Append(text2).Append(text3);
<anchor xml:id="__generate_type_extension_8cs_source_1l01265"/>01265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01266"/>01266 
<anchor xml:id="__generate_type_extension_8cs_source_1l01267"/>01267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;____(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text4)
<anchor xml:id="__generate_type_extension_8cs_source_1l01268"/>01268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01269"/>01269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t\t\t&quot;</emphasis>).Append(text).Append(text2).Append(text3).Append(text4);
<anchor xml:id="__generate_type_extension_8cs_source_1l01270"/>01270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01271"/>01271 
<anchor xml:id="__generate_type_extension_8cs_source_1l01272"/>01272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;____(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text4,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text5)
<anchor xml:id="__generate_type_extension_8cs_source_1l01273"/>01273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01274"/>01274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t\t\t&quot;</emphasis>).Append(text).Append(text2).Append(text3).Append(text4).Append(text5);
<anchor xml:id="__generate_type_extension_8cs_source_1l01275"/>01275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01276"/>01276 
<anchor xml:id="__generate_type_extension_8cs_source_1l01277"/>01277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;____(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text4,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text5,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text6)
<anchor xml:id="__generate_type_extension_8cs_source_1l01278"/>01278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01279"/>01279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t\t\t&quot;</emphasis>).Append(text).Append(text2).Append(text3).Append(text4).Append(text5).Append(text6);
<anchor xml:id="__generate_type_extension_8cs_source_1l01280"/>01280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01281"/>01281 
<anchor xml:id="__generate_type_extension_8cs_source_1l01282"/>01282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;____(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text4,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text5,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text6,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text7)
<anchor xml:id="__generate_type_extension_8cs_source_1l01283"/>01283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01284"/>01284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t\t\t&quot;</emphasis>).Append(text).Append(text2).Append(text3).Append(text4).Append(text5).Append(text6).Append(text7);
<anchor xml:id="__generate_type_extension_8cs_source_1l01285"/>01285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01286"/>01286 
<anchor xml:id="__generate_type_extension_8cs_source_1l01287"/>01287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;____(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text4,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text5,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text6,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text7,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text8)
<anchor xml:id="__generate_type_extension_8cs_source_1l01288"/>01288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01289"/>01289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t\t\t&quot;</emphasis>).Append(text).Append(text2).Append(text3).Append(text4).Append(text5).Append(text6).Append(text7).Append(text8);
<anchor xml:id="__generate_type_extension_8cs_source_1l01290"/>01290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01291"/>01291 
<anchor xml:id="__generate_type_extension_8cs_source_1l01292"/>01292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;____(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text4,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text5,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text6,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text7,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text8,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text9)
<anchor xml:id="__generate_type_extension_8cs_source_1l01293"/>01293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01294"/>01294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t\t\t&quot;</emphasis>).Append(text).Append(text2).Append(text3).Append(text4).Append(text5).Append(text6).Append(text7).Append(text8).Append(text9);
<anchor xml:id="__generate_type_extension_8cs_source_1l01295"/>01295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01296"/>01296 
<anchor xml:id="__generate_type_extension_8cs_source_1l01297"/>01297 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l01298"/>01298 
<anchor xml:id="__generate_type_extension_8cs_source_1l01299"/>01299 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Indent&#32;4</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l01300"/>01300 
<anchor xml:id="__generate_type_extension_8cs_source_1l01301"/>01301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;_____(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text)
<anchor xml:id="__generate_type_extension_8cs_source_1l01302"/>01302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01303"/>01303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t\t\t\t&quot;</emphasis>).Append(text);
<anchor xml:id="__generate_type_extension_8cs_source_1l01304"/>01304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01305"/>01305 
<anchor xml:id="__generate_type_extension_8cs_source_1l01306"/>01306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;_____(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2)
<anchor xml:id="__generate_type_extension_8cs_source_1l01307"/>01307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01308"/>01308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t\t\t\t&quot;</emphasis>).Append(text).Append(text2);
<anchor xml:id="__generate_type_extension_8cs_source_1l01309"/>01309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01310"/>01310 
<anchor xml:id="__generate_type_extension_8cs_source_1l01311"/>01311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;_____(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3)
<anchor xml:id="__generate_type_extension_8cs_source_1l01312"/>01312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01313"/>01313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t\t\t\t&quot;</emphasis>).Append(text).Append(text2).Append(text3);
<anchor xml:id="__generate_type_extension_8cs_source_1l01314"/>01314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01315"/>01315 
<anchor xml:id="__generate_type_extension_8cs_source_1l01316"/>01316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;_____(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text4)
<anchor xml:id="__generate_type_extension_8cs_source_1l01317"/>01317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01318"/>01318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t\t\t\t&quot;</emphasis>).Append(text).Append(text2).Append(text3).Append(text4);
<anchor xml:id="__generate_type_extension_8cs_source_1l01319"/>01319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01320"/>01320 
<anchor xml:id="__generate_type_extension_8cs_source_1l01321"/>01321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;_____(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text4,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text5)
<anchor xml:id="__generate_type_extension_8cs_source_1l01322"/>01322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01323"/>01323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t\t\t\t&quot;</emphasis>).Append(text).Append(text2).Append(text3).Append(text4).Append(text5);
<anchor xml:id="__generate_type_extension_8cs_source_1l01324"/>01324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01325"/>01325 
<anchor xml:id="__generate_type_extension_8cs_source_1l01326"/>01326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;_____(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text4,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text5,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text6)
<anchor xml:id="__generate_type_extension_8cs_source_1l01327"/>01327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01328"/>01328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t\t\t\t&quot;</emphasis>).Append(text).Append(text2).Append(text3).Append(text4).Append(text5).Append(text6);
<anchor xml:id="__generate_type_extension_8cs_source_1l01329"/>01329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01330"/>01330 
<anchor xml:id="__generate_type_extension_8cs_source_1l01331"/>01331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;_____(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text4,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text5,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text6,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text7)
<anchor xml:id="__generate_type_extension_8cs_source_1l01332"/>01332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01333"/>01333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t\t\t\t&quot;</emphasis>).Append(text).Append(text2).Append(text3).Append(text4).Append(text5).Append(text6).Append(text7);
<anchor xml:id="__generate_type_extension_8cs_source_1l01334"/>01334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01335"/>01335 
<anchor xml:id="__generate_type_extension_8cs_source_1l01336"/>01336 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l01337"/>01337 
<anchor xml:id="__generate_type_extension_8cs_source_1l01338"/>01338 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Indent&#32;5</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l01339"/>01339 
<anchor xml:id="__generate_type_extension_8cs_source_1l01340"/>01340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;______(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text)
<anchor xml:id="__generate_type_extension_8cs_source_1l01341"/>01341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01342"/>01342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t\t\t\t\t&quot;</emphasis>).Append(text);
<anchor xml:id="__generate_type_extension_8cs_source_1l01343"/>01343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01344"/>01344 
<anchor xml:id="__generate_type_extension_8cs_source_1l01345"/>01345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;______(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2)
<anchor xml:id="__generate_type_extension_8cs_source_1l01346"/>01346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01347"/>01347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t\t\t\t&quot;</emphasis>).Append(text).Append(text2);
<anchor xml:id="__generate_type_extension_8cs_source_1l01348"/>01348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01349"/>01349 
<anchor xml:id="__generate_type_extension_8cs_source_1l01350"/>01350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;______(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3)
<anchor xml:id="__generate_type_extension_8cs_source_1l01351"/>01351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01352"/>01352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t\t\t\t\t&quot;</emphasis>).Append(text).Append(text2).Append(text3);
<anchor xml:id="__generate_type_extension_8cs_source_1l01353"/>01353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01354"/>01354 
<anchor xml:id="__generate_type_extension_8cs_source_1l01355"/>01355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;______(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text4)
<anchor xml:id="__generate_type_extension_8cs_source_1l01356"/>01356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01357"/>01357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t\t\t\t\t&quot;</emphasis>).Append(text).Append(text2).Append(text3).Append(text4);
<anchor xml:id="__generate_type_extension_8cs_source_1l01358"/>01358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01359"/>01359 
<anchor xml:id="__generate_type_extension_8cs_source_1l01360"/>01360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;______(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text4,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text5)
<anchor xml:id="__generate_type_extension_8cs_source_1l01361"/>01361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01362"/>01362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t\t\t\t\t&quot;</emphasis>).Append(text).Append(text2).Append(text3).Append(text4).Append(text5);
<anchor xml:id="__generate_type_extension_8cs_source_1l01363"/>01363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01364"/>01364 
<anchor xml:id="__generate_type_extension_8cs_source_1l01365"/>01365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;______(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text4,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text5,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text6)
<anchor xml:id="__generate_type_extension_8cs_source_1l01366"/>01366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01367"/>01367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t\t\t\t\t&quot;</emphasis>).Append(text).Append(text2).Append(text3).Append(text4).Append(text5).Append(text6);
<anchor xml:id="__generate_type_extension_8cs_source_1l01368"/>01368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01369"/>01369 
<anchor xml:id="__generate_type_extension_8cs_source_1l01370"/>01370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;______(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text2,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text3,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text4,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text5,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text6,&#32;<emphasis role="keywordtype">string</emphasis>&#32;text7)
<anchor xml:id="__generate_type_extension_8cs_source_1l01371"/>01371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01372"/>01372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\t\t\t\t\t&quot;</emphasis>).Append(text).Append(text2).Append(text3).Append(text4).Append(text5).Append(text6).Append(text7);
<anchor xml:id="__generate_type_extension_8cs_source_1l01373"/>01373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01374"/>01374 
<anchor xml:id="__generate_type_extension_8cs_source_1l01375"/>01375 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l01376"/>01376 
<anchor xml:id="__generate_type_extension_8cs_source_1l01377"/>01377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;_(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb,&#32;<emphasis role="keywordtype">int</emphasis>&#32;text)
<anchor xml:id="__generate_type_extension_8cs_source_1l01378"/>01378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01379"/>01379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(text.ToString());
<anchor xml:id="__generate_type_extension_8cs_source_1l01380"/>01380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01381"/>01381 
<anchor xml:id="__generate_type_extension_8cs_source_1l01382"/>01382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;EOL(<emphasis role="keyword">this</emphasis>&#32;StringBuilder&#32;sb)
<anchor xml:id="__generate_type_extension_8cs_source_1l01383"/>01383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generate_type_extension_8cs_source_1l01384"/>01384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sb.Append(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
<anchor xml:id="__generate_type_extension_8cs_source_1l01385"/>01385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01386"/>01386 
<anchor xml:id="__generate_type_extension_8cs_source_1l01387"/>01387 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__generate_type_extension_8cs_source_1l01388"/>01388 &#32;&#32;&#32;&#32;}
<anchor xml:id="__generate_type_extension_8cs_source_1l01389"/>01389 }
<anchor xml:id="__generate_type_extension_8cs_source_1l01390"/>01390 
<anchor xml:id="__generate_type_extension_8cs_source_1l01391"/>01391 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
