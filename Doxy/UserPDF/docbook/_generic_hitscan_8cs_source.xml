<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__generic_hitscan_8cs_source" xml:lang="en-US">
<title>GenericHitscan.cs</title>
<indexterm><primary>C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/Simple/Core/GenericHitscan/GenericHitscan.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__generic_hitscan_8cs_source_1l00001"/>00001 <emphasis role="comment">//&#32;---------------------------------------------------------------------------------------------</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00002"/>00002 <emphasis role="comment">//&#32;&lt;copyright&gt;PhotonNetwork&#32;Framework&#32;for&#32;Unity&#32;-&#32;Copyright&#32;(C)&#32;2020&#32;Exit&#32;Games&#32;GmbH&lt;/copyright&gt;</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00003"/>00003 <emphasis role="comment">//&#32;&lt;author&gt;developer@exitgames.com&lt;/author&gt;</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00004"/>00004 <emphasis role="comment">//&#32;---------------------------------------------------------------------------------------------</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00005"/>00005 
<anchor xml:id="__generic_hitscan_8cs_source_1l00006"/>00006 <emphasis role="keyword">using</emphasis>&#32;System.Collections.Generic;
<anchor xml:id="__generic_hitscan_8cs_source_1l00007"/>00007 <emphasis role="keyword">using</emphasis>&#32;UnityEngine;
<anchor xml:id="__generic_hitscan_8cs_source_1l00008"/>00008 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_photon">Photon</link>.<link linkend="_namespace_photon_1_1_pun">Pun</link>.<link linkend="_namespace_photon_1_1_pun_1_1_simple">Simple</link>.<link linkend="_namespace_photon_1_1_pun_1_1_simple_1_1_pooling">Pooling</link>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00009"/>00009 
<anchor xml:id="__generic_hitscan_8cs_source_1l00010"/>00010 <emphasis role="preprocessor">#if&#32;GHOST_WORLD</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00011"/>00011 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_photon">Photon</link>.<link linkend="_namespace_photon_1_1_pun">Pun</link>.<link linkend="_namespace_photon_1_1_pun_1_1_simple">Simple</link>.<link linkend="_namespace_photon_1_1_pun_1_1_simple_1_1_ghost_worlds">GhostWorlds</link>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00012"/>00012 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00013"/>00013 
<anchor xml:id="__generic_hitscan_8cs_source_1l00014"/>00014 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_photon_1_1_pun_1_1_simple">Photon.Pun.Simple</link>
<anchor xml:id="__generic_hitscan_8cs_source_1l00015"/>00015 {
<anchor xml:id="__generic_hitscan_8cs_source_1l00016"/>00016 
<anchor xml:id="__generic_hitscan_8cs_source_1l00017"/><link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">00017</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>&#32;{&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447a117e624bbbd5afc75a3150ba85d3cb93">Raycast</link>,&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447a5a531f5b14d43ca3c2975cee8144d6bc">SphereCast</link>,&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447ac2da2d20109ddd9d5fad40f927d01598">CapsuleCast</link>,&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447a2fb8f211a8ad4f80cf148835b81b1c19">BoxCast</link>,&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447aaaeeabcdcf7c5889476de87f47d04a12">OverlapSphere</link>,&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447a9d7cca699a16465c7db10dc975c4337d">OverlapCapsule</link>,&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447aff1298571630db5d03efeb30e43b9079">OverlapBox</link>&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00018"/>00018 
<anchor xml:id="__generic_hitscan_8cs_source_1l00022"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_type_ext">00022</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_type_ext">HitscanTypeExt</link>
<anchor xml:id="__generic_hitscan_8cs_source_1l00023"/>00023 &#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00024"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_type_ext_1a6ced1f00254746f3c44ee32b536f7323">00024</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_type_ext_1a6ced1f00254746f3c44ee32b536f7323">IsCast</link>(<emphasis role="keyword">this</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>&#32;hitscanType)
<anchor xml:id="__generic_hitscan_8cs_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((<emphasis role="keywordtype">int</emphasis>)hitscanType&#32;&lt;&#32;4);
<anchor xml:id="__generic_hitscan_8cs_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00028"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_type_ext_1aa00954aa9ca3979d21f0da7631695c26">00028</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_type_ext_1aa00954aa9ca3979d21f0da7631695c26">IsOverlap</link>(<emphasis role="keyword">this</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>&#32;hitscanType)
<anchor xml:id="__generic_hitscan_8cs_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((<emphasis role="keywordtype">int</emphasis>)hitscanType&#32;&gt;&#32;3);
<anchor xml:id="__generic_hitscan_8cs_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00032"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_type_ext_1a5164cbef7b504df73ca86fff94b56c85">00032</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_type_ext_1a5164cbef7b504df73ca86fff94b56c85">UsesRadius</link>(<emphasis role="keyword">this</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>&#32;hitscanType)
<anchor xml:id="__generic_hitscan_8cs_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;hitscanType&#32;==&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.SphereCast&#32;||&#32;hitscanType&#32;==&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.CapsuleCast&#32;||&#32;hitscanType&#32;==&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.OverlapSphere&#32;||&#32;hitscanType&#32;==&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.OverlapCapsule;
<anchor xml:id="__generic_hitscan_8cs_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00036"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_type_ext_1afb1c086adc807677a22be1566d927981">00036</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_type_ext_1afb1c086adc807677a22be1566d927981">IsBox</link>(<emphasis role="keyword">this</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>&#32;hitscanType)
<anchor xml:id="__generic_hitscan_8cs_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(hitscanType&#32;==&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.BoxCast)&#32;||&#32;(hitscanType&#32;==&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.OverlapBox);
<anchor xml:id="__generic_hitscan_8cs_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00040"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_type_ext_1aba687e99fcaa3393055b06813923c2de">00040</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_type_ext_1aba687e99fcaa3393055b06813923c2de">IsCapsule</link>(<emphasis role="keyword">this</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>&#32;hitscanType)
<anchor xml:id="__generic_hitscan_8cs_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(hitscanType&#32;==&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.CapsuleCast)&#32;||&#32;(hitscanType&#32;==&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.OverlapCapsule);
<anchor xml:id="__generic_hitscan_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00045"/>00045 
<anchor xml:id="__generic_hitscan_8cs_source_1l00049"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext">00049</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext">GenericHitscanExt</link>
<anchor xml:id="__generic_hitscan_8cs_source_1l00050"/>00050 &#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00051"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext_1a53512144e604bbe851dea2b4260520b8">00051</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Collider[]&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext_1a53512144e604bbe851dea2b4260520b8">reusableColliderArray</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Collider[64];
<anchor xml:id="__generic_hitscan_8cs_source_1l00052"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext_1add7ee6255734194b8505fc42ff051c9c">00052</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;RaycastHit[]&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext_1add7ee6255734194b8505fc42ff051c9c">reusableRayHitArray</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;RaycastHit[64];
<anchor xml:id="__generic_hitscan_8cs_source_1l00053"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext_1a2ce411bc560bf5d0c5970f580295180d">00053</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;List&lt;NetworkHit&gt;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext_1a2ce411bc560bf5d0c5970f580295180d">reusableHitscanHitList</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;NetworkHit&gt;();
<anchor xml:id="__generic_hitscan_8cs_source_1l00054"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext_1a35b721e637095fb38a5fa46d38720b8e">00054</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;List&lt;NetObject&gt;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext_1a35b721e637095fb38a5fa46d38720b8e">reusableNetObjectsList</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;NetObject&gt;();
<anchor xml:id="__generic_hitscan_8cs_source_1l00055"/>00055 
<anchor xml:id="__generic_hitscan_8cs_source_1l00056"/>00056 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Visualizers</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00057"/>00057 
<anchor xml:id="__generic_hitscan_8cs_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//#if&#32;(UNITY_EDITOR&#32;||&#32;DEVELOPMENT_BUILD)</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00059"/>00059 
<anchor xml:id="__generic_hitscan_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a056d4010391c5d568746195703eff547a3d164a4fbbdd103bddb596268f741bae">GameObject</link>&#32;DebugSpherePrefab;
<anchor xml:id="__generic_hitscan_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a056d4010391c5d568746195703eff547a3d164a4fbbdd103bddb596268f741bae">GameObject</link>&#32;DebugCylinderPrefab;
<anchor xml:id="__generic_hitscan_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a056d4010391c5d568746195703eff547a3d164a4fbbdd103bddb596268f741bae">GameObject</link>&#32;DebugCubePrefab;
<anchor xml:id="__generic_hitscan_8cs_source_1l00063"/>00063 
<anchor xml:id="__generic_hitscan_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a056d4010391c5d568746195703eff547a3d164a4fbbdd103bddb596268f741bae">GameObject</link>&#32;SetUpDebugPrimitive(<emphasis role="keyword">this</emphasis>&#32;GameObject&#32;go,&#32;<emphasis role="keywordtype">string</emphasis>&#32;name,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;createCylinderChild&#32;=&#32;<emphasis role="keyword">false</emphasis>)
<anchor xml:id="__generic_hitscan_8cs_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;go.name&#32;=&#32;name;
<anchor xml:id="__generic_hitscan_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;go.hideFlags&#32;=&#32;HideFlags.HideInHierarchy&#32;|&#32;HideFlags.HideInInspector;
<anchor xml:id="__generic_hitscan_8cs_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Object.DontDestroyOnLoad(go);
<anchor xml:id="__generic_hitscan_8cs_source_1l00069"/>00069 
<anchor xml:id="__generic_hitscan_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Collider&#32;collider;
<anchor xml:id="__generic_hitscan_8cs_source_1l00071"/>00071 
<anchor xml:id="__generic_hitscan_8cs_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(createCylinderChild)
<anchor xml:id="__generic_hitscan_8cs_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;child&#32;=&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a056d4010391c5d568746195703eff547a3d164a4fbbdd103bddb596268f741bae">GameObject</link>.CreatePrimitive(PrimitiveType.Cylinder);
<anchor xml:id="__generic_hitscan_8cs_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;child.GetComponent&lt;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a056d4010391c5d568746195703eff547a07b20ae970048fc2002d756f27acc863">Renderer</link>&gt;().material.color&#32;=&#32;Color.yellow;
<anchor xml:id="__generic_hitscan_8cs_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;child.transform.parent&#32;=&#32;go.transform;
<anchor xml:id="__generic_hitscan_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;child.transform.eulerAngles&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(90,&#32;0,&#32;0);
<anchor xml:id="__generic_hitscan_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;collider&#32;=&#32;child.GetComponent&lt;Collider&gt;();
<anchor xml:id="__generic_hitscan_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;collider&#32;=&#32;go.GetComponent&lt;Collider&gt;();
<anchor xml:id="__generic_hitscan_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Object.DestroyImmediate(collider);
<anchor xml:id="__generic_hitscan_8cs_source_1l00085"/>00085 
<anchor xml:id="__generic_hitscan_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;rend&#32;=&#32;go.GetComponent&lt;Renderer&gt;();
<anchor xml:id="__generic_hitscan_8cs_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rend)
<anchor xml:id="__generic_hitscan_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rend.material.color&#32;=&#32;Color.yellow;
<anchor xml:id="__generic_hitscan_8cs_source_1l00089"/>00089 
<anchor xml:id="__generic_hitscan_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;go;
<anchor xml:id="__generic_hitscan_8cs_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00092"/>00092 
<anchor xml:id="__generic_hitscan_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;CreateDebugPrimitives()
<anchor xml:id="__generic_hitscan_8cs_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DebugSpherePrefab&#32;=&#32;GameObject.CreatePrimitive(PrimitiveType.Sphere).SetUpDebugPrimitive(<emphasis role="stringliteral">&quot;DebugSpherePrefab&quot;</emphasis>);
<anchor xml:id="__generic_hitscan_8cs_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool">Pool</link>.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool_1ab8de88193d363f522f4f48c3ad2771ce">AddPrefabToPool</link>(DebugSpherePrefab.gameObject,&#32;2,&#32;2,&#32;<emphasis role="keyword">null</emphasis>,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__generic_hitscan_8cs_source_1l00098"/>00098 
<anchor xml:id="__generic_hitscan_8cs_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DebugCubePrefab&#32;=&#32;GameObject.CreatePrimitive(PrimitiveType.Cube).SetUpDebugPrimitive(<emphasis role="stringliteral">&quot;DebugCubePrefab&quot;</emphasis>);
<anchor xml:id="__generic_hitscan_8cs_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool">Pool</link>.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool_1ab8de88193d363f522f4f48c3ad2771ce">AddPrefabToPool</link>(DebugCubePrefab.gameObject,&#32;2,&#32;2,&#32;<emphasis role="keyword">null</emphasis>,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__generic_hitscan_8cs_source_1l00101"/>00101 
<anchor xml:id="__generic_hitscan_8cs_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DebugCylinderPrefab&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;GameObject().SetUpDebugPrimitive(<emphasis role="stringliteral">&quot;DebugCylinderPrefab&quot;</emphasis>,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__generic_hitscan_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool">Pool</link>.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool_1ab8de88193d363f522f4f48c3ad2771ce">AddPrefabToPool</link>(DebugCylinderPrefab.gameObject,&#32;4,&#32;4,&#32;<emphasis role="keyword">null</emphasis>,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__generic_hitscan_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00105"/>00105 
<anchor xml:id="__generic_hitscan_8cs_source_1l00106"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext_1a7a5116aae252a8fd9bb0fcf2e37f27e6">00106</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext_1a7a5116aae252a8fd9bb0fcf2e37f27e6">VisualizeHitscan</link>(<emphasis role="keyword">this</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition">HitscanDefinition</link>&#32;hd,&#32;Transform&#32;origin,&#32;<emphasis role="keywordtype">float</emphasis>&#32;duration&#32;=&#32;.5f)
<anchor xml:id="__generic_hitscan_8cs_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(DebugSpherePrefab&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__generic_hitscan_8cs_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CreateDebugPrimitives();
<anchor xml:id="__generic_hitscan_8cs_source_1l00110"/>00110 
<anchor xml:id="__generic_hitscan_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Transform&#32;tr&#32;=&#32;hd.sourceObject.transform;</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00112"/>00112 
<anchor xml:id="__generic_hitscan_8cs_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a9763ffe8911201cbe64c8720fcd2b5d0">hitscanType</link>)
<anchor xml:id="__generic_hitscan_8cs_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.Raycast:
<anchor xml:id="__generic_hitscan_8cs_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;pos&#32;=&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a10837c9550ee4c55cd4818dcd35f4d80">useOffset</link>&#32;?
<anchor xml:id="__generic_hitscan_8cs_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;origin.position&#32;+&#32;origin.TransformDirection(hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1aec7152e443150178277feefdc90a9890">offset1</link>)&#32;+&#32;(origin.forward&#32;*&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a771f3bbdd1ec7b10a7f6f69ab4916322">distance</link>&#32;*&#32;.5f)&#32;:
<anchor xml:id="__generic_hitscan_8cs_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;origin.position&#32;+&#32;(origin.forward&#32;*&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a771f3bbdd1ec7b10a7f6f69ab4916322">distance</link>&#32;*&#32;.5f);
<anchor xml:id="__generic_hitscan_8cs_source_1l00120"/>00120 
<anchor xml:id="__generic_hitscan_8cs_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool">Pool</link>.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool_1a598ad23c36342ce3bd0dbdbe8979a980">Spawn</link>(DebugCylinderPrefab,&#32;pos,&#32;origin.rotation,&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(.1f,&#32;.1f,&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a771f3bbdd1ec7b10a7f6f69ab4916322">distance</link>&#32;*&#32;.5f),&#32;duration);
<anchor xml:id="__generic_hitscan_8cs_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00124"/>00124 
<anchor xml:id="__generic_hitscan_8cs_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.BoxCast:
<anchor xml:id="__generic_hitscan_8cs_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;pos&#32;=&#32;(hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a10837c9550ee4c55cd4818dcd35f4d80">useOffset</link>)&#32;?
<anchor xml:id="__generic_hitscan_8cs_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;origin.position&#32;+&#32;origin.TransformDirection(hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1aec7152e443150178277feefdc90a9890">offset1</link>)&#32;:
<anchor xml:id="__generic_hitscan_8cs_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;origin.position;
<anchor xml:id="__generic_hitscan_8cs_source_1l00130"/>00130 
<anchor xml:id="__generic_hitscan_8cs_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;pos2&#32;=&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a10837c9550ee4c55cd4818dcd35f4d80">useOffset</link>&#32;?
<anchor xml:id="__generic_hitscan_8cs_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;origin.position&#32;+&#32;origin.TransformDirection(hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1aec7152e443150178277feefdc90a9890">offset1</link>)&#32;+&#32;(origin.forward&#32;*&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a771f3bbdd1ec7b10a7f6f69ab4916322">distance</link>)&#32;:
<anchor xml:id="__generic_hitscan_8cs_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;origin.position&#32;+&#32;(origin.forward&#32;*&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a771f3bbdd1ec7b10a7f6f69ab4916322">distance</link>);
<anchor xml:id="__generic_hitscan_8cs_source_1l00134"/>00134 
<anchor xml:id="__generic_hitscan_8cs_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;midpos&#32;=&#32;pos&#32;+&#32;(pos2&#32;-&#32;pos)&#32;*&#32;.5f;
<anchor xml:id="__generic_hitscan_8cs_source_1l00136"/>00136 
<anchor xml:id="__generic_hitscan_8cs_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;rot&#32;=&#32;Quaternion.Euler(origin.eulerAngles&#32;+&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a6d5851caa7f3e7ea2a2d91e1454ad514">orientation</link>);
<anchor xml:id="__generic_hitscan_8cs_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;scl&#32;=&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a4ce6ae6e122e10bdc8c96504e6e28cd8">halfExtents</link>&#32;*&#32;2;
<anchor xml:id="__generic_hitscan_8cs_source_1l00139"/>00139 
<anchor xml:id="__generic_hitscan_8cs_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool">Pool</link>.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool_1a598ad23c36342ce3bd0dbdbe8979a980">Spawn</link>(DebugCubePrefab,&#32;pos2,&#32;rot,&#32;scl,&#32;duration);
<anchor xml:id="__generic_hitscan_8cs_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//DebugCylinder.Set(midpos,&#32;Quaternion.LookRotation(Vector3.up,&#32;tr.forward),&#32;new&#32;Vector3(.1f,&#32;cd.distance&#32;*&#32;.5f,&#32;.1f),&#32;duration);</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool">Pool</link>.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool_1a598ad23c36342ce3bd0dbdbe8979a980">Spawn</link>(DebugCylinderPrefab,&#32;midpos,&#32;Quaternion.LookRotation(pos2&#32;-&#32;pos,&#32;Vector3.up),&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(.1f,&#32;.1f,&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a771f3bbdd1ec7b10a7f6f69ab4916322">distance</link>&#32;*&#32;.5f),&#32;duration);
<anchor xml:id="__generic_hitscan_8cs_source_1l00143"/>00143 
<anchor xml:id="__generic_hitscan_8cs_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00146"/>00146 
<anchor xml:id="__generic_hitscan_8cs_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.SphereCast:
<anchor xml:id="__generic_hitscan_8cs_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;spos&#32;=&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a10837c9550ee4c55cd4818dcd35f4d80">useOffset</link>&#32;?
<anchor xml:id="__generic_hitscan_8cs_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;origin.position&#32;+&#32;origin.TransformDirection(hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1aec7152e443150178277feefdc90a9890">offset1</link>)&#32;:
<anchor xml:id="__generic_hitscan_8cs_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;origin.position;
<anchor xml:id="__generic_hitscan_8cs_source_1l00152"/>00152 
<anchor xml:id="__generic_hitscan_8cs_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;mpos&#32;=&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a10837c9550ee4c55cd4818dcd35f4d80">useOffset</link>&#32;?
<anchor xml:id="__generic_hitscan_8cs_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;origin.position&#32;+&#32;origin.TransformDirection(hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1aec7152e443150178277feefdc90a9890">offset1</link>)&#32;+&#32;(origin.forward&#32;*&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a771f3bbdd1ec7b10a7f6f69ab4916322">distance</link>&#32;*&#32;.5f)&#32;:
<anchor xml:id="__generic_hitscan_8cs_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;origin.position&#32;+&#32;(origin.forward&#32;*&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a771f3bbdd1ec7b10a7f6f69ab4916322">distance</link>&#32;*&#32;.5f);
<anchor xml:id="__generic_hitscan_8cs_source_1l00156"/>00156 
<anchor xml:id="__generic_hitscan_8cs_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;epos&#32;=&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a10837c9550ee4c55cd4818dcd35f4d80">useOffset</link>&#32;?
<anchor xml:id="__generic_hitscan_8cs_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;origin.position&#32;+&#32;origin.TransformDirection(hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1aec7152e443150178277feefdc90a9890">offset1</link>)&#32;+&#32;(origin.forward&#32;*&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a771f3bbdd1ec7b10a7f6f69ab4916322">distance</link>)&#32;:
<anchor xml:id="__generic_hitscan_8cs_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;origin.position&#32;+&#32;(origin.forward&#32;*&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a771f3bbdd1ec7b10a7f6f69ab4916322">distance</link>);
<anchor xml:id="__generic_hitscan_8cs_source_1l00160"/>00160 
<anchor xml:id="__generic_hitscan_8cs_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Vector3&#32;dir&#32;=&#32;(epos&#32;-&#32;spos);</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;scl&#32;=&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a3359e24db3b776d7d81ff421bb3c203e">radius</link>&#32;*&#32;2;
<anchor xml:id="__generic_hitscan_8cs_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool">Pool</link>.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool_1a598ad23c36342ce3bd0dbdbe8979a980">Spawn</link>(DebugSpherePrefab,&#32;spos,&#32;Quaternion.identity,&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(scl,&#32;scl,&#32;scl),&#32;duration);
<anchor xml:id="__generic_hitscan_8cs_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool">Pool</link>.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool_1a598ad23c36342ce3bd0dbdbe8979a980">Spawn</link>(DebugSpherePrefab,&#32;epos,&#32;Quaternion.identity,&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(scl,&#32;scl,&#32;scl),&#32;duration);
<anchor xml:id="__generic_hitscan_8cs_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool">Pool</link>.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool_1a598ad23c36342ce3bd0dbdbe8979a980">Spawn</link>(DebugCylinderPrefab,&#32;mpos,&#32;origin.rotation,&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(scl,&#32;scl,&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a771f3bbdd1ec7b10a7f6f69ab4916322">distance</link>&#32;*&#32;.5f),&#32;duration);
<anchor xml:id="__generic_hitscan_8cs_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00168"/>00168 
<anchor xml:id="__generic_hitscan_8cs_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.CapsuleCast:
<anchor xml:id="__generic_hitscan_8cs_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;spos1&#32;=&#32;origin.position&#32;+&#32;origin.TransformDirection(hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1aec7152e443150178277feefdc90a9890">offset1</link>);
<anchor xml:id="__generic_hitscan_8cs_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;spos2&#32;=&#32;origin.position&#32;+&#32;origin.TransformDirection(hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a1f790037471068200865d13fcd586b61">offset2</link>);
<anchor xml:id="__generic_hitscan_8cs_source_1l00173"/>00173 
<anchor xml:id="__generic_hitscan_8cs_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;originFwd&#32;=&#32;origin.forward&#32;*&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a771f3bbdd1ec7b10a7f6f69ab4916322">distance</link>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;halfOriginFwd&#32;=&#32;originFwd&#32;*&#32;.5f;
<anchor xml:id="__generic_hitscan_8cs_source_1l00176"/>00176 
<anchor xml:id="__generic_hitscan_8cs_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;mpos1&#32;=&#32;spos1&#32;+&#32;halfOriginFwd;
<anchor xml:id="__generic_hitscan_8cs_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;mpos2&#32;=&#32;spos2&#32;+&#32;halfOriginFwd;
<anchor xml:id="__generic_hitscan_8cs_source_1l00179"/>00179 
<anchor xml:id="__generic_hitscan_8cs_source_1l00180"/>00180 
<anchor xml:id="__generic_hitscan_8cs_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;epos1&#32;=&#32;spos1&#32;+&#32;originFwd;
<anchor xml:id="__generic_hitscan_8cs_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;epos2&#32;=&#32;spos2&#32;+&#32;originFwd;
<anchor xml:id="__generic_hitscan_8cs_source_1l00183"/>00183 
<anchor xml:id="__generic_hitscan_8cs_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;mposStr&#32;=&#32;spos1&#32;+&#32;(spos2&#32;-&#32;spos1)&#32;*&#32;.5f;
<anchor xml:id="__generic_hitscan_8cs_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;mposEnd&#32;=&#32;epos1&#32;+&#32;(epos2&#32;-&#32;epos1)&#32;*&#32;.5f;
<anchor xml:id="__generic_hitscan_8cs_source_1l00186"/>00186 
<anchor xml:id="__generic_hitscan_8cs_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;scl&#32;=&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a3359e24db3b776d7d81ff421bb3c203e">radius</link>&#32;*&#32;2;
<anchor xml:id="__generic_hitscan_8cs_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool">Pool</link>.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool_1a598ad23c36342ce3bd0dbdbe8979a980">Spawn</link>(DebugSpherePrefab,&#32;spos1,&#32;Quaternion.identity,&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(scl,&#32;scl,&#32;scl),&#32;duration);
<anchor xml:id="__generic_hitscan_8cs_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool">Pool</link>.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool_1a598ad23c36342ce3bd0dbdbe8979a980">Spawn</link>(DebugSpherePrefab,&#32;epos1,&#32;Quaternion.identity,&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(scl,&#32;scl,&#32;scl),&#32;duration);
<anchor xml:id="__generic_hitscan_8cs_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool">Pool</link>.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool_1a598ad23c36342ce3bd0dbdbe8979a980">Spawn</link>(DebugSpherePrefab,&#32;spos2,&#32;Quaternion.identity,&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(scl,&#32;scl,&#32;scl),&#32;duration);
<anchor xml:id="__generic_hitscan_8cs_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool">Pool</link>.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool_1a598ad23c36342ce3bd0dbdbe8979a980">Spawn</link>(DebugSpherePrefab,&#32;epos2,&#32;Quaternion.identity,&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(scl,&#32;scl,&#32;scl),&#32;duration);
<anchor xml:id="__generic_hitscan_8cs_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool">Pool</link>.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool_1a598ad23c36342ce3bd0dbdbe8979a980">Spawn</link>(DebugCylinderPrefab,&#32;mpos1,&#32;origin.rotation,&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(scl,&#32;scl,&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a771f3bbdd1ec7b10a7f6f69ab4916322">distance</link>&#32;*&#32;.5f),&#32;duration);
<anchor xml:id="__generic_hitscan_8cs_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool">Pool</link>.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool_1a598ad23c36342ce3bd0dbdbe8979a980">Spawn</link>(DebugCylinderPrefab,&#32;mpos2,&#32;origin.rotation,&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(scl,&#32;scl,&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a771f3bbdd1ec7b10a7f6f69ab4916322">distance</link>&#32;*&#32;.5f),&#32;duration);
<anchor xml:id="__generic_hitscan_8cs_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;mag&#32;=&#32;Vector3.Magnitude(spos2&#32;-&#32;spos1)&#32;*&#32;.5f;
<anchor xml:id="__generic_hitscan_8cs_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool">Pool</link>.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool_1a598ad23c36342ce3bd0dbdbe8979a980">Spawn</link>(DebugCylinderPrefab,&#32;mposStr,&#32;Quaternion.LookRotation(spos2&#32;-&#32;spos1,&#32;Vector3.up),&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(scl,&#32;scl,&#32;mag),&#32;duration);
<anchor xml:id="__generic_hitscan_8cs_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool">Pool</link>.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool_1a598ad23c36342ce3bd0dbdbe8979a980">Spawn</link>(DebugCylinderPrefab,&#32;mposEnd,&#32;Quaternion.LookRotation(epos2&#32;-&#32;epos1,&#32;Vector3.up),&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(scl,&#32;scl,&#32;mag),&#32;duration);
<anchor xml:id="__generic_hitscan_8cs_source_1l00197"/>00197 
<anchor xml:id="__generic_hitscan_8cs_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00200"/>00200 
<anchor xml:id="__generic_hitscan_8cs_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.OverlapSphere:
<anchor xml:id="__generic_hitscan_8cs_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;pos&#32;=&#32;(hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a10837c9550ee4c55cd4818dcd35f4d80">useOffset</link>)&#32;?&#32;origin.position&#32;+&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1aec7152e443150178277feefdc90a9890">offset1</link>&#32;:&#32;origin.position;
<anchor xml:id="__generic_hitscan_8cs_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Quaternion&#32;rot&#32;=&#32;origin.rotation;
<anchor xml:id="__generic_hitscan_8cs_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;scl&#32;=&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a3359e24db3b776d7d81ff421bb3c203e">radius</link>&#32;*&#32;2;
<anchor xml:id="__generic_hitscan_8cs_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool">Pool</link>.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool_1a598ad23c36342ce3bd0dbdbe8979a980">Spawn</link>(DebugSpherePrefab,&#32;pos,&#32;rot,&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(scl,&#32;scl,&#32;scl),&#32;duration);
<anchor xml:id="__generic_hitscan_8cs_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00209"/>00209 
<anchor xml:id="__generic_hitscan_8cs_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.OverlapBox:
<anchor xml:id="__generic_hitscan_8cs_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;pos&#32;=&#32;(hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a10837c9550ee4c55cd4818dcd35f4d80">useOffset</link>)&#32;?&#32;origin.position&#32;+&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1aec7152e443150178277feefdc90a9890">offset1</link>&#32;:&#32;origin.position;
<anchor xml:id="__generic_hitscan_8cs_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;rot&#32;=&#32;Quaternion.Euler(origin.eulerAngles&#32;+&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a6d5851caa7f3e7ea2a2d91e1454ad514">orientation</link>);
<anchor xml:id="__generic_hitscan_8cs_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;scl&#32;=&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a4ce6ae6e122e10bdc8c96504e6e28cd8">halfExtents</link>&#32;*&#32;2;
<anchor xml:id="__generic_hitscan_8cs_source_1l00215"/>00215 
<anchor xml:id="__generic_hitscan_8cs_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool">Pool</link>.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool_1a598ad23c36342ce3bd0dbdbe8979a980">Spawn</link>(DebugCubePrefab,&#32;pos,&#32;rot,&#32;scl,&#32;duration);
<anchor xml:id="__generic_hitscan_8cs_source_1l00217"/>00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00218"/>00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00219"/>00219 
<anchor xml:id="__generic_hitscan_8cs_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.OverlapCapsule:
<anchor xml:id="__generic_hitscan_8cs_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Quaternion&#32;rot&#32;=&#32;origin.rotation;
<anchor xml:id="__generic_hitscan_8cs_source_1l00223"/>00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;scl&#32;=&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a3359e24db3b776d7d81ff421bb3c203e">radius</link>&#32;*&#32;2;
<anchor xml:id="__generic_hitscan_8cs_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;pos1&#32;=&#32;origin.TransformPoint(hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1aec7152e443150178277feefdc90a9890">offset1</link>);
<anchor xml:id="__generic_hitscan_8cs_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;pos2&#32;=&#32;origin.TransformPoint(hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a1f790037471068200865d13fcd586b61">offset2</link>);
<anchor xml:id="__generic_hitscan_8cs_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;dir&#32;=&#32;pos2&#32;-&#32;pos1;
<anchor xml:id="__generic_hitscan_8cs_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;mid&#32;=&#32;pos1&#32;+&#32;dir&#32;*&#32;.5f;
<anchor xml:id="__generic_hitscan_8cs_source_1l00228"/>00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool">Pool</link>.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool_1a598ad23c36342ce3bd0dbdbe8979a980">Spawn</link>(DebugSpherePrefab,&#32;pos1,&#32;rot,&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(scl,&#32;scl,&#32;scl),&#32;duration);
<anchor xml:id="__generic_hitscan_8cs_source_1l00229"/>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool">Pool</link>.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool_1a598ad23c36342ce3bd0dbdbe8979a980">Spawn</link>(DebugSpherePrefab,&#32;pos2,&#32;rot,&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(scl,&#32;scl,&#32;scl),&#32;duration);
<anchor xml:id="__generic_hitscan_8cs_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool">Pool</link>.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_pooling_1_1_pool_1a598ad23c36342ce3bd0dbdbe8979a980">Spawn</link>(DebugCylinderPrefab,&#32;mid,&#32;Quaternion.LookRotation(dir,&#32;Vector3.up),&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(scl,&#32;scl,&#32;dir.magnitude&#32;*&#32;.5f),&#32;duration);
<anchor xml:id="__generic_hitscan_8cs_source_1l00231"/>00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00232"/>00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00233"/>00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00234"/>00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00235"/>00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//#endif</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00236"/>00236 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00237"/>00237 
<anchor xml:id="__generic_hitscan_8cs_source_1l00238"/>00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;readonly&#32;Dictionary&lt;int,&#32;int&gt;&#32;reusableGameObjIntDict&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Dictionary&lt;int,&#32;int&gt;();
<anchor xml:id="__generic_hitscan_8cs_source_1l00239"/>00239 
<anchor xml:id="__generic_hitscan_8cs_source_1l00240"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext_1acff49ee22059def2308ac07ec0a85020">00240</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext_1acff49ee22059def2308ac07ec0a85020">GenericHitscanNonAlloc</link>(<emphasis role="keyword">this</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition">HitscanDefinition</link>&#32;hd,&#32;Transform&#32;origin,&#32;out&#32;RaycastHit[]&#32;rayhits,&#32;out&#32;Collider[]&#32;hits,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;nearestIndex,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;showDebugWidgets&#32;=&#32;<emphasis role="keyword">false</emphasis>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;useSecondaryRealm&#32;=&#32;<emphasis role="keyword">false</emphasis>)
<anchor xml:id="__generic_hitscan_8cs_source_1l00241"/>00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hits&#32;=&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext_1a53512144e604bbe851dea2b4260520b8">reusableColliderArray</link>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rayhits&#32;=&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext_1add7ee6255734194b8505fc42ff051c9c">reusableRayHitArray</link>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext_1acff49ee22059def2308ac07ec0a85020">GenericHitscanNonAlloc</link>(hd,&#32;origin,&#32;ref&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext_1a53512144e604bbe851dea2b4260520b8">reusableColliderArray</link>,&#32;ref&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext_1add7ee6255734194b8505fc42ff051c9c">reusableRayHitArray</link>,&#32;ref&#32;nearestIndex,&#32;showDebugWidgets,&#32;useSecondaryRealm);
<anchor xml:id="__generic_hitscan_8cs_source_1l00245"/>00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00246"/>00246 
<anchor xml:id="__generic_hitscan_8cs_source_1l00247"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext_1a37fa9e1f308be3318d4b9196220dd55a">00247</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext_1a37fa9e1f308be3318d4b9196220dd55a">GenericHitscanNonAlloc</link>(<emphasis role="keyword">this</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition">HitscanDefinition</link>&#32;hd,&#32;Transform&#32;origin,&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_net_object">NetObject</link>&#32;ownerNetObj,&#32;ref&#32;List&lt;NetworkHit&gt;&#32;hitscanHits,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;nearestIndex,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;showDebugWidgets&#32;=&#32;<emphasis role="keyword">false</emphasis>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;useSecondaryRealm&#32;=&#32;<emphasis role="keyword">false</emphasis>)
<anchor xml:id="__generic_hitscan_8cs_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(hitscanHits&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__generic_hitscan_8cs_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hitscanHits&#32;=&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext_1a2ce411bc560bf5d0c5970f580295180d">reusableHitscanHitList</link>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00251"/>00251 
<anchor xml:id="__generic_hitscan_8cs_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nearestRayHit&#32;=&#32;-1;
<anchor xml:id="__generic_hitscan_8cs_source_1l00253"/>00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nearestIndex&#32;=&#32;-1;
<anchor xml:id="__generic_hitscan_8cs_source_1l00254"/>00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext_1acff49ee22059def2308ac07ec0a85020">GenericHitscanNonAlloc</link>(hd,&#32;origin,&#32;ref&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext_1a53512144e604bbe851dea2b4260520b8">reusableColliderArray</link>,&#32;ref&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext_1add7ee6255734194b8505fc42ff051c9c">reusableRayHitArray</link>,&#32;ref&#32;nearestRayHit,&#32;showDebugWidgets,&#32;useSecondaryRealm);
<anchor xml:id="__generic_hitscan_8cs_source_1l00255"/>00255 
<anchor xml:id="__generic_hitscan_8cs_source_1l00256"/>00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reusableGameObjIntDict.Clear();
<anchor xml:id="__generic_hitscan_8cs_source_1l00257"/>00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hitscanHits.Clear();
<anchor xml:id="__generic_hitscan_8cs_source_1l00258"/>00258 
<anchor xml:id="__generic_hitscan_8cs_source_1l00259"/>00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(count&#32;&gt;&#32;0)
<anchor xml:id="__generic_hitscan_8cs_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00262"/>00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;count;&#32;++i)
<anchor xml:id="__generic_hitscan_8cs_source_1l00263"/>00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;hit&#32;=&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext_1a53512144e604bbe851dea2b4260520b8">reusableColliderArray</link>[i];
<anchor xml:id="__generic_hitscan_8cs_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;netObjs&#32;=&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext_1a35b721e637095fb38a5fa46d38720b8e">reusableNetObjectsList</link>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00266"/>00266 
<anchor xml:id="__generic_hitscan_8cs_source_1l00267"/>00267 <emphasis role="preprocessor">#if&#32;PUN_2_OR_NEWER</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00268"/>00268 
<anchor xml:id="__generic_hitscan_8cs_source_1l00270"/>00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hit.transform.GetNestedComponentsInParents(netObjs);
<anchor xml:id="__generic_hitscan_8cs_source_1l00271"/>00271 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00272"/>00272 
<anchor xml:id="__generic_hitscan_8cs_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;noCount&#32;=&#32;netObjs.Count;
<anchor xml:id="__generic_hitscan_8cs_source_1l00275"/>00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(noCount&#32;==&#32;0)
<anchor xml:id="__generic_hitscan_8cs_source_1l00276"/>00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00277"/>00277 
<anchor xml:id="__generic_hitscan_8cs_source_1l00279"/>00279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;selfHit&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00280"/>00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;c&#32;=&#32;0;&#32;c&#32;&lt;&#32;noCount;&#32;++c)
<anchor xml:id="__generic_hitscan_8cs_source_1l00281"/>00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ReferenceEquals(netObjs[c],&#32;ownerNetObj))
<anchor xml:id="__generic_hitscan_8cs_source_1l00283"/>00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;selfHit&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00288"/>00288 
<anchor xml:id="__generic_hitscan_8cs_source_1l00289"/>00289 
<anchor xml:id="__generic_hitscan_8cs_source_1l00290"/>00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(selfHit)
<anchor xml:id="__generic_hitscan_8cs_source_1l00291"/>00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00292"/>00292 
<anchor xml:id="__generic_hitscan_8cs_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;netObj&#32;=&#32;netObjs[0];
<anchor xml:id="__generic_hitscan_8cs_source_1l00294"/>00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;viewID&#32;=&#32;netObj.ViewID;
<anchor xml:id="__generic_hitscan_8cs_source_1l00295"/>00295 
<anchor xml:id="__generic_hitscan_8cs_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;contactGroupassign&#32;=&#32;hit.GetComponent&lt;<link linkend="_interface_photon_1_1_pun_1_1_simple_1_1_i_contact_groups_assign">IContactGroupsAssign</link>&gt;();
<anchor xml:id="__generic_hitscan_8cs_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;mask&#32;=&#32;(ReferenceEquals(contactGroupassign,&#32;<emphasis role="keyword">null</emphasis>))&#32;?&#32;0&#32;:&#32;contactGroupassign.<link linkend="_interface_photon_1_1_pun_1_1_simple_1_1_i_contact_groups_assign_1ab19a370d6cdd92b53af412594755a875">Mask</link>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00298"/>00298 
<anchor xml:id="__generic_hitscan_8cs_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;existingIndex;
<anchor xml:id="__generic_hitscan_8cs_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;exists&#32;=&#32;reusableGameObjIntDict.TryGetValue(viewID,&#32;out&#32;existingIndex);
<anchor xml:id="__generic_hitscan_8cs_source_1l00301"/>00301 
<anchor xml:id="__generic_hitscan_8cs_source_1l00302"/>00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;colliderId&#32;=&#32;netObj.colliderLookup[hit];
<anchor xml:id="__generic_hitscan_8cs_source_1l00303"/>00303 
<anchor xml:id="__generic_hitscan_8cs_source_1l00304"/>00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(exists)
<anchor xml:id="__generic_hitscan_8cs_source_1l00305"/>00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00306"/>00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;hitscanHit&#32;=&#32;hitscanHits[existingIndex];
<anchor xml:id="__generic_hitscan_8cs_source_1l00307"/>00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Debug.Log(&quot;EXIST&#32;Hitscan&#32;hit&#32;on&#32;&quot;&#32;+&#32;origin.name&#32;+&#32;&quot;/&quot;&#32;+&#32;hit.name&#32;+&#32;&quot;&#32;m:&#32;&quot;&#32;+&#32;mask&#32;+&#32;&quot;-&gt;&quot;&#32;+&#32;(hitscanHit.hitMask&#32;|&#32;mask));</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00308"/>00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hitscanHits[existingIndex]&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_photon_1_1_pun_1_1_simple_1_1_network_hit">NetworkHit</link>(hitscanHit.netObjId,&#32;hitscanHit.hitMask&#32;|&#32;mask,&#32;colliderId);
<anchor xml:id="__generic_hitscan_8cs_source_1l00309"/>00309 
<anchor xml:id="__generic_hitscan_8cs_source_1l00311"/>00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;==&#32;nearestRayHit)
<anchor xml:id="__generic_hitscan_8cs_source_1l00312"/>00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nearestIndex&#32;=&#32;existingIndex;
<anchor xml:id="__generic_hitscan_8cs_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Debug.Log(&quot;NEW&#32;Hitscan&#32;hit&#32;on&#32;&quot;&#32;+&#32;rootGO.name&#32;+&#32;&quot;/&quot;&#32;+&#32;hit.name&#32;+&#32;&quot;&#32;&quot;&#32;+&#32;mask);</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00317"/>00317 
<anchor xml:id="__generic_hitscan_8cs_source_1l00319"/>00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;==&#32;nearestRayHit)
<anchor xml:id="__generic_hitscan_8cs_source_1l00320"/>00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nearestIndex&#32;=&#32;hitscanHits.Count;
<anchor xml:id="__generic_hitscan_8cs_source_1l00321"/>00321 
<anchor xml:id="__generic_hitscan_8cs_source_1l00322"/>00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hitscanHits.Add(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_photon_1_1_pun_1_1_simple_1_1_network_hit">NetworkHit</link>(viewID,&#32;mask,&#32;colliderId));
<anchor xml:id="__generic_hitscan_8cs_source_1l00323"/>00323 
<anchor xml:id="__generic_hitscan_8cs_source_1l00324"/>00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reusableGameObjIntDict.Add(viewID,&#32;hitscanHits.Count&#32;-&#32;1);
<anchor xml:id="__generic_hitscan_8cs_source_1l00325"/>00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00326"/>00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00327"/>00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00328"/>00328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;reusableGameObjIntDict.Count;
<anchor xml:id="__generic_hitscan_8cs_source_1l00329"/>00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00330"/>00330 
<anchor xml:id="__generic_hitscan_8cs_source_1l00336"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext_1a3f225dc31209dbaca90bb904cf7caeae">00336</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext_1a3f225dc31209dbaca90bb904cf7caeae">GenericHitscanNonAlloc</link>(<emphasis role="keyword">this</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition">HitscanDefinition</link>&#32;hd,&#32;Transform&#32;origin,&#32;ref&#32;Collider[]&#32;hits,&#32;ref&#32;RaycastHit[]&#32;rayhits,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;nearestIndex,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;showDebugWidgets&#32;=&#32;<emphasis role="keyword">false</emphasis>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;useSecondaryRealm&#32;=&#32;<emphasis role="keyword">false</emphasis>)
<anchor xml:id="__generic_hitscan_8cs_source_1l00337"/>00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00338"/>00338 
<anchor xml:id="__generic_hitscan_8cs_source_1l00339"/>00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//#if&#32;(UNITY_EDITOR&#32;||&#32;DEVELOPMENT_BUILD)</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00340"/>00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(showDebugWidgets)
<anchor xml:id="__generic_hitscan_8cs_source_1l00341"/>00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext_1a7a5116aae252a8fd9bb0fcf2e37f27e6">VisualizeHitscan</link>(hd,&#32;origin,&#32;0.5f);
<anchor xml:id="__generic_hitscan_8cs_source_1l00342"/>00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//#endif</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00343"/>00343 
<anchor xml:id="__generic_hitscan_8cs_source_1l00344"/>00344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ReferenceEquals(hits,&#32;<emphasis role="keyword">null</emphasis>))
<anchor xml:id="__generic_hitscan_8cs_source_1l00345"/>00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hits&#32;=&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext_1a53512144e604bbe851dea2b4260520b8">reusableColliderArray</link>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00346"/>00346 
<anchor xml:id="__generic_hitscan_8cs_source_1l00347"/>00347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ReferenceEquals(rayhits,&#32;<emphasis role="keyword">null</emphasis>))
<anchor xml:id="__generic_hitscan_8cs_source_1l00348"/>00348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rayhits&#32;=&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext_1add7ee6255734194b8505fc42ff051c9c">reusableRayHitArray</link>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00349"/>00349 
<anchor xml:id="__generic_hitscan_8cs_source_1l00350"/>00350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;hitscanType&#32;=&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a9763ffe8911201cbe64c8720fcd2b5d0">hitscanType</link>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00351"/>00351 
<anchor xml:id="__generic_hitscan_8cs_source_1l00352"/>00352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;hitcount;
<anchor xml:id="__generic_hitscan_8cs_source_1l00353"/>00353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;srcPos&#32;=&#32;(hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a10837c9550ee4c55cd4818dcd35f4d80">useOffset</link>)&#32;?&#32;origin.TransformPoint(hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1aec7152e443150178277feefdc90a9890">offset1</link>)&#32;:&#32;origin.position;
<anchor xml:id="__generic_hitscan_8cs_source_1l00354"/>00354 
<anchor xml:id="__generic_hitscan_8cs_source_1l00355"/>00355 <emphasis role="preprocessor">#if&#32;!UNITY_2019_1_OR_NEWER</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00356"/>00356 
<anchor xml:id="__generic_hitscan_8cs_source_1l00357"/>00357 <emphasis role="preprocessor">#if&#32;GHOST_WORLD</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00358"/>00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LayerMask&#32;layerMask&#32;=&#32;(useSecondaryRealm)&#32;?
<anchor xml:id="__generic_hitscan_8cs_source_1l00359"/>00359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(LayerMask)(GhostWorld.GHOST_WORLD_LAYERMASK)&#32;:
<anchor xml:id="__generic_hitscan_8cs_source_1l00360"/>00360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(LayerMask)(hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a482718b76eb4133549cd195f369b2b8e">layerMask</link>&#32;&amp;&#32;~GhostWorld.GHOST_WORLD_LAYERMASK);
<anchor xml:id="__generic_hitscan_8cs_source_1l00361"/>00361 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00362"/>00362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LayerMask&#32;layerMask&#32;=&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a482718b76eb4133549cd195f369b2b8e">layerMask</link>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00363"/>00363 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00364"/>00364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(hitscanType)
<anchor xml:id="__generic_hitscan_8cs_source_1l00365"/>00365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00366"/>00366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.Raycast:
<anchor xml:id="__generic_hitscan_8cs_source_1l00367"/>00367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hitcount&#32;=&#32;Physics.RaycastNonAlloc(<emphasis role="comment">/*srcPos*/</emphasis>&#32;origin.position,&#32;origin.forward,&#32;rayhits,&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a771f3bbdd1ec7b10a7f6f69ab4916322">distance</link>,&#32;layerMask);
<anchor xml:id="__generic_hitscan_8cs_source_1l00368"/>00368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00369"/>00369 
<anchor xml:id="__generic_hitscan_8cs_source_1l00370"/>00370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.SphereCast:
<anchor xml:id="__generic_hitscan_8cs_source_1l00371"/>00371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hitcount&#32;=&#32;Physics.SphereCastNonAlloc(<emphasis role="keyword">new</emphasis>&#32;Ray(srcPos,&#32;origin.forward),&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a3359e24db3b776d7d81ff421bb3c203e">radius</link>,&#32;rayhits,&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a771f3bbdd1ec7b10a7f6f69ab4916322">distance</link>,&#32;layerMask);
<anchor xml:id="__generic_hitscan_8cs_source_1l00372"/>00372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00373"/>00373 
<anchor xml:id="__generic_hitscan_8cs_source_1l00374"/>00374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.BoxCast:
<anchor xml:id="__generic_hitscan_8cs_source_1l00375"/>00375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hitcount&#32;=&#32;Physics.BoxCastNonAlloc(srcPos,&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a4ce6ae6e122e10bdc8c96504e6e28cd8">halfExtents</link>,&#32;origin.forward,&#32;rayhits,&#32;Quaternion.Euler(origin.eulerAngles&#32;+&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a6d5851caa7f3e7ea2a2d91e1454ad514">orientation</link>),&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a771f3bbdd1ec7b10a7f6f69ab4916322">distance</link>,&#32;layerMask);
<anchor xml:id="__generic_hitscan_8cs_source_1l00376"/>00376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00377"/>00377 
<anchor xml:id="__generic_hitscan_8cs_source_1l00378"/>00378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.CapsuleCast:
<anchor xml:id="__generic_hitscan_8cs_source_1l00379"/>00379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hitcount&#32;=&#32;Physics.CapsuleCastNonAlloc(origin.TransformPoint(hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1aec7152e443150178277feefdc90a9890">offset1</link>),&#32;origin.TransformPoint(hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a1f790037471068200865d13fcd586b61">offset2</link>),&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a3359e24db3b776d7d81ff421bb3c203e">radius</link>,&#32;origin.forward,&#32;rayhits,&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a771f3bbdd1ec7b10a7f6f69ab4916322">distance</link>,&#32;layerMask);
<anchor xml:id="__generic_hitscan_8cs_source_1l00380"/>00380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00381"/>00381 
<anchor xml:id="__generic_hitscan_8cs_source_1l00382"/>00382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.OverlapSphere:
<anchor xml:id="__generic_hitscan_8cs_source_1l00383"/>00383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hitcount&#32;=&#32;Physics.OverlapSphereNonAlloc(srcPos,&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a3359e24db3b776d7d81ff421bb3c203e">radius</link>,&#32;hits,&#32;layerMask);
<anchor xml:id="__generic_hitscan_8cs_source_1l00384"/>00384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00385"/>00385 
<anchor xml:id="__generic_hitscan_8cs_source_1l00386"/>00386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.OverlapBox:
<anchor xml:id="__generic_hitscan_8cs_source_1l00387"/>00387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hitcount&#32;=&#32;Physics.OverlapBoxNonAlloc(srcPos,&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a4ce6ae6e122e10bdc8c96504e6e28cd8">halfExtents</link>,&#32;hits,&#32;Quaternion.Euler(origin.eulerAngles&#32;+&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a6d5851caa7f3e7ea2a2d91e1454ad514">orientation</link>),&#32;layerMask);
<anchor xml:id="__generic_hitscan_8cs_source_1l00388"/>00388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00389"/>00389 
<anchor xml:id="__generic_hitscan_8cs_source_1l00390"/>00390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.OverlapCapsule:
<anchor xml:id="__generic_hitscan_8cs_source_1l00391"/>00391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hitcount&#32;=&#32;Physics.OverlapCapsuleNonAlloc(origin.TransformPoint(hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1aec7152e443150178277feefdc90a9890">offset1</link>),&#32;origin.TransformPoint(hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a1f790037471068200865d13fcd586b61">offset2</link>),&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a3359e24db3b776d7d81ff421bb3c203e">radius</link>,&#32;hits,&#32;layerMask);
<anchor xml:id="__generic_hitscan_8cs_source_1l00392"/>00392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00393"/>00393 
<anchor xml:id="__generic_hitscan_8cs_source_1l00394"/>00394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
<anchor xml:id="__generic_hitscan_8cs_source_1l00395"/>00395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hitcount&#32;=&#32;0;
<anchor xml:id="__generic_hitscan_8cs_source_1l00396"/>00396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00397"/>00397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00398"/>00398 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00399"/>00399 &#32;&#32;&#32;&#32;
<anchor xml:id="__generic_hitscan_8cs_source_1l00400"/>00400 <emphasis role="preprocessor">#if&#32;GHOST_WORLD</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00401"/>00401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;phys&#32;=&#32;(realm&#32;==&#32;Realm.Primary)&#32;?&#32;Physics.defaultPhysicsScene&#32;:&#32;GhostWorld.ghostPhysics;
<anchor xml:id="__generic_hitscan_8cs_source_1l00402"/>00402 #<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00403"/>00403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;phys&#32;=&#32;Physics.defaultPhysicsScene;
<anchor xml:id="__generic_hitscan_8cs_source_1l00404"/>00404 #endif
<anchor xml:id="__generic_hitscan_8cs_source_1l00405"/>00405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LayerMask&#32;layerMask&#32;=&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a482718b76eb4133549cd195f369b2b8e">layerMask</link>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00406"/>00406 
<anchor xml:id="__generic_hitscan_8cs_source_1l00407"/>00407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;switch&#32;(hitscanType)
<anchor xml:id="__generic_hitscan_8cs_source_1l00408"/>00408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00409"/>00409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.Raycast:
<anchor xml:id="__generic_hitscan_8cs_source_1l00410"/>00410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hitcount&#32;=&#32;phys.Raycast(srcPos,&#32;origin.forward,&#32;rayhits,&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a771f3bbdd1ec7b10a7f6f69ab4916322">distance</link>,&#32;layerMask);
<anchor xml:id="__generic_hitscan_8cs_source_1l00411"/>00411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00412"/>00412 
<anchor xml:id="__generic_hitscan_8cs_source_1l00413"/>00413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.SphereCast:
<anchor xml:id="__generic_hitscan_8cs_source_1l00414"/>00414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hitcount&#32;=&#32;phys.SphereCast(srcPos,&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a3359e24db3b776d7d81ff421bb3c203e">radius</link>,&#32;origin.forward,&#32;rayhits,&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a771f3bbdd1ec7b10a7f6f69ab4916322">distance</link>,&#32;layerMask);
<anchor xml:id="__generic_hitscan_8cs_source_1l00415"/>00415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00416"/>00416 
<anchor xml:id="__generic_hitscan_8cs_source_1l00417"/>00417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.BoxCast:
<anchor xml:id="__generic_hitscan_8cs_source_1l00418"/>00418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hitcount&#32;=&#32;phys.BoxCast(srcPos,&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a4ce6ae6e122e10bdc8c96504e6e28cd8">halfExtents</link>,&#32;origin.forward,&#32;rayhits,&#32;Quaternion.Euler(origin.eulerAngles&#32;+&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a6d5851caa7f3e7ea2a2d91e1454ad514">orientation</link>),&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a771f3bbdd1ec7b10a7f6f69ab4916322">distance</link>,&#32;layerMask);
<anchor xml:id="__generic_hitscan_8cs_source_1l00419"/>00419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00420"/>00420 
<anchor xml:id="__generic_hitscan_8cs_source_1l00421"/>00421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.CapsuleCast:
<anchor xml:id="__generic_hitscan_8cs_source_1l00422"/>00422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hitcount&#32;=&#32;phys.CapsuleCast(origin.TransformPoint(hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1aec7152e443150178277feefdc90a9890">offset1</link>),&#32;origin.TransformPoint(hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a1f790037471068200865d13fcd586b61">offset2</link>),&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a3359e24db3b776d7d81ff421bb3c203e">radius</link>,&#32;origin.forward,&#32;rayhits,&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a771f3bbdd1ec7b10a7f6f69ab4916322">distance</link>,&#32;layerMask);
<anchor xml:id="__generic_hitscan_8cs_source_1l00423"/>00423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00424"/>00424 
<anchor xml:id="__generic_hitscan_8cs_source_1l00425"/>00425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.OverlapSphere:
<anchor xml:id="__generic_hitscan_8cs_source_1l00426"/>00426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hitcount&#32;=&#32;phys.OverlapSphere(srcPos,&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a3359e24db3b776d7d81ff421bb3c203e">radius</link>,&#32;hits,&#32;layerMask,&#32;QueryTriggerInteraction.UseGlobal);
<anchor xml:id="__generic_hitscan_8cs_source_1l00427"/>00427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00428"/>00428 
<anchor xml:id="__generic_hitscan_8cs_source_1l00429"/>00429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.OverlapBox:
<anchor xml:id="__generic_hitscan_8cs_source_1l00430"/>00430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hitcount&#32;=&#32;phys.OverlapBox(srcPos,&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a4ce6ae6e122e10bdc8c96504e6e28cd8">halfExtents</link>,&#32;hits,&#32;Quaternion.Euler(origin.eulerAngles&#32;+&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a6d5851caa7f3e7ea2a2d91e1454ad514">orientation</link>),&#32;layerMask);
<anchor xml:id="__generic_hitscan_8cs_source_1l00431"/>00431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00432"/>00432 
<anchor xml:id="__generic_hitscan_8cs_source_1l00433"/>00433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.OverlapCapsule:
<anchor xml:id="__generic_hitscan_8cs_source_1l00434"/>00434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hitcount&#32;=&#32;phys.OverlapCapsule(origin.TransformPoint(hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1aec7152e443150178277feefdc90a9890">offset1</link>),&#32;origin.TransformPoint(hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a1f790037471068200865d13fcd586b61">offset2</link>),&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1a3359e24db3b776d7d81ff421bb3c203e">radius</link>,&#32;hits,&#32;layerMask);
<anchor xml:id="__generic_hitscan_8cs_source_1l00435"/>00435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00436"/>00436 
<anchor xml:id="__generic_hitscan_8cs_source_1l00437"/>00437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
<anchor xml:id="__generic_hitscan_8cs_source_1l00438"/>00438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hitcount&#32;=&#32;0;
<anchor xml:id="__generic_hitscan_8cs_source_1l00439"/>00439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00440"/>00440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00441"/>00441 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00442"/>00442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nearestIndex&#32;=&#32;-1;
<anchor xml:id="__generic_hitscan_8cs_source_1l00443"/>00443 
<anchor xml:id="__generic_hitscan_8cs_source_1l00444"/>00444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(hitcount&#32;==&#32;0)
<anchor xml:id="__generic_hitscan_8cs_source_1l00445"/>00445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;hitcount;
<anchor xml:id="__generic_hitscan_8cs_source_1l00446"/>00446 
<anchor xml:id="__generic_hitscan_8cs_source_1l00447"/>00447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;nearestOnly&#32;=&#32;hd.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_hitscan_definition_1afab80ca582f3ffd01d7364d6911b2dbc">nearestOnly</link>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00448"/>00448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;distToNearest&#32;=&#32;<emphasis role="keywordtype">float</emphasis>.PositiveInfinity;
<anchor xml:id="__generic_hitscan_8cs_source_1l00449"/>00449 
<anchor xml:id="__generic_hitscan_8cs_source_1l00450"/>00450 
<anchor xml:id="__generic_hitscan_8cs_source_1l00452"/>00452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(hitscanType.IsOverlap())
<anchor xml:id="__generic_hitscan_8cs_source_1l00453"/>00453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00454"/>00454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nearestIndex&#32;=&#32;-1;
<anchor xml:id="__generic_hitscan_8cs_source_1l00455"/>00455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;hitcount;
<anchor xml:id="__generic_hitscan_8cs_source_1l00456"/>00456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00458"/>00458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nearestOnly)
<anchor xml:id="__generic_hitscan_8cs_source_1l00459"/>00459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00460"/>00460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;hitcount;&#32;i++)
<anchor xml:id="__generic_hitscan_8cs_source_1l00461"/>00461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00462"/>00462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RaycastHit&#32;rayhit&#32;=&#32;rayhits[i];
<anchor xml:id="__generic_hitscan_8cs_source_1l00463"/>00463 
<anchor xml:id="__generic_hitscan_8cs_source_1l00465"/>00465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;dist&#32;=&#32;rayhit.distance;
<anchor xml:id="__generic_hitscan_8cs_source_1l00466"/>00466 
<anchor xml:id="__generic_hitscan_8cs_source_1l00467"/>00467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(dist&#32;&lt;&#32;distToNearest)
<anchor xml:id="__generic_hitscan_8cs_source_1l00468"/>00468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00469"/>00469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;distToNearest&#32;=&#32;dist;
<anchor xml:id="__generic_hitscan_8cs_source_1l00470"/>00470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nearestIndex&#32;=&#32;i;
<anchor xml:id="__generic_hitscan_8cs_source_1l00471"/>00471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00472"/>00472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00473"/>00473 
<anchor xml:id="__generic_hitscan_8cs_source_1l00474"/>00474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hits[0]&#32;=&#32;rayhits[nearestIndex].collider;
<anchor xml:id="__generic_hitscan_8cs_source_1l00475"/>00475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
<anchor xml:id="__generic_hitscan_8cs_source_1l00476"/>00476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00478"/>00478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Convert&#32;the&#32;raycasthits&#32;to&#32;colliders[]&#32;if&#32;this&#32;was&#32;a&#32;cast&#32;and&#32;not&#32;an&#32;overlap</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00479"/>00479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">/*if&#32;(hitscanType.IsCast())*/</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00480"/>00480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00481"/>00481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;hitcount;&#32;i++)
<anchor xml:id="__generic_hitscan_8cs_source_1l00482"/>00482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00483"/>00483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RaycastHit&#32;rayhit&#32;=&#32;rayhits[i];
<anchor xml:id="__generic_hitscan_8cs_source_1l00484"/>00484 
<anchor xml:id="__generic_hitscan_8cs_source_1l00486"/>00486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;dist&#32;=&#32;rayhit.distance;
<anchor xml:id="__generic_hitscan_8cs_source_1l00487"/>00487 
<anchor xml:id="__generic_hitscan_8cs_source_1l00488"/>00488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(dist&#32;&lt;&#32;distToNearest)
<anchor xml:id="__generic_hitscan_8cs_source_1l00489"/>00489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00490"/>00490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;distToNearest&#32;=&#32;dist;
<anchor xml:id="__generic_hitscan_8cs_source_1l00491"/>00491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nearestIndex&#32;=&#32;i;
<anchor xml:id="__generic_hitscan_8cs_source_1l00492"/>00492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00493"/>00493 
<anchor xml:id="__generic_hitscan_8cs_source_1l00494"/>00494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!nearestOnly)
<anchor xml:id="__generic_hitscan_8cs_source_1l00495"/>00495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hits[i]&#32;=&#32;rayhits[i].collider;
<anchor xml:id="__generic_hitscan_8cs_source_1l00496"/>00496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00497"/>00497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nearestOnly)
<anchor xml:id="__generic_hitscan_8cs_source_1l00498"/>00498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00499"/>00499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hits[0]&#32;=&#32;rayhits[nearestIndex].collider;
<anchor xml:id="__generic_hitscan_8cs_source_1l00500"/>00500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
<anchor xml:id="__generic_hitscan_8cs_source_1l00501"/>00501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00502"/>00502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;hitcount;
<anchor xml:id="__generic_hitscan_8cs_source_1l00503"/>00503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00504"/>00504 
<anchor xml:id="__generic_hitscan_8cs_source_1l00505"/>00505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00506"/>00506 
<anchor xml:id="__generic_hitscan_8cs_source_1l00507"/>00507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[System.Obsolete(<emphasis role="stringliteral">&quot;Haven&apos;t&#32;reworked&#32;this&#32;for&#32;new&#32;physx&#32;yet.&quot;</emphasis>)]
<anchor xml:id="__generic_hitscan_8cs_source_1l00508"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext_1abec8446f394e10fbb644afc9337247b8">00508</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_hitscan_ext_1abec8446f394e10fbb644afc9337247b8">GenericCastNonAlloc</link>(<emphasis role="keyword">this</emphasis>&#32;Transform&#32;srcT,&#32;Collider[]&#32;hits,&#32;RaycastHit[]&#32;rayhits,&#32;<emphasis role="keywordtype">float</emphasis>&#32;distance,&#32;<emphasis role="keywordtype">float</emphasis>&#32;radius,&#32;<emphasis role="keywordtype">int</emphasis>&#32;mask,&#32;Quaternion&#32;orientation,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;useOffset,&#32;Vector3&#32;offset1,&#32;Vector3&#32;offset2,&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>&#32;hitscanType)
<anchor xml:id="__generic_hitscan_8cs_source_1l00509"/>00509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00510"/>00510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;hitcount;
<anchor xml:id="__generic_hitscan_8cs_source_1l00511"/>00511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;srcPos&#32;=&#32;(useOffset)&#32;?&#32;(srcT.position&#32;+&#32;srcT.TransformDirection(offset1))&#32;:&#32;srcT.position;
<anchor xml:id="__generic_hitscan_8cs_source_1l00512"/>00512 
<anchor xml:id="__generic_hitscan_8cs_source_1l00513"/>00513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;switch&#32;(hitscanType)
<anchor xml:id="__generic_hitscan_8cs_source_1l00514"/>00514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_hitscan_8cs_source_1l00515"/>00515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.Raycast:
<anchor xml:id="__generic_hitscan_8cs_source_1l00516"/>00516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hitcount&#32;=&#32;Physics.RaycastNonAlloc(<emphasis role="keyword">new</emphasis>&#32;Ray(srcPos,&#32;srcT.forward),&#32;rayhits,&#32;distance,&#32;mask);
<anchor xml:id="__generic_hitscan_8cs_source_1l00517"/>00517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00518"/>00518 
<anchor xml:id="__generic_hitscan_8cs_source_1l00519"/>00519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.SphereCast:
<anchor xml:id="__generic_hitscan_8cs_source_1l00520"/>00520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hitcount&#32;=&#32;Physics.SphereCastNonAlloc(<emphasis role="keyword">new</emphasis>&#32;Ray(srcPos,&#32;srcT.forward),&#32;radius,&#32;rayhits,&#32;distance,&#32;mask);
<anchor xml:id="__generic_hitscan_8cs_source_1l00521"/>00521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00522"/>00522 
<anchor xml:id="__generic_hitscan_8cs_source_1l00523"/>00523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.BoxCast:
<anchor xml:id="__generic_hitscan_8cs_source_1l00524"/>00524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hitcount&#32;=&#32;Physics.BoxCastNonAlloc(srcPos,&#32;offset2,&#32;srcT.forward,&#32;rayhits,&#32;orientation,&#32;distance,&#32;mask);
<anchor xml:id="__generic_hitscan_8cs_source_1l00525"/>00525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00526"/>00526 
<anchor xml:id="__generic_hitscan_8cs_source_1l00527"/>00527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.CapsuleCast:
<anchor xml:id="__generic_hitscan_8cs_source_1l00528"/>00528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hitcount&#32;=&#32;Physics.CapsuleCastNonAlloc(srcT.TransformPoint(offset1),&#32;srcT.TransformPoint(offset2),&#32;radius,&#32;srcT.forward,&#32;rayhits,&#32;distance,&#32;mask);
<anchor xml:id="__generic_hitscan_8cs_source_1l00529"/>00529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00530"/>00530 
<anchor xml:id="__generic_hitscan_8cs_source_1l00531"/>00531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.OverlapSphere:
<anchor xml:id="__generic_hitscan_8cs_source_1l00532"/>00532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hitcount&#32;=&#32;Physics.OverlapSphereNonAlloc(srcPos,&#32;radius,&#32;hits,&#32;mask);
<anchor xml:id="__generic_hitscan_8cs_source_1l00533"/>00533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00534"/>00534 
<anchor xml:id="__generic_hitscan_8cs_source_1l00535"/>00535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.OverlapBox:
<anchor xml:id="__generic_hitscan_8cs_source_1l00536"/>00536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hitcount&#32;=&#32;Physics.OverlapBoxNonAlloc(srcPos,&#32;offset2,&#32;hits,&#32;orientation,&#32;mask);
<anchor xml:id="__generic_hitscan_8cs_source_1l00537"/>00537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00538"/>00538 
<anchor xml:id="__generic_hitscan_8cs_source_1l00539"/>00539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a53d5d69bb5eee3caafdced8773439447">HitscanType</link>.OverlapCapsule:
<anchor xml:id="__generic_hitscan_8cs_source_1l00540"/>00540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hitcount&#32;=&#32;Physics.OverlapCapsuleNonAlloc(srcT.TransformPoint(offset1),&#32;srcT.TransformPoint(offset2),&#32;radius,&#32;hits,&#32;mask);
<anchor xml:id="__generic_hitscan_8cs_source_1l00541"/>00541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00542"/>00542 
<anchor xml:id="__generic_hitscan_8cs_source_1l00543"/>00543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
<anchor xml:id="__generic_hitscan_8cs_source_1l00544"/>00544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hitcount&#32;=&#32;0;
<anchor xml:id="__generic_hitscan_8cs_source_1l00545"/>00545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_hitscan_8cs_source_1l00546"/>00546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00547"/>00547 
<anchor xml:id="__generic_hitscan_8cs_source_1l00548"/>00548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Convert&#32;the&#32;raycasthits&#32;to&#32;colliders[]&#32;if&#32;this&#32;was&#32;a&#32;cast&#32;and&#32;not&#32;an&#32;overlap</emphasis>
<anchor xml:id="__generic_hitscan_8cs_source_1l00549"/>00549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(hitscanType.IsCast())
<anchor xml:id="__generic_hitscan_8cs_source_1l00550"/>00550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;hitcount;&#32;i++)
<anchor xml:id="__generic_hitscan_8cs_source_1l00551"/>00551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hits[i]&#32;=&#32;rayhits[i].collider;
<anchor xml:id="__generic_hitscan_8cs_source_1l00552"/>00552 
<anchor xml:id="__generic_hitscan_8cs_source_1l00553"/>00553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;hitcount;
<anchor xml:id="__generic_hitscan_8cs_source_1l00554"/>00554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00555"/>00555 &#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_hitscan_8cs_source_1l00556"/>00556 }
<anchor xml:id="__generic_hitscan_8cs_source_1l00557"/>00557 
<anchor xml:id="__generic_hitscan_8cs_source_1l00558"/>00558 
<anchor xml:id="__generic_hitscan_8cs_source_1l00559"/>00559 
<anchor xml:id="__generic_hitscan_8cs_source_1l00560"/>00560 
</programlisting></section>
