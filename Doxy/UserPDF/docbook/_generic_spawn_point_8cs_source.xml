<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__generic_spawn_point_8cs_source" xml:lang="en-US">
<title>GenericSpawnPoint.cs</title>
<indexterm><primary>C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/Simple/Utilities/Networking/GenericSpawnPoint.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__generic_spawn_point_8cs_source_1l00001"/>00001 <emphasis role="comment">//&#32;---------------------------------------------------------------------------------------------</emphasis>
<anchor xml:id="__generic_spawn_point_8cs_source_1l00002"/>00002 <emphasis role="comment">//&#32;&lt;copyright&gt;PhotonNetwork&#32;Framework&#32;for&#32;Unity&#32;-&#32;Copyright&#32;(C)&#32;2020&#32;Exit&#32;Games&#32;GmbH&lt;/copyright&gt;</emphasis>
<anchor xml:id="__generic_spawn_point_8cs_source_1l00003"/>00003 <emphasis role="comment">//&#32;&lt;author&gt;developer@exitgames.com&lt;/author&gt;</emphasis>
<anchor xml:id="__generic_spawn_point_8cs_source_1l00004"/>00004 <emphasis role="comment">//&#32;---------------------------------------------------------------------------------------------</emphasis>
<anchor xml:id="__generic_spawn_point_8cs_source_1l00005"/>00005 
<anchor xml:id="__generic_spawn_point_8cs_source_1l00006"/>00006 <emphasis role="keyword">using</emphasis>&#32;System.Collections.Generic;
<anchor xml:id="__generic_spawn_point_8cs_source_1l00007"/>00007 <emphasis role="keyword">using</emphasis>&#32;UnityEngine;
<anchor xml:id="__generic_spawn_point_8cs_source_1l00008"/>00008 
<anchor xml:id="__generic_spawn_point_8cs_source_1l00009"/>00009 <emphasis role="preprocessor">#if&#32;UNITY_EDITOR</emphasis>
<anchor xml:id="__generic_spawn_point_8cs_source_1l00010"/>00010 <emphasis role="keyword">using</emphasis>&#32;UnityEditor;
<anchor xml:id="__generic_spawn_point_8cs_source_1l00011"/>00011 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__generic_spawn_point_8cs_source_1l00012"/>00012 
<anchor xml:id="__generic_spawn_point_8cs_source_1l00013"/>00013 
<anchor xml:id="__generic_spawn_point_8cs_source_1l00014"/>00014 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_photon_1_1_pun_1_1_simple">Photon.Pun.Simple</link>
<anchor xml:id="__generic_spawn_point_8cs_source_1l00015"/>00015 {
<anchor xml:id="__generic_spawn_point_8cs_source_1l00016"/>00016 
<anchor xml:id="__generic_spawn_point_8cs_source_1l00017"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point">00017</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point">GenericSpawnPoint</link>&#32;:&#32;MonoBehaviour
<anchor xml:id="__generic_spawn_point_8cs_source_1l00018"/>00018 &#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_spawn_point_8cs_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[Header(<emphasis role="stringliteral">&quot;Spawn&#32;Point&#32;Blocked&#32;Check&quot;</emphasis>)]
<anchor xml:id="__generic_spawn_point_8cs_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[Tooltip(<emphasis role="stringliteral">&quot;Select&#32;the&#32;physics&#32;layers&#32;for&#32;colliders&#32;to&#32;test&#32;against.&#32;If&#32;&apos;avoidCollision&apos;&#32;is&#32;true&#32;and&#32;any&#32;colliders&#32;on&#32;these&#32;layers&#32;&quot;</emphasis>&#32;+
<anchor xml:id="__generic_spawn_point_8cs_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;are&#32;blocking&#32;the&#32;spawn&#32;point,&#32;will&#32;attempt&#32;to&#32;find&#32;the&#32;next&#32;spawn&#32;point&#32;that&#32;isn&apos;t&#32;blocked.&quot;</emphasis>)]
<anchor xml:id="__generic_spawn_point_8cs_source_1l00022"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1a2faa9b99a3e4d0f79e61f773de94934d">00022</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;LayerMask&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1a2faa9b99a3e4d0f79e61f773de94934d">layerMask</link>;
<anchor xml:id="__generic_spawn_point_8cs_source_1l00023"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1a2b4adca1a0fa16a224659055fdb64831">00023</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1a2b4adca1a0fa16a224659055fdb64831">blockedCheckRadius</link>&#32;=&#32;2f;
<anchor xml:id="__generic_spawn_point_8cs_source_1l00024"/>00024 
<anchor xml:id="__generic_spawn_point_8cs_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnEnable()
<anchor xml:id="__generic_spawn_point_8cs_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_spawn_point_8cs_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1a852ab06d27cf39f4314c494008701b36">spawns</link>.Add(<emphasis role="keyword">this</emphasis>);
<anchor xml:id="__generic_spawn_point_8cs_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_spawn_point_8cs_source_1l00029"/>00029 
<anchor xml:id="__generic_spawn_point_8cs_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnDisable()
<anchor xml:id="__generic_spawn_point_8cs_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_spawn_point_8cs_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1a852ab06d27cf39f4314c494008701b36">spawns</link>.Remove(<emphasis role="keyword">this</emphasis>);
<anchor xml:id="__generic_spawn_point_8cs_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_spawn_point_8cs_source_1l00034"/>00034 
<anchor xml:id="__generic_spawn_point_8cs_source_1l00035"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1add2453a4cd7722305fd4ce195f0cb14f">00035</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1add2453a4cd7722305fd4ce195f0cb14f">IsBlocked</link>
<anchor xml:id="__generic_spawn_point_8cs_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_spawn_point_8cs_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>
<anchor xml:id="__generic_spawn_point_8cs_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_spawn_point_8cs_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;Physics.OverlapSphereNonAlloc(transform.position,&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1a2b4adca1a0fa16a224659055fdb64831">blockedCheckRadius</link>,&#32;reusable,&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1a2faa9b99a3e4d0f79e61f773de94934d">layerMask</link>);
<anchor xml:id="__generic_spawn_point_8cs_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(count&#32;==&#32;0)&#32;?&#32;false&#32;:&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__generic_spawn_point_8cs_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_spawn_point_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_spawn_point_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Statics</emphasis>
<anchor xml:id="__generic_spawn_point_8cs_source_1l00044"/>00044 
<anchor xml:id="__generic_spawn_point_8cs_source_1l00045"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1a852ab06d27cf39f4314c494008701b36">00045</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;readonly&#32;List&lt;GenericSpawnPoint&gt;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1a852ab06d27cf39f4314c494008701b36">spawns</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;GenericSpawnPoint&gt;();
<anchor xml:id="__generic_spawn_point_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;lastPicked;
<anchor xml:id="__generic_spawn_point_8cs_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;readonly&#32;Collider[]&#32;reusable&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Collider[8];
<anchor xml:id="__generic_spawn_point_8cs_source_1l00048"/>00048 
<anchor xml:id="__generic_spawn_point_8cs_source_1l00049"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1a1a4c21bec67bd9e47e215864ef1b184f">00049</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Transform&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1a1a4c21bec67bd9e47e215864ef1b184f">GetRandomSpawnPoint</link>(<emphasis role="keywordtype">bool</emphasis>&#32;avoidCollision&#32;=&#32;<emphasis role="keyword">true</emphasis>)
<anchor xml:id="__generic_spawn_point_8cs_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_spawn_point_8cs_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1a852ab06d27cf39f4314c494008701b36">spawns</link>.Count&#32;==&#32;0)
<anchor xml:id="__generic_spawn_point_8cs_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__generic_spawn_point_8cs_source_1l00053"/>00053 
<anchor xml:id="__generic_spawn_point_8cs_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;startindex&#32;=&#32;<link linkend="__linear_motion_8cs_1a832e8f52fca5a678819ec96269dcb532">Random</link>.Range(0,&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1a852ab06d27cf39f4314c494008701b36">spawns</link>.Count&#32;-&#32;1);
<anchor xml:id="__generic_spawn_point_8cs_source_1l00055"/>00055 
<anchor xml:id="__generic_spawn_point_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Try&#32;to&#32;find&#32;a&#32;spawn&#32;that&#32;doesn&apos;t&#32;conflict</emphasis>
<anchor xml:id="__generic_spawn_point_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(avoidCollision)
<anchor xml:id="__generic_spawn_point_8cs_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1a852ab06d27cf39f4314c494008701b36">spawns</link>.Count;&#32;i++)
<anchor xml:id="__generic_spawn_point_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1a852ab06d27cf39f4314c494008701b36">spawns</link>[(i&#32;+&#32;startindex)&#32;%&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1a852ab06d27cf39f4314c494008701b36">spawns</link>.Count].IsBlocked)
<anchor xml:id="__generic_spawn_point_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1a852ab06d27cf39f4314c494008701b36">spawns</link>[(i&#32;+&#32;startindex)&#32;%&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1a852ab06d27cf39f4314c494008701b36">spawns</link>.Count].transform;
<anchor xml:id="__generic_spawn_point_8cs_source_1l00061"/>00061 
<anchor xml:id="__generic_spawn_point_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;collision&#32;free&#32;spawn&#32;found</emphasis>
<anchor xml:id="__generic_spawn_point_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1a852ab06d27cf39f4314c494008701b36">spawns</link>[startindex].transform;
<anchor xml:id="__generic_spawn_point_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_spawn_point_8cs_source_1l00065"/>00065 
<anchor xml:id="__generic_spawn_point_8cs_source_1l00066"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1afc95222d9795529d451832c68c4e5603">00066</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Transform&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1afc95222d9795529d451832c68c4e5603">GetNextSpawnPoint</link>(<emphasis role="keywordtype">bool</emphasis>&#32;avoidCollision&#32;=&#32;<emphasis role="keyword">true</emphasis>)
<anchor xml:id="__generic_spawn_point_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_spawn_point_8cs_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1a852ab06d27cf39f4314c494008701b36">spawns</link>.Count&#32;==&#32;0)
<anchor xml:id="__generic_spawn_point_8cs_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__generic_spawn_point_8cs_source_1l00070"/>00070 
<anchor xml:id="__generic_spawn_point_8cs_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lastPicked&#32;=&#32;(lastPicked&#32;+&#32;1)&#32;%&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1a852ab06d27cf39f4314c494008701b36">spawns</link>.Count;
<anchor xml:id="__generic_spawn_point_8cs_source_1l00072"/>00072 
<anchor xml:id="__generic_spawn_point_8cs_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Try&#32;to&#32;find&#32;a&#32;spawn&#32;that&#32;doesn&apos;t&#32;conflict</emphasis>
<anchor xml:id="__generic_spawn_point_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(avoidCollision)
<anchor xml:id="__generic_spawn_point_8cs_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1a852ab06d27cf39f4314c494008701b36">spawns</link>.Count;&#32;i++)
<anchor xml:id="__generic_spawn_point_8cs_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_spawn_point_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;next&#32;=&#32;(i&#32;+&#32;lastPicked)&#32;%&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1a852ab06d27cf39f4314c494008701b36">spawns</link>.Count;
<anchor xml:id="__generic_spawn_point_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(!<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1a852ab06d27cf39f4314c494008701b36">spawns</link>[next].<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1add2453a4cd7722305fd4ce195f0cb14f">IsBlocked</link>)
<anchor xml:id="__generic_spawn_point_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_spawn_point_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lastPicked&#32;=&#32;next;
<anchor xml:id="__generic_spawn_point_8cs_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__generic_spawn_point_8cs_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_spawn_point_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_spawn_point_8cs_source_1l00084"/>00084 
<anchor xml:id="__generic_spawn_point_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1a852ab06d27cf39f4314c494008701b36">spawns</link>[lastPicked].transform;
<anchor xml:id="__generic_spawn_point_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_spawn_point_8cs_source_1l00087"/>00087 
<anchor xml:id="__generic_spawn_point_8cs_source_1l00088"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1a1eae795cde17f3ddbba029b205ace632">00088</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Transform&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1a1eae795cde17f3ddbba029b205ace632">GetSpawnPointFromValue</link>(<emphasis role="keywordtype">int</emphasis>&#32;value)
<anchor xml:id="__generic_spawn_point_8cs_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_spawn_point_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1a852ab06d27cf39f4314c494008701b36">spawns</link>.Count&#32;==&#32;0)
<anchor xml:id="__generic_spawn_point_8cs_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__generic_spawn_point_8cs_source_1l00092"/>00092 
<anchor xml:id="__generic_spawn_point_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;spawnId&#32;=&#32;(value&#32;+&#32;1)&#32;%&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1a852ab06d27cf39f4314c494008701b36">spawns</link>.Count;
<anchor xml:id="__generic_spawn_point_8cs_source_1l00094"/>00094 
<anchor xml:id="__generic_spawn_point_8cs_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1a852ab06d27cf39f4314c494008701b36">spawns</link>[spawnId].transform;
<anchor xml:id="__generic_spawn_point_8cs_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_spawn_point_8cs_source_1l00097"/>00097 
<anchor xml:id="__generic_spawn_point_8cs_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnDrawGizmosSelected()
<anchor xml:id="__generic_spawn_point_8cs_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_spawn_point_8cs_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Gizmos.color&#32;=&#32;Color.yellow;
<anchor xml:id="__generic_spawn_point_8cs_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Gizmos.DrawWireSphere(transform.position,&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_generic_spawn_point_1a2b4adca1a0fa16a224659055fdb64831">blockedCheckRadius</link>);
<anchor xml:id="__generic_spawn_point_8cs_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_spawn_point_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_spawn_point_8cs_source_1l00104"/>00104 
<anchor xml:id="__generic_spawn_point_8cs_source_1l00105"/>00105 <emphasis role="preprocessor">#if&#32;UNITY_EDITOR</emphasis>
<anchor xml:id="__generic_spawn_point_8cs_source_1l00106"/>00106 
<anchor xml:id="__generic_spawn_point_8cs_source_1l00107"/>00107 &#32;&#32;&#32;&#32;[CustomEditor(typeof(GenericSpawnPoint))]
<anchor xml:id="__generic_spawn_point_8cs_source_1l00108"/>00108 &#32;&#32;&#32;&#32;[CanEditMultipleObjects]
<anchor xml:id="__generic_spawn_point_8cs_source_1l00109"/>00109 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>GenericSpawnPointEditor&#32;:&#32;Editor
<anchor xml:id="__generic_spawn_point_8cs_source_1l00110"/>00110 &#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_spawn_point_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnInspectorGUI()
<anchor xml:id="__generic_spawn_point_8cs_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__generic_spawn_point_8cs_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;base.OnInspectorGUI();
<anchor xml:id="__generic_spawn_point_8cs_source_1l00114"/>00114 
<anchor xml:id="__generic_spawn_point_8cs_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorGUILayout.HelpBox(<emphasis role="stringliteral">&quot;Replacement&#32;for&#32;UNET&#32;&apos;NetworkStartPosition&apos;&#32;that&#32;will&#32;work&#32;with&#32;other&#32;network&#32;engines.&quot;</emphasis>,&#32;MessageType.None);
<anchor xml:id="__generic_spawn_point_8cs_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_spawn_point_8cs_source_1l00117"/>00117 &#32;&#32;&#32;&#32;}
<anchor xml:id="__generic_spawn_point_8cs_source_1l00118"/>00118 
<anchor xml:id="__generic_spawn_point_8cs_source_1l00119"/>00119 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__generic_spawn_point_8cs_source_1l00120"/>00120 
<anchor xml:id="__generic_spawn_point_8cs_source_1l00121"/>00121 }
</programlisting></section>
