<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__lite_float_crusher_8cs_source" xml:lang="en-US">
<title>LiteFloatCrusher.cs</title>
<indexterm><primary>C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/LiteCrusher/LiteFloatCrusher.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__lite_float_crusher_8cs_source_1l00001"/>00001 <emphasis role="keyword">using</emphasis>&#32;System;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00002"/>00002 <emphasis role="keyword">using</emphasis>&#32;UnityEngine;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00003"/>00003 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00004"/>00004 <emphasis role="preprocessor">#if&#32;UNITY_EDITOR</emphasis>
<anchor xml:id="__lite_float_crusher_8cs_source_1l00005"/>00005 <emphasis role="keyword">using</emphasis>&#32;UnityEditor;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00006"/>00006 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__lite_float_crusher_8cs_source_1l00007"/>00007 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00008"/>00008 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00009"/>00009 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_photon_1_1_compression">Photon.Compression</link>
<anchor xml:id="__lite_float_crusher_8cs_source_1l00010"/>00010 {
<anchor xml:id="__lite_float_crusher_8cs_source_1l00011"/><link linkend="_namespace_photon_1_1_compression_1acd4f4689ec723423d88a8dca51668fae">00011</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1acd4f4689ec723423d88a8dca51668fae">LiteOutOfBoundsHandling</link>&#32;{&#32;<link linkend="_namespace_photon_1_1_compression_1acd4f4689ec723423d88a8dca51668faea08825280e3f8137556325061ba67ff8c">Clamp</link>,&#32;<link linkend="_namespace_photon_1_1_compression_1acd4f4689ec723423d88a8dca51668faea89d7b10cb4238977d2b523dfd9ea7745">Loop</link>&#32;};
<anchor xml:id="__lite_float_crusher_8cs_source_1l00012"/><link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7b">00012</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7b">LiteFloatCompressType</link>
<anchor xml:id="__lite_float_crusher_8cs_source_1l00013"/>00013 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7ba599f45d0d5df0669a699a40799bc7bf6">Bits2</link>&#32;=&#32;2,&#32;<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7bae710ee1cbd2737746814624c0317e844">Bits3</link>,&#32;<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7ba63da93a51eecb9c3a254623389b6ea7e">Bits4</link>,&#32;<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7bac1c2d09d5b82881709375a78000bc3f7">Bits5</link>,&#32;<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7bab8a4063c1f76f46beae589e9c339a724">Bits6</link>,&#32;<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7ba5681ec5ac02a5c27b521fc5631668a18">Bits7</link>,&#32;<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7ba5df0a649796713941bae6d932535c288">Bits8</link>,&#32;<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7ba74f377712b88917ebfde6f7882f0aa2e">Bits9</link>,&#32;<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7ba88d0722c9291a76dda496c3af70a0836">Bits10</link>,&#32;<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7ba3eb76becfca744d04d55d9e345e225ec">Bits12</link>&#32;=&#32;12,&#32;<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7bad5ef071ee914362f0064d2de1a6711a8">Bits14</link>&#32;=&#32;14,
<anchor xml:id="__lite_float_crusher_8cs_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7ba32c5eba2d9463395ba5ff00818de75f0">Half16</link>&#32;=&#32;16,&#32;<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7ba38ac42d7c25a0f24c30bc39c5b99f162">Full32</link>&#32;=&#32;32
<anchor xml:id="__lite_float_crusher_8cs_source_1l00016"/>00016 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00017"/>00017 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00018"/>00018 &#32;&#32;&#32;&#32;[Serializable]
<anchor xml:id="__lite_float_crusher_8cs_source_1l00019"/><link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher">00019</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher">LiteFloatCrusher</link>&#32;:&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_crusher">LiteCrusher</link>&lt;ulong,&#32;float&gt;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00020"/>00020 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00021"/><link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a66ee6a08efc67311c404abc2b73bdab4">00021</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a66ee6a08efc67311c404abc2b73bdab4">Normalization</link>&#32;{&#32;None,&#32;Positive,&#32;Negative&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00022"/>00022 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00023"/><link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a5b695341c586c2b014f89d2ea79a91a2">00023</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[SerializeField]&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a66ee6a08efc67311c404abc2b73bdab4">Normalization</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a5b695341c586c2b014f89d2ea79a91a2">normalization</link>;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00024"/><link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a035a8daf6fef22af22074e093a07923d">00024</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[SerializeField]&#32;<emphasis role="keyword">protected</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a035a8daf6fef22af22074e093a07923d">min</link>;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00025"/><link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1aa01374460a8b31c3da09dfdd14a24872">00025</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[SerializeField]&#32;<emphasis role="keyword">protected</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1aa01374460a8b31c3da09dfdd14a24872">max</link>;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00026"/>00026 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00027"/><link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a14323eba7351ee34d118acba34b176cc">00027</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[SerializeField]&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7b">LiteFloatCompressType</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a14323eba7351ee34d118acba34b176cc">compressType</link>&#32;=&#32;<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7b">LiteFloatCompressType</link>.Half16;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00028"/><link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a6f59b1644e70372fbbeb52e11c291f87">00028</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[SerializeField]&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1acd4f4689ec723423d88a8dca51668fae">LiteOutOfBoundsHandling</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a6f59b1644e70372fbbeb52e11c291f87">outOfBoundsHandling</link>&#32;=&#32;<link linkend="_namespace_photon_1_1_compression_1acd4f4689ec723423d88a8dca51668fae">LiteOutOfBoundsHandling</link>.Clamp;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[SerializeField]&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;accurateCenter&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00030"/>00030 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[SerializeField]&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;encoder;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[SerializeField]&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;decoder;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[SerializeField]&#32;<emphasis role="keyword">private</emphasis>&#32;ulong&#32;maxCVal;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00034"/>00034 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00035"/><link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1adb23353d35be634526ffd944cf6056d4">00035</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1adb23353d35be634526ffd944cf6056d4">LiteFloatCrusher</link>()
<anchor xml:id="__lite_float_crusher_8cs_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.compressType&#32;=&#32;<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7b">LiteFloatCompressType</link>.Half16;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.normalization&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a66ee6a08efc67311c404abc2b73bdab4">Normalization</link>.Positive;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.min&#32;=&#32;0;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.max&#32;=&#32;1;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.accurateCenter&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00042"/>00042 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a6aa9c299d2f2c5c96457d19a9f3dcaa4">Recalculate</link>(<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a14323eba7351ee34d118acba34b176cc">compressType</link>,&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a035a8daf6fef22af22074e093a07923d">min</link>,&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1aa01374460a8b31c3da09dfdd14a24872">max</link>,&#32;accurateCenter,&#32;<emphasis role="keyword">this</emphasis>);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00045"/>00045 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00046"/><link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a7e8448c0301bf42f37feb453b715c7c6">00046</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a7e8448c0301bf42f37feb453b715c7c6">LiteFloatCrusher</link>(<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7b">LiteFloatCompressType</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a14323eba7351ee34d118acba34b176cc">compressType</link>,&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a035a8daf6fef22af22074e093a07923d">min</link>,&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1aa01374460a8b31c3da09dfdd14a24872">max</link>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;accurateCenter,&#32;<link linkend="_namespace_photon_1_1_compression_1acd4f4689ec723423d88a8dca51668fae">LiteOutOfBoundsHandling</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a6f59b1644e70372fbbeb52e11c291f87">outOfBoundsHandling</link>&#32;=&#32;<link linkend="_namespace_photon_1_1_compression_1acd4f4689ec723423d88a8dca51668fae">LiteOutOfBoundsHandling</link>.Clamp)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.compressType&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a14323eba7351ee34d118acba34b176cc">compressType</link>;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.normalization&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a66ee6a08efc67311c404abc2b73bdab4">Normalization</link>.None;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00050"/>00050 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a035a8daf6fef22af22074e093a07923d">min</link>&#32;==&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1aa01374460a8b31c3da09dfdd14a24872">max</link>)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1aa01374460a8b31c3da09dfdd14a24872">max</link>++;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogWarning(<emphasis role="stringliteral">&quot;Float&#32;crusher&#32;is&#32;being&#32;given&#32;min&#32;and&#32;max&#32;values&#32;that&#32;are&#32;the&#32;same.&#32;This&#32;likely&#32;is&#32;not&#32;intentional.&#32;Check&#32;your&#32;range&#32;values.&#32;Value&#32;is&#32;&lt;i&gt;&quot;</emphasis>&#32;+&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a035a8daf6fef22af22074e093a07923d">min</link>&#32;+
<anchor xml:id="__lite_float_crusher_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&lt;/i&gt;,&#32;changing&#32;the&#32;max&#32;to&#32;&quot;</emphasis>&#32;+&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1aa01374460a8b31c3da09dfdd14a24872">max</link>&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;to&#32;avoid&#32;division&#32;by&#32;zero&#32;errors.&quot;</emphasis>);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00058"/>00058 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a035a8daf6fef22af22074e093a07923d">min</link>&#32;&lt;&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1aa01374460a8b31c3da09dfdd14a24872">max</link>)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.min&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a035a8daf6fef22af22074e093a07923d">min</link>;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.max&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1aa01374460a8b31c3da09dfdd14a24872">max</link>;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__lite_float_crusher_8cs_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.min&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1aa01374460a8b31c3da09dfdd14a24872">max</link>;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.max&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a035a8daf6fef22af22074e093a07923d">min</link>;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00069"/>00069 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.accurateCenter&#32;=&#32;accurateCenter;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.outOfBoundsHandling&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a6f59b1644e70372fbbeb52e11c291f87">outOfBoundsHandling</link>;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00072"/>00072 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a6aa9c299d2f2c5c96457d19a9f3dcaa4">Recalculate</link>(<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a14323eba7351ee34d118acba34b176cc">compressType</link>,&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a035a8daf6fef22af22074e093a07923d">min</link>,&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1aa01374460a8b31c3da09dfdd14a24872">max</link>,&#32;accurateCenter,&#32;<emphasis role="keyword">this</emphasis>);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00075"/>00075 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00076"/>00076 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00077"/><link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a7791d5c2600ee2f5f24ef989ac0ad98a">00077</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a7791d5c2600ee2f5f24ef989ac0ad98a">LiteFloatCrusher</link>(<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7b">LiteFloatCompressType</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a14323eba7351ee34d118acba34b176cc">compressType</link>,&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a66ee6a08efc67311c404abc2b73bdab4">Normalization</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a5b695341c586c2b014f89d2ea79a91a2">normalization</link>&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a66ee6a08efc67311c404abc2b73bdab4">Normalization</link>.None,&#32;<link linkend="_namespace_photon_1_1_compression_1acd4f4689ec723423d88a8dca51668fae">LiteOutOfBoundsHandling</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a6f59b1644e70372fbbeb52e11c291f87">outOfBoundsHandling</link>&#32;=&#32;<link linkend="_namespace_photon_1_1_compression_1acd4f4689ec723423d88a8dca51668fae">LiteOutOfBoundsHandling</link>.Clamp)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.compressType&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a14323eba7351ee34d118acba34b176cc">compressType</link>;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.normalization&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a5b695341c586c2b014f89d2ea79a91a2">normalization</link>;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00081"/>00081 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a5b695341c586c2b014f89d2ea79a91a2">normalization</link>)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a66ee6a08efc67311c404abc2b73bdab4">Normalization</link>.None:
<anchor xml:id="__lite_float_crusher_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.min&#32;=&#32;0;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.max&#32;=&#32;1;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;accurateCenter&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00089"/>00089 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a66ee6a08efc67311c404abc2b73bdab4">Normalization</link>.Positive:
<anchor xml:id="__lite_float_crusher_8cs_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.min&#32;=&#32;0;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.max&#32;=&#32;1;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;accurateCenter&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00095"/>00095 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00096"/>00096 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a66ee6a08efc67311c404abc2b73bdab4">Normalization</link>.Negative:
<anchor xml:id="__lite_float_crusher_8cs_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.min&#32;=&#32;-1;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.max&#32;=&#32;1;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;accurateCenter&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00103"/>00103 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.outOfBoundsHandling&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a6f59b1644e70372fbbeb52e11c291f87">outOfBoundsHandling</link>;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a6aa9c299d2f2c5c96457d19a9f3dcaa4">Recalculate</link>(<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a14323eba7351ee34d118acba34b176cc">compressType</link>,&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a035a8daf6fef22af22074e093a07923d">min</link>,&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1aa01374460a8b31c3da09dfdd14a24872">max</link>,&#32;accurateCenter,&#32;<emphasis role="keyword">this</emphasis>);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00107"/>00107 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00108"/>00108 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00109"/><link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a6aa9c299d2f2c5c96457d19a9f3dcaa4">00109</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a6aa9c299d2f2c5c96457d19a9f3dcaa4">Recalculate</link>(<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7b">LiteFloatCompressType</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a14323eba7351ee34d118acba34b176cc">compressType</link>,&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a035a8daf6fef22af22074e093a07923d">min</link>,&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1aa01374460a8b31c3da09dfdd14a24872">max</link>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;accurateCenter,&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher">LiteFloatCrusher</link>&#32;crusher)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_crusher_1a038ac79696e6caec297b87ec68cfbccf">bits</link>&#32;=&#32;(int)<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a14323eba7351ee34d118acba34b176cc">compressType</link>;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;crusher.<link linkend="_class_photon_1_1_compression_1_1_lite_crusher_1a038ac79696e6caec297b87ec68cfbccf">bits</link>&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_crusher_1a038ac79696e6caec297b87ec68cfbccf">bits</link>;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00113"/>00113 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;range&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1aa01374460a8b31c3da09dfdd14a24872">max</link>&#32;-&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a035a8daf6fef22af22074e093a07923d">min</link>;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ulong&#32;maxcval&#32;=&#32;(<link linkend="_class_photon_1_1_compression_1_1_lite_crusher_1a038ac79696e6caec297b87ec68cfbccf">bits</link>&#32;==&#32;64)&#32;?&#32;ulong.MaxValue&#32;:&#32;(((ulong)1&#32;&lt;&lt;&#32;(int)<link linkend="_class_photon_1_1_compression_1_1_lite_crusher_1a038ac79696e6caec297b87ec68cfbccf">bits</link>)&#32;-&#32;1);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00116"/>00116 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(accurateCenter&#32;&amp;&amp;&#32;maxcval&#32;!=&#32;0)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maxcval--;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00119"/>00119 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;crusher.encoder&#32;=&#32;range&#32;==&#32;0&#32;?&#32;0&#32;:&#32;maxcval&#32;/&#32;range;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;crusher.decoder&#32;=&#32;maxcval&#32;==&#32;0&#32;?&#32;0&#32;:&#32;range&#32;/&#32;maxcval;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00122"/>00122 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;crusher.maxCVal&#32;=&#32;maxcval;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00125"/>00125 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00126"/><link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a020e91dc51c508c26d6643d66186f94b">00126</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a020e91dc51c508c26d6643d66186f94b">Recalculate</link>(<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7b">LiteFloatCompressType</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a14323eba7351ee34d118acba34b176cc">compressType</link>,&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a035a8daf6fef22af22074e093a07923d">min</link>,&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1aa01374460a8b31c3da09dfdd14a24872">max</link>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;accurateCenter,
<anchor xml:id="__lite_float_crusher_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_crusher_1a038ac79696e6caec297b87ec68cfbccf">bits</link>,&#32;ref&#32;<emphasis role="keywordtype">float</emphasis>&#32;encoder,&#32;ref&#32;<emphasis role="keywordtype">float</emphasis>&#32;decoder,&#32;ref&#32;ulong&#32;maxCVal)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_crusher_1a038ac79696e6caec297b87ec68cfbccf">bits</link>&#32;=&#32;(int)<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a14323eba7351ee34d118acba34b176cc">compressType</link>;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00130"/>00130 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;range&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1aa01374460a8b31c3da09dfdd14a24872">max</link>&#32;-&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a035a8daf6fef22af22074e093a07923d">min</link>;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ulong&#32;maxcval&#32;=&#32;(<link linkend="_class_photon_1_1_compression_1_1_lite_crusher_1a038ac79696e6caec297b87ec68cfbccf">bits</link>&#32;==&#32;64)&#32;?&#32;ulong.MaxValue&#32;:&#32;(((ulong)1&#32;&lt;&lt;&#32;(int)<link linkend="_class_photon_1_1_compression_1_1_lite_crusher_1a038ac79696e6caec297b87ec68cfbccf">bits</link>)&#32;-&#32;1);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00133"/>00133 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(accurateCenter&#32;&amp;&amp;&#32;maxcval&#32;!=&#32;0)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maxcval--;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00136"/>00136 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;encoder&#32;=&#32;range&#32;==&#32;0&#32;?&#32;0&#32;:&#32;maxcval&#32;/&#32;range;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decoder&#32;=&#32;maxcval&#32;==&#32;0&#32;?&#32;0&#32;:&#32;range&#32;/&#32;maxcval;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00139"/>00139 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maxCVal&#32;=&#32;maxcval;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00142"/>00142 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00143"/>00143 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00144"/><link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a1a15cc5dbdf7a1d71792376916c9fb14">00144</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;ulong&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a1a15cc5dbdf7a1d71792376916c9fb14">Encode</link>(<emphasis role="keywordtype">float</emphasis>&#32;val)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a14323eba7351ee34d118acba34b176cc">compressType</link>&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7b">LiteFloatCompressType</link>.Half16)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;HalfFloat.HalfUtilities.Pack(val);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00148"/>00148 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a14323eba7351ee34d118acba34b176cc">compressType</link>&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7b">LiteFloatCompressType</link>.Full32)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((<link linkend="_struct_photon_1_1_compression_1_1_byte_converter">ByteConverter</link>)val).uint32;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00151"/>00151 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;encval&#32;=&#32;((val&#32;-&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a035a8daf6fef22af22074e093a07923d">min</link>)&#32;*&#32;encoder&#32;+&#32;.5f);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(encval&#32;&lt;&#32;0)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a6f59b1644e70372fbbeb52e11c291f87">outOfBoundsHandling</link>&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1acd4f4689ec723423d88a8dca51668fae">LiteOutOfBoundsHandling</link>.Clamp)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__lite_float_crusher_8cs_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(ulong)((long)maxCVal&#32;+&#32;((<emphasis role="keywordtype">long</emphasis>)encval&#32;%&#32;10));
<anchor xml:id="__lite_float_crusher_8cs_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00162"/>00162 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(encval&#32;&gt;&#32;maxCVal)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a6f59b1644e70372fbbeb52e11c291f87">outOfBoundsHandling</link>&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1acd4f4689ec723423d88a8dca51668fae">LiteOutOfBoundsHandling</link>.Clamp)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;maxCVal;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__lite_float_crusher_8cs_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(ulong)(encval&#32;%&#32;maxCVal);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00170"/>00170 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ulong&#32;cval&#32;=&#32;(ulong)encval;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(cval&#32;&gt;&#32;maxCVal)&#32;?&#32;maxCVal&#32;:&#32;cval;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00175"/>00175 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00176"/><link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1aa8ba9ef7c79a7949ae86adb78aa16a1e">00176</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1aa8ba9ef7c79a7949ae86adb78aa16a1e">Decode</link>(uint&#32;cval)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a14323eba7351ee34d118acba34b176cc">compressType</link>&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7b">LiteFloatCompressType</link>.Half16)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;HalfFloat.HalfUtilities.Unpack((ushort)cval);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00180"/>00180 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a14323eba7351ee34d118acba34b176cc">compressType</link>&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7b">LiteFloatCompressType</link>.Full32)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((<link linkend="_struct_photon_1_1_compression_1_1_byte_converter">ByteConverter</link>)cval).float32;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00183"/>00183 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cval&#32;==&#32;0)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a035a8daf6fef22af22074e093a07923d">min</link>;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00188"/>00188 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cval&#32;==&#32;maxCVal)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1aa01374460a8b31c3da09dfdd14a24872">max</link>;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00191"/>00191 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(cval&#32;*&#32;decoder)&#32;+&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a035a8daf6fef22af22074e093a07923d">min</link>;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00194"/>00194 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00195"/><link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a0633ea12c129363e9baef6980a1add46">00195</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;ulong&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a0633ea12c129363e9baef6980a1add46">WriteValue</link>(<emphasis role="keywordtype">float</emphasis>&#32;val,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a14323eba7351ee34d118acba34b176cc">compressType</link>&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7b">LiteFloatCompressType</link>.Half16)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ulong&#32;cval&#32;=&#32;HalfFloat.HalfUtilities.Pack(val);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write(cval,&#32;ref&#32;bitposition,&#32;16);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cval;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00203"/>00203 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a14323eba7351ee34d118acba34b176cc">compressType</link>&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7b">LiteFloatCompressType</link>.Full32)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ulong&#32;cval&#32;=&#32;((<link linkend="_struct_photon_1_1_compression_1_1_byte_converter">ByteConverter</link>)val).uint32;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write(cval,&#32;ref&#32;bitposition,&#32;32);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cval;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00210"/>00210 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__lite_float_crusher_8cs_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ulong&#32;cval&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a1a15cc5dbdf7a1d71792376916c9fb14">Encode</link>(val);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write(cval,&#32;ref&#32;bitposition,&#32;(<emphasis role="keywordtype">int</emphasis>)<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a14323eba7351ee34d118acba34b176cc">compressType</link>);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cval;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00217"/>00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00218"/>00218 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00219"/><link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a67656dc77432a8249710070a42ed0a58">00219</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a67656dc77432a8249710070a42ed0a58">WriteCValue</link>(uint&#32;cval,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a14323eba7351ee34d118acba34b176cc">compressType</link>&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7b">LiteFloatCompressType</link>.Half16)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00223"/>00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write(cval,&#32;ref&#32;bitposition,&#32;16);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00225"/>00225 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a14323eba7351ee34d118acba34b176cc">compressType</link>&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7b">LiteFloatCompressType</link>.Full32)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00228"/>00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write(cval,&#32;ref&#32;bitposition,&#32;32);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00229"/>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__lite_float_crusher_8cs_source_1l00231"/>00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00232"/>00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write(cval,&#32;ref&#32;bitposition,&#32;(<emphasis role="keywordtype">int</emphasis>)<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a14323eba7351ee34d118acba34b176cc">compressType</link>);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00233"/>00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00234"/>00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00235"/>00235 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00236"/><link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a1f58d5eb243259df459adc771f8213d2">00236</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a1f58d5eb243259df459adc771f8213d2">ReadValue</link>(<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00237"/>00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00238"/>00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a14323eba7351ee34d118acba34b176cc">compressType</link>&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7b">LiteFloatCompressType</link>.Half16)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00239"/>00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00240"/>00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ushort&#32;cval&#32;=&#32;(ushort)buffer.Read(ref&#32;bitposition,&#32;16);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00241"/>00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;HalfFloat.HalfUtilities.Unpack(cval);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00243"/>00243 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a14323eba7351ee34d118acba34b176cc">compressType</link>&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7b">LiteFloatCompressType</link>.Full32)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00245"/>00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_photon_1_1_compression_1_1_byte_converter">ByteConverter</link>&#32;cval&#32;=&#32;(uint)buffer.Read(ref&#32;bitposition,&#32;32);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cval.<link linkend="_struct_photon_1_1_compression_1_1_byte_converter_1ac4c41cfc6e2e9765747c871bf32f995b">float32</link>;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00249"/>00249 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__lite_float_crusher_8cs_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;cval&#32;=&#32;(uint)buffer.Read(ref&#32;bitposition,&#32;(<emphasis role="keywordtype">int</emphasis>)<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a14323eba7351ee34d118acba34b176cc">compressType</link>);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00253"/>00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1aa8ba9ef7c79a7949ae86adb78aa16a1e">Decode</link>(cval);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00254"/>00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00255"/>00255 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00256"/>00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00257"/>00257 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00258"/><link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a1fa063ea7fb12a4191646ad1b9137eb3">00258</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;ulong&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a1fa063ea7fb12a4191646ad1b9137eb3">ReadCValue</link>(<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00259"/>00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a14323eba7351ee34d118acba34b176cc">compressType</link>&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7b">LiteFloatCompressType</link>.Half16)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00261"/>00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00262"/>00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(ushort)buffer.Read(ref&#32;bitposition,&#32;16);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00263"/>00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00264"/>00264 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a14323eba7351ee34d118acba34b176cc">compressType</link>&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7b">LiteFloatCompressType</link>.Full32)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(uint)buffer.Read(ref&#32;bitposition,&#32;32);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00269"/>00269 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00270"/>00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__lite_float_crusher_8cs_source_1l00271"/>00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00272"/>00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(uint)buffer.Read(ref&#32;bitposition,&#32;(<emphasis role="keywordtype">int</emphasis>)<link linkend="_class_photon_1_1_compression_1_1_lite_float_crusher_1a14323eba7351ee34d118acba34b176cc">compressType</link>);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00273"/>00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00275"/>00275 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00276"/>00276 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00277"/>00277 <emphasis role="preprocessor">#if&#32;UNITY_EDITOR</emphasis>
<anchor xml:id="__lite_float_crusher_8cs_source_1l00278"/>00278 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00279"/>00279 &#32;&#32;&#32;&#32;[CustomPropertyDrawer(typeof(LiteFloatCrusher))]
<anchor xml:id="__lite_float_crusher_8cs_source_1l00280"/>00280 &#32;&#32;&#32;&#32;[CanEditMultipleObjects]
<anchor xml:id="__lite_float_crusher_8cs_source_1l00281"/>00281 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>LiteFloatCrusherDrawer&#32;:&#32;PropertyDrawer
<anchor xml:id="__lite_float_crusher_8cs_source_1l00282"/>00282 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00283"/>00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;GUIStyle&#32;miniLabelRight&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;GUIStyle((GUIStyle)<emphasis role="stringliteral">&quot;MiniLabel&quot;</emphasis>)&#32;{&#32;alignment&#32;=&#32;TextAnchor.UpperRight&#32;};
<anchor xml:id="__lite_float_crusher_8cs_source_1l00284"/>00284 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;GUIContent&#32;accCenterLabel&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;GUIContent(<emphasis role="stringliteral">&quot;center&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;Accurate&#32;Center&#32;reduces&#32;precision&#32;slightly&#32;to&#32;allow&#32;for&#32;an&#32;exact&#32;mid-value.&quot;</emphasis>&#32;+
<anchor xml:id="__lite_float_crusher_8cs_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;Enable&#32;this&#32;when&#32;you&#32;need&#32;an&#32;value&#32;exactly&#32;between&#32;min&#32;and&#32;max&#32;to&#32;be&#32;lossless&#32;after&#32;compression.&#32;For&#32;example&#32;if&#32;you&#32;need&#32;0&#32;to&#32;be&#32;accurate&#32;when&#32;your&#32;range&#32;is&#32;-1&#32;to&#32;1.&quot;</emphasis>);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnGUI(Rect&#32;r,&#32;SerializedProperty&#32;property,&#32;GUIContent&#32;label)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00288"/>00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00289"/>00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;compressType&#32;=&#32;<emphasis role="keyword">property</emphasis>.FindPropertyRelative(<emphasis role="stringliteral">&quot;compressType&quot;</emphasis>);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00290"/>00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;min&#32;=&#32;<emphasis role="keyword">property</emphasis>.FindPropertyRelative(<emphasis role="stringliteral">&quot;min&quot;</emphasis>);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00291"/>00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;max&#32;=&#32;<emphasis role="keyword">property</emphasis>.FindPropertyRelative(<emphasis role="stringliteral">&quot;max&quot;</emphasis>);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00292"/>00292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;ac&#32;=&#32;<emphasis role="keyword">property</emphasis>.FindPropertyRelative(<emphasis role="stringliteral">&quot;accurateCenter&quot;</emphasis>);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;norm&#32;=&#32;<emphasis role="keyword">property</emphasis>.FindPropertyRelative(<emphasis role="stringliteral">&quot;normalization&quot;</emphasis>);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00294"/>00294 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;bitsWidth&#32;=&#32;60;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;accCenterLeft&#32;=&#32;52;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;accCenterCheckWidth&#32;=&#32;14;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00298"/>00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;stretchleft&#32;=&#32;r.xMin&#32;+&#32;bitsWidth;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;mLabelWidth&#32;=&#32;26;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00300"/>00300 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00301"/>00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Rect&#32;rectBits&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Rect(r)&#32;{&#32;xMax&#32;=&#32;stretchleft&#32;};
<anchor xml:id="__lite_float_crusher_8cs_source_1l00302"/>00302 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Rect&#32;rectStretch&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Rect(r)&#32;{&#32;xMin&#32;=&#32;stretchleft,&#32;xMax&#32;=&#32;r.xMax&#32;-&#32;accCenterLeft&#32;};
<anchor xml:id="__lite_float_crusher_8cs_source_1l00304"/>00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Rect&#32;rectMin&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Rect(rectStretch)&#32;{&#32;width&#32;=&#32;rectStretch.width&#32;*&#32;.5f&#32;};
<anchor xml:id="__lite_float_crusher_8cs_source_1l00305"/>00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Rect&#32;rectMax&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Rect(rectStretch)&#32;{&#32;xMin&#32;=&#32;rectStretch.xMin&#32;+&#32;rectStretch.width&#32;*&#32;.5f&#32;};
<anchor xml:id="__lite_float_crusher_8cs_source_1l00306"/>00306 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00307"/>00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Rect&#32;racl&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Rect(r)&#32;{&#32;xMin&#32;=&#32;r.xMax&#32;-&#32;accCenterLeft,&#32;width&#32;=&#32;accCenterLeft&#32;-&#32;accCenterCheckWidth&#32;};
<anchor xml:id="__lite_float_crusher_8cs_source_1l00308"/>00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Rect&#32;racc&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Rect(r)&#32;{&#32;xMin&#32;=&#32;r.xMax&#32;-&#32;accCenterCheckWidth&#32;};
<anchor xml:id="__lite_float_crusher_8cs_source_1l00309"/>00309 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00310"/>00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorGUI.BeginChangeCheck();
<anchor xml:id="__lite_float_crusher_8cs_source_1l00311"/>00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorGUI.PropertyField(rectBits,&#32;compressType,&#32;GUIContent.none);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00312"/>00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(compressType.intValue&#32;!=&#32;(<emphasis role="keywordtype">int</emphasis>)<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7b">LiteFloatCompressType</link>.Half16&#32;&amp;&amp;&#32;compressType.intValue&#32;!=&#32;(<emphasis role="keywordtype">int</emphasis>)<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7b">LiteFloatCompressType</link>.Full32)
<anchor xml:id="__lite_float_crusher_8cs_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorGUI.BeginDisabledGroup(norm.intValue&#32;!=&#32;0);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorGUI.LabelField(<emphasis role="keyword">new</emphasis>&#32;Rect(rectMin)&#32;{&#32;width&#32;=&#32;mLabelWidth&#32;},&#32;<emphasis role="stringliteral">&quot;min&quot;</emphasis>,&#32;miniLabelRight);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorGUI.PropertyField(<emphasis role="keyword">new</emphasis>&#32;Rect(rectMin)&#32;{&#32;xMin&#32;=&#32;rectMin.xMin&#32;+&#32;mLabelWidth&#32;},&#32;min,&#32;GUIContent.none);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00317"/>00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorGUI.LabelField(<emphasis role="keyword">new</emphasis>&#32;Rect(rectMax)&#32;{&#32;width&#32;=&#32;mLabelWidth&#32;},&#32;<emphasis role="stringliteral">&quot;max&quot;</emphasis>,&#32;miniLabelRight);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00318"/>00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorGUI.PropertyField(<emphasis role="keyword">new</emphasis>&#32;Rect(rectMax)&#32;{&#32;xMin&#32;=&#32;rectMax.xMin&#32;+&#32;mLabelWidth&#32;},&#32;max,&#32;GUIContent.none);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00319"/>00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorGUI.EndDisabledGroup();
<anchor xml:id="__lite_float_crusher_8cs_source_1l00320"/>00320 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00321"/>00321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorGUI.LabelField(racl,&#32;accCenterLabel,&#32;miniLabelRight);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00322"/>00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ac.boolValue&#32;=&#32;EditorGUI.Toggle(racc,&#32;GUIContent.none,&#32;ac.boolValue,&#32;(GUIStyle)<emphasis role="stringliteral">&quot;OL&#32;Toggle&quot;</emphasis>);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00323"/>00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00324"/>00324 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00325"/>00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(EditorGUI.EndChangeCheck())
<anchor xml:id="__lite_float_crusher_8cs_source_1l00326"/>00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_float_crusher_8cs_source_1l00327"/>00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;encoder&#32;=&#32;<emphasis role="keyword">property</emphasis>.FindPropertyRelative(<emphasis role="stringliteral">&quot;encoder&quot;</emphasis>);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00328"/>00328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;decoder&#32;=&#32;<emphasis role="keyword">property</emphasis>.FindPropertyRelative(<emphasis role="stringliteral">&quot;decoder&quot;</emphasis>);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00329"/>00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;maxCVal&#32;=&#32;<emphasis role="keyword">property</emphasis>.FindPropertyRelative(<emphasis role="stringliteral">&quot;maxCVal&quot;</emphasis>);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00330"/>00330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;bits&#32;=&#32;<emphasis role="keyword">property</emphasis>.FindPropertyRelative(<emphasis role="stringliteral">&quot;bits&quot;</emphasis>);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00331"/>00331 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00332"/>00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;_encoder&#32;=&#32;0,&#32;_decoder&#32;=&#32;0;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00333"/>00333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;_bits&#32;=&#32;0;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00334"/>00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ulong&#32;_maxCVal&#32;=&#32;0;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00335"/>00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteFloatCrusher.Recalculate((<link linkend="_namespace_photon_1_1_compression_1aada829ed5fd1357ac47c7452c165db7b">LiteFloatCompressType</link>)compressType.intValue,&#32;min.floatValue,&#32;max.floatValue,&#32;ac.boolValue,&#32;ref&#32;_bits,&#32;ref&#32;_encoder,&#32;ref&#32;_decoder,&#32;ref&#32;_maxCVal);
<anchor xml:id="__lite_float_crusher_8cs_source_1l00336"/>00336 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00337"/>00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;encoder.floatValue&#32;=&#32;_encoder;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00338"/>00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decoder.floatValue&#32;=&#32;_decoder;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00339"/>00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bits.intValue&#32;=&#32;_bits;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00340"/>00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maxCVal.longValue&#32;=&#32;(long)_maxCVal;
<anchor xml:id="__lite_float_crusher_8cs_source_1l00341"/>00341 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00342"/>00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">property</emphasis>.serializedObject.ApplyModifiedProperties();
<anchor xml:id="__lite_float_crusher_8cs_source_1l00343"/>00343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00344"/>00344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00345"/>00345 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_float_crusher_8cs_source_1l00346"/>00346 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00347"/>00347 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__lite_float_crusher_8cs_source_1l00348"/>00348 
<anchor xml:id="__lite_float_crusher_8cs_source_1l00349"/>00349 }
</programlisting></section>
