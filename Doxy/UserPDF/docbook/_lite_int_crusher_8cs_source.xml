<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__lite_int_crusher_8cs_source" xml:lang="en-US">
<title>LiteIntCrusher.cs</title>
<indexterm><primary>C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/LiteCrusher/LiteIntCrusher.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__lite_int_crusher_8cs_source_1l00001"/>00001 <emphasis role="keyword">using</emphasis>&#32;System;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00002"/>00002 <emphasis role="keyword">using</emphasis>&#32;UnityEngine;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00003"/>00003 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00004"/>00004 <emphasis role="preprocessor">#if&#32;UNITY_EDITOR</emphasis>
<anchor xml:id="__lite_int_crusher_8cs_source_1l00005"/>00005 <emphasis role="keyword">using</emphasis>&#32;UnityEditor;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00006"/>00006 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__lite_int_crusher_8cs_source_1l00007"/>00007 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00008"/>00008 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_photon_1_1_compression">Photon.Compression</link>
<anchor xml:id="__lite_int_crusher_8cs_source_1l00009"/>00009 {
<anchor xml:id="__lite_int_crusher_8cs_source_1l00010"/>00010 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00011"/><link linkend="_namespace_photon_1_1_compression_1adf405ec35555f32f8b6d8a692322bd37">00011</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1adf405ec35555f32f8b6d8a692322bd37">LiteIntCompressType</link>
<anchor xml:id="__lite_int_crusher_8cs_source_1l00012"/>00012 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_photon_1_1_compression_1adf405ec35555f32f8b6d8a692322bd37a3e99979c5342d1c28fef7d3f7f3d8846">PackSigned</link>,&#32;<link linkend="_namespace_photon_1_1_compression_1adf405ec35555f32f8b6d8a692322bd37a4092e092a25bfacabfc45ac61586974c">PackUnsigned</link>,&#32;<link linkend="_namespace_photon_1_1_compression_1adf405ec35555f32f8b6d8a692322bd37a87ba2ecc8b6915e8bd6f5089918229fd">Range</link>
<anchor xml:id="__lite_int_crusher_8cs_source_1l00014"/>00014 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00015"/>00015 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00016"/>00016 &#32;&#32;&#32;&#32;[Serializable]
<anchor xml:id="__lite_int_crusher_8cs_source_1l00017"/><link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher">00017</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher">LiteIntCrusher</link>&#32;:&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_crusher">LiteCrusher</link>&lt;uint,&#32;int&gt;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00018"/>00018 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00019"/><link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a12c10e96d2b84f482e22ceedaa01f9b0">00019</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[SerializeField]&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1adf405ec35555f32f8b6d8a692322bd37">LiteIntCompressType</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a12c10e96d2b84f482e22ceedaa01f9b0">compressType</link>;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00020"/>00020 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00021"/><link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a5b71d77e2696d1a1aa82569784f3139f">00021</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[SerializeField]&#32;<emphasis role="keyword">protected</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a5b71d77e2696d1a1aa82569784f3139f">min</link>;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00022"/><link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a133d648d6df9efdf68e25ad5eb623af5">00022</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[SerializeField]&#32;<emphasis role="keyword">protected</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a133d648d6df9efdf68e25ad5eb623af5">max</link>;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00023"/>00023 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[SerializeField]&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;smallest;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[SerializeField]&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;biggest;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00026"/>00026 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00027"/><link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a7f2b09baf3d0065a0520b0e18d3b8217">00027</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a7f2b09baf3d0065a0520b0e18d3b8217">LiteIntCrusher</link>()
<anchor xml:id="__lite_int_crusher_8cs_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.compressType&#32;=&#32;<link linkend="_namespace_photon_1_1_compression_1adf405ec35555f32f8b6d8a692322bd37">LiteIntCompressType</link>.PackSigned;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.min&#32;=&#32;sbyte.MinValue;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.max&#32;=&#32;sbyte.MaxValue;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00032"/>00032 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a12c10e96d2b84f482e22ceedaa01f9b0">compressType</link>&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1adf405ec35555f32f8b6d8a692322bd37">LiteIntCompressType</link>.Range)
<anchor xml:id="__lite_int_crusher_8cs_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1ab2354bc02ff0dfbfe1036f3a604545eb">Recalculate</link>(<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a5b71d77e2696d1a1aa82569784f3139f">min</link>,&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a133d648d6df9efdf68e25ad5eb623af5">max</link>,&#32;ref&#32;smallest,&#32;ref&#32;biggest,&#32;ref&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_crusher_1a038ac79696e6caec297b87ec68cfbccf">bits</link>);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00036"/>00036 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00037"/><link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a471d3c1ebc1d89437919addb64d436e3">00037</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a471d3c1ebc1d89437919addb64d436e3">LiteIntCrusher</link>(<link linkend="_namespace_photon_1_1_compression_1adf405ec35555f32f8b6d8a692322bd37">LiteIntCompressType</link>&#32;compType&#32;=&#32;<link linkend="_namespace_photon_1_1_compression_1adf405ec35555f32f8b6d8a692322bd37">LiteIntCompressType</link>.PackSigned,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a5b71d77e2696d1a1aa82569784f3139f">min</link>&#32;=&#32;sbyte.MinValue,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a133d648d6df9efdf68e25ad5eb623af5">max</link>&#32;=&#32;sbyte.MaxValue)
<anchor xml:id="__lite_int_crusher_8cs_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.compressType&#32;=&#32;compType;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.min&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a5b71d77e2696d1a1aa82569784f3139f">min</link>;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.max&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a133d648d6df9efdf68e25ad5eb623af5">max</link>;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00042"/>00042 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a12c10e96d2b84f482e22ceedaa01f9b0">compressType</link>&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1adf405ec35555f32f8b6d8a692322bd37">LiteIntCompressType</link>.Range)
<anchor xml:id="__lite_int_crusher_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1ab2354bc02ff0dfbfe1036f3a604545eb">Recalculate</link>(<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a5b71d77e2696d1a1aa82569784f3139f">min</link>,&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a133d648d6df9efdf68e25ad5eb623af5">max</link>,&#32;ref&#32;smallest,&#32;ref&#32;biggest,&#32;ref&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_crusher_1a038ac79696e6caec297b87ec68cfbccf">bits</link>);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00046"/>00046 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00047"/><link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a50fa8f42ac44a40df007e7adeffb6361">00047</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;uint&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a50fa8f42ac44a40df007e7adeffb6361">WriteValue</link>(<emphasis role="keywordtype">int</emphasis>&#32;val,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition)
<anchor xml:id="__lite_int_crusher_8cs_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00049"/>00049 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a12c10e96d2b84f482e22ceedaa01f9b0">compressType</link>)
<anchor xml:id="__lite_int_crusher_8cs_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1adf405ec35555f32f8b6d8a692322bd37">LiteIntCompressType</link>.PackUnsigned:
<anchor xml:id="__lite_int_crusher_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;cval&#32;=&#32;(uint)val;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.WritePackedBytes(cval,&#32;ref&#32;bitposition,&#32;32);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cval;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00058"/>00058 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1adf405ec35555f32f8b6d8a692322bd37">LiteIntCompressType</link>.PackSigned:
<anchor xml:id="__lite_int_crusher_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;zigzag&#32;=&#32;(uint)((val&#32;&lt;&lt;&#32;1)&#32;^&#32;(val&#32;&gt;&gt;&#32;31));
<anchor xml:id="__lite_int_crusher_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.WritePackedBytes(zigzag,&#32;ref&#32;bitposition,&#32;32);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;zigzag;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00065"/>00065 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1adf405ec35555f32f8b6d8a692322bd37">LiteIntCompressType</link>.Range:
<anchor xml:id="__lite_int_crusher_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;cval&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a08d65bac39b1c6f8cea6f9854d807778">Encode</link>(val);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write(cval,&#32;ref&#32;bitposition,&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_crusher_1a038ac79696e6caec297b87ec68cfbccf">bits</link>);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cval;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00072"/>00072 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
<anchor xml:id="__lite_int_crusher_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00077"/>00077 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00078"/><link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1ada7674ab580acd24385f5dad8515d51b">00078</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1ada7674ab580acd24385f5dad8515d51b">WriteCValue</link>(uint&#32;cval,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition)
<anchor xml:id="__lite_int_crusher_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a12c10e96d2b84f482e22ceedaa01f9b0">compressType</link>)
<anchor xml:id="__lite_int_crusher_8cs_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1adf405ec35555f32f8b6d8a692322bd37">LiteIntCompressType</link>.PackUnsigned:
<anchor xml:id="__lite_int_crusher_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.WritePackedBytes(cval,&#32;ref&#32;bitposition,&#32;32);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00087"/>00087 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1adf405ec35555f32f8b6d8a692322bd37">LiteIntCompressType</link>.PackSigned:
<anchor xml:id="__lite_int_crusher_8cs_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.WritePackedBytes(cval,&#32;ref&#32;bitposition,&#32;32);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00093"/>00093 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1adf405ec35555f32f8b6d8a692322bd37">LiteIntCompressType</link>.Range:
<anchor xml:id="__lite_int_crusher_8cs_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write(cval,&#32;ref&#32;bitposition,&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_crusher_1a038ac79696e6caec297b87ec68cfbccf">bits</link>);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00099"/>00099 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
<anchor xml:id="__lite_int_crusher_8cs_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00104"/>00104 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00105"/><link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a3f6907665bc54a32242d12d0113aec5b">00105</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a3f6907665bc54a32242d12d0113aec5b">ReadValue</link>(<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition)
<anchor xml:id="__lite_int_crusher_8cs_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a12c10e96d2b84f482e22ceedaa01f9b0">compressType</link>)
<anchor xml:id="__lite_int_crusher_8cs_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1adf405ec35555f32f8b6d8a692322bd37">LiteIntCompressType</link>.PackUnsigned:
<anchor xml:id="__lite_int_crusher_8cs_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>)buffer.ReadPackedBytes(ref&#32;bitposition,&#32;32);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00111"/>00111 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1adf405ec35555f32f8b6d8a692322bd37">LiteIntCompressType</link>.PackSigned:
<anchor xml:id="__lite_int_crusher_8cs_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;buffer.ReadSignedPackedBytes(ref&#32;bitposition,&#32;32);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00114"/>00114 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1adf405ec35555f32f8b6d8a692322bd37">LiteIntCompressType</link>.Range:
<anchor xml:id="__lite_int_crusher_8cs_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;cval&#32;=&#32;(uint)buffer.Read(ref&#32;bitposition,&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_crusher_1a038ac79696e6caec297b87ec68cfbccf">bits</link>);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1ad50e180b0f652cb8d462f11a39e41ebf">Decode</link>(cval);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00118"/>00118 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
<anchor xml:id="__lite_int_crusher_8cs_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00123"/>00123 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00124"/>00124 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00125"/><link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1ae2cf76edd9c7ddae03d964f7aa1d6d92">00125</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;uint&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1ae2cf76edd9c7ddae03d964f7aa1d6d92">ReadCValue</link>(<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition)
<anchor xml:id="__lite_int_crusher_8cs_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a12c10e96d2b84f482e22ceedaa01f9b0">compressType</link>)
<anchor xml:id="__lite_int_crusher_8cs_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1adf405ec35555f32f8b6d8a692322bd37">LiteIntCompressType</link>.PackUnsigned:
<anchor xml:id="__lite_int_crusher_8cs_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(uint)buffer.ReadPackedBytes(ref&#32;bitposition,&#32;32);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00131"/>00131 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1adf405ec35555f32f8b6d8a692322bd37">LiteIntCompressType</link>.PackSigned:
<anchor xml:id="__lite_int_crusher_8cs_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(uint)buffer.ReadPackedBytes(ref&#32;bitposition,&#32;32);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00134"/>00134 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1adf405ec35555f32f8b6d8a692322bd37">LiteIntCompressType</link>.Range:
<anchor xml:id="__lite_int_crusher_8cs_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(uint)buffer.Read(ref&#32;bitposition,&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_crusher_1a038ac79696e6caec297b87ec68cfbccf">bits</link>);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00137"/>00137 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
<anchor xml:id="__lite_int_crusher_8cs_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00142"/>00142 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00143"/><link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a08d65bac39b1c6f8cea6f9854d807778">00143</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;uint&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a08d65bac39b1c6f8cea6f9854d807778">Encode</link>(<emphasis role="keywordtype">int</emphasis>&#32;value)
<anchor xml:id="__lite_int_crusher_8cs_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a12c10e96d2b84f482e22ceedaa01f9b0">compressType</link>)
<anchor xml:id="__lite_int_crusher_8cs_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1adf405ec35555f32f8b6d8a692322bd37">LiteIntCompressType</link>.PackSigned:
<anchor xml:id="__lite_int_crusher_8cs_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;value.ZigZag();
<anchor xml:id="__lite_int_crusher_8cs_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1adf405ec35555f32f8b6d8a692322bd37">LiteIntCompressType</link>.PackUnsigned:
<anchor xml:id="__lite_int_crusher_8cs_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(uint)value;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
<anchor xml:id="__lite_int_crusher_8cs_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value&#32;=&#32;(value&#32;&gt;&#32;biggest)&#32;?&#32;biggest&#32;:&#32;(value&#32;&lt;&#32;smallest)&#32;?&#32;smallest&#32;:&#32;value;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(uint)(value&#32;-&#32;smallest);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00162"/>00162 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00163"/><link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1ad50e180b0f652cb8d462f11a39e41ebf">00163</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1ad50e180b0f652cb8d462f11a39e41ebf">Decode</link>(uint&#32;cvalue)
<anchor xml:id="__lite_int_crusher_8cs_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a12c10e96d2b84f482e22ceedaa01f9b0">compressType</link>)
<anchor xml:id="__lite_int_crusher_8cs_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1adf405ec35555f32f8b6d8a692322bd37">LiteIntCompressType</link>.PackSigned:
<anchor xml:id="__lite_int_crusher_8cs_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cvalue.UnZigZag();
<anchor xml:id="__lite_int_crusher_8cs_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1adf405ec35555f32f8b6d8a692322bd37">LiteIntCompressType</link>.PackUnsigned:
<anchor xml:id="__lite_int_crusher_8cs_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>)cvalue;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
<anchor xml:id="__lite_int_crusher_8cs_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>)(cvalue&#32;+&#32;smallest);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00179"/>00179 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00180"/><link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1ab2354bc02ff0dfbfe1036f3a604545eb">00180</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1ab2354bc02ff0dfbfe1036f3a604545eb">Recalculate</link>(<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a5b71d77e2696d1a1aa82569784f3139f">min</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a133d648d6df9efdf68e25ad5eb623af5">max</link>,&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher">LiteIntCrusher</link>&#32;crusher)
<anchor xml:id="__lite_int_crusher_8cs_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;range;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00183"/>00183 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a5b71d77e2696d1a1aa82569784f3139f">min</link>&#32;&lt;&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a133d648d6df9efdf68e25ad5eb623af5">max</link>)
<anchor xml:id="__lite_int_crusher_8cs_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;crusher.smallest&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a5b71d77e2696d1a1aa82569784f3139f">min</link>;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;crusher.biggest&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a133d648d6df9efdf68e25ad5eb623af5">max</link>;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__lite_int_crusher_8cs_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;crusher.smallest&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a133d648d6df9efdf68e25ad5eb623af5">max</link>;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;crusher.biggest&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a5b71d77e2696d1a1aa82569784f3139f">min</link>;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00194"/>00194 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;range&#32;=&#32;crusher.biggest&#32;-&#32;crusher.smallest;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;crusher.<link linkend="_class_photon_1_1_compression_1_1_lite_crusher_1a038ac79696e6caec297b87ec68cfbccf">bits</link>&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_crusher_1a629450e8b107ba5a2ed689e7706ce19b">GetBitsForMaxValue</link>((uint)range);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00198"/>00198 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00199"/><link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a4be81f460f134157aae905df6e32c209">00199</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a4be81f460f134157aae905df6e32c209">Recalculate</link>(<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a5b71d77e2696d1a1aa82569784f3139f">min</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a133d648d6df9efdf68e25ad5eb623af5">max</link>,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;smallest,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;biggest,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_crusher_1a038ac79696e6caec297b87ec68cfbccf">bits</link>)
<anchor xml:id="__lite_int_crusher_8cs_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;range;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00202"/>00202 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a5b71d77e2696d1a1aa82569784f3139f">min</link>&#32;&lt;&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a133d648d6df9efdf68e25ad5eb623af5">max</link>)
<anchor xml:id="__lite_int_crusher_8cs_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;smallest&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a5b71d77e2696d1a1aa82569784f3139f">min</link>;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;biggest&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a133d648d6df9efdf68e25ad5eb623af5">max</link>;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__lite_int_crusher_8cs_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;smallest&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a133d648d6df9efdf68e25ad5eb623af5">max</link>;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;biggest&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_int_crusher_1a5b71d77e2696d1a1aa82569784f3139f">min</link>;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00213"/>00213 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;range&#32;=&#32;biggest&#32;-&#32;smallest;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_crusher_1a038ac79696e6caec297b87ec68cfbccf">bits</link>&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_lite_crusher_1a629450e8b107ba5a2ed689e7706ce19b">GetBitsForMaxValue</link>((uint)range);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00217"/>00217 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00218"/>00218 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00219"/>00219 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00220"/>00220 <emphasis role="preprocessor">#if&#32;UNITY_EDITOR</emphasis>
<anchor xml:id="__lite_int_crusher_8cs_source_1l00221"/>00221 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00222"/>00222 &#32;&#32;&#32;&#32;[CustomPropertyDrawer(typeof(LiteIntCrusher))]
<anchor xml:id="__lite_int_crusher_8cs_source_1l00223"/>00223 &#32;&#32;&#32;&#32;[CanEditMultipleObjects]
<anchor xml:id="__lite_int_crusher_8cs_source_1l00224"/>00224 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>LiteIntCrusherDrawer&#32;:&#32;PropertyDrawer
<anchor xml:id="__lite_int_crusher_8cs_source_1l00225"/>00225 &#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;GUIStyle&#32;miniLabelRight&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;GUIStyle((GUIStyle)<emphasis role="stringliteral">&quot;MiniLabel&quot;</emphasis>)&#32;{&#32;alignment&#32;=&#32;TextAnchor.UpperRight&#32;};
<anchor xml:id="__lite_int_crusher_8cs_source_1l00227"/>00227 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00228"/>00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;GUIContent&#32;accCenterLabel&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;GUIContent(<emphasis role="stringliteral">&quot;center&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;Accurate&#32;Center&#32;reduces&#32;precision&#32;slightly&#32;to&#32;allow&#32;for&#32;an&#32;exact&#32;mid-value.&quot;</emphasis>&#32;+
<anchor xml:id="__lite_int_crusher_8cs_source_1l00229"/>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;Enable&#32;this&#32;when&#32;you&#32;need&#32;an&#32;value&#32;exactly&#32;between&#32;min&#32;and&#32;max&#32;to&#32;be&#32;lossless&#32;after&#32;compression.&#32;For&#32;example&#32;if&#32;you&#32;need&#32;0&#32;to&#32;be&#32;accurate&#32;when&#32;your&#32;range&#32;is&#32;-1&#32;to&#32;1.&quot;</emphasis>);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnGUI(Rect&#32;r,&#32;SerializedProperty&#32;property,&#32;GUIContent&#32;label)
<anchor xml:id="__lite_int_crusher_8cs_source_1l00231"/>00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00232"/>00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;compType&#32;=&#32;<emphasis role="keyword">property</emphasis>.FindPropertyRelative(<emphasis role="stringliteral">&quot;compressType&quot;</emphasis>);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00233"/>00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;min&#32;=&#32;<emphasis role="keyword">property</emphasis>.FindPropertyRelative(<emphasis role="stringliteral">&quot;min&quot;</emphasis>);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00234"/>00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;max&#32;=&#32;<emphasis role="keyword">property</emphasis>.FindPropertyRelative(<emphasis role="stringliteral">&quot;max&quot;</emphasis>);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00235"/>00235 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00236"/>00236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;compTypeWidth&#32;=&#32;100;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00237"/>00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;stretchleft&#32;=&#32;r.xMin&#32;+&#32;compTypeWidth;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00238"/>00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;mLabelWidth&#32;=&#32;26;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00239"/>00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00240"/>00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Rect&#32;rectBits&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Rect(r)&#32;{&#32;xMax&#32;=&#32;stretchleft&#32;};
<anchor xml:id="__lite_int_crusher_8cs_source_1l00241"/>00241 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Rect&#32;rectStretch&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Rect(r)&#32;{&#32;xMin&#32;=&#32;stretchleft,&#32;xMax&#32;=&#32;r.xMax&#32;};
<anchor xml:id="__lite_int_crusher_8cs_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Rect&#32;rectMin&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Rect(rectStretch)&#32;{&#32;width&#32;=&#32;rectStretch.width&#32;*&#32;.5f&#32;};
<anchor xml:id="__lite_int_crusher_8cs_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Rect&#32;rectMax&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Rect(rectStretch)&#32;{&#32;xMin&#32;=&#32;rectStretch.xMin&#32;+&#32;rectStretch.width&#32;*&#32;.5f&#32;};
<anchor xml:id="__lite_int_crusher_8cs_source_1l00245"/>00245 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorGUI.BeginChangeCheck();
<anchor xml:id="__lite_int_crusher_8cs_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorGUI.PropertyField(rectBits,&#32;&#32;compType,&#32;GUIContent.none);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(compType.intValue&#32;==&#32;(<emphasis role="keywordtype">int</emphasis>)<link linkend="_namespace_photon_1_1_compression_1adf405ec35555f32f8b6d8a692322bd37">LiteIntCompressType</link>.Range)
<anchor xml:id="__lite_int_crusher_8cs_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorGUI.LabelField(<emphasis role="keyword">new</emphasis>&#32;Rect(rectMin)&#32;{&#32;width&#32;=&#32;mLabelWidth&#32;},&#32;<emphasis role="stringliteral">&quot;min&quot;</emphasis>,&#32;miniLabelRight);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorGUI.PropertyField(<emphasis role="keyword">new</emphasis>&#32;Rect(rectMin)&#32;{&#32;xMin&#32;=&#32;rectMin.xMin&#32;+&#32;mLabelWidth&#32;},&#32;min,&#32;GUIContent.none);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorGUI.LabelField(<emphasis role="keyword">new</emphasis>&#32;Rect(rectMax)&#32;{&#32;width&#32;=&#32;mLabelWidth&#32;},&#32;<emphasis role="stringliteral">&quot;max&quot;</emphasis>,&#32;miniLabelRight);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00253"/>00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EditorGUI.PropertyField(<emphasis role="keyword">new</emphasis>&#32;Rect(rectMax)&#32;{&#32;xMin&#32;=&#32;rectMax.xMin&#32;+&#32;mLabelWidth&#32;},&#32;max,&#32;GUIContent.none);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00254"/>00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00255"/>00255 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00256"/>00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(EditorGUI.EndChangeCheck())
<anchor xml:id="__lite_int_crusher_8cs_source_1l00257"/>00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;smallest&#32;=&#32;<emphasis role="keyword">property</emphasis>.FindPropertyRelative(<emphasis role="stringliteral">&quot;smallest&quot;</emphasis>);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00259"/>00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;biggest&#32;=&#32;<emphasis role="keyword">property</emphasis>.FindPropertyRelative(<emphasis role="stringliteral">&quot;biggest&quot;</emphasis>);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SerializedProperty&#32;bits&#32;=&#32;<emphasis role="keyword">property</emphasis>.FindPropertyRelative(<emphasis role="stringliteral">&quot;bits&quot;</emphasis>);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00261"/>00261 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00263"/>00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(compType.intValue&#32;==&#32;(<emphasis role="keywordtype">int</emphasis>)<link linkend="_namespace_photon_1_1_compression_1adf405ec35555f32f8b6d8a692322bd37">LiteIntCompressType</link>.Range)
<anchor xml:id="__lite_int_crusher_8cs_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__lite_int_crusher_8cs_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;_smallest&#32;=&#32;0,&#32;_biggest&#32;=&#32;0,&#32;_bits&#32;=&#32;0;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LiteIntCrusher.Recalculate(min.intValue,&#32;max.intValue,&#32;ref&#32;_smallest,&#32;ref&#32;_biggest,&#32;ref&#32;_bits);
<anchor xml:id="__lite_int_crusher_8cs_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;smallest.intValue&#32;=&#32;_smallest;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;biggest.intValue&#32;=&#32;_biggest;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00269"/>00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bits.intValue&#32;=&#32;_bits;
<anchor xml:id="__lite_int_crusher_8cs_source_1l00270"/>00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00271"/>00271 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00272"/>00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">property</emphasis>.serializedObject.ApplyModifiedProperties();
<anchor xml:id="__lite_int_crusher_8cs_source_1l00273"/>00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00275"/>00275 &#32;&#32;&#32;&#32;}
<anchor xml:id="__lite_int_crusher_8cs_source_1l00276"/>00276 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00277"/>00277 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__lite_int_crusher_8cs_source_1l00278"/>00278 
<anchor xml:id="__lite_int_crusher_8cs_source_1l00279"/>00279 }
</programlisting></section>
