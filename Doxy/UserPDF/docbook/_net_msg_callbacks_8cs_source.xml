<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__net_msg_callbacks_8cs_source" xml:lang="en-US">
<title>NetMsgCallbacks.cs</title>
<indexterm><primary>C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/Simple/Utilities/Networking/NetAdapters/NetMsgCallbacks.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__net_msg_callbacks_8cs_source_1l00001"/>00001 <emphasis role="comment">//&#32;---------------------------------------------------------------------------------------------</emphasis>
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00002"/>00002 <emphasis role="comment">//&#32;&lt;copyright&gt;PhotonNetwork&#32;Framework&#32;for&#32;Unity&#32;-&#32;Copyright&#32;(C)&#32;2020&#32;Exit&#32;Games&#32;GmbH&lt;/copyright&gt;</emphasis>
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00003"/>00003 <emphasis role="comment">//&#32;&lt;author&gt;developer@exitgames.com&lt;/author&gt;</emphasis>
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00004"/>00004 <emphasis role="comment">//&#32;---------------------------------------------------------------------------------------------</emphasis>
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00005"/>00005 
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00006"/>00006 <emphasis role="keyword">using</emphasis>&#32;System.Collections.Generic;
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00007"/>00007 <emphasis role="keyword">using</emphasis>&#32;UnityEngine;
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00008"/>00008 
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00009"/>00009 <emphasis role="keyword">using</emphasis>&#32;ExitGames.Client.Photon;
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00010"/>00010 
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00015"/>00015 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_photon_1_1_pun_1_1_simple_1_1_internal">Photon.Pun.Simple.Internal</link>
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00016"/>00016 {
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00017"/>00017 
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00018"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_internal_1_1_net_msg_callbacks">00018</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_internal_1_1_net_msg_callbacks">NetMsgCallbacks</link>
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00019"/>00019 &#32;&#32;&#32;&#32;{
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00020"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_internal_1_1_net_msg_callbacks_1a915342941bd805f501f83dc941fb7d00">00020</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;delegate&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_internal_1_1_net_msg_callbacks_1a915342941bd805f501f83dc941fb7d00">ByteBufferCallback</link>(<emphasis role="keywordtype">object</emphasis>&#32;conn,&#32;<emphasis role="keywordtype">int</emphasis>&#32;connId,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer);
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00021"/>00021 
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Dictionary&lt;int,&#32;CallbackLists&gt;&#32;callbacks&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Dictionary&lt;int,&#32;CallbackLists&gt;();
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00023"/>00023 
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>CallbackLists
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;List&lt;ByteBufferCallback&gt;&#32;bufferCallbacks;
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00028"/>00028 
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00029"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_internal_1_1_net_msg_callbacks_1ae1fa93ac5789a41186dee4ef7e4cd975">00029</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_internal_1_1_net_msg_callbacks_1ae1fa93ac5789a41186dee4ef7e4cd975">DEF_MSG_ID</link>&#32;=&#32;215;
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00030"/>00030 
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;RegisterOnEventListener()
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network">PhotonNetwork</link>.<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a312fc99165f039e31b65bebbafdf6736">NetworkingClient</link>.<link linkend="_class_photon_1_1_realtime_1_1_load_balancing_client_1aa8680c4d6c86d282b8b2b51219aeaaf0">EventReceived</link>&#32;+=&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_internal_1_1_net_msg_callbacks_1a0aac5f01ff7d3a2233490d36b523276f">OnEvent</link>;
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00036"/>00036 
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00040"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_internal_1_1_net_msg_callbacks_1a0aac5f01ff7d3a2233490d36b523276f">00040</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_internal_1_1_net_msg_callbacks_1a0aac5f01ff7d3a2233490d36b523276f">OnEvent</link>(EventData&#32;photonEvent)
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;msgId&#32;=&#32;photonEvent.Code;
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00043"/>00043 
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!callbacks.ContainsKey(msgId))
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00046"/>00046 
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00047"/>00047 <emphasis role="preprocessor">#if&#32;PUN_2_19_OR_NEWER</emphasis>
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ByteArraySlice&#32;slice;
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer;
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;peer&#32;=&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network">PhotonNetwork</link>.<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a312fc99165f039e31b65bebbafdf6736">NetworkingClient</link>.<link linkend="_class_photon_1_1_realtime_1_1_load_balancing_client_1af904931c4eec2bbc5f34ee8d15d0b807">LoadBalancingPeer</link>;
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;useSlices&#32;=&#32;peer.UseByteArraySlicePoolForEvents&#32;&amp;&amp;&#32;peer.SerializationProtocolType&#32;!=&#32;SerializationProtocol.GpBinaryV16;
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(useSlices)
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;slice&#32;=&#32;photonEvent.CustomData&#32;as&#32;ByteArraySlice;
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;=&#32;slice.Buffer;
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;slice&#32;=&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;=&#32;(photonEvent.CustomData&#32;as&#32;<emphasis role="keywordtype">byte</emphasis>[]);
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00062"/>00062 
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00063"/>00063 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer&#32;=&#32;(photonEvent.CustomData&#32;as&#32;<emphasis role="keywordtype">byte</emphasis>[]);
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00065"/>00065 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00066"/>00066 
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;cbs&#32;=&#32;callbacks[msgId];
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cbs.bufferCallbacks&#32;!=&#32;<emphasis role="keyword">null</emphasis>&#32;&amp;&amp;&#32;cbs.bufferCallbacks.Count&#32;&gt;&#32;0)
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;cb&#32;<emphasis role="keywordflow">in</emphasis>&#32;cbs.bufferCallbacks)
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cb(<emphasis role="keyword">null</emphasis>,&#32;photonEvent.Sender,&#32;buffer);
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00073"/>00073 
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00074"/>00074 <emphasis role="preprocessor">#if&#32;PUN_2_19_OR_NEWER</emphasis>
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Release&#32;our&#32;nonalloc&#32;slice&#32;to&#32;the&#32;pool.</emphasis>
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(useSlices)
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;slice.Release();
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00078"/>00078 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00080"/>00080 
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00081"/>00081 
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00082"/>00082 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Handler&#32;Registration</emphasis>
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00083"/>00083 
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[System.Obsolete(<emphasis role="stringliteral">&quot;Removed&#32;the&#32;asServer&#32;from&#32;UNET&#32;side,&#32;killing&#32;it&#32;here&#32;as&#32;well.&quot;</emphasis>)]
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00085"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_internal_1_1_net_msg_callbacks_1ac3bc5c31e7777a03e63f4cc156e410f2">00085</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_internal_1_1_net_msg_callbacks_1ac3bc5c31e7777a03e63f4cc156e410f2">RegisterCallback</link>(<emphasis role="keywordtype">byte</emphasis>&#32;msgid,&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_internal_1_1_net_msg_callbacks_1a915342941bd805f501f83dc941fb7d00">ByteBufferCallback</link>&#32;callback,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;asServer)
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!callbacks.ContainsKey(msgid))
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;callbacks.Add(msgid,&#32;<emphasis role="keyword">new</emphasis>&#32;CallbackLists());
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00089"/>00089 
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(callbacks[msgid].bufferCallbacks&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;callbacks[msgid].bufferCallbacks&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;ByteBufferCallback&gt;();
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00092"/>00092 
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;cbs&#32;=&#32;callbacks[msgid].bufferCallbacks;
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00094"/>00094 
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!cbs.Contains(callback))
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cbs.Add(callback);
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00098"/>00098 
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00099"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_internal_1_1_net_msg_callbacks_1a781a3defb574dcc5c73e2abd0eda4d2d">00099</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_internal_1_1_net_msg_callbacks_1a781a3defb574dcc5c73e2abd0eda4d2d">RegisterCallback</link>(<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_internal_1_1_net_msg_callbacks_1a915342941bd805f501f83dc941fb7d00">ByteBufferCallback</link>&#32;callback)
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_internal_1_1_net_msg_callbacks_1ac3bc5c31e7777a03e63f4cc156e410f2">RegisterCallback</link>(<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_internal_1_1_net_msg_callbacks_1ae1fa93ac5789a41186dee4ef7e4cd975">DEF_MSG_ID</link>,&#32;callback);
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00103"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_internal_1_1_net_msg_callbacks_1abca3e91e57d6cf90dfc16ef7b9bba15e">00103</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_internal_1_1_net_msg_callbacks_1abca3e91e57d6cf90dfc16ef7b9bba15e">RegisterCallback</link>(<emphasis role="keywordtype">byte</emphasis>&#32;msgid,&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_internal_1_1_net_msg_callbacks_1a915342941bd805f501f83dc941fb7d00">ByteBufferCallback</link>&#32;callback)
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!callbacks.ContainsKey(msgid))
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;callbacks.Add(msgid,&#32;<emphasis role="keyword">new</emphasis>&#32;CallbackLists());
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00107"/>00107 
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(callbacks[msgid].bufferCallbacks&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;callbacks[msgid].bufferCallbacks&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;ByteBufferCallback&gt;();
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00110"/>00110 
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;cbs&#32;=&#32;callbacks[msgid].bufferCallbacks;
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00112"/>00112 
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!cbs.Contains(callback))
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cbs.Add(callback);
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00116"/>00116 
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[System.Obsolete(<emphasis role="stringliteral">&quot;Removed&#32;the&#32;asServer&#32;from&#32;UNET&#32;side,&#32;killing&#32;it&#32;here&#32;as&#32;well.&quot;</emphasis>)]
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00118"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_internal_1_1_net_msg_callbacks_1a0f578367f32f98287a1427ccb48d9e2c">00118</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_internal_1_1_net_msg_callbacks_1a0f578367f32f98287a1427ccb48d9e2c">UnregisterCallback</link>(<emphasis role="keywordtype">byte</emphasis>&#32;msgid,&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_internal_1_1_net_msg_callbacks_1a915342941bd805f501f83dc941fb7d00">ByteBufferCallback</link>&#32;callback,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;asServer)
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(callbacks.ContainsKey(msgid))
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;cbs&#32;=&#32;callbacks[msgid];
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cbs.bufferCallbacks.Remove(callback);
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00124"/>00124 
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cbs.bufferCallbacks.Count&#32;==&#32;0)
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;callbacks.Remove(msgid);
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00129"/>00129 
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00130"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_internal_1_1_net_msg_callbacks_1a39bd2ad0ed8fefcef6163ec3ea944a4b">00130</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_internal_1_1_net_msg_callbacks_1a39bd2ad0ed8fefcef6163ec3ea944a4b">UnregisterCallback</link>(<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_internal_1_1_net_msg_callbacks_1a915342941bd805f501f83dc941fb7d00">ByteBufferCallback</link>&#32;callback)
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_internal_1_1_net_msg_callbacks_1a0f578367f32f98287a1427ccb48d9e2c">UnregisterCallback</link>(<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_internal_1_1_net_msg_callbacks_1ae1fa93ac5789a41186dee4ef7e4cd975">DEF_MSG_ID</link>,&#32;callback);
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00134"/><link linkend="_class_photon_1_1_pun_1_1_simple_1_1_internal_1_1_net_msg_callbacks_1a471339f85fd63b47902ee743cdc53f67">00134</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_internal_1_1_net_msg_callbacks_1a471339f85fd63b47902ee743cdc53f67">UnregisterCallback</link>(<emphasis role="keywordtype">byte</emphasis>&#32;msgid,&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_internal_1_1_net_msg_callbacks_1a915342941bd805f501f83dc941fb7d00">ByteBufferCallback</link>&#32;callback)
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(callbacks.ContainsKey(msgid))
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;cbs&#32;=&#32;callbacks[msgid];
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cbs.bufferCallbacks.Remove(callback);
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00140"/>00140 
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cbs.bufferCallbacks.Count&#32;==&#32;0)
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;callbacks.Remove(msgid);
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00145"/>00145 
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00146"/>00146 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion&#32;&#32;</emphasis><emphasis role="comment">//&#32;END&#32;HANDLERS</emphasis>
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00147"/>00147 &#32;&#32;&#32;&#32;}
<anchor xml:id="__net_msg_callbacks_8cs_source_1l00148"/>00148 }
</programlisting></section>
