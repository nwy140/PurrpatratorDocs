<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__outline_p_u_n_8cs_source" xml:lang="en-US">
<title>OutlinePUN.cs</title>
<indexterm><primary>C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/_Developers/WeiYuen/Scripts/Shader/OutlinePUN.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__outline_p_u_n_8cs_source_1l00001"/>00001 <emphasis role="comment">//</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00002"/>00002 <emphasis role="comment">//&#32;&#32;Outline.cs</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00003"/>00003 <emphasis role="comment">//&#32;&#32;QuickOutline</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00004"/>00004 <emphasis role="comment">//</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00005"/>00005 <emphasis role="comment">//&#32;&#32;Created&#32;by&#32;Chris&#32;Nolet&#32;on&#32;3/30/18.</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00006"/>00006 <emphasis role="comment">//&#32;&#32;Copyright&#32;Â©&#32;2018&#32;Chris&#32;Nolet.&#32;All&#32;rights&#32;reserved.</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00007"/>00007 <emphasis role="comment">//</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00008"/>00008 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00009"/>00009 <emphasis role="keyword">using</emphasis>&#32;System;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00010"/>00010 <emphasis role="keyword">using</emphasis>&#32;System.Collections.Generic;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00011"/>00011 <emphasis role="keyword">using</emphasis>&#32;System.Linq;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00012"/>00012 <emphasis role="keyword">using</emphasis>&#32;UnityEngine;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00013"/>00013 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00014"/>00014 [DisallowMultipleComponent]
<anchor xml:id="__outline_p_u_n_8cs_source_1l00015"/><link linkend="_class_outline_p_u_n">00015</link> <emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_outline_p_u_n">OutlinePUN</link>&#32;:&#32;MonoBehaviour&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00016"/>00016 &#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;HashSet&lt;Mesh&gt;&#32;registeredMeshes&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;HashSet&lt;Mesh&gt;();
<anchor xml:id="__outline_p_u_n_8cs_source_1l00017"/>00017 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00018"/><link linkend="_class_outline_p_u_n_1a3f388f42c14f86d3343a3b8811f0970d">00018</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_class_outline_p_u_n_1a3f388f42c14f86d3343a3b8811f0970d">Mode</link>&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00019"/>00019 &#32;&#32;&#32;&#32;OutlineAll,
<anchor xml:id="__outline_p_u_n_8cs_source_1l00020"/>00020 &#32;&#32;&#32;&#32;OutlineVisible,
<anchor xml:id="__outline_p_u_n_8cs_source_1l00021"/>00021 &#32;&#32;&#32;&#32;OutlineHidden,
<anchor xml:id="__outline_p_u_n_8cs_source_1l00022"/>00022 &#32;&#32;&#32;&#32;OutlineAndSilhouette,
<anchor xml:id="__outline_p_u_n_8cs_source_1l00023"/>00023 &#32;&#32;&#32;&#32;SilhouetteOnly
<anchor xml:id="__outline_p_u_n_8cs_source_1l00024"/>00024 &#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00025"/>00025 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00026"/><link linkend="_class_outline_p_u_n_1a22621860b0478f0b5796fabd6633cfa2">00026</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_outline_p_u_n_1a3f388f42c14f86d3343a3b8811f0970d">Mode</link>&#32;<link linkend="_class_outline_p_u_n_1a22621860b0478f0b5796fabd6633cfa2">OutlineMode</link>&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00027"/>00027 &#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;outlineMode;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00028"/>00028 &#32;&#32;&#32;&#32;<emphasis role="keyword">set</emphasis>&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;outlineMode&#32;=&#32;value;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;needsUpdate&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00031"/>00031 &#32;&#32;&#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00032"/>00032 &#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00033"/>00033 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00034"/><link linkend="_class_outline_p_u_n_1a88b0aa25b696747c4bf43be494d15422">00034</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Color&#32;<link linkend="_class_outline_p_u_n_1a88b0aa25b696747c4bf43be494d15422">OutlineColor</link>&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00035"/>00035 &#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;outlineColor;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00036"/>00036 &#32;&#32;&#32;&#32;<emphasis role="keyword">set</emphasis>&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;outlineColor&#32;=&#32;value;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;needsUpdate&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00039"/>00039 &#32;&#32;&#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00040"/>00040 &#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00041"/>00041 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00042"/><link linkend="_class_outline_p_u_n_1a5d1b6accd38e73192f3fc2b8d742e9fb">00042</link> &#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_outline_p_u_n_1a5d1b6accd38e73192f3fc2b8d742e9fb">OutlineWidth</link>&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;outlineWidth;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;<emphasis role="keyword">set</emphasis>&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;outlineWidth&#32;=&#32;value;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;needsUpdate&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00047"/>00047 &#32;&#32;&#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00048"/>00048 &#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00049"/>00049 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00050"/>00050 &#32;&#32;[Serializable]
<anchor xml:id="__outline_p_u_n_8cs_source_1l00051"/>00051 &#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>ListVector3&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00052"/>00052 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;List&lt;Vector3&gt;&#32;data;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00053"/>00053 &#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00054"/>00054 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00055"/>00055 &#32;&#32;[SerializeField]
<anchor xml:id="__outline_p_u_n_8cs_source_1l00056"/>00056 &#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<link linkend="_class_outline_p_u_n_1a3f388f42c14f86d3343a3b8811f0970d">Mode</link>&#32;outlineMode;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00057"/>00057 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00058"/>00058 &#32;&#32;[SerializeField]
<anchor xml:id="__outline_p_u_n_8cs_source_1l00059"/>00059 &#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Color&#32;outlineColor&#32;=&#32;Color.white;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00060"/>00060 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00061"/>00061 &#32;&#32;<emphasis role="comment">//[SerializeField,&#32;Range(0f,&#32;100000f)]</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;[SerializeField]
<anchor xml:id="__outline_p_u_n_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;outlineWidth&#32;=&#32;2f;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00064"/>00064 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00065"/>00065 &#32;&#32;[Header(<emphasis role="stringliteral">&quot;Optional&quot;</emphasis>)]
<anchor xml:id="__outline_p_u_n_8cs_source_1l00066"/>00066 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00067"/>00067 &#32;&#32;[SerializeField,&#32;Tooltip(<emphasis role="stringliteral">&quot;Precompute&#32;enabled:&#32;Per-vertex&#32;calculations&#32;are&#32;performed&#32;in&#32;the&#32;editor&#32;and&#32;serialized&#32;with&#32;the&#32;object.&#32;&quot;</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00068"/>00068 &#32;&#32;+&#32;<emphasis role="stringliteral">&quot;Precompute&#32;disabled:&#32;Per-vertex&#32;calculations&#32;are&#32;performed&#32;at&#32;runtime&#32;in&#32;Awake().&#32;This&#32;may&#32;cause&#32;a&#32;pause&#32;for&#32;large&#32;meshes.&quot;</emphasis>)]
<anchor xml:id="__outline_p_u_n_8cs_source_1l00069"/>00069 &#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;precomputeOutline;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00070"/>00070 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00071"/>00071 &#32;&#32;[SerializeField,&#32;HideInInspector]
<anchor xml:id="__outline_p_u_n_8cs_source_1l00072"/>00072 &#32;&#32;<emphasis role="keyword">private</emphasis>&#32;List&lt;Mesh&gt;&#32;bakeKeys&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;Mesh&gt;();
<anchor xml:id="__outline_p_u_n_8cs_source_1l00073"/>00073 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00074"/>00074 &#32;&#32;[SerializeField,&#32;HideInInspector]
<anchor xml:id="__outline_p_u_n_8cs_source_1l00075"/>00075 &#32;&#32;<emphasis role="keyword">private</emphasis>&#32;List&lt;ListVector3&gt;&#32;bakeValues&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;ListVector3&gt;();
<anchor xml:id="__outline_p_u_n_8cs_source_1l00076"/>00076 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00077"/>00077 &#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a056d4010391c5d568746195703eff547a07b20ae970048fc2002d756f27acc863">Renderer</link>[]&#32;renderers;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00078"/>00078 &#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Material&#32;outlineMaskMaterial;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00079"/>00079 &#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Material&#32;outlineFillMaterial;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00080"/>00080 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00081"/>00081 &#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;needsUpdate;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00082"/>00082 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00083"/>00083 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;Awake()&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00084"/>00084 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Cache&#32;renderers</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;renderers&#32;=&#32;GetComponentsInChildren&lt;Renderer&gt;();
<anchor xml:id="__outline_p_u_n_8cs_source_1l00087"/>00087 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Instantiate&#32;outline&#32;materials</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00089"/>00089 &#32;&#32;&#32;&#32;outlineMaskMaterial&#32;=&#32;Instantiate(Resources.Load&lt;Material&gt;(<emphasis role="stringliteral">@&quot;Materials/OutlineMask&quot;</emphasis>));
<anchor xml:id="__outline_p_u_n_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;outlineFillMaterial&#32;=&#32;Instantiate(Resources.Load&lt;Material&gt;(<emphasis role="stringliteral">@&quot;Materials/OutlineFill&quot;</emphasis>));
<anchor xml:id="__outline_p_u_n_8cs_source_1l00091"/>00091 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00092"/>00092 &#32;&#32;&#32;&#32;outlineMaskMaterial.name&#32;=&#32;<emphasis role="stringliteral">&quot;OutlineMask&#32;(Instance)&quot;</emphasis>;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;outlineFillMaterial.name&#32;=&#32;<emphasis role="stringliteral">&quot;OutlineFill&#32;(Instance)&quot;</emphasis>;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00094"/>00094 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00095"/>00095 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Retrieve&#32;or&#32;generate&#32;smooth&#32;normals</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00096"/>00096 &#32;&#32;&#32;&#32;LoadSmoothNormals();
<anchor xml:id="__outline_p_u_n_8cs_source_1l00097"/>00097 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00098"/>00098 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Apply&#32;material&#32;properties&#32;immediately</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00099"/>00099 &#32;&#32;&#32;&#32;needsUpdate&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00100"/>00100 &#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00101"/>00101 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00102"/>00102 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnEnable()&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;renderer&#32;<emphasis role="keywordflow">in</emphasis>&#32;renderers)&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00104"/>00104 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Append&#32;outline&#32;shaders</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;materials&#32;=&#32;renderer.sharedMaterials.ToList();
<anchor xml:id="__outline_p_u_n_8cs_source_1l00107"/>00107 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;materials.Add(outlineMaskMaterial);
<anchor xml:id="__outline_p_u_n_8cs_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;materials.Add(outlineFillMaterial);
<anchor xml:id="__outline_p_u_n_8cs_source_1l00110"/>00110 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;renderer.materials&#32;=&#32;materials.ToArray();
<anchor xml:id="__outline_p_u_n_8cs_source_1l00112"/>00112 &#32;&#32;&#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00113"/>00113 &#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00114"/>00114 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00115"/>00115 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnValidate()&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00116"/>00116 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00117"/>00117 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Update&#32;material&#32;properties</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00118"/>00118 &#32;&#32;&#32;&#32;needsUpdate&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00119"/>00119 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00120"/>00120 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Clear&#32;cache&#32;when&#32;baking&#32;is&#32;disabled&#32;or&#32;corrupted</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00121"/>00121 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!precomputeOutline&#32;&amp;&amp;&#32;bakeKeys.Count&#32;!=&#32;0&#32;||&#32;bakeKeys.Count&#32;!=&#32;bakeValues.Count)&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;bakeKeys.Clear();
<anchor xml:id="__outline_p_u_n_8cs_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;bakeValues.Clear();
<anchor xml:id="__outline_p_u_n_8cs_source_1l00124"/>00124 &#32;&#32;&#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00125"/>00125 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00126"/>00126 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Generate&#32;smooth&#32;normals&#32;when&#32;baking&#32;is&#32;enabled</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(precomputeOutline&#32;&amp;&amp;&#32;bakeKeys.Count&#32;==&#32;0)&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;Bake();
<anchor xml:id="__outline_p_u_n_8cs_source_1l00129"/>00129 &#32;&#32;&#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00130"/>00130 &#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00131"/>00131 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00132"/>00132 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;Update()&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00133"/>00133 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(needsUpdate)&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;needsUpdate&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00135"/>00135 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;UpdateMaterialProperties();
<anchor xml:id="__outline_p_u_n_8cs_source_1l00137"/>00137 &#32;&#32;&#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00138"/>00138 &#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00139"/>00139 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00140"/>00140 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnDisable()&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00141"/>00141 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;renderer&#32;<emphasis role="keywordflow">in</emphasis>&#32;renderers)&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00142"/>00142 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Remove&#32;outline&#32;shaders</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;materials&#32;=&#32;renderer.sharedMaterials.ToList();
<anchor xml:id="__outline_p_u_n_8cs_source_1l00145"/>00145 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;materials.Remove(outlineMaskMaterial);
<anchor xml:id="__outline_p_u_n_8cs_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;materials.Remove(outlineFillMaterial);
<anchor xml:id="__outline_p_u_n_8cs_source_1l00148"/>00148 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;renderer.materials&#32;=&#32;materials.ToArray();
<anchor xml:id="__outline_p_u_n_8cs_source_1l00150"/>00150 &#32;&#32;&#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00151"/>00151 &#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00152"/>00152 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00153"/>00153 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnDestroy()&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00154"/>00154 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00155"/>00155 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Destroy&#32;material&#32;instances</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00156"/>00156 &#32;&#32;&#32;&#32;Destroy(outlineMaskMaterial);
<anchor xml:id="__outline_p_u_n_8cs_source_1l00157"/>00157 &#32;&#32;&#32;&#32;Destroy(outlineFillMaterial);
<anchor xml:id="__outline_p_u_n_8cs_source_1l00158"/>00158 &#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00159"/>00159 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00160"/>00160 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;Bake()&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00161"/>00161 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00162"/>00162 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Generate&#32;smooth&#32;normals&#32;for&#32;each&#32;mesh</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00163"/>00163 &#32;&#32;&#32;&#32;var&#32;bakedMeshes&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;HashSet&lt;Mesh&gt;();
<anchor xml:id="__outline_p_u_n_8cs_source_1l00164"/>00164 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00165"/>00165 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;meshFilter&#32;<emphasis role="keywordflow">in</emphasis>&#32;GetComponentsInChildren&lt;MeshFilter&gt;())&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00166"/>00166 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Skip&#32;duplicates</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!bakedMeshes.Add(meshFilter.sharedMesh))&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00171"/>00171 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Serialize&#32;smooth&#32;normals</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;smoothNormals&#32;=&#32;SmoothNormals(meshFilter.sharedMesh);
<anchor xml:id="__outline_p_u_n_8cs_source_1l00174"/>00174 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;bakeKeys.Add(meshFilter.sharedMesh);
<anchor xml:id="__outline_p_u_n_8cs_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;bakeValues.Add(<emphasis role="keyword">new</emphasis>&#32;ListVector3()&#32;{&#32;data&#32;=&#32;smoothNormals&#32;});
<anchor xml:id="__outline_p_u_n_8cs_source_1l00177"/>00177 &#32;&#32;&#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00178"/>00178 &#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00179"/>00179 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00180"/>00180 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;LoadSmoothNormals()&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00181"/>00181 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00182"/>00182 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Retrieve&#32;or&#32;generate&#32;smooth&#32;normals</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00183"/>00183 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;meshFilter&#32;<emphasis role="keywordflow">in</emphasis>&#32;GetComponentsInChildren&lt;MeshFilter&gt;())&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00184"/>00184 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Skip&#32;if&#32;smooth&#32;normals&#32;have&#32;already&#32;been&#32;adopted</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!registeredMeshes.Add(meshFilter.sharedMesh))&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00189"/>00189 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Retrieve&#32;or&#32;generate&#32;smooth&#32;normals</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;index&#32;=&#32;bakeKeys.IndexOf(meshFilter.sharedMesh);
<anchor xml:id="__outline_p_u_n_8cs_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;smoothNormals&#32;=&#32;(index&#32;&gt;=&#32;0)&#32;?&#32;bakeValues[index].data&#32;:&#32;SmoothNormals(meshFilter.sharedMesh);
<anchor xml:id="__outline_p_u_n_8cs_source_1l00193"/>00193 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Store&#32;smooth&#32;normals&#32;in&#32;UV3</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;meshFilter.sharedMesh.SetUVs(3,&#32;smoothNormals);
<anchor xml:id="__outline_p_u_n_8cs_source_1l00196"/>00196 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Combine&#32;submeshes</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;renderer&#32;=&#32;meshFilter.GetComponent&lt;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a056d4010391c5d568746195703eff547a07b20ae970048fc2002d756f27acc863">Renderer</link>&gt;();
<anchor xml:id="__outline_p_u_n_8cs_source_1l00199"/>00199 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(renderer&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CombineSubmeshes(meshFilter.sharedMesh,&#32;renderer.sharedMaterials);
<anchor xml:id="__outline_p_u_n_8cs_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00203"/>00203 &#32;&#32;&#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00204"/>00204 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00205"/>00205 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Clear&#32;UV3&#32;on&#32;skinned&#32;mesh&#32;renderers</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00206"/>00206 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;skinnedMeshRenderer&#32;<emphasis role="keywordflow">in</emphasis>&#32;GetComponentsInChildren&lt;SkinnedMeshRenderer&gt;())&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00207"/>00207 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Skip&#32;if&#32;UV3&#32;has&#32;already&#32;been&#32;reset</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!registeredMeshes.Add(skinnedMeshRenderer.sharedMesh))&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00212"/>00212 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Clear&#32;UV3</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;skinnedMeshRenderer.sharedMesh.uv4&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Vector2[skinnedMeshRenderer.sharedMesh.vertexCount];
<anchor xml:id="__outline_p_u_n_8cs_source_1l00215"/>00215 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Combine&#32;submeshes</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00217"/>00217 &#32;&#32;&#32;&#32;&#32;&#32;CombineSubmeshes(skinnedMeshRenderer.sharedMesh,&#32;skinnedMeshRenderer.sharedMaterials);
<anchor xml:id="__outline_p_u_n_8cs_source_1l00218"/>00218 &#32;&#32;&#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00219"/>00219 &#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00220"/>00220 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00221"/>00221 &#32;&#32;List&lt;Vector3&gt;&#32;SmoothNormals(Mesh&#32;mesh)&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00222"/>00222 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00223"/>00223 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Group&#32;vertices&#32;by&#32;location</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00224"/>00224 &#32;&#32;&#32;&#32;var&#32;groups&#32;=&#32;mesh.vertices.Select((vertex,&#32;index)&#32;=&gt;&#32;<emphasis role="keyword">new</emphasis>&#32;KeyValuePair&lt;Vector3,&#32;int&gt;(vertex,&#32;index)).GroupBy(pair&#32;=&gt;&#32;pair.Key);
<anchor xml:id="__outline_p_u_n_8cs_source_1l00225"/>00225 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00226"/>00226 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Copy&#32;normals&#32;to&#32;a&#32;new&#32;list</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00227"/>00227 &#32;&#32;&#32;&#32;var&#32;smoothNormals&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;Vector3&gt;(mesh.normals);
<anchor xml:id="__outline_p_u_n_8cs_source_1l00228"/>00228 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00229"/>00229 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Average&#32;normals&#32;for&#32;grouped&#32;vertices</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00230"/>00230 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;group&#32;<emphasis role="keywordflow">in</emphasis>&#32;groups)&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00231"/>00231 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00232"/>00232 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Skip&#32;single&#32;vertices</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00233"/>00233 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(group.Count()&#32;==&#32;1)&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00234"/>00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00235"/>00235 &#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00236"/>00236 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00237"/>00237 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;the&#32;average&#32;normal</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00238"/>00238 &#32;&#32;&#32;&#32;&#32;&#32;var&#32;smoothNormal&#32;=&#32;Vector3.zero;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00239"/>00239 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00240"/>00240 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;pair&#32;<emphasis role="keywordflow">in</emphasis>&#32;group)&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00241"/>00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;smoothNormal&#32;+=&#32;smoothNormals[pair.Value];
<anchor xml:id="__outline_p_u_n_8cs_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00243"/>00243 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;smoothNormal.Normalize();
<anchor xml:id="__outline_p_u_n_8cs_source_1l00245"/>00245 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assign&#32;smooth&#32;normal&#32;to&#32;each&#32;vertex</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;pair&#32;<emphasis role="keywordflow">in</emphasis>&#32;group)&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;smoothNormals[pair.Value]&#32;=&#32;smoothNormal;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00250"/>00250 &#32;&#32;&#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00251"/>00251 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00252"/>00252 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;smoothNormals;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00253"/>00253 &#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00254"/>00254 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00255"/>00255 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;CombineSubmeshes(Mesh&#32;mesh,&#32;Material[]&#32;materials)&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00256"/>00256 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00257"/>00257 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Skip&#32;meshes&#32;with&#32;a&#32;single&#32;submesh</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00258"/>00258 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mesh.subMeshCount&#32;==&#32;1)&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00259"/>00259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00260"/>00260 &#32;&#32;&#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00261"/>00261 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00262"/>00262 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Skip&#32;if&#32;submesh&#32;count&#32;exceeds&#32;material&#32;count</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00263"/>00263 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mesh.subMeshCount&#32;&gt;&#32;materials.Length)&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00265"/>00265 &#32;&#32;&#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00266"/>00266 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00267"/>00267 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Append&#32;combined&#32;submesh</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00268"/>00268 &#32;&#32;&#32;&#32;mesh.subMeshCount++;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00269"/>00269 &#32;&#32;&#32;&#32;mesh.SetTriangles(mesh.triangles,&#32;mesh.subMeshCount&#32;-&#32;1);
<anchor xml:id="__outline_p_u_n_8cs_source_1l00270"/>00270 &#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00271"/>00271 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00272"/>00272 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;UpdateMaterialProperties()&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00273"/>00273 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00274"/>00274 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Apply&#32;properties&#32;according&#32;to&#32;mode</emphasis>
<anchor xml:id="__outline_p_u_n_8cs_source_1l00275"/>00275 &#32;&#32;&#32;&#32;outlineFillMaterial.SetColor(<emphasis role="stringliteral">&quot;_OutlineColor&quot;</emphasis>,&#32;outlineColor);
<anchor xml:id="__outline_p_u_n_8cs_source_1l00276"/>00276 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00277"/>00277 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(outlineMode)&#32;{
<anchor xml:id="__outline_p_u_n_8cs_source_1l00278"/>00278 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_class_outline_p_u_n_1a3f388f42c14f86d3343a3b8811f0970d">Mode</link>.OutlineAll:
<anchor xml:id="__outline_p_u_n_8cs_source_1l00279"/>00279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outlineMaskMaterial.SetFloat(<emphasis role="stringliteral">&quot;_ZTest&quot;</emphasis>,&#32;(<emphasis role="keywordtype">float</emphasis>)UnityEngine.Rendering.CompareFunction.Always);
<anchor xml:id="__outline_p_u_n_8cs_source_1l00280"/>00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outlineFillMaterial.SetFloat(<emphasis role="stringliteral">&quot;_ZTest&quot;</emphasis>,&#32;(<emphasis role="keywordtype">float</emphasis>)UnityEngine.Rendering.CompareFunction.Always);
<anchor xml:id="__outline_p_u_n_8cs_source_1l00281"/>00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outlineFillMaterial.SetFloat(<emphasis role="stringliteral">&quot;_OutlineWidth&quot;</emphasis>,&#32;outlineWidth);
<anchor xml:id="__outline_p_u_n_8cs_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00283"/>00283 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_class_outline_p_u_n_1a3f388f42c14f86d3343a3b8811f0970d">Mode</link>.OutlineVisible:
<anchor xml:id="__outline_p_u_n_8cs_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outlineMaskMaterial.SetFloat(<emphasis role="stringliteral">&quot;_ZTest&quot;</emphasis>,&#32;(<emphasis role="keywordtype">float</emphasis>)UnityEngine.Rendering.CompareFunction.Always);
<anchor xml:id="__outline_p_u_n_8cs_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outlineFillMaterial.SetFloat(<emphasis role="stringliteral">&quot;_ZTest&quot;</emphasis>,&#32;(<emphasis role="keywordtype">float</emphasis>)UnityEngine.Rendering.CompareFunction.LessEqual);
<anchor xml:id="__outline_p_u_n_8cs_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outlineFillMaterial.SetFloat(<emphasis role="stringliteral">&quot;_OutlineWidth&quot;</emphasis>,&#32;outlineWidth);
<anchor xml:id="__outline_p_u_n_8cs_source_1l00288"/>00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00289"/>00289 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00290"/>00290 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_class_outline_p_u_n_1a3f388f42c14f86d3343a3b8811f0970d">Mode</link>.OutlineHidden:
<anchor xml:id="__outline_p_u_n_8cs_source_1l00291"/>00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outlineMaskMaterial.SetFloat(<emphasis role="stringliteral">&quot;_ZTest&quot;</emphasis>,&#32;(<emphasis role="keywordtype">float</emphasis>)UnityEngine.Rendering.CompareFunction.Always);
<anchor xml:id="__outline_p_u_n_8cs_source_1l00292"/>00292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outlineFillMaterial.SetFloat(<emphasis role="stringliteral">&quot;_ZTest&quot;</emphasis>,&#32;(<emphasis role="keywordtype">float</emphasis>)UnityEngine.Rendering.CompareFunction.Greater);
<anchor xml:id="__outline_p_u_n_8cs_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outlineFillMaterial.SetFloat(<emphasis role="stringliteral">&quot;_OutlineWidth&quot;</emphasis>,&#32;outlineWidth);
<anchor xml:id="__outline_p_u_n_8cs_source_1l00294"/>00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00295"/>00295 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_class_outline_p_u_n_1a3f388f42c14f86d3343a3b8811f0970d">Mode</link>.OutlineAndSilhouette:
<anchor xml:id="__outline_p_u_n_8cs_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outlineMaskMaterial.SetFloat(<emphasis role="stringliteral">&quot;_ZTest&quot;</emphasis>,&#32;(<emphasis role="keywordtype">float</emphasis>)UnityEngine.Rendering.CompareFunction.LessEqual);
<anchor xml:id="__outline_p_u_n_8cs_source_1l00298"/>00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outlineFillMaterial.SetFloat(<emphasis role="stringliteral">&quot;_ZTest&quot;</emphasis>,&#32;(<emphasis role="keywordtype">float</emphasis>)UnityEngine.Rendering.CompareFunction.Always);
<anchor xml:id="__outline_p_u_n_8cs_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outlineFillMaterial.SetFloat(<emphasis role="stringliteral">&quot;_OutlineWidth&quot;</emphasis>,&#32;outlineWidth);
<anchor xml:id="__outline_p_u_n_8cs_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00301"/>00301 
<anchor xml:id="__outline_p_u_n_8cs_source_1l00302"/>00302 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_class_outline_p_u_n_1a3f388f42c14f86d3343a3b8811f0970d">Mode</link>.SilhouetteOnly:
<anchor xml:id="__outline_p_u_n_8cs_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outlineMaskMaterial.SetFloat(<emphasis role="stringliteral">&quot;_ZTest&quot;</emphasis>,&#32;(<emphasis role="keywordtype">float</emphasis>)UnityEngine.Rendering.CompareFunction.LessEqual);
<anchor xml:id="__outline_p_u_n_8cs_source_1l00304"/>00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outlineFillMaterial.SetFloat(<emphasis role="stringliteral">&quot;_ZTest&quot;</emphasis>,&#32;(<emphasis role="keywordtype">float</emphasis>)UnityEngine.Rendering.CompareFunction.Greater);
<anchor xml:id="__outline_p_u_n_8cs_source_1l00305"/>00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outlineFillMaterial.SetFloat(<emphasis role="stringliteral">&quot;_OutlineWidth&quot;</emphasis>,&#32;0f);
<anchor xml:id="__outline_p_u_n_8cs_source_1l00306"/>00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__outline_p_u_n_8cs_source_1l00307"/>00307 &#32;&#32;&#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00308"/>00308 &#32;&#32;}
<anchor xml:id="__outline_p_u_n_8cs_source_1l00309"/>00309 }
</programlisting></section>
