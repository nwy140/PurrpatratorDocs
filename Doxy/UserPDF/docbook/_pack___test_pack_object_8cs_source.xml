<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__pack___test_pack_object_8cs_source" xml:lang="en-US">
<title>Pack_TestPackObject.cs</title>
<indexterm><primary>C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/PackObject/_GeneratedPackExtensions/Pack_TestPackObject.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__pack___test_pack_object_8cs_source_1l00001"/>00001 <emphasis role="keyword">using</emphasis>&#32;System;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00002"/>00002 <emphasis role="keyword">using</emphasis>&#32;System.Reflection;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00003"/>00003 <emphasis role="keyword">using</emphasis>&#32;System.Collections;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00004"/>00004 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_photon">Photon</link>.<link linkend="_namespace_photon_1_1_utilities">Utilities</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00005"/>00005 <emphasis role="keyword">using</emphasis>&#32;UnityEngine;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00006"/>00006 <emphasis role="preprocessor">#pragma&#32;warning&#32;disable&#32;1635</emphasis>
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00007"/>00007 <emphasis role="preprocessor">#pragma&#32;warning&#32;disable&#32;0219</emphasis>
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00008"/><link linkend="_namespace_photon_1_1_compression_1_1_internal">00008</link> <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_photon_1_1_compression_1_1_internal">Photon.Compression.Internal</link>
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00009"/>00009 {
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00010"/><link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object">00010</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object">PackFrame_TestPackObject</link>&#32;:&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame">PackFrame</link>
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00011"/>00011 &#32;&#32;&#32;&#32;{
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00012"/><link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object_1a6a7c3f577ac4febe1e32c3570021d65e">00012</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;System.Single&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object_1a6a7c3f577ac4febe1e32c3570021d65e">rotation</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00013"/><link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object_1a9ce72f718e2e704dc69cdd4829ed9d65">00013</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;System.Int32&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object_1a9ce72f718e2e704dc69cdd4829ed9d65">intoroboto</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00014"/>00014 
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00015"/><link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object_1aa8c8111930d2497c6429d5d97726b1c6">00015</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object_1aa8c8111930d2497c6429d5d97726b1c6">Interpolate</link>(<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame">PackFrame</link>&#32;start,&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame">PackFrame</link>&#32;end,&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame">PackFrame</link>&#32;trg,&#32;<emphasis role="keywordtype">float</emphasis>&#32;time,&#32;ref&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask128">FastBitMask128</link>&#32;readyMask,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;maskOffset)
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00016"/>00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;s&#32;=&#32;start&#32;as&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object">PackFrame_TestPackObject</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00018"/>00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;e&#32;=&#32;end&#32;as&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object">PackFrame_TestPackObject</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;t&#32;=&#32;trg&#32;as&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object">PackFrame_TestPackObject</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame_1a9b9265881a18d24956fca4e52860b818">mask</link>&#32;=&#32;end.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame_1a9b9265881a18d24956fca4e52860b818">mask</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame_1a9b9265881a18d24956fca4e52860b818">mask</link>[maskOffset]){&#32;t.rotation&#32;=&#32;(System.Single)(((e.rotation&#32;-&#32;s.rotation)&#32;*&#32;time)&#32;+&#32;s.rotation);}&#32;maskOffset++;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame_1a9b9265881a18d24956fca4e52860b818">mask</link>[maskOffset]){&#32;t.intoroboto&#32;=&#32;(System.Int32)(((e.intoroboto&#32;-&#32;s.intoroboto)&#32;*&#32;time)&#32;+&#32;s.intoroboto);}&#32;maskOffset++;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00024"/><link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object_1aa731e96b487121954f19352d3ea607fe">00024</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object_1aa731e96b487121954f19352d3ea607fe">Interpolate</link>(<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame">PackFrame</link>&#32;start,&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame">PackFrame</link>&#32;end,&#32;System.Object&#32;trg,&#32;<emphasis role="keywordtype">float</emphasis>&#32;time,&#32;ref&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask128">FastBitMask128</link>&#32;readyMask,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;maskOffset)
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;s&#32;=&#32;start&#32;as&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object">PackFrame_TestPackObject</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;e&#32;=&#32;end&#32;as&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object">PackFrame_TestPackObject</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;t&#32;=&#32;trg&#32;as&#32;<link linkend="_namespaceemotitron">emotitron</link>.<link linkend="_classemotitron_1_1_test_pack_object">TestPackObject</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame_1a9b9265881a18d24956fca4e52860b818">mask</link>&#32;=&#32;end.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame_1a9b9265881a18d24956fca4e52860b818">mask</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(readyMask[maskOffset]&#32;&amp;&amp;&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame_1a9b9265881a18d24956fca4e52860b818">mask</link>[maskOffset]){&#32;t.rotation&#32;=&#32;(System.Single)(((e.rotation&#32;-&#32;s.rotation)&#32;*&#32;time)&#32;+&#32;s.rotation);&#32;}&#32;maskOffset++;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maskOffset++;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00033"/><link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object_1a7cabcefdc5457423aa2b70934e262c84">00033</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object_1a7cabcefdc5457423aa2b70934e262c84">SnapshotCallback</link>(<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame">PackFrame</link>&#32;snapframe,&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame">PackFrame</link>&#32;targframe,&#32;System.Object&#32;trg,&#32;ref&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask128">FastBitMask128</link>&#32;readyMask,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;maskOffset)
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;snap&#32;=&#32;snapframe&#32;as&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object">PackFrame_TestPackObject</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;targ&#32;=&#32;targframe&#32;as&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object">PackFrame_TestPackObject</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;t&#32;=&#32;trg&#32;as&#32;<link linkend="_namespaceemotitron">emotitron</link>.<link linkend="_classemotitron_1_1_test_pack_object">TestPackObject</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;snapmask&#32;=&#32;snapframe.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame_1a9b9265881a18d24956fca4e52860b818">mask</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;targmask&#32;=&#32;targframe.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame_1a9b9265881a18d24956fca4e52860b818">mask</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(readyMask[maskOffset])&#32;{&#32;var&#32;snapval&#32;=&#32;snapmask[maskOffset]&#32;?&#32;snap.rotation&#32;:&#32;t.rotation;&#32;var&#32;targval&#32;=&#32;targmask[maskOffset]&#32;?&#32;targ.rotation&#32;:&#32;snapval;&#32;t.SnapshotHook(snapval,&#32;&#32;targval);&#32;}&#32;maskOffset++;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maskOffset++;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00043"/><link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object_1a106c99a10cc1107ed05305104e1290f1">00043</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object_1a106c99a10cc1107ed05305104e1290f1">Capture</link>(System.Object&#32;src,&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame">PackFrame</link>&#32;trg)
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;s&#32;=&#32;src&#32;as&#32;<link linkend="_namespaceemotitron">emotitron</link>.<link linkend="_classemotitron_1_1_test_pack_object">TestPackObject</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;t&#32;=&#32;trg&#32;as&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object">PackFrame_TestPackObject</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object_1a6a7c3f577ac4febe1e32c3570021d65e">rotation</link>&#32;=&#32;s.rotation;&#32;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t.intoroboto&#32;=&#32;s.intoroboto;&#32;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00050"/><link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object_1a66fc56013345f82d37c1b83c2d52386c">00050</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object_1a66fc56013345f82d37c1b83c2d52386c">Apply</link>(<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame">PackFrame</link>&#32;src,&#32;System.Object&#32;trg,&#32;ref&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask128">FastBitMask128</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame_1a9b9265881a18d24956fca4e52860b818">mask</link>,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;maskOffset)
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;s&#32;=&#32;src&#32;as&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object">PackFrame_TestPackObject</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;t&#32;=&#32;trg&#32;as&#32;<link linkend="_namespaceemotitron">emotitron</link>.<link linkend="_classemotitron_1_1_test_pack_object">TestPackObject</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame_1a9b9265881a18d24956fca4e52860b818">mask</link>[maskOffset]){&#32;var&#32;hold&#32;=&#32;t.<link linkend="_classemotitron_1_1_test_pack_object_1a739ad3c5307e64752154a00a7d4716c3">rotation</link>;&#32;t.rotation&#32;=&#32;s.rotation;t.RotationHook(s.rotation,&#32;hold);&#32;}&#32;}&#32;maskOffset++;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame_1a9b9265881a18d24956fca4e52860b818">mask</link>[maskOffset]){&#32;t.intoroboto&#32;=&#32;s.intoroboto;&#32;}&#32;}&#32;maskOffset++;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00057"/><link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object_1a55e3efdcc03a09e72b0e42466d60b81d">00057</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object_1a55e3efdcc03a09e72b0e42466d60b81d">Copy</link>(<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame">PackFrame</link>&#32;src,&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame">PackFrame</link>&#32;trg)
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;s&#32;=&#32;src&#32;as&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object">PackFrame_TestPackObject</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;t&#32;=&#32;trg&#32;as&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object">PackFrame_TestPackObject</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object_1a6a7c3f577ac4febe1e32c3570021d65e">rotation</link>&#32;=&#32;s.rotation;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t.intoroboto&#32;=&#32;s.intoroboto;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00064"/>00064 
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00065"/><link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object_1a5e6c759bb9c4112f9c671e46f3325b1b">00065</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame">PackFrame</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object_1a5e6c759bb9c4112f9c671e46f3325b1b">Factory</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object">PackFrame_TestPackObject</link>(){&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame_1a9b9265881a18d24956fca4e52860b818">mask</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask128">FastBitMask128</link>(<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object">Pack_TestPackObject</link>.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a2367e80c44bdbd8e907524c61d3342c0">TOTAL_FIELDS</link>),&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame_1adb3fdc3cf0213e9cc095f1aff97e4f97">isCompleteMask</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask128">FastBitMask128</link>(<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object">Pack_TestPackObject</link>.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a2367e80c44bdbd8e907524c61d3342c0">TOTAL_FIELDS</link>)&#32;};&#32;}
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00066"/><link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object_1a29d3caf790f29dabe5f7a2ee0688308b">00066</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame">PackFrame</link>[]&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object_1a29d3caf790f29dabe5f7a2ee0688308b">Factory</link>(System.Object&#32;trg,&#32;<emphasis role="keywordtype">int</emphasis>&#32;count){&#32;var&#32;t&#32;=&#32;trg&#32;as&#32;<link linkend="_namespaceemotitron">emotitron</link>.<link linkend="_classemotitron_1_1_test_pack_object">TestPackObject</link>;var&#32;frames&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object">PackFrame_TestPackObject</link>[count];&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;count;&#32;++i)&#32;{&#32;var&#32;frame&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object">PackFrame_TestPackObject</link>(){&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame_1a9b9265881a18d24956fca4e52860b818">mask</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask128">FastBitMask128</link>(<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object">Pack_TestPackObject</link>.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a2367e80c44bdbd8e907524c61d3342c0">TOTAL_FIELDS</link>),&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame_1adb3fdc3cf0213e9cc095f1aff97e4f97">isCompleteMask</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask128">FastBitMask128</link>(<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object">Pack_TestPackObject</link>.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a2367e80c44bdbd8e907524c61d3342c0">TOTAL_FIELDS</link>)&#32;};&#32;&#32;frames[i]&#32;=&#32;frame;&#32;}&#32;<emphasis role="keywordflow">return</emphasis>&#32;frames;&#32;}
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;}
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00068"/>00068 
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00069"/><link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object">00069</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object">Pack_TestPackObject</link>
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;{
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00071"/><link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a782d6ae932609e2ef947c45cfa92b4c6">00071</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a782d6ae932609e2ef947c45cfa92b4c6">LOCAL_FIELDS</link>&#32;=&#32;2;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00072"/>00072 
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00073"/><link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a2367e80c44bdbd8e907524c61d3342c0">00073</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a2367e80c44bdbd8e907524c61d3342c0">TOTAL_FIELDS</link>&#32;=&#32;2;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00074"/>00074 
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00075"/><link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a176d89dbbbdacd68a1e048667643ac04">00075</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_object_database">PackObjectDatabase</link>.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_object_database_1_1_pack_object_info">PackObjectInfo</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a176d89dbbbdacd68a1e048667643ac04">packObjInfo</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;PackDelegate&lt;Single&gt;&#32;rotationPacker;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;UnpackDelegate&lt;Single&gt;&#32;rotationUnpacker;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00078"/>00078 
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;PackDelegate&lt;Int32&gt;&#32;intorobotoPacker;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;UnpackDelegate&lt;Int32&gt;&#32;intorobotoUnpacker;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00081"/>00081 
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00082"/><link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a473024418d948f45a283f662911fd7b2">00082</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a473024418d948f45a283f662911fd7b2">initialized</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00083"/><link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a0af34e75b31300077a034f07c7a54a8e">00083</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a0af34e75b31300077a034f07c7a54a8e">isInitializing</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00084"/>00084 
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00086"/><link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a43518911ccfbdad15d261ed6ad5894a4">00086</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a43518911ccfbdad15d261ed6ad5894a4">Initialize</link>()
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a473024418d948f45a283f662911fd7b2">initialized</link>)&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a0af34e75b31300077a034f07c7a54a8e">isInitializing</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxBits&#32;=&#32;0;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;pObjAttr&#32;=&#32;(typeof(<link linkend="_namespaceemotitron">emotitron</link>.<link linkend="_classemotitron_1_1_test_pack_object">TestPackObject</link>).GetCustomAttributes(typeof(<link linkend="_class_photon_1_1_compression_1_1_pack_object_attribute">PackObjectAttribute</link>),&#32;<emphasis role="keyword">false</emphasis>)[0]&#32;as&#32;<link linkend="_class_photon_1_1_compression_1_1_pack_object_attribute">PackObjectAttribute</link>);
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;defaultKeyRate&#32;=&#32;pObjAttr.defaultKeyRate;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask128">FastBitMask128</link>&#32;defReadyMask&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask128">FastBitMask128</link>(<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a2367e80c44bdbd8e907524c61d3342c0">TOTAL_FIELDS</link>);
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;fieldindex&#32;=&#32;0;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00095"/>00095 
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_compression_1_1_sync_half_float_attribute">SyncHalfFloatAttribute</link>&#32;rotationPackAttr&#32;=&#32;(<link linkend="_class_photon_1_1_compression_1_1_sync_half_float_attribute">SyncHalfFloatAttribute</link>)(typeof(<link linkend="_namespaceemotitron">emotitron</link>.<link linkend="_classemotitron_1_1_test_pack_object">TestPackObject</link>).GetField(<emphasis role="stringliteral">&quot;rotation&quot;</emphasis>).GetCustomAttributes(typeof(<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute">SyncVarBaseAttribute</link>),&#32;<emphasis role="keyword">false</emphasis>)[0]&#32;as&#32;<link linkend="_class_photon_1_1_compression_1_1_sync_half_float_attribute">SyncHalfFloatAttribute</link>);
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rotationPacker&#32;=&#32;(rotationPackAttr&#32;as&#32;<link linkend="_interface_photon_1_1_compression_1_1_internal_1_1_i_pack_single">IPackSingle</link>).<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a76a8a64c2b1e1eaf6fb0d1f2d7da6ef1">Pack</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rotationUnpacker&#32;=&#32;(rotationPackAttr&#32;as&#32;<link linkend="_interface_photon_1_1_compression_1_1_internal_1_1_i_pack_single">IPackSingle</link>).<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1ab1acd8073fdf8669211d584acea036f1">Unpack</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rotationPackAttr.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1ae621e6267c3d4159e2e08dcc42f8a92e">Initialize</link>(typeof(System.Single));
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rotationPackAttr.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1a2030a3075b5fa018144ce63d9713f92e">keyRate</link>&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1a1da0d42c82933128235596213119ee72">KeyRate</link>.UseDefault)&#32;rotationPackAttr.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1a2030a3075b5fa018144ce63d9713f92e">keyRate</link>&#32;=&#32;(<link linkend="_namespace_photon_1_1_compression_1a1da0d42c82933128235596213119ee72">KeyRate</link>)defaultKeyRate;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rotationPackAttr.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1a66c49876c66146d10ac4f12e774d57db">syncAs</link>&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1a316c25ff520f46923c1acc8c4ab4096b">SyncAs</link>.Auto)&#32;rotationPackAttr.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1a66c49876c66146d10ac4f12e774d57db">syncAs</link>&#32;=&#32;pObjAttr.syncAs;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rotationPackAttr.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1a66c49876c66146d10ac4f12e774d57db">syncAs</link>&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1a316c25ff520f46923c1acc8c4ab4096b">SyncAs</link>.Auto)&#32;rotationPackAttr.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1a66c49876c66146d10ac4f12e774d57db">syncAs</link>&#32;=&#32;<link linkend="_namespace_photon_1_1_compression_1a316c25ff520f46923c1acc8c4ab4096b">SyncAs</link>.State;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rotationPackAttr.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1a66c49876c66146d10ac4f12e774d57db">syncAs</link>&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1a316c25ff520f46923c1acc8c4ab4096b">SyncAs</link>.Trigger)&#32;defReadyMask[fieldindex]&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maxBits&#32;+=&#32;16;&#32;fieldindex++;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00105"/>00105 
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute">SyncRangedIntAttribute</link>&#32;intorobotoPackAttr&#32;=&#32;(<link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute">SyncRangedIntAttribute</link>)(typeof(<link linkend="_namespaceemotitron">emotitron</link>.<link linkend="_classemotitron_1_1_test_pack_object">TestPackObject</link>).GetField(<emphasis role="stringliteral">&quot;intoroboto&quot;</emphasis>).GetCustomAttributes(typeof(<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute">SyncVarBaseAttribute</link>),&#32;<emphasis role="keyword">false</emphasis>)[0]&#32;as&#32;<link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute">SyncRangedIntAttribute</link>);
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;intorobotoPacker&#32;=&#32;(intorobotoPackAttr&#32;as&#32;<link linkend="_interface_photon_1_1_compression_1_1_internal_1_1_i_pack_int32">IPackInt32</link>).<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a76a8a64c2b1e1eaf6fb0d1f2d7da6ef1">Pack</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;intorobotoUnpacker&#32;=&#32;(intorobotoPackAttr&#32;as&#32;<link linkend="_interface_photon_1_1_compression_1_1_internal_1_1_i_pack_int32">IPackInt32</link>).<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1ab1acd8073fdf8669211d584acea036f1">Unpack</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;intorobotoPackAttr.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1ae621e6267c3d4159e2e08dcc42f8a92e">Initialize</link>(typeof(System.Int32));
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(intorobotoPackAttr.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1a2030a3075b5fa018144ce63d9713f92e">keyRate</link>&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1a1da0d42c82933128235596213119ee72">KeyRate</link>.UseDefault)&#32;intorobotoPackAttr.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1a2030a3075b5fa018144ce63d9713f92e">keyRate</link>&#32;=&#32;(<link linkend="_namespace_photon_1_1_compression_1a1da0d42c82933128235596213119ee72">KeyRate</link>)defaultKeyRate;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(intorobotoPackAttr.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1a66c49876c66146d10ac4f12e774d57db">syncAs</link>&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1a316c25ff520f46923c1acc8c4ab4096b">SyncAs</link>.Auto)&#32;intorobotoPackAttr.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1a66c49876c66146d10ac4f12e774d57db">syncAs</link>&#32;=&#32;pObjAttr.syncAs;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(intorobotoPackAttr.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1a66c49876c66146d10ac4f12e774d57db">syncAs</link>&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1a316c25ff520f46923c1acc8c4ab4096b">SyncAs</link>.Auto)&#32;intorobotoPackAttr.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1a66c49876c66146d10ac4f12e774d57db">syncAs</link>&#32;=&#32;<link linkend="_namespace_photon_1_1_compression_1a316c25ff520f46923c1acc8c4ab4096b">SyncAs</link>.State;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(intorobotoPackAttr.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1a66c49876c66146d10ac4f12e774d57db">syncAs</link>&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1a316c25ff520f46923c1acc8c4ab4096b">SyncAs</link>.Trigger)&#32;defReadyMask[fieldindex]&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maxBits&#32;+=&#32;2;&#32;fieldindex++;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00115"/>00115 
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a176d89dbbbdacd68a1e048667643ac04">packObjInfo</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_object_database">PackObjectDatabase</link>.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_object_database_1_1_pack_object_info">PackObjectInfo</link>(defReadyMask,&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a76a8a64c2b1e1eaf6fb0d1f2d7da6ef1">Pack</link>,&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a76a8a64c2b1e1eaf6fb0d1f2d7da6ef1">Pack</link>,&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1ab1acd8073fdf8669211d584acea036f1">Unpack</link>,&#32;maxBits,&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object">PackFrame_TestPackObject</link>.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object_1a5e6c759bb9c4112f9c671e46f3325b1b">Factory</link>,&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object">PackFrame_TestPackObject</link>.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object_1a5e6c759bb9c4112f9c671e46f3325b1b">Factory</link>,&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object">PackFrame_TestPackObject</link>.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object_1a66fc56013345f82d37c1b83c2d52386c">Apply</link>,&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object">PackFrame_TestPackObject</link>.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object_1a106c99a10cc1107ed05305104e1290f1">Capture</link>,&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object">PackFrame_TestPackObject</link>.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object_1a55e3efdcc03a09e72b0e42466d60b81d">Copy</link>,&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object">PackFrame_TestPackObject</link>.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object_1a7cabcefdc5457423aa2b70934e262c84">SnapshotCallback</link>,&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object">PackFrame_TestPackObject</link>.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object_1aa8c8111930d2497c6429d5d97726b1c6">Interpolate</link>,&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object">PackFrame_TestPackObject</link>.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object_1aa8c8111930d2497c6429d5d97726b1c6">Interpolate</link>,&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a2367e80c44bdbd8e907524c61d3342c0">TOTAL_FIELDS</link>);
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_object_database">PackObjectDatabase</link>.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_object_database_1acba00a212fc235d964b55600da92cc1f">packObjInfoLookup</link>.Add(typeof(<link linkend="_namespaceemotitron">emotitron</link>.<link linkend="_classemotitron_1_1_test_pack_object">TestPackObject</link>),&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a176d89dbbbdacd68a1e048667643ac04">packObjInfo</link>);
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a0af34e75b31300077a034f07c7a54a8e">isInitializing</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a473024418d948f45a283f662911fd7b2">initialized</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00121"/><link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a76a8a64c2b1e1eaf6fb0d1f2d7da6ef1">00121</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a76a8a64c2b1e1eaf6fb0d1f2d7da6ef1">Pack</link>(ref&#32;System.Object&#32;obj,&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame">PackFrame</link>&#32;prevFrame,&#32;ref&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask128">FastBitMask128</link>&#32;mask,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;maskOffset,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frameId,&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;writeFlags)
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;packable&#32;=&#32;obj&#32;as&#32;<link linkend="_namespaceemotitron">emotitron</link>.<link linkend="_classemotitron_1_1_test_pack_object">TestPackObject</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;prev&#32;=&#32;prevFrame&#32;as&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object">PackFrame_TestPackObject</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;flags&#32;=&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.None;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;flag&#32;=&#32;rotationPacker(ref&#32;packable.rotation,&#32;prev.rotation,&#32;buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mask[maskOffset]&#32;=&#32;flag&#32;!=&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.None;&#32;flags&#32;|=&#32;flag;&#32;maskOffset++;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;flag&#32;=&#32;intorobotoPacker(ref&#32;packable.intoroboto,&#32;prev.intoroboto,&#32;buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mask[maskOffset]&#32;=&#32;flag&#32;!=&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.None;&#32;flags&#32;|=&#32;flag;&#32;maskOffset++;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;flags;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00136"/><link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a020377f71f35d7e033091a6d65868d82">00136</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a020377f71f35d7e033091a6d65868d82">Pack</link>(ref&#32;<link linkend="_namespaceemotitron">emotitron</link>.<link linkend="_classemotitron_1_1_test_pack_object">TestPackObject</link>&#32;packable,&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame">PackFrame</link>&#32;prevFrame,&#32;ref&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask128">FastBitMask128</link>&#32;mask,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;maskOffset,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frameId,&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;writeFlags)
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;prev&#32;=&#32;prevFrame&#32;as&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object">PackFrame_TestPackObject</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;flags&#32;=&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.None;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;flag&#32;=&#32;rotationPacker(ref&#32;packable.rotation,&#32;prev.rotation,&#32;buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mask[maskOffset]&#32;=&#32;flag&#32;!=&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.None;&#32;flags&#32;|=&#32;flag;&#32;maskOffset++;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;flag&#32;=&#32;intorobotoPacker(ref&#32;packable.intoroboto,&#32;prev.intoroboto,&#32;buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mask[maskOffset]&#32;=&#32;flag&#32;!=&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.None;&#32;flags&#32;|=&#32;flag;&#32;maskOffset++;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;flags;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00150"/><link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1ad623801191713b8d85900f9928a67c3f">00150</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1ad623801191713b8d85900f9928a67c3f">Pack</link>(<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame">PackFrame</link>&#32;obj,&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame">PackFrame</link>&#32;prevFrame,&#32;ref&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask128">FastBitMask128</link>&#32;mask,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;maskOffset,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frameId,&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;writeFlags)
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;packable&#32;=&#32;obj&#32;as&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object">PackFrame_TestPackObject</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;prev&#32;=&#32;prevFrame&#32;as&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object">PackFrame_TestPackObject</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;flags&#32;=&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.None;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;flag&#32;=&#32;rotationPacker(ref&#32;packable.rotation,&#32;prev.rotation,&#32;buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mask[maskOffset]&#32;=&#32;flag&#32;!=&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.None;&#32;flags&#32;|=&#32;flag;&#32;maskOffset++;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;flag&#32;=&#32;intorobotoPacker(ref&#32;packable.intoroboto,&#32;prev.intoroboto,&#32;buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mask[maskOffset]&#32;=&#32;flag&#32;!=&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.None;&#32;flags&#32;|=&#32;flag;&#32;maskOffset++;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;flags;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00165"/><link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1ab1acd8073fdf8669211d584acea036f1">00165</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1ab1acd8073fdf8669211d584acea036f1">Unpack</link>(<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame">PackFrame</link>&#32;obj,&#32;ref&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask128">FastBitMask128</link>&#32;mask,&#32;ref&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask128">FastBitMask128</link>&#32;isCompleteMask,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;maskOffset,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frameId,&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;writeFlags)
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;packable&#32;=&#32;obj&#32;as&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object">PackFrame_TestPackObject</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;flags&#32;=&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.None;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mask[maskOffset])&#32;{
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;flag&#32;=&#32;rotationUnpacker(ref&#32;packable.rotation,&#32;buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isCompleteMask[maskOffset]&#32;=&#32;(flag&#32;&amp;&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.IsComplete)&#32;!=&#32;0;&#32;mask[maskOffset]&#32;=&#32;flag&#32;!=&#32;0;&#32;flags&#32;|=&#32;flag;&#32;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;maskOffset++;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mask[maskOffset])&#32;{
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;flag&#32;=&#32;intorobotoUnpacker(ref&#32;packable.intoroboto,&#32;buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isCompleteMask[maskOffset]&#32;=&#32;(flag&#32;&amp;&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.IsComplete)&#32;!=&#32;0;&#32;mask[maskOffset]&#32;=&#32;flag&#32;!=&#32;0;&#32;flags&#32;|=&#32;flag;&#32;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;maskOffset++;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;flags;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00183"/><link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a2c31bf2987274ec63bceabedb3448d11">00183</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1a2c31bf2987274ec63bceabedb3448d11">Pack</link>(ref&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object">PackFrame_TestPackObject</link>&#32;packable,&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame">PackFrame</link>&#32;prevFrame,&#32;ref&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask128">FastBitMask128</link>&#32;mask,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;maskOffset,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frameId,&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;writeFlags)
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;prev&#32;=&#32;prevFrame&#32;as&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object">PackFrame_TestPackObject</link>;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;flags&#32;=&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.None;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;flag&#32;=&#32;rotationPacker(ref&#32;packable.rotation,&#32;prev.rotation,&#32;buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mask[maskOffset]&#32;=&#32;flag&#32;!=&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.None;&#32;flags&#32;|=&#32;flag;&#32;maskOffset++;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;flag&#32;=&#32;intorobotoPacker(ref&#32;packable.intoroboto,&#32;prev.intoroboto,&#32;buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mask[maskOffset]&#32;=&#32;flag&#32;!=&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.None;&#32;flags&#32;|=&#32;flag;&#32;maskOffset++;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;flags;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00197"/><link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1ab8814146080cf92661e7b693c90f65de">00197</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack___test_pack_object_1ab8814146080cf92661e7b693c90f65de">Unpack</link>(ref&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_pack_frame___test_pack_object">PackFrame_TestPackObject</link>&#32;packable,&#32;ref&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask128">FastBitMask128</link>&#32;mask,&#32;ref&#32;<link linkend="_struct_photon_1_1_utilities_1_1_fast_bit_mask128">FastBitMask128</link>&#32;isCompleteMask,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;maskOffset,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frameId,&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;writeFlags)
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;flags&#32;=&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.None;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mask[maskOffset])&#32;{
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;flag&#32;=&#32;rotationUnpacker(ref&#32;packable.rotation,&#32;buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isCompleteMask[maskOffset]&#32;=&#32;(flag&#32;&amp;&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.IsComplete)&#32;!=&#32;0;&#32;mask[maskOffset]&#32;=&#32;flag&#32;!=&#32;0;&#32;flags&#32;|=&#32;flag;&#32;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;maskOffset++;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mask[maskOffset])&#32;{
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;flag&#32;=&#32;intorobotoUnpacker(ref&#32;packable.intoroboto,&#32;buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isCompleteMask[maskOffset]&#32;=&#32;(flag&#32;&amp;&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.IsComplete)&#32;!=&#32;0;&#32;mask[maskOffset]&#32;=&#32;flag&#32;!=&#32;0;&#32;flags&#32;|=&#32;flag;&#32;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;maskOffset++;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;flags;
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00214"/>00214 &#32;&#32;&#32;&#32;}
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00215"/>00215 }
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00216"/>00216 <emphasis role="preprocessor">#pragma&#32;warning&#32;disable&#32;0219</emphasis>
<anchor xml:id="__pack___test_pack_object_8cs_source_1l00217"/>00217 <emphasis role="preprocessor">#pragma&#32;warning&#32;restore&#32;1635</emphasis>
</programlisting></section>
