<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__photon_animator_view_8cs_source" xml:lang="en-US">
<title>PhotonAnimatorView.cs</title>
<indexterm><primary>C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUnityNetworking/Code/Views/PhotonAnimatorView.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__photon_animator_view_8cs_source_1l00001"/>00001 <emphasis role="comment">//&#32;----------------------------------------------------------------------------</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00002"/>00002 <emphasis role="comment">//&#32;&lt;copyright&#32;file=&quot;PhotonAnimatorView.cs&quot;&#32;company=&quot;Exit&#32;Games&#32;GmbH&quot;&gt;</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00003"/>00003 <emphasis role="comment">//&#32;&#32;&#32;PhotonNetwork&#32;Framework&#32;for&#32;Unity&#32;-&#32;Copyright&#32;(C)&#32;2018&#32;Exit&#32;Games&#32;GmbH</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00004"/>00004 <emphasis role="comment">//&#32;&lt;/copyright&gt;</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00005"/>00005 <emphasis role="comment">//&#32;&lt;summary&gt;</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00006"/>00006 <emphasis role="comment">//&#32;&#32;&#32;Component&#32;to&#32;synchronize&#32;Mecanim&#32;animations&#32;via&#32;PUN.</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00007"/>00007 <emphasis role="comment">//&#32;&lt;/summary&gt;</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00008"/>00008 <emphasis role="comment">//&#32;&lt;author&gt;developer@exitgames.com&lt;/author&gt;</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00009"/>00009 <emphasis role="comment">//&#32;----------------------------------------------------------------------------</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00010"/>00010 
<anchor xml:id="__photon_animator_view_8cs_source_1l00011"/>00011 
<anchor xml:id="__photon_animator_view_8cs_source_1l00012"/>00012 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_photon_1_1_pun">Photon.Pun</link>
<anchor xml:id="__photon_animator_view_8cs_source_1l00013"/>00013 {
<anchor xml:id="__photon_animator_view_8cs_source_1l00014"/>00014 &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;System.<link linkend="_namespace_system_1_1_collections">Collections</link>.Generic;
<anchor xml:id="__photon_animator_view_8cs_source_1l00015"/>00015 &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;UnityEngine;
<anchor xml:id="__photon_animator_view_8cs_source_1l00016"/>00016 
<anchor xml:id="__photon_animator_view_8cs_source_1l00017"/>00017 
<anchor xml:id="__photon_animator_view_8cs_source_1l00027"/>00027 &#32;&#32;&#32;&#32;[AddComponentMenu(<emphasis role="stringliteral">&quot;Photon&#32;Networking/Photon&#32;Animator&#32;View&quot;</emphasis>)]
<anchor xml:id="__photon_animator_view_8cs_source_1l00028"/><link linkend="_class_photon_1_1_pun_1_1_photon_animator_view">00028</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_photon_1_1_pun_1_1_photon_animator_view">PhotonAnimatorView</link>&#32;:&#32;<link linkend="_class_photon_1_1_pun_1_1_mono_behaviour_pun">MonoBehaviourPun</link>,&#32;<link linkend="_interface_photon_1_1_pun_1_1_i_pun_observable">IPunObservable</link>
<anchor xml:id="__photon_animator_view_8cs_source_1l00029"/>00029 &#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00030"/>00030 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Enums</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00031"/>00031 
<anchor xml:id="__photon_animator_view_8cs_source_1l00032"/><link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1accc0e58df5f078b7d67ae8ac64c511a0">00032</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1accc0e58df5f078b7d67ae8ac64c511a0">ParameterType</link>
<anchor xml:id="__photon_animator_view_8cs_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Float&#32;=&#32;1,
<anchor xml:id="__photon_animator_view_8cs_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Int&#32;=&#32;3,
<anchor xml:id="__photon_animator_view_8cs_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Bool&#32;=&#32;4,
<anchor xml:id="__photon_animator_view_8cs_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Trigger&#32;=&#32;9,
<anchor xml:id="__photon_animator_view_8cs_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00039"/>00039 
<anchor xml:id="__photon_animator_view_8cs_source_1l00040"/>00040 
<anchor xml:id="__photon_animator_view_8cs_source_1l00041"/><link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a05e9d38ae6fbdd540d1c60b3306abb91">00041</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a05e9d38ae6fbdd540d1c60b3306abb91">SynchronizeType</link>
<anchor xml:id="__photon_animator_view_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Disabled&#32;=&#32;0,
<anchor xml:id="__photon_animator_view_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Discrete&#32;=&#32;1,
<anchor xml:id="__photon_animator_view_8cs_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Continuous&#32;=&#32;2,
<anchor xml:id="__photon_animator_view_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00047"/>00047 
<anchor xml:id="__photon_animator_view_8cs_source_1l00048"/>00048 
<anchor xml:id="__photon_animator_view_8cs_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[System.Serializable]
<anchor xml:id="__photon_animator_view_8cs_source_1l00050"/><link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1_1_synchronized_parameter">00050</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1_1_synchronized_parameter">SynchronizedParameter</link>
<anchor xml:id="__photon_animator_view_8cs_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00052"/><link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1_1_synchronized_parameter_1afd46162be1456033078ac981bcc47f3e">00052</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1accc0e58df5f078b7d67ae8ac64c511a0">ParameterType</link>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1_1_synchronized_parameter_1afd46162be1456033078ac981bcc47f3e">Type</link>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00053"/><link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1_1_synchronized_parameter_1a1eb3ca53443437c5399bb3ac6d920ea7">00053</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a05e9d38ae6fbdd540d1c60b3306abb91">SynchronizeType</link>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1_1_synchronized_parameter_1a1eb3ca53443437c5399bb3ac6d920ea7">SynchronizeType</link>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00054"/><link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1_1_synchronized_parameter_1af0aec16981926cdf0a63eb318c103ea7">00054</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1_1_synchronized_parameter_1af0aec16981926cdf0a63eb318c103ea7">Name</link>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00056"/>00056 
<anchor xml:id="__photon_animator_view_8cs_source_1l00057"/>00057 
<anchor xml:id="__photon_animator_view_8cs_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[System.Serializable]
<anchor xml:id="__photon_animator_view_8cs_source_1l00059"/><link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1_1_synchronized_layer">00059</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1_1_synchronized_layer">SynchronizedLayer</link>
<anchor xml:id="__photon_animator_view_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00061"/><link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1_1_synchronized_layer_1aaea3e82f13da3997573e5332c1b4343c">00061</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a05e9d38ae6fbdd540d1c60b3306abb91">SynchronizeType</link>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1_1_synchronized_layer_1aaea3e82f13da3997573e5332c1b4343c">SynchronizeType</link>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00062"/><link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1_1_synchronized_layer_1aee24c369bb1e076f58d52f6bee0d3d09">00062</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1_1_synchronized_layer_1aee24c369bb1e076f58d52f6bee0d3d09">LayerIndex</link>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00064"/>00064 
<anchor xml:id="__photon_animator_view_8cs_source_1l00065"/>00065 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00066"/>00066 
<anchor xml:id="__photon_animator_view_8cs_source_1l00067"/>00067 
<anchor xml:id="__photon_animator_view_8cs_source_1l00068"/>00068 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Properties</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00069"/>00069 
<anchor xml:id="__photon_animator_view_8cs_source_1l00070"/>00070 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;PHOTON_DEVELOP</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view">PhotonAnimatorView</link>&#32;ReceivingSender;
<anchor xml:id="__photon_animator_view_8cs_source_1l00072"/>00072 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00073"/>00073 
<anchor xml:id="__photon_animator_view_8cs_source_1l00074"/>00074 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00075"/>00075 
<anchor xml:id="__photon_animator_view_8cs_source_1l00076"/>00076 
<anchor xml:id="__photon_animator_view_8cs_source_1l00077"/>00077 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Members</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00078"/>00078 
<anchor xml:id="__photon_animator_view_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;TriggerUsageWarningDone;
<anchor xml:id="__photon_animator_view_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__photon_animator_view_8cs_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Animator&#32;m_Animator;
<anchor xml:id="__photon_animator_view_8cs_source_1l00082"/>00082 
<anchor xml:id="__photon_animator_view_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_stream_queue">PhotonStreamQueue</link>&#32;m_StreamQueue&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_stream_queue">PhotonStreamQueue</link>(120);
<anchor xml:id="__photon_animator_view_8cs_source_1l00084"/>00084 
<anchor xml:id="__photon_animator_view_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//These&#32;fields&#32;are&#32;only&#32;used&#32;in&#32;the&#32;CustomEditor&#32;for&#32;this&#32;script&#32;and&#32;would&#32;trigger&#32;a</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&quot;this&#32;variable&#32;is&#32;never&#32;used&quot;&#32;warning,&#32;which&#32;I&#32;am&#32;suppressing&#32;here</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00087"/>00087 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#pragma&#32;warning&#32;disable&#32;0414</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00088"/>00088 
<anchor xml:id="__photon_animator_view_8cs_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[HideInInspector]
<anchor xml:id="__photon_animator_view_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[SerializeField]
<anchor xml:id="__photon_animator_view_8cs_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ShowLayerWeightsInspector&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00092"/>00092 
<anchor xml:id="__photon_animator_view_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[HideInInspector]
<anchor xml:id="__photon_animator_view_8cs_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[SerializeField]
<anchor xml:id="__photon_animator_view_8cs_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ShowParameterInspector&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00096"/>00096 
<anchor xml:id="__photon_animator_view_8cs_source_1l00097"/>00097 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#pragma&#32;warning&#32;restore&#32;0414</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00098"/>00098 
<anchor xml:id="__photon_animator_view_8cs_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[HideInInspector]
<anchor xml:id="__photon_animator_view_8cs_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[SerializeField]
<anchor xml:id="__photon_animator_view_8cs_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;List&lt;SynchronizedParameter&gt;&#32;m_SynchronizeParameters&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;SynchronizedParameter&gt;();
<anchor xml:id="__photon_animator_view_8cs_source_1l00102"/>00102 
<anchor xml:id="__photon_animator_view_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[HideInInspector]
<anchor xml:id="__photon_animator_view_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[SerializeField]
<anchor xml:id="__photon_animator_view_8cs_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;List&lt;SynchronizedLayer&gt;&#32;m_SynchronizeLayers&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;SynchronizedLayer&gt;();
<anchor xml:id="__photon_animator_view_8cs_source_1l00106"/>00106 
<anchor xml:id="__photon_animator_view_8cs_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Vector3&#32;m_ReceiverPosition;
<anchor xml:id="__photon_animator_view_8cs_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;m_LastDeserializeTime;
<anchor xml:id="__photon_animator_view_8cs_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;m_WasSynchronizeTypeChanged&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00110"/>00110 
<anchor xml:id="__photon_animator_view_8cs_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;string&gt;&#32;m_raisedDiscreteTriggersCache&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;string&gt;();
<anchor xml:id="__photon_animator_view_8cs_source_1l00116"/>00116 
<anchor xml:id="__photon_animator_view_8cs_source_1l00117"/>00117 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00118"/>00118 
<anchor xml:id="__photon_animator_view_8cs_source_1l00119"/>00119 
<anchor xml:id="__photon_animator_view_8cs_source_1l00120"/>00120 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Unity</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00121"/>00121 
<anchor xml:id="__photon_animator_view_8cs_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Awake()
<anchor xml:id="__photon_animator_view_8cs_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.m_Animator&#32;=&#32;GetComponent&lt;Animator&gt;();
<anchor xml:id="__photon_animator_view_8cs_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00126"/>00126 
<anchor xml:id="__photon_animator_view_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Update()
<anchor xml:id="__photon_animator_view_8cs_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.m_Animator.applyRootMotion&#32;&amp;&amp;&#32;<emphasis role="keyword">this</emphasis>.photonView.IsMine&#32;==&#32;<emphasis role="keyword">false</emphasis>&#32;&amp;&amp;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network">PhotonNetwork</link>.<link linkend="_class_photon_1_1_pun_1_1_photon_network_1abfb28d4211e3d74568e4250edf231b0f">IsConnected</link>&#32;==&#32;<emphasis role="keyword">true</emphasis>)
<anchor xml:id="__photon_animator_view_8cs_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.m_Animator.applyRootMotion&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00133"/>00133 
<anchor xml:id="__photon_animator_view_8cs_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.InRoom&#32;==&#32;<emphasis role="keyword">false</emphasis>&#32;||&#32;PhotonNetwork.CurrentRoom.PlayerCount&#32;&lt;=&#32;1)
<anchor xml:id="__photon_animator_view_8cs_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.m_StreamQueue.<link linkend="_class_photon_1_1_pun_1_1_photon_stream_queue_1a065ec40dbb214e468ede584377910e66">Reset</link>();
<anchor xml:id="__photon_animator_view_8cs_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00139"/>00139 
<anchor xml:id="__photon_animator_view_8cs_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.<link linkend="_class_photon_1_1_pun_1_1_mono_behaviour_pun_1a95579fa46054897edb5dbc2356b3d5b7">photonView</link>.<link linkend="_class_photon_1_1_pun_1_1_photon_view_1accb0edee64106db0cdf00c49bfe1fd03">IsMine</link>&#32;==&#32;<emphasis role="keyword">true</emphasis>)
<anchor xml:id="__photon_animator_view_8cs_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.SerializeDataContinuously();
<anchor xml:id="__photon_animator_view_8cs_source_1l00143"/>00143 
<anchor xml:id="__photon_animator_view_8cs_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a9405c980ef35c0dbdaf22d6bf8ef714b">CacheDiscreteTriggers</link>();
<anchor xml:id="__photon_animator_view_8cs_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.DeserializeDataContinuously();
<anchor xml:id="__photon_animator_view_8cs_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00151"/>00151 
<anchor xml:id="__photon_animator_view_8cs_source_1l00152"/>00152 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00153"/>00153 
<anchor xml:id="__photon_animator_view_8cs_source_1l00154"/>00154 
<anchor xml:id="__photon_animator_view_8cs_source_1l00155"/>00155 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Setup&#32;Synchronizing&#32;Methods</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00156"/>00156 
<anchor xml:id="__photon_animator_view_8cs_source_1l00160"/><link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a9405c980ef35c0dbdaf22d6bf8ef714b">00160</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a9405c980ef35c0dbdaf22d6bf8ef714b">CacheDiscreteTriggers</link>()
<anchor xml:id="__photon_animator_view_8cs_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this.m_SynchronizeParameters.Count;&#32;++i)
<anchor xml:id="__photon_animator_view_8cs_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1_1_synchronized_parameter">SynchronizedParameter</link>&#32;parameter&#32;=&#32;this.m_SynchronizeParameters[i];
<anchor xml:id="__photon_animator_view_8cs_source_1l00165"/>00165 
<anchor xml:id="__photon_animator_view_8cs_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parameter.<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1_1_synchronized_parameter_1a1eb3ca53443437c5399bb3ac6d920ea7">SynchronizeType</link>&#32;==&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a05e9d38ae6fbdd540d1c60b3306abb91">SynchronizeType</link>.Discrete&#32;&amp;&amp;&#32;parameter.<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1_1_synchronized_parameter_1afd46162be1456033078ac981bcc47f3e">Type</link>&#32;==&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1accc0e58df5f078b7d67ae8ac64c511a0">ParameterType</link>.Trigger&#32;&amp;&amp;&#32;<emphasis role="keyword">this</emphasis>.m_Animator.GetBool(parameter.<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1_1_synchronized_parameter_1af0aec16981926cdf0a63eb318c103ea7">Name</link>))
<anchor xml:id="__photon_animator_view_8cs_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parameter.<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1_1_synchronized_parameter_1afd46162be1456033078ac981bcc47f3e">Type</link>&#32;==&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1accc0e58df5f078b7d67ae8ac64c511a0">ParameterType</link>.Trigger)
<anchor xml:id="__photon_animator_view_8cs_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.m_raisedDiscreteTriggersCache.Add(parameter.<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1_1_synchronized_parameter_1af0aec16981926cdf0a63eb318c103ea7">Name</link>);
<anchor xml:id="__photon_animator_view_8cs_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00176"/>00176 
<anchor xml:id="__photon_animator_view_8cs_source_1l00182"/><link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a81350b0c99454a448b2a17d04f9f6378">00182</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a81350b0c99454a448b2a17d04f9f6378">DoesLayerSynchronizeTypeExist</link>(<emphasis role="keywordtype">int</emphasis>&#32;layerIndex)
<anchor xml:id="__photon_animator_view_8cs_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this.m_SynchronizeLayers.FindIndex(item&#32;=&gt;&#32;item.LayerIndex&#32;==&#32;layerIndex)&#32;!=&#32;-1;
<anchor xml:id="__photon_animator_view_8cs_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00186"/>00186 
<anchor xml:id="__photon_animator_view_8cs_source_1l00192"/><link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a0e40adea0cb934ce327ecd0fc5d7c277">00192</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a0e40adea0cb934ce327ecd0fc5d7c277">DoesParameterSynchronizeTypeExist</link>(<emphasis role="keywordtype">string</emphasis>&#32;name)
<anchor xml:id="__photon_animator_view_8cs_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this.m_SynchronizeParameters.FindIndex(item&#32;=&gt;&#32;item.Name&#32;==&#32;name)&#32;!=&#32;-1;
<anchor xml:id="__photon_animator_view_8cs_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00196"/>00196 
<anchor xml:id="__photon_animator_view_8cs_source_1l00201"/><link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a173f07a7f36a674f8a8261a13fe430ac">00201</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;List&lt;SynchronizedLayer&gt;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a173f07a7f36a674f8a8261a13fe430ac">GetSynchronizedLayers</link>()
<anchor xml:id="__photon_animator_view_8cs_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this.m_SynchronizeLayers;
<anchor xml:id="__photon_animator_view_8cs_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00205"/>00205 
<anchor xml:id="__photon_animator_view_8cs_source_1l00210"/><link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1ae84335369c664e6250ecc35fccad462e">00210</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;List&lt;SynchronizedParameter&gt;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1ae84335369c664e6250ecc35fccad462e">GetSynchronizedParameters</link>()
<anchor xml:id="__photon_animator_view_8cs_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this.m_SynchronizeParameters;
<anchor xml:id="__photon_animator_view_8cs_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00214"/>00214 
<anchor xml:id="__photon_animator_view_8cs_source_1l00220"/><link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a8531360e1890493a838da8b201287446">00220</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a05e9d38ae6fbdd540d1c60b3306abb91">SynchronizeType</link>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a8531360e1890493a838da8b201287446">GetLayerSynchronizeType</link>(<emphasis role="keywordtype">int</emphasis>&#32;layerIndex)
<anchor xml:id="__photon_animator_view_8cs_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;index&#32;=&#32;this.m_SynchronizeLayers.FindIndex(item&#32;=&gt;&#32;item.LayerIndex&#32;==&#32;layerIndex);
<anchor xml:id="__photon_animator_view_8cs_source_1l00223"/>00223 
<anchor xml:id="__photon_animator_view_8cs_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(index&#32;==&#32;-1)
<anchor xml:id="__photon_animator_view_8cs_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a05e9d38ae6fbdd540d1c60b3306abb91">SynchronizeType</link>.Disabled;
<anchor xml:id="__photon_animator_view_8cs_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00228"/>00228 
<anchor xml:id="__photon_animator_view_8cs_source_1l00229"/>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this.m_SynchronizeLayers[index].SynchronizeType;
<anchor xml:id="__photon_animator_view_8cs_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00231"/>00231 
<anchor xml:id="__photon_animator_view_8cs_source_1l00237"/><link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a3c62b807451bee4a808f86598286d46d">00237</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a05e9d38ae6fbdd540d1c60b3306abb91">SynchronizeType</link>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a3c62b807451bee4a808f86598286d46d">GetParameterSynchronizeType</link>(<emphasis role="keywordtype">string</emphasis>&#32;name)
<anchor xml:id="__photon_animator_view_8cs_source_1l00238"/>00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00239"/>00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;index&#32;=&#32;this.m_SynchronizeParameters.FindIndex(item&#32;=&gt;&#32;item.Name&#32;==&#32;name);
<anchor xml:id="__photon_animator_view_8cs_source_1l00240"/>00240 
<anchor xml:id="__photon_animator_view_8cs_source_1l00241"/>00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(index&#32;==&#32;-1)
<anchor xml:id="__photon_animator_view_8cs_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a05e9d38ae6fbdd540d1c60b3306abb91">SynchronizeType</link>.Disabled;
<anchor xml:id="__photon_animator_view_8cs_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00245"/>00245 
<anchor xml:id="__photon_animator_view_8cs_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this.m_SynchronizeParameters[index].SynchronizeType;
<anchor xml:id="__photon_animator_view_8cs_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00248"/>00248 
<anchor xml:id="__photon_animator_view_8cs_source_1l00254"/><link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a6f93b82c434f89707278248d29af9d4f">00254</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a6f93b82c434f89707278248d29af9d4f">SetLayerSynchronized</link>(<emphasis role="keywordtype">int</emphasis>&#32;layerIndex,&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a05e9d38ae6fbdd540d1c60b3306abb91">SynchronizeType</link>&#32;synchronizeType)
<anchor xml:id="__photon_animator_view_8cs_source_1l00255"/>00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00256"/>00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Application.isPlaying&#32;==&#32;<emphasis role="keyword">true</emphasis>)
<anchor xml:id="__photon_animator_view_8cs_source_1l00257"/>00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.m_WasSynchronizeTypeChanged&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00259"/>00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00260"/>00260 
<anchor xml:id="__photon_animator_view_8cs_source_1l00261"/>00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;index&#32;=&#32;this.m_SynchronizeLayers.FindIndex(item&#32;=&gt;&#32;item.LayerIndex&#32;==&#32;layerIndex);
<anchor xml:id="__photon_animator_view_8cs_source_1l00262"/>00262 
<anchor xml:id="__photon_animator_view_8cs_source_1l00263"/>00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(index&#32;==&#32;-1)
<anchor xml:id="__photon_animator_view_8cs_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.m_SynchronizeLayers.Add(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1_1_synchronized_layer">SynchronizedLayer</link>&#32;{LayerIndex&#32;=&#32;layerIndex,&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a05e9d38ae6fbdd540d1c60b3306abb91">SynchronizeType</link>&#32;=&#32;synchronizeType});
<anchor xml:id="__photon_animator_view_8cs_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00269"/>00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.m_SynchronizeLayers[index].SynchronizeType&#32;=&#32;synchronizeType;
<anchor xml:id="__photon_animator_view_8cs_source_1l00270"/>00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00271"/>00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00272"/>00272 
<anchor xml:id="__photon_animator_view_8cs_source_1l00279"/><link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a784b526249559c41c13339728a1841c4">00279</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a784b526249559c41c13339728a1841c4">SetParameterSynchronized</link>(<emphasis role="keywordtype">string</emphasis>&#32;name,&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1accc0e58df5f078b7d67ae8ac64c511a0">ParameterType</link>&#32;type,&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a05e9d38ae6fbdd540d1c60b3306abb91">SynchronizeType</link>&#32;synchronizeType)
<anchor xml:id="__photon_animator_view_8cs_source_1l00280"/>00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00281"/>00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Application.isPlaying&#32;==&#32;<emphasis role="keyword">true</emphasis>)
<anchor xml:id="__photon_animator_view_8cs_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00283"/>00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.m_WasSynchronizeTypeChanged&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00285"/>00285 
<anchor xml:id="__photon_animator_view_8cs_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;index&#32;=&#32;this.m_SynchronizeParameters.FindIndex(item&#32;=&gt;&#32;item.Name&#32;==&#32;name);
<anchor xml:id="__photon_animator_view_8cs_source_1l00287"/>00287 
<anchor xml:id="__photon_animator_view_8cs_source_1l00288"/>00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(index&#32;==&#32;-1)
<anchor xml:id="__photon_animator_view_8cs_source_1l00289"/>00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00290"/>00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.m_SynchronizeParameters.Add(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1_1_synchronized_parameter">SynchronizedParameter</link>&#32;{Name&#32;=&#32;name,&#32;Type&#32;=&#32;type,&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a05e9d38ae6fbdd540d1c60b3306abb91">SynchronizeType</link>&#32;=&#32;synchronizeType});
<anchor xml:id="__photon_animator_view_8cs_source_1l00291"/>00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00292"/>00292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00294"/>00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.m_SynchronizeParameters[index].SynchronizeType&#32;=&#32;synchronizeType;
<anchor xml:id="__photon_animator_view_8cs_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00297"/>00297 
<anchor xml:id="__photon_animator_view_8cs_source_1l00298"/>00298 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00299"/>00299 
<anchor xml:id="__photon_animator_view_8cs_source_1l00300"/>00300 
<anchor xml:id="__photon_animator_view_8cs_source_1l00301"/>00301 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Serialization</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00302"/>00302 
<anchor xml:id="__photon_animator_view_8cs_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;SerializeDataContinuously()
<anchor xml:id="__photon_animator_view_8cs_source_1l00304"/>00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00305"/>00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.m_Animator&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_animator_view_8cs_source_1l00306"/>00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00307"/>00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00308"/>00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00309"/>00309 
<anchor xml:id="__photon_animator_view_8cs_source_1l00310"/>00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this.m_SynchronizeLayers.Count;&#32;++i)
<anchor xml:id="__photon_animator_view_8cs_source_1l00311"/>00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00312"/>00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.m_SynchronizeLayers[i].<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a05e9d38ae6fbdd540d1c60b3306abb91">SynchronizeType</link>&#32;==&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a05e9d38ae6fbdd540d1c60b3306abb91">SynchronizeType</link>.Continuous)
<anchor xml:id="__photon_animator_view_8cs_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.m_StreamQueue.<link linkend="_class_photon_1_1_pun_1_1_photon_stream_queue_1a42779b39aad4f458528b728a6ae9ca46">SendNext</link>(this.m_Animator.GetLayerWeight(<emphasis role="keyword">this</emphasis>.m_SynchronizeLayers[i].LayerIndex));
<anchor xml:id="__photon_animator_view_8cs_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00317"/>00317 
<anchor xml:id="__photon_animator_view_8cs_source_1l00318"/>00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this.m_SynchronizeParameters.Count;&#32;++i)
<anchor xml:id="__photon_animator_view_8cs_source_1l00319"/>00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00320"/>00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SynchronizedParameter&#32;parameter&#32;=&#32;this.m_SynchronizeParameters[i];
<anchor xml:id="__photon_animator_view_8cs_source_1l00321"/>00321 
<anchor xml:id="__photon_animator_view_8cs_source_1l00322"/>00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parameter.SynchronizeType&#32;==&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a05e9d38ae6fbdd540d1c60b3306abb91">SynchronizeType</link>.Continuous)
<anchor xml:id="__photon_animator_view_8cs_source_1l00323"/>00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00324"/>00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(parameter.Type)
<anchor xml:id="__photon_animator_view_8cs_source_1l00325"/>00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00326"/>00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1accc0e58df5f078b7d67ae8ac64c511a0">ParameterType</link>.Bool:
<anchor xml:id="__photon_animator_view_8cs_source_1l00327"/>00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.m_StreamQueue.<link linkend="_class_photon_1_1_pun_1_1_photon_stream_queue_1a42779b39aad4f458528b728a6ae9ca46">SendNext</link>(this.m_Animator.GetBool(parameter.Name));
<anchor xml:id="__photon_animator_view_8cs_source_1l00328"/>00328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00329"/>00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1accc0e58df5f078b7d67ae8ac64c511a0">ParameterType</link>.Float:
<anchor xml:id="__photon_animator_view_8cs_source_1l00330"/>00330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.m_StreamQueue.<link linkend="_class_photon_1_1_pun_1_1_photon_stream_queue_1a42779b39aad4f458528b728a6ae9ca46">SendNext</link>(this.m_Animator.GetFloat(parameter.Name));
<anchor xml:id="__photon_animator_view_8cs_source_1l00331"/>00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00332"/>00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1accc0e58df5f078b7d67ae8ac64c511a0">ParameterType</link>.Int:
<anchor xml:id="__photon_animator_view_8cs_source_1l00333"/>00333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.m_StreamQueue.<link linkend="_class_photon_1_1_pun_1_1_photon_stream_queue_1a42779b39aad4f458528b728a6ae9ca46">SendNext</link>(this.m_Animator.GetInteger(parameter.Name));
<anchor xml:id="__photon_animator_view_8cs_source_1l00334"/>00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00335"/>00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1accc0e58df5f078b7d67ae8ac64c511a0">ParameterType</link>.Trigger:
<anchor xml:id="__photon_animator_view_8cs_source_1l00336"/>00336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!TriggerUsageWarningDone)
<anchor xml:id="__photon_animator_view_8cs_source_1l00337"/>00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00338"/>00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TriggerUsageWarningDone&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00339"/>00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.Log(<emphasis role="stringliteral">&quot;PhotonAnimatorView:&#32;When&#32;using&#32;triggers,&#32;make&#32;sure&#32;this&#32;component&#32;is&#32;last&#32;in&#32;the&#32;stack.\n&quot;</emphasis>&#32;+
<anchor xml:id="__photon_animator_view_8cs_source_1l00340"/>00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;If&#32;you&#32;still&#32;experience&#32;issues,&#32;implement&#32;triggers&#32;as&#32;a&#32;regular&#32;RPC&#32;\n&quot;</emphasis>&#32;+
<anchor xml:id="__photon_animator_view_8cs_source_1l00341"/>00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;or&#32;in&#32;custom&#32;IPunObservable&#32;component&#32;instead&quot;</emphasis>,<emphasis role="keyword">this</emphasis>);
<anchor xml:id="__photon_animator_view_8cs_source_1l00342"/>00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__photon_animator_view_8cs_source_1l00343"/>00343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00344"/>00344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.m_StreamQueue.<link linkend="_class_photon_1_1_pun_1_1_photon_stream_queue_1a42779b39aad4f458528b728a6ae9ca46">SendNext</link>(this.m_Animator.GetBool(parameter.Name));
<anchor xml:id="__photon_animator_view_8cs_source_1l00345"/>00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00346"/>00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00347"/>00347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00348"/>00348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00349"/>00349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00350"/>00350 
<anchor xml:id="__photon_animator_view_8cs_source_1l00351"/>00351 
<anchor xml:id="__photon_animator_view_8cs_source_1l00352"/>00352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;DeserializeDataContinuously()
<anchor xml:id="__photon_animator_view_8cs_source_1l00353"/>00353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00354"/>00354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.m_StreamQueue.<link linkend="_class_photon_1_1_pun_1_1_photon_stream_queue_1a5ce6660209d3c8b2988d2e4444dfe36b">HasQueuedObjects</link>()&#32;==&#32;<emphasis role="keyword">false</emphasis>)
<anchor xml:id="__photon_animator_view_8cs_source_1l00355"/>00355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00356"/>00356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00357"/>00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00358"/>00358 
<anchor xml:id="__photon_animator_view_8cs_source_1l00359"/>00359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this.m_SynchronizeLayers.Count;&#32;++i)
<anchor xml:id="__photon_animator_view_8cs_source_1l00360"/>00360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00361"/>00361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.m_SynchronizeLayers[i].<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a05e9d38ae6fbdd540d1c60b3306abb91">SynchronizeType</link>&#32;==&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a05e9d38ae6fbdd540d1c60b3306abb91">SynchronizeType</link>.Continuous)
<anchor xml:id="__photon_animator_view_8cs_source_1l00362"/>00362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00363"/>00363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.m_Animator.SetLayerWeight(this.m_SynchronizeLayers[i].LayerIndex,&#32;(<emphasis role="keywordtype">float</emphasis>)&#32;this.m_StreamQueue.<link linkend="_class_photon_1_1_pun_1_1_photon_stream_queue_1a8ce49494951095aabcdc4d22d4420ea2">ReceiveNext</link>());
<anchor xml:id="__photon_animator_view_8cs_source_1l00364"/>00364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00365"/>00365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00366"/>00366 
<anchor xml:id="__photon_animator_view_8cs_source_1l00367"/>00367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this.m_SynchronizeParameters.Count;&#32;++i)
<anchor xml:id="__photon_animator_view_8cs_source_1l00368"/>00368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00369"/>00369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SynchronizedParameter&#32;parameter&#32;=&#32;this.m_SynchronizeParameters[i];
<anchor xml:id="__photon_animator_view_8cs_source_1l00370"/>00370 
<anchor xml:id="__photon_animator_view_8cs_source_1l00371"/>00371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parameter.SynchronizeType&#32;==&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a05e9d38ae6fbdd540d1c60b3306abb91">SynchronizeType</link>.Continuous)
<anchor xml:id="__photon_animator_view_8cs_source_1l00372"/>00372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00373"/>00373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(parameter.Type)
<anchor xml:id="__photon_animator_view_8cs_source_1l00374"/>00374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00375"/>00375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1accc0e58df5f078b7d67ae8ac64c511a0">ParameterType</link>.Bool:
<anchor xml:id="__photon_animator_view_8cs_source_1l00376"/>00376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.m_Animator.SetBool(parameter.Name,&#32;(<emphasis role="keywordtype">bool</emphasis>)&#32;<emphasis role="keyword">this</emphasis>.m_StreamQueue.ReceiveNext());
<anchor xml:id="__photon_animator_view_8cs_source_1l00377"/>00377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00378"/>00378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1accc0e58df5f078b7d67ae8ac64c511a0">ParameterType</link>.Float:
<anchor xml:id="__photon_animator_view_8cs_source_1l00379"/>00379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.m_Animator.SetFloat(parameter.Name,&#32;(<emphasis role="keywordtype">float</emphasis>)&#32;<emphasis role="keyword">this</emphasis>.m_StreamQueue.ReceiveNext());
<anchor xml:id="__photon_animator_view_8cs_source_1l00380"/>00380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00381"/>00381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1accc0e58df5f078b7d67ae8ac64c511a0">ParameterType</link>.Int:
<anchor xml:id="__photon_animator_view_8cs_source_1l00382"/>00382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.m_Animator.SetInteger(parameter.Name,&#32;(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">this</emphasis>.m_StreamQueue.ReceiveNext());
<anchor xml:id="__photon_animator_view_8cs_source_1l00383"/>00383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00384"/>00384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1accc0e58df5f078b7d67ae8ac64c511a0">ParameterType</link>.Trigger:
<anchor xml:id="__photon_animator_view_8cs_source_1l00385"/>00385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.m_Animator.SetBool(parameter.Name,&#32;(<emphasis role="keywordtype">bool</emphasis>)&#32;<emphasis role="keyword">this</emphasis>.m_StreamQueue.ReceiveNext());
<anchor xml:id="__photon_animator_view_8cs_source_1l00386"/>00386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00387"/>00387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00388"/>00388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00389"/>00389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00390"/>00390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00391"/>00391 
<anchor xml:id="__photon_animator_view_8cs_source_1l00392"/>00392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;SerializeDataDiscretly(PhotonStream&#32;stream)
<anchor xml:id="__photon_animator_view_8cs_source_1l00393"/>00393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00394"/>00394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this.m_SynchronizeLayers.Count;&#32;++i)
<anchor xml:id="__photon_animator_view_8cs_source_1l00395"/>00395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00396"/>00396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.m_SynchronizeLayers[i].<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a05e9d38ae6fbdd540d1c60b3306abb91">SynchronizeType</link>&#32;==&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a05e9d38ae6fbdd540d1c60b3306abb91">SynchronizeType</link>.Discrete)
<anchor xml:id="__photon_animator_view_8cs_source_1l00397"/>00397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00398"/>00398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream.SendNext(this.m_Animator.GetLayerWeight(<emphasis role="keyword">this</emphasis>.m_SynchronizeLayers[i].LayerIndex));
<anchor xml:id="__photon_animator_view_8cs_source_1l00399"/>00399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00400"/>00400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00401"/>00401 
<anchor xml:id="__photon_animator_view_8cs_source_1l00402"/>00402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this.m_SynchronizeParameters.Count;&#32;++i)
<anchor xml:id="__photon_animator_view_8cs_source_1l00403"/>00403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00404"/>00404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__photon_animator_view_8cs_source_1l00405"/>00405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SynchronizedParameter&#32;parameter&#32;=&#32;this.m_SynchronizeParameters[i];
<anchor xml:id="__photon_animator_view_8cs_source_1l00406"/>00406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__photon_animator_view_8cs_source_1l00407"/>00407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parameter.SynchronizeType&#32;==&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a05e9d38ae6fbdd540d1c60b3306abb91">SynchronizeType</link>.Discrete)
<anchor xml:id="__photon_animator_view_8cs_source_1l00408"/>00408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00409"/>00409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(parameter.Type)
<anchor xml:id="__photon_animator_view_8cs_source_1l00410"/>00410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00411"/>00411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1accc0e58df5f078b7d67ae8ac64c511a0">ParameterType</link>.Bool:
<anchor xml:id="__photon_animator_view_8cs_source_1l00412"/>00412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream.SendNext(this.m_Animator.GetBool(parameter.Name));
<anchor xml:id="__photon_animator_view_8cs_source_1l00413"/>00413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00414"/>00414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1accc0e58df5f078b7d67ae8ac64c511a0">ParameterType</link>.Float:
<anchor xml:id="__photon_animator_view_8cs_source_1l00415"/>00415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream.SendNext(this.m_Animator.GetFloat(parameter.Name));
<anchor xml:id="__photon_animator_view_8cs_source_1l00416"/>00416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00417"/>00417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1accc0e58df5f078b7d67ae8ac64c511a0">ParameterType</link>.Int:
<anchor xml:id="__photon_animator_view_8cs_source_1l00418"/>00418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream.SendNext(this.m_Animator.GetInteger(parameter.Name));
<anchor xml:id="__photon_animator_view_8cs_source_1l00419"/>00419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00420"/>00420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1accc0e58df5f078b7d67ae8ac64c511a0">ParameterType</link>.Trigger:
<anchor xml:id="__photon_animator_view_8cs_source_1l00421"/>00421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!TriggerUsageWarningDone)
<anchor xml:id="__photon_animator_view_8cs_source_1l00422"/>00422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00423"/>00423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TriggerUsageWarningDone&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00424"/>00424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.Log(<emphasis role="stringliteral">&quot;PhotonAnimatorView:&#32;When&#32;using&#32;triggers,&#32;make&#32;sure&#32;this&#32;component&#32;is&#32;last&#32;in&#32;the&#32;stack.\n&quot;</emphasis>&#32;+
<anchor xml:id="__photon_animator_view_8cs_source_1l00425"/>00425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;If&#32;you&#32;still&#32;experience&#32;issues,&#32;implement&#32;triggers&#32;as&#32;a&#32;regular&#32;RPC&#32;\n&quot;</emphasis>&#32;+
<anchor xml:id="__photon_animator_view_8cs_source_1l00426"/>00426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;or&#32;in&#32;custom&#32;IPunObservable&#32;component&#32;instead&quot;</emphasis>,<emphasis role="keyword">this</emphasis>);
<anchor xml:id="__photon_animator_view_8cs_source_1l00427"/>00427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__photon_animator_view_8cs_source_1l00428"/>00428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00429"/>00429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;here&#32;we&#32;can&apos;t&#32;rely&#32;on&#32;the&#32;current&#32;real&#32;state&#32;of&#32;the&#32;trigger,&#32;we&#32;might&#32;have&#32;missed&#32;its&#32;raise</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00430"/>00430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream.SendNext(this.m_raisedDiscreteTriggersCache.Contains(parameter.Name));
<anchor xml:id="__photon_animator_view_8cs_source_1l00431"/>00431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00432"/>00432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00433"/>00433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00434"/>00434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00435"/>00435 
<anchor xml:id="__photon_animator_view_8cs_source_1l00436"/>00436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;reset&#32;the&#32;cache,&#32;we&apos;ve&#32;synchronized.</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00437"/>00437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.m_raisedDiscreteTriggersCache.Clear();
<anchor xml:id="__photon_animator_view_8cs_source_1l00438"/>00438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00439"/>00439 
<anchor xml:id="__photon_animator_view_8cs_source_1l00440"/>00440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;DeserializeDataDiscretly(PhotonStream&#32;stream)
<anchor xml:id="__photon_animator_view_8cs_source_1l00441"/>00441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00442"/>00442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this.m_SynchronizeLayers.Count;&#32;++i)
<anchor xml:id="__photon_animator_view_8cs_source_1l00443"/>00443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00444"/>00444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.m_SynchronizeLayers[i].<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a05e9d38ae6fbdd540d1c60b3306abb91">SynchronizeType</link>&#32;==&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a05e9d38ae6fbdd540d1c60b3306abb91">SynchronizeType</link>.Discrete)
<anchor xml:id="__photon_animator_view_8cs_source_1l00445"/>00445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00446"/>00446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.m_Animator.SetLayerWeight(this.m_SynchronizeLayers[i].LayerIndex,&#32;(<emphasis role="keywordtype">float</emphasis>)&#32;stream.ReceiveNext());
<anchor xml:id="__photon_animator_view_8cs_source_1l00447"/>00447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00448"/>00448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00449"/>00449 
<anchor xml:id="__photon_animator_view_8cs_source_1l00450"/>00450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this.m_SynchronizeParameters.Count;&#32;++i)
<anchor xml:id="__photon_animator_view_8cs_source_1l00451"/>00451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00452"/>00452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SynchronizedParameter&#32;parameter&#32;=&#32;this.m_SynchronizeParameters[i];
<anchor xml:id="__photon_animator_view_8cs_source_1l00453"/>00453 
<anchor xml:id="__photon_animator_view_8cs_source_1l00454"/>00454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parameter.SynchronizeType&#32;==&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a05e9d38ae6fbdd540d1c60b3306abb91">SynchronizeType</link>.Discrete)
<anchor xml:id="__photon_animator_view_8cs_source_1l00455"/>00455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00456"/>00456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(parameter.Type)
<anchor xml:id="__photon_animator_view_8cs_source_1l00457"/>00457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00458"/>00458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1accc0e58df5f078b7d67ae8ac64c511a0">ParameterType</link>.Bool:
<anchor xml:id="__photon_animator_view_8cs_source_1l00459"/>00459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stream.PeekNext()&#32;is&#32;<emphasis role="keywordtype">bool</emphasis>&#32;==&#32;<emphasis role="keyword">false</emphasis>)
<anchor xml:id="__photon_animator_view_8cs_source_1l00460"/>00460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00461"/>00461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00462"/>00462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00463"/>00463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.m_Animator.SetBool(parameter.Name,&#32;(<emphasis role="keywordtype">bool</emphasis>)&#32;stream.ReceiveNext());
<anchor xml:id="__photon_animator_view_8cs_source_1l00464"/>00464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00465"/>00465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1accc0e58df5f078b7d67ae8ac64c511a0">ParameterType</link>.Float:
<anchor xml:id="__photon_animator_view_8cs_source_1l00466"/>00466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stream.PeekNext()&#32;is&#32;<emphasis role="keywordtype">float</emphasis>&#32;==&#32;<emphasis role="keyword">false</emphasis>)
<anchor xml:id="__photon_animator_view_8cs_source_1l00467"/>00467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00468"/>00468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00469"/>00469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00470"/>00470 
<anchor xml:id="__photon_animator_view_8cs_source_1l00471"/>00471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.m_Animator.SetFloat(parameter.Name,&#32;(<emphasis role="keywordtype">float</emphasis>)&#32;stream.ReceiveNext());
<anchor xml:id="__photon_animator_view_8cs_source_1l00472"/>00472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00473"/>00473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1accc0e58df5f078b7d67ae8ac64c511a0">ParameterType</link>.Int:
<anchor xml:id="__photon_animator_view_8cs_source_1l00474"/>00474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stream.PeekNext()&#32;is&#32;<emphasis role="keywordtype">int</emphasis>&#32;==&#32;<emphasis role="keyword">false</emphasis>)
<anchor xml:id="__photon_animator_view_8cs_source_1l00475"/>00475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00476"/>00476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00477"/>00477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00478"/>00478 
<anchor xml:id="__photon_animator_view_8cs_source_1l00479"/>00479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.m_Animator.SetInteger(parameter.Name,&#32;(<emphasis role="keywordtype">int</emphasis>)&#32;stream.ReceiveNext());
<anchor xml:id="__photon_animator_view_8cs_source_1l00480"/>00480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00481"/>00481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1accc0e58df5f078b7d67ae8ac64c511a0">ParameterType</link>.Trigger:
<anchor xml:id="__photon_animator_view_8cs_source_1l00482"/>00482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stream.PeekNext()&#32;is&#32;<emphasis role="keywordtype">bool</emphasis>&#32;==&#32;<emphasis role="keyword">false</emphasis>)
<anchor xml:id="__photon_animator_view_8cs_source_1l00483"/>00483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00484"/>00484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00485"/>00485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00486"/>00486 
<anchor xml:id="__photon_animator_view_8cs_source_1l00487"/>00487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((<emphasis role="keywordtype">bool</emphasis>)&#32;stream.ReceiveNext())
<anchor xml:id="__photon_animator_view_8cs_source_1l00488"/>00488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00489"/>00489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.m_Animator.SetTrigger(parameter.Name);
<anchor xml:id="__photon_animator_view_8cs_source_1l00490"/>00490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00491"/>00491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00492"/>00492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00493"/>00493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00494"/>00494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00495"/>00495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00496"/>00496 
<anchor xml:id="__photon_animator_view_8cs_source_1l00497"/>00497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;SerializeSynchronizationTypeState(PhotonStream&#32;stream)
<anchor xml:id="__photon_animator_view_8cs_source_1l00498"/>00498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00499"/>00499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;states&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>[this.m_SynchronizeLayers.Count&#32;+&#32;this.m_SynchronizeParameters.Count];
<anchor xml:id="__photon_animator_view_8cs_source_1l00500"/>00500 
<anchor xml:id="__photon_animator_view_8cs_source_1l00501"/>00501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this.m_SynchronizeLayers.Count;&#32;++i)
<anchor xml:id="__photon_animator_view_8cs_source_1l00502"/>00502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00503"/>00503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;states[i]&#32;=&#32;(byte)&#32;this.m_SynchronizeLayers[i].<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a05e9d38ae6fbdd540d1c60b3306abb91">SynchronizeType</link>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00504"/>00504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00505"/>00505 
<anchor xml:id="__photon_animator_view_8cs_source_1l00506"/>00506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this.m_SynchronizeParameters.Count;&#32;++i)
<anchor xml:id="__photon_animator_view_8cs_source_1l00507"/>00507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00508"/>00508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;states[this.m_SynchronizeLayers.Count&#32;+&#32;i]&#32;=&#32;(byte)&#32;this.m_SynchronizeParameters[i].<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a05e9d38ae6fbdd540d1c60b3306abb91">SynchronizeType</link>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00509"/>00509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00510"/>00510 
<anchor xml:id="__photon_animator_view_8cs_source_1l00511"/>00511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream.SendNext(states);
<anchor xml:id="__photon_animator_view_8cs_source_1l00512"/>00512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00513"/>00513 
<anchor xml:id="__photon_animator_view_8cs_source_1l00514"/>00514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;DeserializeSynchronizationTypeState(PhotonStream&#32;stream)
<anchor xml:id="__photon_animator_view_8cs_source_1l00515"/>00515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00516"/>00516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;state&#32;=&#32;(<emphasis role="keywordtype">byte</emphasis>[])&#32;stream.ReceiveNext();
<anchor xml:id="__photon_animator_view_8cs_source_1l00517"/>00517 
<anchor xml:id="__photon_animator_view_8cs_source_1l00518"/>00518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this.m_SynchronizeLayers.Count;&#32;++i)
<anchor xml:id="__photon_animator_view_8cs_source_1l00519"/>00519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00520"/>00520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.m_SynchronizeLayers[i].SynchronizeType&#32;=&#32;(<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a05e9d38ae6fbdd540d1c60b3306abb91">SynchronizeType</link>)&#32;state[i];
<anchor xml:id="__photon_animator_view_8cs_source_1l00521"/>00521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00522"/>00522 
<anchor xml:id="__photon_animator_view_8cs_source_1l00523"/>00523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;this.m_SynchronizeParameters.Count;&#32;++i)
<anchor xml:id="__photon_animator_view_8cs_source_1l00524"/>00524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00525"/>00525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.m_SynchronizeParameters[i].SynchronizeType&#32;=&#32;(<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a05e9d38ae6fbdd540d1c60b3306abb91">SynchronizeType</link>)&#32;state[this.m_SynchronizeLayers.Count&#32;+&#32;i];
<anchor xml:id="__photon_animator_view_8cs_source_1l00526"/>00526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00527"/>00527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00528"/>00528 
<anchor xml:id="__photon_animator_view_8cs_source_1l00529"/><link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a35a3d7a2cff101c804c6e71ea0df1a32">00529</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a35a3d7a2cff101c804c6e71ea0df1a32">OnPhotonSerializeView</link>(<link linkend="_class_photon_1_1_pun_1_1_photon_stream">PhotonStream</link>&#32;stream,&#32;<link linkend="_struct_photon_1_1_pun_1_1_photon_message_info">PhotonMessageInfo</link>&#32;info)
<anchor xml:id="__photon_animator_view_8cs_source_1l00530"/>00530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00531"/>00531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.m_Animator&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_animator_view_8cs_source_1l00532"/>00532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00533"/>00533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00534"/>00534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00535"/>00535 
<anchor xml:id="__photon_animator_view_8cs_source_1l00536"/>00536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stream.<link linkend="_class_photon_1_1_pun_1_1_photon_stream_1afb5b9a03ecf814332d7ea282987e3fdc">IsWriting</link>&#32;==&#32;<emphasis role="keyword">true</emphasis>)
<anchor xml:id="__photon_animator_view_8cs_source_1l00537"/>00537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00538"/>00538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.m_WasSynchronizeTypeChanged&#32;==&#32;<emphasis role="keyword">true</emphasis>)
<anchor xml:id="__photon_animator_view_8cs_source_1l00539"/>00539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00540"/>00540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.m_StreamQueue.<link linkend="_class_photon_1_1_pun_1_1_photon_stream_queue_1a065ec40dbb214e468ede584377910e66">Reset</link>();
<anchor xml:id="__photon_animator_view_8cs_source_1l00541"/>00541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.SerializeSynchronizationTypeState(stream);
<anchor xml:id="__photon_animator_view_8cs_source_1l00542"/>00542 
<anchor xml:id="__photon_animator_view_8cs_source_1l00543"/>00543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.m_WasSynchronizeTypeChanged&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__photon_animator_view_8cs_source_1l00544"/>00544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00545"/>00545 
<anchor xml:id="__photon_animator_view_8cs_source_1l00546"/>00546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.m_StreamQueue.<link linkend="_class_photon_1_1_pun_1_1_photon_stream_queue_1aa894acf4883faf5806f75f4d757022a4">Serialize</link>(stream);
<anchor xml:id="__photon_animator_view_8cs_source_1l00547"/>00547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.SerializeDataDiscretly(stream);
<anchor xml:id="__photon_animator_view_8cs_source_1l00548"/>00548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00549"/>00549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00550"/>00550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00551"/>00551 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;PHOTON_DEVELOP</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00552"/>00552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;ReceivingSender&#32;!=&#32;<emphasis role="keyword">null</emphasis>&#32;)
<anchor xml:id="__photon_animator_view_8cs_source_1l00553"/>00553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00554"/>00554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ReceivingSender.<link linkend="_class_photon_1_1_pun_1_1_photon_animator_view_1a35a3d7a2cff101c804c6e71ea0df1a32">OnPhotonSerializeView</link>(&#32;stream,&#32;info&#32;);
<anchor xml:id="__photon_animator_view_8cs_source_1l00555"/>00555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00556"/>00556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00557"/>00557 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00558"/>00558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00559"/>00559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stream.<link linkend="_class_photon_1_1_pun_1_1_photon_stream_1a7e69f29f517f8ed3148d8dccef982ea6">PeekNext</link>()&#32;is&#32;<emphasis role="keywordtype">byte</emphasis>[])
<anchor xml:id="__photon_animator_view_8cs_source_1l00560"/>00560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_animator_view_8cs_source_1l00561"/>00561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.DeserializeSynchronizationTypeState(stream);
<anchor xml:id="__photon_animator_view_8cs_source_1l00562"/>00562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00563"/>00563 
<anchor xml:id="__photon_animator_view_8cs_source_1l00564"/>00564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.m_StreamQueue.<link linkend="_class_photon_1_1_pun_1_1_photon_stream_queue_1a576b08634a4833827b019071ddfefe09">Deserialize</link>(stream);
<anchor xml:id="__photon_animator_view_8cs_source_1l00565"/>00565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.DeserializeDataDiscretly(stream);
<anchor xml:id="__photon_animator_view_8cs_source_1l00566"/>00566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00567"/>00567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00568"/>00568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00569"/>00569 
<anchor xml:id="__photon_animator_view_8cs_source_1l00570"/>00570 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__photon_animator_view_8cs_source_1l00571"/>00571 &#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_animator_view_8cs_source_1l00572"/>00572 }
</programlisting></section>
