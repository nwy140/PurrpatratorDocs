<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__photon_network_part_8cs_source" xml:lang="en-US">
<title>PhotonNetworkPart.cs</title>
<indexterm><primary>C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUnityNetworking/Code/PhotonNetworkPart.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__photon_network_part_8cs_source_1l00001"/>00001 <emphasis role="comment">//&#32;----------------------------------------------------------------------------</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00002"/>00002 <emphasis role="comment">//&#32;&lt;copyright&#32;file=&quot;PhotonNetworkPart.cs&quot;&#32;company=&quot;Exit&#32;Games&#32;GmbH&quot;&gt;</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00003"/>00003 <emphasis role="comment">//&#32;&#32;&#32;PhotonNetwork&#32;Framework&#32;for&#32;Unity&#32;-&#32;Copyright&#32;(C)&#32;2018&#32;Exit&#32;Games&#32;GmbH</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00004"/>00004 <emphasis role="comment">//&#32;&lt;/copyright&gt;</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00005"/>00005 <emphasis role="comment">//&#32;&lt;summary&gt;</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00006"/>00006 <emphasis role="comment">//&#32;PhotonNetwork&#32;is&#32;the&#32;central&#32;class&#32;of&#32;the&#32;PUN&#32;package.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00007"/>00007 <emphasis role="comment">//&#32;&lt;/summary&gt;</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00008"/>00008 <emphasis role="comment">//&#32;&lt;author&gt;developer@exitgames.com&lt;/author&gt;</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00009"/>00009 <emphasis role="comment">//&#32;----------------------------------------------------------------------------</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00010"/>00010 
<anchor xml:id="__photon_network_part_8cs_source_1l00011"/>00011 
<anchor xml:id="__photon_network_part_8cs_source_1l00012"/>00012 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_photon_1_1_pun">Photon.Pun</link>
<anchor xml:id="__photon_network_part_8cs_source_1l00013"/>00013 {
<anchor xml:id="__photon_network_part_8cs_source_1l00014"/>00014 &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;System;
<anchor xml:id="__photon_network_part_8cs_source_1l00015"/>00015 &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;System.<link linkend="_namespace_system_1_1_linq">Linq</link>;
<anchor xml:id="__photon_network_part_8cs_source_1l00016"/>00016 &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;UnityEngine;
<anchor xml:id="__photon_network_part_8cs_source_1l00017"/>00017 &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;System.Collections;
<anchor xml:id="__photon_network_part_8cs_source_1l00018"/>00018 &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;System.Collections.Generic;
<anchor xml:id="__photon_network_part_8cs_source_1l00019"/>00019 &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;System.Reflection;
<anchor xml:id="__photon_network_part_8cs_source_1l00020"/>00020 
<anchor xml:id="__photon_network_part_8cs_source_1l00021"/>00021 &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;ExitGames.Client.Photon;
<anchor xml:id="__photon_network_part_8cs_source_1l00022"/>00022 &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_photon">Photon</link>.<link linkend="_namespace_photon_1_1_realtime">Realtime</link>;
<anchor xml:id="__photon_network_part_8cs_source_1l00023"/>00023 
<anchor xml:id="__photon_network_part_8cs_source_1l00024"/>00024 &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;<link linkend="__player_controller_8cs_1afa613ef589c02dbd94acc273b62cdcfd">Hashtable</link>&#32;=&#32;ExitGames.Client.<link linkend="_namespace_exit_games_1_1_client_1_1_photon">Photon</link>.Hashtable;
<anchor xml:id="__photon_network_part_8cs_source_1l00025"/><link linkend="_namespace_photon_1_1_pun_1a5262cc10d8760dc9f60908f7fb91397e">00025</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1a5262cc10d8760dc9f60908f7fb91397e">SupportClassPun</link>&#32;=&#32;ExitGames.Client.Photon.SupportClass;
<anchor xml:id="__photon_network_part_8cs_source_1l00026"/>00026 
<anchor xml:id="__photon_network_part_8cs_source_1l00027"/>00027 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">partial&#32;class&#32;</emphasis><link linkend="_class_photon_1_1_pun_1_1_photon_network">PhotonNetwork</link>
<anchor xml:id="__photon_network_part_8cs_source_1l00028"/>00028 &#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;HashSet&lt;byte&gt;&#32;allowedReceivingGroups&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;HashSet&lt;byte&gt;();
<anchor xml:id="__photon_network_part_8cs_source_1l00030"/>00030 
<anchor xml:id="__photon_network_part_8cs_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;HashSet&lt;byte&gt;&#32;blockedSendingGroups&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;HashSet&lt;byte&gt;();
<anchor xml:id="__photon_network_part_8cs_source_1l00032"/>00032 
<anchor xml:id="__photon_network_part_8cs_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;HashSet&lt;PhotonView&gt;&#32;reusablePVHashset&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;HashSet&lt;PhotonView&gt;();
<anchor xml:id="__photon_network_part_8cs_source_1l00034"/>00034 
<anchor xml:id="__photon_network_part_8cs_source_1l00035"/><link linkend="_class_photon_1_1_pun_1_1_photon_network_1a3e7bea13a0673f4fb5d759e483a49ef2">00035</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a3e7bea13a0673f4fb5d759e483a49ef2">SetPlayerCustomProperties</link>(System.Collections.Hashtable&#32;hash)
<anchor xml:id="__photon_network_part_8cs_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;NotImplementedException();
<anchor xml:id="__photon_network_part_8cs_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00039"/>00039 
<anchor xml:id="__photon_network_part_8cs_source_1l00040"/>00040 
<anchor xml:id="__photon_network_part_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;NonAllocDictionary&lt;int,&#32;PhotonView&gt;&#32;photonViewList&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;NonAllocDictionary&lt;int,&#32;PhotonView&gt;();
<anchor xml:id="__photon_network_part_8cs_source_1l00045"/>00045 
<anchor xml:id="__photon_network_part_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[System.Obsolete(<emphasis role="stringliteral">&quot;Use&#32;PhotonViewCollection&#32;instead&#32;for&#32;an&#32;iterable&#32;collection&#32;of&#32;current&#32;photonViews.&quot;</emphasis>)]
<anchor xml:id="__photon_network_part_8cs_source_1l00054"/><link linkend="_class_photon_1_1_pun_1_1_photon_network_1a8f31f2a062373da798041e19084af804">00054</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_view">PhotonView</link>[]&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a8f31f2a062373da798041e19084af804">PhotonViews</link>
<anchor xml:id="__photon_network_part_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;views&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_view">PhotonView</link>[photonViewList.Count];
<anchor xml:id="__photon_network_part_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;idx&#32;=&#32;0;
<anchor xml:id="__photon_network_part_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;v&#32;<emphasis role="keywordflow">in</emphasis>&#32;photonViewList.Values)
<anchor xml:id="__photon_network_part_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;views[idx]&#32;=&#32;v;
<anchor xml:id="__photon_network_part_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;idx++;
<anchor xml:id="__photon_network_part_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;views;
<anchor xml:id="__photon_network_part_8cs_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00068"/>00068 
<anchor xml:id="__photon_network_part_8cs_source_1l00076"/><link linkend="_class_photon_1_1_pun_1_1_photon_network_1ad1d644efe090df91db9623e4b5293c7d">00076</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;NonAllocDictionary&lt;int,&#32;PhotonView&gt;.ValueIterator&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1ad1d644efe090df91db9623e4b5293c7d">PhotonViewCollection</link>
<anchor xml:id="__photon_network_part_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;photonViewList.Values;
<anchor xml:id="__photon_network_part_8cs_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00083"/>00083 
<anchor xml:id="__photon_network_part_8cs_source_1l00084"/><link linkend="_class_photon_1_1_pun_1_1_photon_network_1aa32dbfcd3525505b8fb104d87bb52098">00084</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1aa32dbfcd3525505b8fb104d87bb52098">ViewCount</link>
<anchor xml:id="__photon_network_part_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;photonViewList.Count;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00088"/>00088 
<anchor xml:id="__photon_network_part_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">event</emphasis>&#32;Action&lt;PhotonView,&#32;Player&gt;&#32;OnOwnershipRequestEv;
<anchor xml:id="__photon_network_part_8cs_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">event</emphasis>&#32;Action&lt;PhotonView,&#32;Player&gt;&#32;OnOwnershipTransferedEv;
<anchor xml:id="__photon_network_part_8cs_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">event</emphasis>&#32;Action&lt;PhotonView,&#32;Player&gt;&#32;OnOwnershipTransferFailedEv;
<anchor xml:id="__photon_network_part_8cs_source_1l00095"/>00095 
<anchor xml:id="__photon_network_part_8cs_source_1l00106"/><link linkend="_class_photon_1_1_pun_1_1_photon_network_1ab6df1ed60be8a3f494683b8faa28ee4a">00106</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1ab6df1ed60be8a3f494683b8faa28ee4a">AddCallbackTarget</link>(<emphasis role="keywordtype">object</emphasis>&#32;target)
<anchor xml:id="__photon_network_part_8cs_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(target&#32;is&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_view">PhotonView</link>)
<anchor xml:id="__photon_network_part_8cs_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00112"/>00112 
<anchor xml:id="__photon_network_part_8cs_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_interface_photon_1_1_pun_1_1_i_pun_ownership_callbacks">IPunOwnershipCallbacks</link>&#32;punOwnershipCallback&#32;=&#32;target&#32;as&#32;<link linkend="_interface_photon_1_1_pun_1_1_i_pun_ownership_callbacks">IPunOwnershipCallbacks</link>;
<anchor xml:id="__photon_network_part_8cs_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(punOwnershipCallback&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OnOwnershipRequestEv&#32;+=&#32;punOwnershipCallback.<link linkend="_interface_photon_1_1_pun_1_1_i_pun_ownership_callbacks_1a20d83cdb1516ef38cf1506181b067477">OnOwnershipRequest</link>;
<anchor xml:id="__photon_network_part_8cs_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OnOwnershipTransferedEv&#32;+=&#32;punOwnershipCallback.<link linkend="_interface_photon_1_1_pun_1_1_i_pun_ownership_callbacks_1ac538522c1aba77f1cc6475ca05787b0e">OnOwnershipTransfered</link>;
<anchor xml:id="__photon_network_part_8cs_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OnOwnershipTransferFailedEv&#32;+=&#32;punOwnershipCallback.<link linkend="_interface_photon_1_1_pun_1_1_i_pun_ownership_callbacks_1a9057eaa2e6375e4f12ddd06adeb044b7">OnOwnershipTransferFailed</link>;
<anchor xml:id="__photon_network_part_8cs_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00120"/>00120 
<anchor xml:id="__photon_network_part_8cs_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a312fc99165f039e31b65bebbafdf6736">NetworkingClient</link>.<link linkend="_class_photon_1_1_realtime_1_1_load_balancing_client_1a7eccc149073296a316965f2ce96d08d3">AddCallbackTarget</link>(target);
<anchor xml:id="__photon_network_part_8cs_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00123"/>00123 
<anchor xml:id="__photon_network_part_8cs_source_1l00124"/>00124 
<anchor xml:id="__photon_network_part_8cs_source_1l00135"/><link linkend="_class_photon_1_1_pun_1_1_photon_network_1ab9dccde85539981763815278d55f5e27">00135</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1ab9dccde85539981763815278d55f5e27">RemoveCallbackTarget</link>(<emphasis role="keywordtype">object</emphasis>&#32;target)
<anchor xml:id="__photon_network_part_8cs_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(target&#32;is&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_view">PhotonView</link>&#32;||&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a312fc99165f039e31b65bebbafdf6736">NetworkingClient</link>&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00141"/>00141 
<anchor xml:id="__photon_network_part_8cs_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_interface_photon_1_1_pun_1_1_i_pun_ownership_callbacks">IPunOwnershipCallbacks</link>&#32;punOwnershipCallback&#32;=&#32;target&#32;as&#32;<link linkend="_interface_photon_1_1_pun_1_1_i_pun_ownership_callbacks">IPunOwnershipCallbacks</link>;
<anchor xml:id="__photon_network_part_8cs_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(punOwnershipCallback&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OnOwnershipRequestEv&#32;-=&#32;punOwnershipCallback.<link linkend="_interface_photon_1_1_pun_1_1_i_pun_ownership_callbacks_1a20d83cdb1516ef38cf1506181b067477">OnOwnershipRequest</link>;
<anchor xml:id="__photon_network_part_8cs_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OnOwnershipTransferedEv&#32;-=&#32;punOwnershipCallback.<link linkend="_interface_photon_1_1_pun_1_1_i_pun_ownership_callbacks_1ac538522c1aba77f1cc6475ca05787b0e">OnOwnershipTransfered</link>;
<anchor xml:id="__photon_network_part_8cs_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OnOwnershipTransferFailedEv&#32;-=&#32;punOwnershipCallback.<link linkend="_interface_photon_1_1_pun_1_1_i_pun_ownership_callbacks_1a9057eaa2e6375e4f12ddd06adeb044b7">OnOwnershipTransferFailed</link>;
<anchor xml:id="__photon_network_part_8cs_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00149"/>00149 
<anchor xml:id="__photon_network_part_8cs_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a312fc99165f039e31b65bebbafdf6736">NetworkingClient</link>.<link linkend="_class_photon_1_1_realtime_1_1_load_balancing_client_1a2b479687e6c8f0d73661447c91e41a88">RemoveCallbackTarget</link>(target);
<anchor xml:id="__photon_network_part_8cs_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00152"/>00152 
<anchor xml:id="__photon_network_part_8cs_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">internal</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;CallbacksToString()
<anchor xml:id="__photon_network_part_8cs_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;x&#32;=&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a312fc99165f039e31b65bebbafdf6736">NetworkingClient</link>.<link linkend="_class_photon_1_1_realtime_1_1_load_balancing_client_1aff6dd3b6412da73a93e010cb8eaede1f">ConnectionCallbackTargets</link>.Select(m&#32;=&gt;&#32;m.ToString()).ToArray();
<anchor xml:id="__photon_network_part_8cs_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>.Join(<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>,&#32;x);
<anchor xml:id="__photon_network_part_8cs_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00158"/>00158 
<anchor xml:id="__photon_network_part_8cs_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">internal</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>&#32;currentLevelPrefix&#32;=&#32;0;
<anchor xml:id="__photon_network_part_8cs_source_1l00160"/>00160 
<anchor xml:id="__photon_network_part_8cs_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">internal</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;loadingLevelAndPausedNetwork&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00163"/>00163 
<anchor xml:id="__photon_network_part_8cs_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">internal</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;CurrentSceneProperty&#32;=&#32;<emphasis role="stringliteral">&quot;curScn&quot;</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">internal</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;CurrentScenePropertyLoadAsync&#32;=&#32;<emphasis role="stringliteral">&quot;curScnLa&quot;</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00167"/>00167 
<anchor xml:id="__photon_network_part_8cs_source_1l00168"/>00168 
<anchor xml:id="__photon_network_part_8cs_source_1l00177"/><link linkend="_class_photon_1_1_pun_1_1_photon_network_1ab4dd61936d6f0060d7317607076071bf">00177</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_interface_photon_1_1_pun_1_1_i_pun_prefab_pool">IPunPrefabPool</link>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1ab4dd61936d6f0060d7317607076071bf">PrefabPool</link>
<anchor xml:id="__photon_network_part_8cs_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;prefabPool;
<anchor xml:id="__photon_network_part_8cs_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">set</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_photon_1_1_pun_1ac6a6ed4f0d7a7522026d8cd2beec9671">Debug</link>.LogWarning(<emphasis role="stringliteral">&quot;PhotonNetwork.PrefabPool&#32;cannot&#32;be&#32;set&#32;to&#32;null.&#32;It&#32;will&#32;default&#32;back&#32;to&#32;using&#32;the&#32;&apos;DefaultPool&apos;&#32;Pool&quot;</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prefabPool&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_default_pool">DefaultPool</link>();
<anchor xml:id="__photon_network_part_8cs_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prefabPool&#32;=&#32;value;
<anchor xml:id="__photon_network_part_8cs_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00196"/>00196 
<anchor xml:id="__photon_network_part_8cs_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_interface_photon_1_1_pun_1_1_i_pun_prefab_pool">IPunPrefabPool</link>&#32;prefabPool;
<anchor xml:id="__photon_network_part_8cs_source_1l00198"/>00198 
<anchor xml:id="__photon_network_part_8cs_source_1l00209"/><link linkend="_class_photon_1_1_pun_1_1_photon_network_1a353dde6242afc859001250fe1ed25ae4">00209</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a353dde6242afc859001250fe1ed25ae4">UseRpcMonoBehaviourCache</link>;
<anchor xml:id="__photon_network_part_8cs_source_1l00210"/>00210 
<anchor xml:id="__photon_network_part_8cs_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;readonly&#32;Dictionary&lt;Type,&#32;List&lt;MethodInfo&gt;&gt;&#32;monoRPCMethodsCache&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Dictionary&lt;Type,&#32;List&lt;MethodInfo&gt;&gt;();
<anchor xml:id="__photon_network_part_8cs_source_1l00212"/>00212 
<anchor xml:id="__photon_network_part_8cs_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Dictionary&lt;string,&#32;int&gt;&#32;rpcShortcuts;&#32;&#32;<emphasis role="comment">//&#32;lookup&#32;&quot;table&quot;&#32;for&#32;the&#32;index&#32;(shortcut)&#32;of&#32;an&#32;RPC&#32;name</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00214"/>00214 
<anchor xml:id="__photon_network_part_8cs_source_1l00222"/><link linkend="_class_photon_1_1_pun_1_1_photon_network_1a7f6405afdd368f941f90aaf85a4bfc0e">00222</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a7f6405afdd368f941f90aaf85a4bfc0e">RunRpcCoroutines</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00223"/>00223 
<anchor xml:id="__photon_network_part_8cs_source_1l00224"/>00224 
<anchor xml:id="__photon_network_part_8cs_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;asynchronous&#32;network&#32;synched&#32;loading.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;AsyncOperation&#32;_AsyncLevelLoadingOperation;
<anchor xml:id="__photon_network_part_8cs_source_1l00227"/>00227 
<anchor xml:id="__photon_network_part_8cs_source_1l00228"/>00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;_levelLoadingProgress&#32;=&#32;0f;
<anchor xml:id="__photon_network_part_8cs_source_1l00229"/>00229 
<anchor xml:id="__photon_network_part_8cs_source_1l00239"/><link linkend="_class_photon_1_1_pun_1_1_photon_network_1a12a1a136d0ad40dad66af5373a21a222">00239</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a12a1a136d0ad40dad66af5373a21a222">LevelLoadingProgress</link>
<anchor xml:id="__photon_network_part_8cs_source_1l00240"/>00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00241"/>00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_AsyncLevelLoadingOperation&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00245"/>00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_levelLoadingProgress&#32;=&#32;_AsyncLevelLoadingOperation.progress;
<anchor xml:id="__photon_network_part_8cs_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_levelLoadingProgress&#32;&gt;&#32;0f)
<anchor xml:id="__photon_network_part_8cs_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_levelLoadingProgress&#32;=&#32;1f;
<anchor xml:id="__photon_network_part_8cs_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00251"/>00251 
<anchor xml:id="__photon_network_part_8cs_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_levelLoadingProgress;
<anchor xml:id="__photon_network_part_8cs_source_1l00253"/>00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00254"/>00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00255"/>00255 
<anchor xml:id="__photon_network_part_8cs_source_1l00262"/>00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;LeftRoomCleanup()
<anchor xml:id="__photon_network_part_8cs_source_1l00263"/>00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Clean&#32;up&#32;if&#32;we&#32;were&#32;loading&#32;asynchronously.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_AsyncLevelLoadingOperation&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_AsyncLevelLoadingOperation.allowSceneActivation&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_AsyncLevelLoadingOperation&#32;=&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00269"/>00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00270"/>00270 
<anchor xml:id="__photon_network_part_8cs_source_1l00271"/>00271 
<anchor xml:id="__photon_network_part_8cs_source_1l00272"/>00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;wasInRoom&#32;=&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a312fc99165f039e31b65bebbafdf6736">NetworkingClient</link>.<link linkend="_class_photon_1_1_realtime_1_1_load_balancing_client_1a5b75141df981bebc4f7e1f0edb6a399b">CurrentRoom</link>&#32;!=&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00273"/>00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;when&#32;leaving&#32;a&#32;room,&#32;we&#32;clean&#32;up&#32;depending&#32;on&#32;that&#32;room&apos;s&#32;settings.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;autoCleanupSettingOfRoom&#32;=&#32;wasInRoom&#32;&amp;&amp;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a5339e137c6b1461d090f658012ee62c7">CurrentRoom</link>.<link linkend="_class_photon_1_1_realtime_1_1_room_1a71478a698297b122b5f29098fe6399c5">AutoCleanUp</link>;
<anchor xml:id="__photon_network_part_8cs_source_1l00275"/>00275 
<anchor xml:id="__photon_network_part_8cs_source_1l00276"/>00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allowedReceivingGroups&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;HashSet&lt;byte&gt;();
<anchor xml:id="__photon_network_part_8cs_source_1l00277"/>00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;blockedSendingGroups&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;HashSet&lt;byte&gt;();
<anchor xml:id="__photon_network_part_8cs_source_1l00278"/>00278 
<anchor xml:id="__photon_network_part_8cs_source_1l00279"/>00279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Cleanup&#32;all&#32;network&#32;objects&#32;(all&#32;spawned&#32;PhotonViews,&#32;local&#32;and&#32;remote)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00280"/>00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(autoCleanupSettingOfRoom&#32;||&#32;offlineModeRoom&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l00281"/>00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LocalCleanupAnythingInstantiated(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l00283"/>00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00285"/>00285 
<anchor xml:id="__photon_network_part_8cs_source_1l00286"/>00286 
<anchor xml:id="__photon_network_part_8cs_source_1l00290"/>00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;This&#32;method&#32;name&#32;no&#32;longer&#32;matches&#32;is&#32;function.&#32;It&#32;also&#32;resets&#32;room&#32;object&apos;s&#32;views.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00291"/>00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">internal</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;LocalCleanupAnythingInstantiated(<emphasis role="keywordtype">bool</emphasis>&#32;destroyInstantiatedGameObjects)
<anchor xml:id="__photon_network_part_8cs_source_1l00292"/>00292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//if&#32;(tempInstantiationData.Count&#32;&gt;&#32;0)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00294"/>00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//{</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;Debug.LogWarning(&quot;It&#32;seems&#32;some&#32;instantiation&#32;is&#32;not&#32;completed,&#32;as&#32;instantiation&#32;data&#32;is&#32;used.&#32;You&#32;should&#32;make&#32;sure&#32;instantiations&#32;are&#32;paused&#32;when&#32;calling&#32;this&#32;method.&#32;Cleaning&#32;now,&#32;despite&#32;&quot;);</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//}</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00297"/>00297 
<anchor xml:id="__photon_network_part_8cs_source_1l00298"/>00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Destroy&#32;GO&apos;s&#32;(if&#32;we&#32;should)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(destroyInstantiatedGameObjects)
<anchor xml:id="__photon_network_part_8cs_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00301"/>00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Fill&#32;list&#32;with&#32;Instantiated&#32;objects</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00302"/>00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HashSet&lt;GameObject&gt;&#32;instantiatedGos&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;HashSet&lt;GameObject&gt;();
<anchor xml:id="__photon_network_part_8cs_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(PhotonView&#32;view&#32;<emphasis role="keywordflow">in</emphasis>&#32;photonViewList.Values)
<anchor xml:id="__photon_network_part_8cs_source_1l00304"/>00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00305"/>00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(view.isRuntimeInstantiated)
<anchor xml:id="__photon_network_part_8cs_source_1l00306"/>00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00307"/>00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;instantiatedGos.Add(view.gameObject);&#32;<emphasis role="comment">//&#32;HashSet&#32;keeps&#32;each&#32;object&#32;only&#32;once</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00308"/>00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00309"/>00309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;non-instantiated&#32;objects&#32;(scene&#32;objects)&#32;-&#32;reset&#32;the&#32;view</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00310"/>00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00311"/>00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00312"/>00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;view.ResetPhotonView(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00315"/>00315 
<anchor xml:id="__photon_network_part_8cs_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(GameObject&#32;go&#32;<emphasis role="keywordflow">in</emphasis>&#32;instantiatedGos)
<anchor xml:id="__photon_network_part_8cs_source_1l00317"/>00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00318"/>00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RemoveInstantiatedGO(go,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l00319"/>00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00320"/>00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00321"/>00321 
<anchor xml:id="__photon_network_part_8cs_source_1l00322"/>00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;photonViewList&#32;is&#32;cleared&#32;of&#32;anything&#32;instantiated&#32;(so&#32;scene&#32;items&#32;are&#32;left&#32;inside)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00323"/>00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;any&#32;other&#32;lists&#32;can&#32;be</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00324"/>00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.lastUsedViewSubId&#32;=&#32;0;
<anchor xml:id="__photon_network_part_8cs_source_1l00325"/>00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.lastUsedViewSubIdStatic&#32;=&#32;0;
<anchor xml:id="__photon_network_part_8cs_source_1l00326"/>00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00327"/>00327 
<anchor xml:id="__photon_network_part_8cs_source_1l00328"/>00328 
<anchor xml:id="__photon_network_part_8cs_source_1l00333"/>00333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;ResetPhotonViewsOnSerialize()
<anchor xml:id="__photon_network_part_8cs_source_1l00334"/>00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00335"/>00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(PhotonView&#32;photonView&#32;<emphasis role="keywordflow">in</emphasis>&#32;photonViewList.Values)
<anchor xml:id="__photon_network_part_8cs_source_1l00336"/>00336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00337"/>00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;photonView.lastOnSerializeDataSent&#32;=&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00338"/>00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00339"/>00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00340"/>00340 
<anchor xml:id="__photon_network_part_8cs_source_1l00341"/>00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;PHOTONVIEW/RPC&#32;related</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00342"/>00342 <emphasis role="preprocessor">#pragma&#32;warning&#32;disable&#32;0414</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00343"/>00343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;readonly&#32;Type&#32;typePunRPC&#32;=&#32;typeof(PunRPC);
<anchor xml:id="__photon_network_part_8cs_source_1l00344"/>00344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;readonly&#32;Type&#32;typePhotonMessageInfo&#32;=&#32;typeof(PhotonMessageInfo);
<anchor xml:id="__photon_network_part_8cs_source_1l00345"/>00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;readonly&#32;<emphasis role="keywordtype">object</emphasis>&#32;keyByteZero&#32;=&#32;(byte)0;
<anchor xml:id="__photon_network_part_8cs_source_1l00346"/>00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;readonly&#32;<emphasis role="keywordtype">object</emphasis>&#32;keyByteOne&#32;=&#32;(byte)1;
<anchor xml:id="__photon_network_part_8cs_source_1l00347"/>00347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;readonly&#32;<emphasis role="keywordtype">object</emphasis>&#32;keyByteTwo&#32;=&#32;(byte)2;
<anchor xml:id="__photon_network_part_8cs_source_1l00348"/>00348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;readonly&#32;<emphasis role="keywordtype">object</emphasis>&#32;keyByteThree&#32;=&#32;(byte)3;
<anchor xml:id="__photon_network_part_8cs_source_1l00349"/>00349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;readonly&#32;<emphasis role="keywordtype">object</emphasis>&#32;keyByteFour&#32;=&#32;(byte)4;
<anchor xml:id="__photon_network_part_8cs_source_1l00350"/>00350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;readonly&#32;<emphasis role="keywordtype">object</emphasis>&#32;keyByteFive&#32;=&#32;(byte)5;
<anchor xml:id="__photon_network_part_8cs_source_1l00351"/>00351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;readonly&#32;<emphasis role="keywordtype">object</emphasis>&#32;keyByteSix&#32;=&#32;(byte)6;
<anchor xml:id="__photon_network_part_8cs_source_1l00352"/>00352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;readonly&#32;<emphasis role="keywordtype">object</emphasis>&#32;keyByteSeven&#32;=&#32;(byte)7;
<anchor xml:id="__photon_network_part_8cs_source_1l00353"/>00353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;readonly&#32;<emphasis role="keywordtype">object</emphasis>&#32;keyByteEight&#32;=&#32;(byte)8;
<anchor xml:id="__photon_network_part_8cs_source_1l00354"/>00354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;readonly&#32;<emphasis role="keywordtype">object</emphasis>[]&#32;emptyObjectArray&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">object</emphasis>[0];
<anchor xml:id="__photon_network_part_8cs_source_1l00355"/>00355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;readonly&#32;Type[]&#32;emptyTypeArray&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Type[0];
<anchor xml:id="__photon_network_part_8cs_source_1l00356"/>00356 <emphasis role="preprocessor">#pragma&#32;warning&#32;restore&#32;0414</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00357"/>00357 
<anchor xml:id="__photon_network_part_8cs_source_1l00361"/>00361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">internal</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;ExecuteRpc(<link linkend="__player_controller_8cs_1afa613ef589c02dbd94acc273b62cdcfd">Hashtable</link>&#32;rpcData,&#32;Player&#32;sender)
<anchor xml:id="__photon_network_part_8cs_source_1l00362"/>00362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00363"/>00363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rpcData&#32;==&#32;<emphasis role="keyword">null</emphasis>&#32;||&#32;!rpcData.ContainsKey(keyByteZero))
<anchor xml:id="__photon_network_part_8cs_source_1l00364"/>00364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00365"/>00365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogError(<emphasis role="stringliteral">&quot;Malformed&#32;RPC;&#32;this&#32;should&#32;never&#32;occur.&#32;Content:&#32;&quot;</emphasis>&#32;+&#32;<link linkend="_namespace_photon_1_1_pun_1a5262cc10d8760dc9f60908f7fb91397e">SupportClassPun</link>.DictionaryToString(rpcData));
<anchor xml:id="__photon_network_part_8cs_source_1l00366"/>00366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00367"/>00367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00368"/>00368 
<anchor xml:id="__photon_network_part_8cs_source_1l00369"/>00369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ts:&#32;updated&#32;with&#32;&quot;flat&quot;&#32;event&#32;data</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00370"/>00370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;netViewID&#32;=&#32;(int)rpcData[keyByteZero];&#32;<emphasis role="comment">//&#32;LIMITS&#32;PHOTONVIEWS&amp;PLAYERS</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00371"/>00371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;otherSidePrefix&#32;=&#32;0;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;by&#32;default,&#32;the&#32;prefix&#32;is&#32;0&#32;(and&#32;this&#32;is&#32;not&#32;being&#32;sent)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00372"/>00372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rpcData.ContainsKey(keyByteOne))
<anchor xml:id="__photon_network_part_8cs_source_1l00373"/>00373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00374"/>00374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;otherSidePrefix&#32;=&#32;(short)rpcData[keyByteOne];
<anchor xml:id="__photon_network_part_8cs_source_1l00375"/>00375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00376"/>00376 
<anchor xml:id="__photon_network_part_8cs_source_1l00377"/>00377 
<anchor xml:id="__photon_network_part_8cs_source_1l00378"/>00378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;inMethodName;
<anchor xml:id="__photon_network_part_8cs_source_1l00379"/>00379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rpcData.ContainsKey(keyByteFive))
<anchor xml:id="__photon_network_part_8cs_source_1l00380"/>00380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00381"/>00381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;rpcIndex&#32;=&#32;(byte)rpcData[keyByteFive];&#32;&#32;<emphasis role="comment">//&#32;LIMITS&#32;RPC&#32;COUNT</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00382"/>00382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rpcIndex&#32;&gt;&#32;PhotonNetwork.PhotonServerSettings.RpcList.Count&#32;-&#32;1)
<anchor xml:id="__photon_network_part_8cs_source_1l00383"/>00383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00384"/>00384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogError(<emphasis role="stringliteral">&quot;Could&#32;not&#32;find&#32;RPC&#32;with&#32;index:&#32;&quot;</emphasis>&#32;+&#32;rpcIndex&#32;+&#32;<emphasis role="stringliteral">&quot;.&#32;Going&#32;to&#32;ignore!&#32;Check&#32;PhotonServerSettings.RpcList&quot;</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l00385"/>00385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00386"/>00386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00387"/>00387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00388"/>00388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00389"/>00389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inMethodName&#32;=&#32;PhotonNetwork.PhotonServerSettings.RpcList[rpcIndex];
<anchor xml:id="__photon_network_part_8cs_source_1l00390"/>00390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00391"/>00391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00392"/>00392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00393"/>00393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00394"/>00394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inMethodName&#32;=&#32;(string)rpcData[keyByteThree];
<anchor xml:id="__photon_network_part_8cs_source_1l00395"/>00395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00396"/>00396 
<anchor xml:id="__photon_network_part_8cs_source_1l00397"/>00397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">object</emphasis>[]&#32;arguments&#32;=&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00398"/>00398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rpcData.ContainsKey(keyByteFour))
<anchor xml:id="__photon_network_part_8cs_source_1l00399"/>00399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00400"/>00400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arguments&#32;=&#32;(<emphasis role="keywordtype">object</emphasis>[])rpcData[keyByteFour];
<anchor xml:id="__photon_network_part_8cs_source_1l00401"/>00401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00402"/>00402 
<anchor xml:id="__photon_network_part_8cs_source_1l00403"/>00403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonView&#32;photonNetview&#32;=&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a5a0dc3a5cdb4df9d0704a9bd67145cae">GetPhotonView</link>(netViewID);
<anchor xml:id="__photon_network_part_8cs_source_1l00404"/>00404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(photonNetview&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l00405"/>00405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00406"/>00406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;viewOwnerId&#32;=&#32;netViewID&#32;/&#32;PhotonNetwork.MAX_VIEW_IDS;
<anchor xml:id="__photon_network_part_8cs_source_1l00407"/>00407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;owningPv&#32;=&#32;(viewOwnerId&#32;==&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a312fc99165f039e31b65bebbafdf6736">NetworkingClient</link>.<link linkend="_class_photon_1_1_realtime_1_1_load_balancing_client_1a50fb7f5363ea8a9f4200f2793580e895">LocalPlayer</link>.<link linkend="_class_photon_1_1_realtime_1_1_player_1ab06642bd6b1e192ed22a48832cd1b28a">ActorNumber</link>);
<anchor xml:id="__photon_network_part_8cs_source_1l00408"/>00408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ownerSent&#32;=&#32;sender&#32;!=&#32;<emphasis role="keyword">null</emphasis>&#32;&amp;&amp;&#32;viewOwnerId&#32;==&#32;sender.ActorNumber;
<anchor xml:id="__photon_network_part_8cs_source_1l00409"/>00409 
<anchor xml:id="__photon_network_part_8cs_source_1l00410"/>00410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(owningPv)
<anchor xml:id="__photon_network_part_8cs_source_1l00411"/>00411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00412"/>00412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogWarning(<emphasis role="stringliteral">&quot;Received&#32;RPC&#32;\&quot;&quot;</emphasis>&#32;+&#32;inMethodName&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;for&#32;viewID&#32;&quot;</emphasis>&#32;+&#32;netViewID&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;but&#32;this&#32;PhotonView&#32;does&#32;not&#32;exist!&#32;View&#32;was/is&#32;ours.&quot;</emphasis>&#32;+&#32;(ownerSent&#32;?&#32;<emphasis role="stringliteral">&quot;&#32;Owner&#32;called.&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;&#32;Remote&#32;called.&quot;</emphasis>)&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;By:&#32;&quot;</emphasis>&#32;+&#32;sender);
<anchor xml:id="__photon_network_part_8cs_source_1l00413"/>00413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00414"/>00414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00415"/>00415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00416"/>00416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogWarning(<emphasis role="stringliteral">&quot;Received&#32;RPC&#32;\&quot;&quot;</emphasis>&#32;+&#32;inMethodName&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;for&#32;viewID&#32;&quot;</emphasis>&#32;+&#32;netViewID&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;but&#32;this&#32;PhotonView&#32;does&#32;not&#32;exist!&#32;Was&#32;remote&#32;PV.&quot;</emphasis>&#32;+&#32;(ownerSent&#32;?&#32;<emphasis role="stringliteral">&quot;&#32;Owner&#32;called.&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;&#32;Remote&#32;called.&quot;</emphasis>)&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;By:&#32;&quot;</emphasis>&#32;+&#32;sender&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;Maybe&#32;GO&#32;was&#32;destroyed&#32;but&#32;RPC&#32;not&#32;cleaned&#32;up.&quot;</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l00417"/>00417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00418"/>00418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00419"/>00419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00420"/>00420 
<anchor xml:id="__photon_network_part_8cs_source_1l00421"/>00421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(photonNetview.Prefix&#32;!=&#32;otherSidePrefix)
<anchor xml:id="__photon_network_part_8cs_source_1l00422"/>00422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00423"/>00423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogError(<emphasis role="stringliteral">&quot;Received&#32;RPC&#32;\&quot;&quot;</emphasis>&#32;+&#32;inMethodName&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;on&#32;viewID&#32;&quot;</emphasis>&#32;+&#32;netViewID&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;with&#32;a&#32;prefix&#32;of&#32;&quot;</emphasis>&#32;+&#32;otherSidePrefix&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;our&#32;prefix&#32;is&#32;&quot;</emphasis>&#32;+&#32;photonNetview.Prefix&#32;+&#32;<emphasis role="stringliteral">&quot;.&#32;The&#32;RPC&#32;has&#32;been&#32;ignored.&quot;</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l00424"/>00424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00425"/>00425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00426"/>00426 
<anchor xml:id="__photon_network_part_8cs_source_1l00427"/>00427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;method&#32;name</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00428"/>00428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keywordtype">string</emphasis>.IsNullOrEmpty(inMethodName))
<anchor xml:id="__photon_network_part_8cs_source_1l00429"/>00429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00430"/>00430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogError(<emphasis role="stringliteral">&quot;Malformed&#32;RPC;&#32;this&#32;should&#32;never&#32;occur.&#32;Content:&#32;&quot;</emphasis>&#32;+&#32;<link linkend="_namespace_photon_1_1_pun_1a5262cc10d8760dc9f60908f7fb91397e">SupportClassPun</link>.DictionaryToString(rpcData));
<anchor xml:id="__photon_network_part_8cs_source_1l00431"/>00431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00432"/>00432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00433"/>00433 
<anchor xml:id="__photon_network_part_8cs_source_1l00434"/>00434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.LogLevel&#32;&gt;=&#32;<link linkend="_group__public_api_1ga5a8128eaeb2f346d4cceb57d48caf9c1">PunLogLevel</link>.Full)
<anchor xml:id="__photon_network_part_8cs_source_1l00435"/>00435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00436"/>00436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.Log(<emphasis role="stringliteral">&quot;Received&#32;RPC:&#32;&quot;</emphasis>&#32;+&#32;inMethodName);
<anchor xml:id="__photon_network_part_8cs_source_1l00437"/>00437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00438"/>00438 
<anchor xml:id="__photon_network_part_8cs_source_1l00439"/>00439 
<anchor xml:id="__photon_network_part_8cs_source_1l00440"/>00440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;SetReceiving&#32;filtering</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00441"/>00441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(photonNetview.Group&#32;!=&#32;0&#32;&amp;&amp;&#32;!allowedReceivingGroups.Contains(photonNetview.Group))
<anchor xml:id="__photon_network_part_8cs_source_1l00442"/>00442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00443"/>00443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;&#32;<emphasis role="comment">//&#32;Ignore&#32;group</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00444"/>00444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00445"/>00445 
<anchor xml:id="__photon_network_part_8cs_source_1l00446"/>00446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Type[]&#32;argumentsTypes&#32;=&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00447"/>00447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arguments&#32;!=&#32;<emphasis role="keyword">null</emphasis>&#32;&amp;&amp;&#32;arguments.Length&#32;&gt;&#32;0)
<anchor xml:id="__photon_network_part_8cs_source_1l00448"/>00448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00449"/>00449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;argumentsTypes&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Type[arguments.Length];
<anchor xml:id="__photon_network_part_8cs_source_1l00450"/>00450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;
<anchor xml:id="__photon_network_part_8cs_source_1l00451"/>00451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;index&#32;=&#32;0;&#32;index&#32;&lt;&#32;arguments.Length;&#32;index++)
<anchor xml:id="__photon_network_part_8cs_source_1l00452"/>00452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00453"/>00453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">object</emphasis>&#32;objX&#32;=&#32;arguments[index];
<anchor xml:id="__photon_network_part_8cs_source_1l00454"/>00454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(objX&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l00455"/>00455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00456"/>00456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;argumentsTypes[i]&#32;=&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00457"/>00457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00458"/>00458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00459"/>00459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00460"/>00460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;argumentsTypes[i]&#32;=&#32;objX.GetType();
<anchor xml:id="__photon_network_part_8cs_source_1l00461"/>00461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00462"/>00462 
<anchor xml:id="__photon_network_part_8cs_source_1l00463"/>00463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;
<anchor xml:id="__photon_network_part_8cs_source_1l00464"/>00464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00465"/>00465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00466"/>00466 
<anchor xml:id="__photon_network_part_8cs_source_1l00467"/>00467 
<anchor xml:id="__photon_network_part_8cs_source_1l00468"/>00468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;receivers&#32;=&#32;0;
<anchor xml:id="__photon_network_part_8cs_source_1l00469"/>00469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;foundMethods&#32;=&#32;0;
<anchor xml:id="__photon_network_part_8cs_source_1l00470"/>00470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!PhotonNetwork.UseRpcMonoBehaviourCache&#32;||&#32;photonNetview.RpcMonoBehaviours&#32;==&#32;<emphasis role="keyword">null</emphasis>&#32;||&#32;photonNetview.RpcMonoBehaviours.Length&#32;==&#32;0)
<anchor xml:id="__photon_network_part_8cs_source_1l00471"/>00471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00472"/>00472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;photonNetview.RefreshRpcMonoBehaviourCache();
<anchor xml:id="__photon_network_part_8cs_source_1l00473"/>00473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00474"/>00474 
<anchor xml:id="__photon_network_part_8cs_source_1l00475"/>00475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;componentsIndex&#32;=&#32;0;&#32;componentsIndex&#32;&lt;&#32;photonNetview.RpcMonoBehaviours.Length;&#32;componentsIndex++)
<anchor xml:id="__photon_network_part_8cs_source_1l00476"/>00476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00477"/>00477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MonoBehaviour&#32;monob&#32;=&#32;photonNetview.RpcMonoBehaviours[componentsIndex];
<anchor xml:id="__photon_network_part_8cs_source_1l00478"/>00478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(monob&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l00479"/>00479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00480"/>00480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogError(<emphasis role="stringliteral">&quot;ERROR&#32;You&#32;have&#32;missing&#32;MonoBehaviours&#32;on&#32;your&#32;gameobjects!&quot;</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l00481"/>00481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00482"/>00482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00483"/>00483 
<anchor xml:id="__photon_network_part_8cs_source_1l00484"/>00484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Type&#32;type&#32;=&#32;monob.GetType();
<anchor xml:id="__photon_network_part_8cs_source_1l00485"/>00485 
<anchor xml:id="__photon_network_part_8cs_source_1l00486"/>00486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;[PunRPC]&#32;methods&#32;from&#32;cache</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00487"/>00487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;MethodInfo&gt;&#32;cachedRPCMethods&#32;=&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00488"/>00488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;methodsOfTypeInCache&#32;=&#32;monoRPCMethodsCache.TryGetValue(type,&#32;out&#32;cachedRPCMethods);
<anchor xml:id="__photon_network_part_8cs_source_1l00489"/>00489 
<anchor xml:id="__photon_network_part_8cs_source_1l00490"/>00490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!methodsOfTypeInCache)
<anchor xml:id="__photon_network_part_8cs_source_1l00491"/>00491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00492"/>00492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;MethodInfo&gt;&#32;entries&#32;=&#32;<link linkend="_namespace_photon_1_1_pun_1a5262cc10d8760dc9f60908f7fb91397e">SupportClassPun</link>.GetMethods(type,&#32;typePunRPC);
<anchor xml:id="__photon_network_part_8cs_source_1l00493"/>00493 
<anchor xml:id="__photon_network_part_8cs_source_1l00494"/>00494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;monoRPCMethodsCache[type]&#32;=&#32;entries;
<anchor xml:id="__photon_network_part_8cs_source_1l00495"/>00495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cachedRPCMethods&#32;=&#32;entries;
<anchor xml:id="__photon_network_part_8cs_source_1l00496"/>00496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00497"/>00497 
<anchor xml:id="__photon_network_part_8cs_source_1l00498"/>00498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cachedRPCMethods&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l00499"/>00499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00500"/>00500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00501"/>00501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00502"/>00502 
<anchor xml:id="__photon_network_part_8cs_source_1l00503"/>00503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;cache&#32;for&#32;valid&#32;methodname+arguments</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00504"/>00504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;index&#32;=&#32;0;&#32;index&#32;&lt;&#32;cachedRPCMethods.Count;&#32;index++)
<anchor xml:id="__photon_network_part_8cs_source_1l00505"/>00505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00506"/>00506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MethodInfo&#32;mInfo&#32;=&#32;cachedRPCMethods[index];
<anchor xml:id="__photon_network_part_8cs_source_1l00507"/>00507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!mInfo.Name.Equals(inMethodName))
<anchor xml:id="__photon_network_part_8cs_source_1l00508"/>00508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00509"/>00509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00510"/>00510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00511"/>00511 
<anchor xml:id="__photon_network_part_8cs_source_1l00512"/>00512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ParameterInfo[]&#32;parameters&#32;=&#32;mInfo.GetCachedParemeters();
<anchor xml:id="__photon_network_part_8cs_source_1l00513"/>00513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;foundMethods++;
<anchor xml:id="__photon_network_part_8cs_source_1l00514"/>00514 
<anchor xml:id="__photon_network_part_8cs_source_1l00515"/>00515 
<anchor xml:id="__photon_network_part_8cs_source_1l00516"/>00516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;we&#32;got&#32;no&#32;arguments:</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00517"/>00517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arguments&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l00518"/>00518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00519"/>00519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parameters.Length&#32;==&#32;0)
<anchor xml:id="__photon_network_part_8cs_source_1l00520"/>00520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00521"/>00521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;receivers++;
<anchor xml:id="__photon_network_part_8cs_source_1l00522"/>00522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">object</emphasis>&#32;o&#32;=&#32;mInfo.Invoke((<emphasis role="keywordtype">object</emphasis>)monob,&#32;<emphasis role="keyword">null</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l00523"/>00523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.RunRpcCoroutines)
<anchor xml:id="__photon_network_part_8cs_source_1l00524"/>00524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00525"/>00525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IEnumerator&#32;ie&#32;=&#32;<emphasis role="keyword">null</emphasis>;<emphasis role="comment">//o&#32;as&#32;IEnumerator;</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00526"/>00526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((ie&#32;=&#32;o&#32;as&#32;IEnumerator)&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l00527"/>00527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00528"/>00528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonHandler.Instance.StartCoroutine(ie);
<anchor xml:id="__photon_network_part_8cs_source_1l00529"/>00529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00530"/>00530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00531"/>00531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00532"/>00532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parameters.Length&#32;==&#32;1&#32;&amp;&amp;&#32;parameters[0].ParameterType&#32;==&#32;typeof(PhotonMessageInfo))
<anchor xml:id="__photon_network_part_8cs_source_1l00533"/>00533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00534"/>00534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sendTime&#32;=&#32;(int)rpcData[keyByteTwo];
<anchor xml:id="__photon_network_part_8cs_source_1l00535"/>00535 
<anchor xml:id="__photon_network_part_8cs_source_1l00536"/>00536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;receivers++;
<anchor xml:id="__photon_network_part_8cs_source_1l00537"/>00537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">object</emphasis>&#32;o&#32;=&#32;mInfo.Invoke((<emphasis role="keywordtype">object</emphasis>)monob,&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">object</emphasis>[]&#32;{&#32;<emphasis role="keyword">new</emphasis>&#32;PhotonMessageInfo(sender,&#32;sendTime,&#32;photonNetview)&#32;});
<anchor xml:id="__photon_network_part_8cs_source_1l00538"/>00538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.RunRpcCoroutines)
<anchor xml:id="__photon_network_part_8cs_source_1l00539"/>00539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00540"/>00540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IEnumerator&#32;ie&#32;=&#32;<emphasis role="keyword">null</emphasis>;<emphasis role="comment">//o&#32;as&#32;IEnumerator;</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00541"/>00541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((ie&#32;=&#32;o&#32;as&#32;IEnumerator)&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l00542"/>00542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00543"/>00543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonHandler.Instance.StartCoroutine(ie);
<anchor xml:id="__photon_network_part_8cs_source_1l00544"/>00544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00545"/>00545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00546"/>00546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00547"/>00547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00548"/>00548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00549"/>00549 
<anchor xml:id="__photon_network_part_8cs_source_1l00550"/>00550 
<anchor xml:id="__photon_network_part_8cs_source_1l00551"/>00551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;there&#32;are&#32;any&#32;arguments&#32;(in&#32;the&#32;incoming&#32;call&#32;check&#32;if&#32;the&#32;method&#32;is&#32;compatible</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00552"/>00552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parameters.Length&#32;==&#32;arguments.Length)
<anchor xml:id="__photon_network_part_8cs_source_1l00553"/>00553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00554"/>00554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Normal,&#32;PhotonNetworkMessage&#32;left&#32;out</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00555"/>00555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CheckTypeMatch(parameters,&#32;argumentsTypes))
<anchor xml:id="__photon_network_part_8cs_source_1l00556"/>00556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00557"/>00557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;receivers++;
<anchor xml:id="__photon_network_part_8cs_source_1l00558"/>00558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">object</emphasis>&#32;o&#32;=&#32;mInfo.Invoke((<emphasis role="keywordtype">object</emphasis>)monob,&#32;arguments);
<anchor xml:id="__photon_network_part_8cs_source_1l00559"/>00559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.RunRpcCoroutines)
<anchor xml:id="__photon_network_part_8cs_source_1l00560"/>00560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00561"/>00561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IEnumerator&#32;ie&#32;=&#32;<emphasis role="keyword">null</emphasis>;<emphasis role="comment">//o&#32;as&#32;IEnumerator;</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00562"/>00562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((ie&#32;=&#32;o&#32;as&#32;IEnumerator)&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l00563"/>00563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00564"/>00564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonHandler.Instance.StartCoroutine(ie);
<anchor xml:id="__photon_network_part_8cs_source_1l00565"/>00565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00566"/>00566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00567"/>00567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00568"/>00568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00569"/>00569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00570"/>00570 
<anchor xml:id="__photon_network_part_8cs_source_1l00571"/>00571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parameters.Length&#32;==&#32;arguments.Length&#32;+&#32;1)
<anchor xml:id="__photon_network_part_8cs_source_1l00572"/>00572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00573"/>00573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;for&#32;PhotonNetworkMessage&#32;being&#32;the&#32;last</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00574"/>00574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parameters[parameters.Length&#32;-&#32;1].ParameterType&#32;==&#32;typeof(PhotonMessageInfo)&#32;&amp;&amp;&#32;CheckTypeMatch(parameters,&#32;argumentsTypes))
<anchor xml:id="__photon_network_part_8cs_source_1l00575"/>00575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00576"/>00576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sendTime&#32;=&#32;(int)rpcData[keyByteTwo];
<anchor xml:id="__photon_network_part_8cs_source_1l00577"/>00577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">object</emphasis>[]&#32;argumentsWithInfo&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">object</emphasis>[arguments.Length&#32;+&#32;1];
<anchor xml:id="__photon_network_part_8cs_source_1l00578"/>00578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arguments.CopyTo(argumentsWithInfo,&#32;0);
<anchor xml:id="__photon_network_part_8cs_source_1l00579"/>00579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;argumentsWithInfo[argumentsWithInfo.Length&#32;-&#32;1]&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;PhotonMessageInfo(sender,&#32;sendTime,&#32;photonNetview);
<anchor xml:id="__photon_network_part_8cs_source_1l00580"/>00580 
<anchor xml:id="__photon_network_part_8cs_source_1l00581"/>00581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;receivers++;
<anchor xml:id="__photon_network_part_8cs_source_1l00582"/>00582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">object</emphasis>&#32;o&#32;=&#32;mInfo.Invoke((<emphasis role="keywordtype">object</emphasis>)monob,&#32;argumentsWithInfo);
<anchor xml:id="__photon_network_part_8cs_source_1l00583"/>00583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.RunRpcCoroutines)
<anchor xml:id="__photon_network_part_8cs_source_1l00584"/>00584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00585"/>00585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IEnumerator&#32;ie&#32;=&#32;<emphasis role="keyword">null</emphasis>;<emphasis role="comment">//o&#32;as&#32;IEnumerator;</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00586"/>00586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((ie&#32;=&#32;o&#32;as&#32;IEnumerator)&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l00587"/>00587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00588"/>00588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonHandler.Instance.StartCoroutine(ie);
<anchor xml:id="__photon_network_part_8cs_source_1l00589"/>00589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00590"/>00590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00591"/>00591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00592"/>00592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00593"/>00593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00594"/>00594 
<anchor xml:id="__photon_network_part_8cs_source_1l00595"/>00595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parameters.Length&#32;==&#32;1&#32;&amp;&amp;&#32;parameters[0].ParameterType.IsArray)
<anchor xml:id="__photon_network_part_8cs_source_1l00596"/>00596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00597"/>00597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;receivers++;
<anchor xml:id="__photon_network_part_8cs_source_1l00598"/>00598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">object</emphasis>&#32;o&#32;=&#32;mInfo.Invoke((<emphasis role="keywordtype">object</emphasis>)monob,&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">object</emphasis>[]&#32;{&#32;arguments&#32;});
<anchor xml:id="__photon_network_part_8cs_source_1l00599"/>00599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.RunRpcCoroutines)
<anchor xml:id="__photon_network_part_8cs_source_1l00600"/>00600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00601"/>00601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IEnumerator&#32;ie&#32;=&#32;<emphasis role="keyword">null</emphasis>;<emphasis role="comment">//o&#32;as&#32;IEnumerator;</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00602"/>00602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((ie&#32;=&#32;o&#32;as&#32;IEnumerator)&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l00603"/>00603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00604"/>00604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonHandler.Instance.StartCoroutine(ie);
<anchor xml:id="__photon_network_part_8cs_source_1l00605"/>00605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00606"/>00606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00607"/>00607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00608"/>00608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00609"/>00609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00610"/>00610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00611"/>00611 
<anchor xml:id="__photon_network_part_8cs_source_1l00612"/>00612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Error&#32;handling</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00613"/>00613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(receivers&#32;!=&#32;1)
<anchor xml:id="__photon_network_part_8cs_source_1l00614"/>00614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00615"/>00615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;argsString&#32;=&#32;<emphasis role="keywordtype">string</emphasis>.Empty;
<anchor xml:id="__photon_network_part_8cs_source_1l00616"/>00616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;argsLength&#32;=&#32;0;
<anchor xml:id="__photon_network_part_8cs_source_1l00617"/>00617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argumentsTypes&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l00618"/>00618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00619"/>00619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;argsLength&#32;=&#32;argumentsTypes.Length;
<anchor xml:id="__photon_network_part_8cs_source_1l00620"/>00620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;index&#32;=&#32;0;&#32;index&#32;&lt;&#32;argumentsTypes.Length;&#32;index++)
<anchor xml:id="__photon_network_part_8cs_source_1l00621"/>00621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00622"/>00622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Type&#32;ty&#32;=&#32;argumentsTypes[index];
<anchor xml:id="__photon_network_part_8cs_source_1l00623"/>00623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(argsString&#32;!=&#32;<emphasis role="keywordtype">string</emphasis>.Empty)
<anchor xml:id="__photon_network_part_8cs_source_1l00624"/>00624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00625"/>00625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;argsString&#32;+=&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00626"/>00626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00627"/>00627 
<anchor xml:id="__photon_network_part_8cs_source_1l00628"/>00628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ty&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l00629"/>00629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00630"/>00630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;argsString&#32;+=&#32;<emphasis role="stringliteral">&quot;null&quot;</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00631"/>00631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00632"/>00632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00633"/>00633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00634"/>00634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;argsString&#32;+=&#32;ty.Name;
<anchor xml:id="__photon_network_part_8cs_source_1l00635"/>00635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00636"/>00636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00637"/>00637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00638"/>00638 
<anchor xml:id="__photon_network_part_8cs_source_1l00639"/>00639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a056d4010391c5d568746195703eff547a3d164a4fbbdd103bddb596268f741bae">GameObject</link>&#32;context&#32;=&#32;photonNetview&#32;!=&#32;<emphasis role="keyword">null</emphasis>&#32;?&#32;photonNetview.gameObject&#32;:&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00640"/>00640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(receivers&#32;==&#32;0)
<anchor xml:id="__photon_network_part_8cs_source_1l00641"/>00641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00642"/>00642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(foundMethods&#32;==&#32;0)
<anchor xml:id="__photon_network_part_8cs_source_1l00643"/>00643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00644"/>00644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;found&#32;no&#32;method&#32;that&#32;matches</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00645"/>00645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogErrorFormat(context,&#32;<emphasis role="stringliteral">&quot;RPC&#32;method&#32;&apos;{0}({2})&apos;&#32;not&#32;found&#32;on&#32;object&#32;with&#32;PhotonView&#32;{1}.&#32;Implement&#32;as&#32;non-static.&#32;Apply&#32;[PunRPC].&#32;Components&#32;on&#32;children&#32;are&#32;not&#32;found.&#32;&quot;</emphasis>&#32;+
<anchor xml:id="__photon_network_part_8cs_source_1l00646"/>00646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Return&#32;type&#32;must&#32;be&#32;void&#32;or&#32;IEnumerator&#32;(if&#32;you&#32;enable&#32;RunRpcCoroutines).&#32;RPCs&#32;are&#32;a&#32;one-way&#32;message.&quot;</emphasis>,&#32;inMethodName,&#32;netViewID,&#32;argsString);
<anchor xml:id="__photon_network_part_8cs_source_1l00647"/>00647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00648"/>00648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00649"/>00649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00650"/>00650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;found&#32;a&#32;method&#32;but&#32;not&#32;the&#32;right&#32;arguments</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00651"/>00651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogErrorFormat(context,&#32;<emphasis role="stringliteral">&quot;RPC&#32;method&#32;&apos;{0}&apos;&#32;found&#32;on&#32;object&#32;with&#32;PhotonView&#32;{1}&#32;but&#32;has&#32;wrong&#32;parameters.&#32;Implement&#32;as&#32;&apos;{0}({2})&apos;.&#32;PhotonMessageInfo&#32;is&#32;optional&#32;as&#32;final&#32;parameter.&quot;</emphasis>&#32;+
<anchor xml:id="__photon_network_part_8cs_source_1l00652"/>00652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Return&#32;type&#32;must&#32;be&#32;void&#32;or&#32;IEnumerator&#32;(if&#32;you&#32;enable&#32;RunRpcCoroutines).&quot;</emphasis>,&#32;inMethodName,&#32;netViewID,&#32;argsString);
<anchor xml:id="__photon_network_part_8cs_source_1l00653"/>00653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00654"/>00654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00655"/>00655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00656"/>00656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00657"/>00657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;multiple&#32;components&#32;have&#32;the&#32;same&#32;method</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00658"/>00658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogErrorFormat(context,&#32;<emphasis role="stringliteral">&quot;RPC&#32;method&#32;&apos;{0}({2})&apos;&#32;found&#32;{3}x&#32;on&#32;object&#32;with&#32;PhotonView&#32;{1}.&#32;Only&#32;one&#32;component&#32;should&#32;implement&#32;it.&quot;</emphasis>&#32;+
<anchor xml:id="__photon_network_part_8cs_source_1l00659"/>00659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Return&#32;type&#32;must&#32;be&#32;void&#32;or&#32;IEnumerator&#32;(if&#32;you&#32;enable&#32;RunRpcCoroutines).&quot;</emphasis>,&#32;inMethodName,&#32;netViewID,&#32;argsString,&#32;foundMethods);
<anchor xml:id="__photon_network_part_8cs_source_1l00660"/>00660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00661"/>00661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00662"/>00662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00663"/>00663 
<anchor xml:id="__photon_network_part_8cs_source_1l00670"/>00670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;CheckTypeMatch(ParameterInfo[]&#32;methodParameters,&#32;Type[]&#32;callParameterTypes)
<anchor xml:id="__photon_network_part_8cs_source_1l00671"/>00671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00672"/>00672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(methodParameters.Length&#32;&lt;&#32;callParameterTypes.Length)
<anchor xml:id="__photon_network_part_8cs_source_1l00673"/>00673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00674"/>00674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00675"/>00675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00676"/>00676 
<anchor xml:id="__photon_network_part_8cs_source_1l00677"/>00677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;index&#32;=&#32;0;&#32;index&#32;&lt;&#32;callParameterTypes.Length;&#32;index++)
<anchor xml:id="__photon_network_part_8cs_source_1l00678"/>00678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00679"/>00679 <emphasis role="preprocessor">#if&#32;NETFX_CORE</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00680"/>00680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TypeInfo&#32;methodParamTI&#32;=&#32;methodParameters[index].ParameterType.GetTypeInfo();
<anchor xml:id="__photon_network_part_8cs_source_1l00681"/>00681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TypeInfo&#32;callParamTI&#32;=&#32;callParameterTypes[index].GetTypeInfo();
<anchor xml:id="__photon_network_part_8cs_source_1l00682"/>00682 
<anchor xml:id="__photon_network_part_8cs_source_1l00683"/>00683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(callParameterTypes[index]&#32;!=&#32;<emphasis role="keyword">null</emphasis>&#32;&amp;&amp;&#32;!methodParamTI.IsAssignableFrom(callParamTI)&#32;&amp;&amp;&#32;!(callParamTI.IsEnum&#32;&amp;&amp;&#32;System.Enum.GetUnderlyingType(methodParamTI.AsType()).GetTypeInfo().IsAssignableFrom(callParamTI)))
<anchor xml:id="__photon_network_part_8cs_source_1l00684"/>00684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00685"/>00685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00686"/>00686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00687"/>00687 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00688"/>00688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Type&#32;type&#32;=&#32;methodParameters[index].ParameterType;
<anchor xml:id="__photon_network_part_8cs_source_1l00689"/>00689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(callParameterTypes[index]&#32;!=&#32;<emphasis role="keyword">null</emphasis>&#32;&amp;&amp;&#32;!type.IsAssignableFrom(callParameterTypes[index])&#32;&amp;&amp;&#32;!(type.IsEnum&#32;&amp;&amp;&#32;System.Enum.GetUnderlyingType(type).IsAssignableFrom(callParameterTypes[index])))
<anchor xml:id="__photon_network_part_8cs_source_1l00690"/>00690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00691"/>00691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00692"/>00692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00693"/>00693 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00694"/>00694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00695"/>00695 
<anchor xml:id="__photon_network_part_8cs_source_1l00696"/>00696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00697"/>00697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00698"/>00698 
<anchor xml:id="__photon_network_part_8cs_source_1l00699"/>00699 
<anchor xml:id="__photon_network_part_8cs_source_1l00703"/><link linkend="_class_photon_1_1_pun_1_1_photon_network_1af875d9527ce0aff17d798b7030e7ee98">00703</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1af875d9527ce0aff17d798b7030e7ee98">DestroyPlayerObjects</link>(<emphasis role="keywordtype">int</emphasis>&#32;playerId,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;localOnly)
<anchor xml:id="__photon_network_part_8cs_source_1l00704"/>00704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00705"/>00705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(playerId&#32;&lt;=&#32;0)
<anchor xml:id="__photon_network_part_8cs_source_1l00706"/>00706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00707"/>00707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_photon_1_1_pun_1ac6a6ed4f0d7a7522026d8cd2beec9671">Debug</link>.LogError(<emphasis role="stringliteral">&quot;Failed&#32;to&#32;Destroy&#32;objects&#32;of&#32;playerId:&#32;&quot;</emphasis>&#32;+&#32;playerId);
<anchor xml:id="__photon_network_part_8cs_source_1l00708"/>00708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00709"/>00709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00710"/>00710 
<anchor xml:id="__photon_network_part_8cs_source_1l00711"/>00711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!localOnly)
<anchor xml:id="__photon_network_part_8cs_source_1l00712"/>00712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00713"/>00713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clean&#32;server&apos;s&#32;Instantiate&#32;and&#32;RPC&#32;buffers</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00714"/>00714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OpRemoveFromServerInstantiationsOfPlayer(playerId);
<anchor xml:id="__photon_network_part_8cs_source_1l00715"/>00715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a92ebf88db80533a34e0dd73ffb6b1086">OpCleanActorRpcBuffer</link>(playerId);
<anchor xml:id="__photon_network_part_8cs_source_1l00716"/>00716 
<anchor xml:id="__photon_network_part_8cs_source_1l00717"/>00717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;send&#32;Destroy(player)&#32;to&#32;anyone&#32;else</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00718"/>00718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SendDestroyOfPlayer(playerId);
<anchor xml:id="__photon_network_part_8cs_source_1l00719"/>00719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00720"/>00720 
<anchor xml:id="__photon_network_part_8cs_source_1l00721"/>00721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;locally&#32;cleaning&#32;up&#32;that&#32;player&apos;s&#32;objects</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00722"/>00722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HashSet&lt;GameObject&gt;&#32;playersGameObjects&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;HashSet&lt;GameObject&gt;();
<anchor xml:id="__photon_network_part_8cs_source_1l00723"/>00723 
<anchor xml:id="__photon_network_part_8cs_source_1l00724"/>00724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;with&#32;ownership&#32;transfer,&#32;some&#32;objects&#32;might&#32;lose&#32;their&#32;owner.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00725"/>00725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;in&#32;that&#32;case,&#32;the&#32;creator&#32;becomes&#32;the&#32;owner&#32;again.&#32;every&#32;client&#32;can&#32;apply&#32;&#32;done&#32;below.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00726"/>00726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(<link linkend="_class_photon_1_1_pun_1_1_photon_view">PhotonView</link>&#32;view&#32;<emphasis role="keywordflow">in</emphasis>&#32;photonViewList.Values)
<anchor xml:id="__photon_network_part_8cs_source_1l00727"/>00727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00728"/>00728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(view&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l00729"/>00729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00730"/>00730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_photon_1_1_pun_1ac6a6ed4f0d7a7522026d8cd2beec9671">Debug</link>.LogError(<emphasis role="stringliteral">&quot;Null&#32;view&quot;</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l00731"/>00731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00732"/>00732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00733"/>00733 
<anchor xml:id="__photon_network_part_8cs_source_1l00734"/>00734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Mark&#32;player&#32;created&#32;objects&#32;for&#32;destruction</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00735"/>00735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(view.<link linkend="_class_photon_1_1_pun_1_1_photon_view_1a13194948cd29f38f6b3bcaf97922cf40">CreatorActorNr</link>&#32;==&#32;playerId)
<anchor xml:id="__photon_network_part_8cs_source_1l00736"/>00736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00737"/>00737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;playersGameObjects.Add(view.gameObject);
<anchor xml:id="__photon_network_part_8cs_source_1l00738"/>00738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00739"/>00739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00740"/>00740 
<anchor xml:id="__photon_network_part_8cs_source_1l00741"/>00741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(view.<link linkend="_class_photon_1_1_pun_1_1_photon_view_1a205e8c5b49c4ad865a5bc7c0b8f0b801">OwnerActorNr</link>&#32;==&#32;playerId)
<anchor xml:id="__photon_network_part_8cs_source_1l00742"/>00742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00743"/>00743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;previousOwner&#32;=&#32;view.<link linkend="_class_photon_1_1_pun_1_1_photon_view_1ab72b5dbbff54e7e4bc8027998ec9d408">Owner</link>;
<anchor xml:id="__photon_network_part_8cs_source_1l00744"/>00744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;view.<link linkend="_class_photon_1_1_pun_1_1_photon_view_1a205e8c5b49c4ad865a5bc7c0b8f0b801">OwnerActorNr</link>&#32;=&#32;view.<link linkend="_class_photon_1_1_pun_1_1_photon_view_1a13194948cd29f38f6b3bcaf97922cf40">CreatorActorNr</link>;
<anchor xml:id="__photon_network_part_8cs_source_1l00745"/>00745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;view.<link linkend="_class_photon_1_1_pun_1_1_photon_view_1a7c9e7fa78f8f945d275ce425be0d1cab">ControllerActorNr</link>&#32;=&#32;view.<link linkend="_class_photon_1_1_pun_1_1_photon_view_1a13194948cd29f38f6b3bcaf97922cf40">CreatorActorNr</link>;
<anchor xml:id="__photon_network_part_8cs_source_1l00746"/>00746 
<anchor xml:id="__photon_network_part_8cs_source_1l00747"/>00747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;callback&#32;was&#32;not&#32;originally&#32;here.&#32;Added&#32;with&#32;the&#32;IsMine&#32;caching&#32;changes.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00748"/>00748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_pun_1_1_photon_network">PhotonNetwork</link>.OnOwnershipTransferedEv&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l00749"/>00749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00750"/>00750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network">PhotonNetwork</link>.OnOwnershipTransferedEv(view,&#32;previousOwner);
<anchor xml:id="__photon_network_part_8cs_source_1l00751"/>00751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00752"/>00752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00753"/>00753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00754"/>00754 
<anchor xml:id="__photon_network_part_8cs_source_1l00755"/>00755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;any&#32;non-local&#32;work&#32;is&#32;already&#32;done,&#32;so&#32;with&#32;the&#32;list&#32;of&#32;that&#32;player&apos;s&#32;objects,&#32;we&#32;can&#32;clean&#32;up&#32;(locally&#32;only)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00756"/>00756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(GameObject&#32;gameObject&#32;<emphasis role="keywordflow">in</emphasis>&#32;playersGameObjects)
<anchor xml:id="__photon_network_part_8cs_source_1l00757"/>00757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00758"/>00758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RemoveInstantiatedGO(gameObject,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l00759"/>00759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00760"/>00760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00761"/>00761 
<anchor xml:id="__photon_network_part_8cs_source_1l00762"/><link linkend="_class_photon_1_1_pun_1_1_photon_network_1a823006ebcd17adacd6a47b5d23c3aaef">00762</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a823006ebcd17adacd6a47b5d23c3aaef">DestroyAll</link>(<emphasis role="keywordtype">bool</emphasis>&#32;localOnly)
<anchor xml:id="__photon_network_part_8cs_source_1l00763"/>00763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00764"/>00764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!localOnly)
<anchor xml:id="__photon_network_part_8cs_source_1l00765"/>00765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00766"/>00766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a499d471cc173a8603d8f3af988eecbca">OpRemoveCompleteCache</link>();
<anchor xml:id="__photon_network_part_8cs_source_1l00767"/>00767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SendDestroyOfAll();
<anchor xml:id="__photon_network_part_8cs_source_1l00768"/>00768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00769"/>00769 
<anchor xml:id="__photon_network_part_8cs_source_1l00770"/>00770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LocalCleanupAnythingInstantiated(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l00771"/>00771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00772"/>00772 
<anchor xml:id="__photon_network_part_8cs_source_1l00773"/>00773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">internal</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;List&lt;PhotonView&gt;&#32;foundPVs&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;PhotonView&gt;();
<anchor xml:id="__photon_network_part_8cs_source_1l00774"/>00774 
<anchor xml:id="__photon_network_part_8cs_source_1l00781"/>00781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">internal</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;RemoveInstantiatedGO(GameObject&#32;go,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;localOnly)
<anchor xml:id="__photon_network_part_8cs_source_1l00782"/>00782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00783"/>00783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Avoid&#32;cleanup&#32;if&#32;we&#32;are&#32;quitting.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00784"/>00784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_realtime_1_1_connection_handler">ConnectionHandler</link>.<link linkend="_class_photon_1_1_realtime_1_1_connection_handler_1a6c131d595e0ac9be1bd269cb0f02a6b0">AppQuits</link>)
<anchor xml:id="__photon_network_part_8cs_source_1l00785"/>00785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00786"/>00786 
<anchor xml:id="__photon_network_part_8cs_source_1l00787"/>00787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(go&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l00788"/>00788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00789"/>00789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_photon_1_1_pun_1ac6a6ed4f0d7a7522026d8cd2beec9671">Debug</link>.LogError(<emphasis role="stringliteral">&quot;Failed&#32;to&#32;&apos;network-remove&apos;&#32;GameObject&#32;because&#32;it&apos;s&#32;null.&quot;</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l00790"/>00790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00791"/>00791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00792"/>00792 
<anchor xml:id="__photon_network_part_8cs_source_1l00793"/>00793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Don&apos;t&#32;remove&#32;the&#32;GO&#32;if&#32;it&#32;doesn&apos;t&#32;have&#32;any&#32;PhotonView</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00794"/>00794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;go.GetComponentsInChildren&lt;PhotonView&gt;(<emphasis role="keyword">true</emphasis>,&#32;foundPVs);
<anchor xml:id="__photon_network_part_8cs_source_1l00795"/>00795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(foundPVs.Count&#32;&lt;=&#32;0)
<anchor xml:id="__photon_network_part_8cs_source_1l00796"/>00796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00797"/>00797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogError(<emphasis role="stringliteral">&quot;Failed&#32;to&#32;&apos;network-remove&apos;&#32;GameObject&#32;because&#32;has&#32;no&#32;PhotonView&#32;components:&#32;&quot;</emphasis>&#32;+&#32;go);
<anchor xml:id="__photon_network_part_8cs_source_1l00798"/>00798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00799"/>00799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00800"/>00800 
<anchor xml:id="__photon_network_part_8cs_source_1l00801"/>00801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonView&#32;viewZero&#32;=&#32;foundPVs[0];
<anchor xml:id="__photon_network_part_8cs_source_1l00802"/>00802 
<anchor xml:id="__photon_network_part_8cs_source_1l00803"/>00803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Don&apos;t&#32;remove&#32;GOs&#32;that&#32;are&#32;owned&#32;by&#32;others&#32;(unless&#32;this&#32;is&#32;the&#32;master&#32;and&#32;the&#32;remote&#32;player&#32;left)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00804"/>00804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!localOnly)
<anchor xml:id="__photon_network_part_8cs_source_1l00805"/>00805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00806"/>00806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Debug.LogWarning(&quot;Destroy&#32;&quot;&#32;+&#32;instantiationId&#32;+&#32;&quot;&#32;creator&#32;&quot;&#32;+&#32;creatorId,&#32;go);</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00807"/>00807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!viewZero.IsMine)
<anchor xml:id="__photon_network_part_8cs_source_1l00808"/>00808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00809"/>00809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogError(<emphasis role="stringliteral">&quot;Failed&#32;to&#32;&apos;network-remove&apos;&#32;GameObject.&#32;Client&#32;is&#32;neither&#32;owner&#32;nor&#32;MasterClient&#32;taking&#32;over&#32;for&#32;owner&#32;who&#32;left:&#32;&quot;</emphasis>&#32;+&#32;viewZero);
<anchor xml:id="__photon_network_part_8cs_source_1l00810"/>00810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;foundPVs.Clear();&#32;&#32;&#32;<emphasis role="comment">//&#32;as&#32;foundPVs&#32;is&#32;re-used,&#32;clean&#32;it&#32;to&#32;avoid&#32;lingering&#32;references</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00811"/>00811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00812"/>00812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00813"/>00813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00814"/>00814 
<anchor xml:id="__photon_network_part_8cs_source_1l00815"/>00815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;cleanup&#32;instantiation&#32;(event&#32;and&#32;local&#32;list)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00816"/>00816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!localOnly)
<anchor xml:id="__photon_network_part_8cs_source_1l00817"/>00817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00818"/>00818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ServerCleanInstantiateAndDestroy(viewZero);&#32;<emphasis role="comment">//&#32;server&#32;cleaning</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00819"/>00819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00820"/>00820 
<anchor xml:id="__photon_network_part_8cs_source_1l00821"/>00821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;creatorActorNr&#32;=&#32;viewZero.CreatorActorNr;
<anchor xml:id="__photon_network_part_8cs_source_1l00822"/>00822 
<anchor xml:id="__photon_network_part_8cs_source_1l00823"/>00823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;cleanup&#32;PhotonViews&#32;and&#32;their&#32;RPCs&#32;events&#32;(if&#32;not&#32;localOnly)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00824"/>00824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;foundPVs.Count&#32;-&#32;1;&#32;j&#32;&gt;=&#32;0;&#32;j--)
<anchor xml:id="__photon_network_part_8cs_source_1l00825"/>00825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00826"/>00826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonView&#32;view&#32;=&#32;foundPVs[j];
<anchor xml:id="__photon_network_part_8cs_source_1l00827"/>00827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(view&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l00828"/>00828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00829"/>00829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00830"/>00830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00831"/>00831 
<anchor xml:id="__photon_network_part_8cs_source_1l00832"/>00832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;Probably&#32;should&#32;have&#32;a&#32;enum&#32;that&#32;defines&#32;when&#32;auto-detachment&#32;should&#32;occur.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00833"/>00833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;nested&#32;PVs&#32;for&#32;different&#32;creator.&#32;Detach&#32;if&#32;different,&#32;to&#32;avoid&#32;destroying&#32;reparanted&#32;objects.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00834"/>00834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(j&#32;!=&#32;0)
<anchor xml:id="__photon_network_part_8cs_source_1l00835"/>00835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00836"/>00836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;view&#32;does&#32;not&#32;belong&#32;to&#32;the&#32;same&#32;object&#32;as&#32;the&#32;root&#32;PV&#32;-&#32;unparent&#32;this&#32;nested&#32;PV&#32;to&#32;avoid&#32;destruction.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00837"/>00837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(view.CreatorActorNr&#32;!=&#32;creatorActorNr)
<anchor xml:id="__photon_network_part_8cs_source_1l00838"/>00838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00839"/>00839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;view.transform.SetParent(<emphasis role="keyword">null</emphasis>,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l00840"/>00840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00841"/>00841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00842"/>00842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00843"/>00843 
<anchor xml:id="__photon_network_part_8cs_source_1l00844"/>00844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Notify&#32;all&#32;children&#32;PVs&#32;of&#32;impending&#32;destruction.&#32;Send&#32;the&#32;root&#32;PV&#32;(the&#32;actual&#32;object&#32;getting&#32;destroyed)&#32;to&#32;the&#32;callbacks.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00845"/>00845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;view.<link linkend="_class_photon_1_1_pun_1_1_photon_view_1a9fb0b235240d6febbfdebf7ad0ca8d62">OnPreNetDestroy</link>(viewZero);
<anchor xml:id="__photon_network_part_8cs_source_1l00846"/>00846 
<anchor xml:id="__photon_network_part_8cs_source_1l00847"/>00847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;only&#32;destroy/clean&#32;PhotonViews&#32;that&#32;were&#32;created&#32;by&#32;PhotonNetwork.Instantiate&#32;(and&#32;those&#32;have&#32;an&#32;instantiationId!)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00848"/>00848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(view.InstantiationId&#32;&gt;=&#32;1)
<anchor xml:id="__photon_network_part_8cs_source_1l00849"/>00849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00850"/>00850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a5fc0e5e4b489351e98c066601bc94936">LocalCleanPhotonView</link>(view);
<anchor xml:id="__photon_network_part_8cs_source_1l00851"/>00851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00852"/>00852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!localOnly)
<anchor xml:id="__photon_network_part_8cs_source_1l00853"/>00853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00854"/>00854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a9aad4dca8370d71a36a72d57a4fb3240">OpCleanRpcBuffer</link>(view);
<anchor xml:id="__photon_network_part_8cs_source_1l00855"/>00855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00856"/>00856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00857"/>00857 
<anchor xml:id="__photon_network_part_8cs_source_1l00858"/>00858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.LogLevel&#32;&gt;=&#32;<link linkend="_group__public_api_1ga5a8128eaeb2f346d4cceb57d48caf9c1">PunLogLevel</link>.Full)
<anchor xml:id="__photon_network_part_8cs_source_1l00859"/>00859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00860"/>00860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.Log(<emphasis role="stringliteral">&quot;Network&#32;destroy&#32;Instantiated&#32;GO:&#32;&quot;</emphasis>&#32;+&#32;go.name);
<anchor xml:id="__photon_network_part_8cs_source_1l00861"/>00861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00862"/>00862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__photon_network_part_8cs_source_1l00863"/>00863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;foundPVs.Clear();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;as&#32;foundPVs&#32;is&#32;re-used,&#32;clean&#32;it&#32;to&#32;avoid&#32;lingering&#32;references</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00864"/>00864 
<anchor xml:id="__photon_network_part_8cs_source_1l00865"/>00865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;go.SetActive(<emphasis role="keyword">false</emphasis>);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;PUN&#32;2&#32;disables&#32;objects&#32;before&#32;the&#32;return&#32;to&#32;the&#32;pool</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00866"/>00866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prefabPool.<link linkend="_interface_photon_1_1_pun_1_1_i_pun_prefab_pool_1a2429b5aceee58b1566d4ac03ad69f359">Destroy</link>(go);&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;PUN&#32;2&#32;always&#32;uses&#32;a&#32;PrefabPool&#32;(even&#32;for&#32;the&#32;default&#32;implementation)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00867"/>00867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00868"/>00868 
<anchor xml:id="__photon_network_part_8cs_source_1l00869"/>00869 
<anchor xml:id="__photon_network_part_8cs_source_1l00870"/>00870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;readonly&#32;ExitGames.Client.Photon.Hashtable&#32;removeFilter&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;ExitGames.Client.Photon.Hashtable();
<anchor xml:id="__photon_network_part_8cs_source_1l00871"/>00871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;readonly&#32;ExitGames.Client.Photon.Hashtable&#32;ServerCleanDestroyEvent&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;ExitGames.Client.Photon.Hashtable();
<anchor xml:id="__photon_network_part_8cs_source_1l00872"/>00872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;readonly&#32;RaiseEventOptions&#32;ServerCleanOptions&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;RaiseEventOptions()&#32;{&#32;CachingOption&#32;=&#32;<link linkend="_namespace_photon_1_1_realtime_1af18c2eb259b8f639c151ea60e026e39d">EventCaching</link>.RemoveFromRoomCache&#32;};
<anchor xml:id="__photon_network_part_8cs_source_1l00873"/>00873 
<anchor xml:id="__photon_network_part_8cs_source_1l00874"/>00874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">internal</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;RaiseEventOptions&#32;SendToAllOptions&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;RaiseEventOptions()&#32;{&#32;Receivers&#32;=&#32;<link linkend="_namespace_photon_1_1_realtime_1a32e1cc9d538d60db8e5fb79b7a4e2e40">ReceiverGroup</link>.All&#32;};
<anchor xml:id="__photon_network_part_8cs_source_1l00875"/>00875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">internal</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;RaiseEventOptions&#32;SendToOthersOptions&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;RaiseEventOptions()&#32;{&#32;Receivers&#32;=&#32;<link linkend="_namespace_photon_1_1_realtime_1a32e1cc9d538d60db8e5fb79b7a4e2e40">ReceiverGroup</link>.Others&#32;};
<anchor xml:id="__photon_network_part_8cs_source_1l00876"/>00876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">internal</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;RaiseEventOptions&#32;SendToSingleOptions&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;RaiseEventOptions()&#32;{&#32;TargetActors&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>[1]&#32;};
<anchor xml:id="__photon_network_part_8cs_source_1l00877"/>00877 
<anchor xml:id="__photon_network_part_8cs_source_1l00881"/>00881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;ServerCleanInstantiateAndDestroy(PhotonView&#32;photonView)
<anchor xml:id="__photon_network_part_8cs_source_1l00882"/>00882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00883"/>00883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;filterId;
<anchor xml:id="__photon_network_part_8cs_source_1l00884"/>00884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(photonView.isRuntimeInstantiated)
<anchor xml:id="__photon_network_part_8cs_source_1l00885"/>00885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00886"/>00886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;filterId&#32;=&#32;photonView.InstantiationId;&#32;<emphasis role="comment">//&#32;actual,&#32;live&#32;InstantiationIds&#32;start&#32;with&#32;1&#32;and&#32;go&#32;up</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00887"/>00887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;remove&#32;the&#32;Instantiate-event&#32;from&#32;the&#32;server&#32;cache:</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00888"/>00888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;removeFilter[keyByteSeven]&#32;=&#32;filterId;
<anchor xml:id="__photon_network_part_8cs_source_1l00889"/>00889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ServerCleanOptions.CachingOption&#32;=&#32;<link linkend="_namespace_photon_1_1_realtime_1af18c2eb259b8f639c151ea60e026e39d">EventCaching</link>.RemoveFromRoomCache;
<anchor xml:id="__photon_network_part_8cs_source_1l00890"/>00890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.RaiseEventInternal(PunEvent.Instantiation,&#32;removeFilter,&#32;ServerCleanOptions,&#32;SendOptions.SendReliable);
<anchor xml:id="__photon_network_part_8cs_source_1l00891"/>00891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00892"/>00892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Don&apos;t&#32;remove&#32;the&#32;Instantiation&#32;from&#32;the&#32;server,&#32;if&#32;it&#32;doesn&apos;t&#32;have&#32;a&#32;proper&#32;ID</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00893"/>00893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00894"/>00894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00895"/>00895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;filterId&#32;=&#32;photonView.ViewID;
<anchor xml:id="__photon_network_part_8cs_source_1l00896"/>00896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00897"/>00897 
<anchor xml:id="__photon_network_part_8cs_source_1l00898"/>00898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;send&#32;a&#32;Destroy-event&#32;to&#32;everyone&#32;(removing&#32;an&#32;event&#32;from&#32;the&#32;cache,&#32;doesn&apos;t&#32;send&#32;this&#32;to&#32;anyone&#32;else):</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00899"/>00899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ServerCleanDestroyEvent[keyByteZero]&#32;=&#32;filterId;
<anchor xml:id="__photon_network_part_8cs_source_1l00900"/>00900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ServerCleanOptions.CachingOption&#32;=&#32;photonView.isRuntimeInstantiated&#32;?&#32;<link linkend="_namespace_photon_1_1_realtime_1af18c2eb259b8f639c151ea60e026e39d">EventCaching</link>.DoNotCache&#32;:&#32;<link linkend="_namespace_photon_1_1_realtime_1af18c2eb259b8f639c151ea60e026e39d">EventCaching</link>.AddToRoomCacheGlobal;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;the&#32;view&#32;got&#32;loaded&#32;with&#32;the&#32;scene,&#32;cache&#32;EvDestroy&#32;for&#32;anyone&#32;(re)joining&#32;later</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00901"/>00901 
<anchor xml:id="__photon_network_part_8cs_source_1l00902"/>00902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.RaiseEventInternal(PunEvent.Destroy,&#32;ServerCleanDestroyEvent,&#32;ServerCleanOptions,&#32;SendOptions.SendReliable);
<anchor xml:id="__photon_network_part_8cs_source_1l00903"/>00903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00904"/>00904 
<anchor xml:id="__photon_network_part_8cs_source_1l00905"/>00905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;SendDestroyOfPlayer(<emphasis role="keywordtype">int</emphasis>&#32;actorNr)
<anchor xml:id="__photon_network_part_8cs_source_1l00906"/>00906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00907"/>00907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ExitGames.Client.Photon.Hashtable&#32;evData&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;ExitGames.Client.Photon.Hashtable();
<anchor xml:id="__photon_network_part_8cs_source_1l00908"/>00908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;evData[keyByteZero]&#32;=&#32;actorNr;
<anchor xml:id="__photon_network_part_8cs_source_1l00909"/>00909 
<anchor xml:id="__photon_network_part_8cs_source_1l00910"/>00910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.RaiseEventInternal(PunEvent.DestroyPlayer,&#32;evData,&#32;<emphasis role="keyword">null</emphasis>,&#32;SendOptions.SendReliable);
<anchor xml:id="__photon_network_part_8cs_source_1l00911"/>00911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00912"/>00912 
<anchor xml:id="__photon_network_part_8cs_source_1l00913"/>00913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;SendDestroyOfAll()
<anchor xml:id="__photon_network_part_8cs_source_1l00914"/>00914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00915"/>00915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ExitGames.Client.Photon.Hashtable&#32;evData&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;ExitGames.Client.Photon.Hashtable();
<anchor xml:id="__photon_network_part_8cs_source_1l00916"/>00916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;evData[keyByteZero]&#32;=&#32;-1;
<anchor xml:id="__photon_network_part_8cs_source_1l00917"/>00917 
<anchor xml:id="__photon_network_part_8cs_source_1l00918"/>00918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.RaiseEventInternal(PunEvent.DestroyPlayer,&#32;evData,&#32;<emphasis role="keyword">null</emphasis>,&#32;SendOptions.SendReliable);
<anchor xml:id="__photon_network_part_8cs_source_1l00919"/>00919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00920"/>00920 
<anchor xml:id="__photon_network_part_8cs_source_1l00921"/>00921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;OpRemoveFromServerInstantiationsOfPlayer(<emphasis role="keywordtype">int</emphasis>&#32;actorNr)
<anchor xml:id="__photon_network_part_8cs_source_1l00922"/>00922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00923"/>00923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;removes&#32;all&#32;&quot;Instantiation&quot;&#32;events&#32;of&#32;player&#32;actorNr.&#32;this&#32;is&#32;not&#32;an&#32;event&#32;for&#32;anyone&#32;else</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00924"/>00924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RaiseEventOptions&#32;options&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;RaiseEventOptions()&#32;{&#32;CachingOption&#32;=&#32;<link linkend="_namespace_photon_1_1_realtime_1af18c2eb259b8f639c151ea60e026e39d">EventCaching</link>.RemoveFromRoomCache,&#32;TargetActors&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>[]&#32;{&#32;actorNr&#32;}&#32;};
<anchor xml:id="__photon_network_part_8cs_source_1l00925"/>00925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.RaiseEventInternal(PunEvent.Instantiation,&#32;<emphasis role="keyword">null</emphasis>,&#32;options,&#32;SendOptions.SendReliable);
<anchor xml:id="__photon_network_part_8cs_source_1l00926"/>00926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00927"/>00927 
<anchor xml:id="__photon_network_part_8cs_source_1l00928"/>00928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">internal</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;RequestOwnership(<emphasis role="keywordtype">int</emphasis>&#32;viewID,&#32;<emphasis role="keywordtype">int</emphasis>&#32;fromOwner)
<anchor xml:id="__photon_network_part_8cs_source_1l00929"/>00929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00930"/>00930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Debug.Log(&quot;RequestOwnership():&#32;&quot;&#32;+&#32;viewID&#32;+&#32;&quot;&#32;from:&#32;&quot;&#32;+&#32;fromOwner&#32;+&#32;&quot;&#32;Time:&#32;&quot;&#32;+&#32;Environment.TickCount&#32;%&#32;1000);</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00931"/>00931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.RaiseEventInternal(PunEvent.OwnershipRequest,&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>[]&#32;{&#32;viewID,&#32;fromOwner&#32;},&#32;SendToAllOptions,&#32;SendOptions.SendReliable);
<anchor xml:id="__photon_network_part_8cs_source_1l00932"/>00932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00933"/>00933 
<anchor xml:id="__photon_network_part_8cs_source_1l00934"/>00934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">internal</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;TransferOwnership(<emphasis role="keywordtype">int</emphasis>&#32;viewID,&#32;<emphasis role="keywordtype">int</emphasis>&#32;playerID)
<anchor xml:id="__photon_network_part_8cs_source_1l00935"/>00935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00936"/>00936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Debug.Log(&quot;TransferOwnership()&#32;view&#32;&quot;&#32;+&#32;viewID&#32;+&#32;&quot;&#32;to:&#32;&quot;&#32;+&#32;playerID&#32;+&#32;&quot;&#32;Time:&#32;&quot;&#32;+&#32;Environment.TickCount&#32;%&#32;1000);</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00937"/>00937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.RaiseEventInternal(PunEvent.OwnershipTransfer,&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>[]&#32;{&#32;viewID,&#32;playerID&#32;},&#32;SendToAllOptions,&#32;SendOptions.SendReliable);
<anchor xml:id="__photon_network_part_8cs_source_1l00938"/>00938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00939"/>00939 
<anchor xml:id="__photon_network_part_8cs_source_1l00943"/>00943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">internal</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;OwnershipUpdate(<emphasis role="keywordtype">int</emphasis>[]&#32;viewOwnerPairs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;targetActor&#32;=&#32;-1)
<anchor xml:id="__photon_network_part_8cs_source_1l00944"/>00944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00945"/>00945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RaiseEventOptions&#32;opts;
<anchor xml:id="__photon_network_part_8cs_source_1l00946"/>00946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(targetActor&#32;==&#32;-1)
<anchor xml:id="__photon_network_part_8cs_source_1l00947"/>00947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00948"/>00948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;opts&#32;=&#32;SendToOthersOptions;
<anchor xml:id="__photon_network_part_8cs_source_1l00949"/>00949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00950"/>00950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00951"/>00951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00952"/>00952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SendToSingleOptions.TargetActors[0]&#32;=&#32;targetActor;
<anchor xml:id="__photon_network_part_8cs_source_1l00953"/>00953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;opts&#32;=&#32;SendToSingleOptions;
<anchor xml:id="__photon_network_part_8cs_source_1l00954"/>00954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00955"/>00955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.RaiseEventInternal(PunEvent.OwnershipUpdate,&#32;viewOwnerPairs,&#32;opts,&#32;SendOptions.SendReliable);
<anchor xml:id="__photon_network_part_8cs_source_1l00956"/>00956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00957"/>00957 
<anchor xml:id="__photon_network_part_8cs_source_1l00958"/><link linkend="_class_photon_1_1_pun_1_1_photon_network_1a5fc0e5e4b489351e98c066601bc94936">00958</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a5fc0e5e4b489351e98c066601bc94936">LocalCleanPhotonView</link>(<link linkend="_class_photon_1_1_pun_1_1_photon_view">PhotonView</link>&#32;view)
<anchor xml:id="__photon_network_part_8cs_source_1l00959"/>00959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00960"/>00960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;view.removedFromLocalViewList&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00961"/>00961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;photonViewList.Remove(view.<link linkend="_class_photon_1_1_pun_1_1_photon_view_1a5ed698bf9795e566e9ff343a507de85f">ViewID</link>);
<anchor xml:id="__photon_network_part_8cs_source_1l00962"/>00962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00963"/>00963 
<anchor xml:id="__photon_network_part_8cs_source_1l00964"/><link linkend="_class_photon_1_1_pun_1_1_photon_network_1a5a0dc3a5cdb4df9d0704a9bd67145cae">00964</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_view">PhotonView</link>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a5a0dc3a5cdb4df9d0704a9bd67145cae">GetPhotonView</link>(<emphasis role="keywordtype">int</emphasis>&#32;viewID)
<anchor xml:id="__photon_network_part_8cs_source_1l00965"/>00965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00966"/>00966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_view">PhotonView</link>&#32;result&#32;=&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00967"/>00967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;photonViewList.TryGetValue(viewID,&#32;out&#32;result);
<anchor xml:id="__photon_network_part_8cs_source_1l00968"/>00968 
<anchor xml:id="__photon_network_part_8cs_source_1l00970"/>00970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//if&#32;(result&#32;==&#32;null)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00971"/>00971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//{</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00972"/>00972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;PhotonView[]&#32;views&#32;=&#32;GameObject.FindObjectsOfType(typeof(PhotonView))&#32;as&#32;PhotonView[];</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00973"/>00973 
<anchor xml:id="__photon_network_part_8cs_source_1l00974"/>00974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;for&#32;(int&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;views.Length;&#32;i++)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00975"/>00975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00976"/>00976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonView&#32;view&#32;=&#32;views[i];</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00977"/>00977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(view.ViewID&#32;==&#32;viewID)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00978"/>00978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00979"/>00979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(view.didAwake)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00980"/>00980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00981"/>00981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Debug.LogWarning(&quot;Had&#32;to&#32;lookup&#32;view&#32;that&#32;wasn&apos;t&#32;in&#32;photonViewList:&#32;&quot;&#32;+&#32;view);</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00982"/>00982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00983"/>00983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;view;</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00984"/>00984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00985"/>00985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00986"/>00986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//}</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l00987"/>00987 
<anchor xml:id="__photon_network_part_8cs_source_1l00988"/>00988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="__photon_network_part_8cs_source_1l00989"/>00989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00990"/>00990 
<anchor xml:id="__photon_network_part_8cs_source_1l00991"/><link linkend="_class_photon_1_1_pun_1_1_photon_network_1aab7b6f3722d255f61026370a492b17c9">00991</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1aab7b6f3722d255f61026370a492b17c9">RegisterPhotonView</link>(<link linkend="_class_photon_1_1_pun_1_1_photon_view">PhotonView</link>&#32;netView)
<anchor xml:id="__photon_network_part_8cs_source_1l00992"/>00992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00993"/>00993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Application.isPlaying)
<anchor xml:id="__photon_network_part_8cs_source_1l00994"/>00994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l00995"/>00995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;photonViewList&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;NonAllocDictionary&lt;int,&#32;PhotonView&gt;();
<anchor xml:id="__photon_network_part_8cs_source_1l00996"/>00996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l00997"/>00997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l00998"/>00998 
<anchor xml:id="__photon_network_part_8cs_source_1l00999"/>00999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(netView.<link linkend="_class_photon_1_1_pun_1_1_photon_view_1a5ed698bf9795e566e9ff343a507de85f">ViewID</link>&#32;==&#32;0)
<anchor xml:id="__photon_network_part_8cs_source_1l01000"/>01000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01001"/>01001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;don&apos;t&#32;register&#32;views&#32;with&#32;ID&#32;0&#32;(not&#32;initialized).&#32;they&#32;register&#32;when&#32;a&#32;ID&#32;is&#32;assigned&#32;later&#32;on</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01002"/>01002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_photon_1_1_pun_1ac6a6ed4f0d7a7522026d8cd2beec9671">Debug</link>.Log(<emphasis role="stringliteral">&quot;PhotonView&#32;register&#32;is&#32;ignored,&#32;because&#32;viewID&#32;is&#32;0.&#32;No&#32;id&#32;assigned&#32;yet&#32;to:&#32;&quot;</emphasis>&#32;+&#32;netView);
<anchor xml:id="__photon_network_part_8cs_source_1l01003"/>01003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01004"/>01004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01005"/>01005 
<anchor xml:id="__photon_network_part_8cs_source_1l01006"/>01006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_view">PhotonView</link>&#32;listedView&#32;=&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01007"/>01007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isViewListed&#32;=&#32;photonViewList.TryGetValue(netView.<link linkend="_class_photon_1_1_pun_1_1_photon_view_1a5ed698bf9795e566e9ff343a507de85f">ViewID</link>,&#32;out&#32;listedView);
<anchor xml:id="__photon_network_part_8cs_source_1l01008"/>01008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isViewListed)
<anchor xml:id="__photon_network_part_8cs_source_1l01009"/>01009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01010"/>01010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;some&#32;other&#32;view&#32;is&#32;in&#32;the&#32;list&#32;already,&#32;we&#32;got&#32;a&#32;problem.&#32;it&#32;might&#32;be&#32;indestructible.&#32;print&#32;out&#32;error</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01011"/>01011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(netView&#32;!=&#32;listedView)
<anchor xml:id="__photon_network_part_8cs_source_1l01012"/>01012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01013"/>01013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_photon_1_1_pun_1ac6a6ed4f0d7a7522026d8cd2beec9671">Debug</link>.LogError(<emphasis role="keywordtype">string</emphasis>.Format(<emphasis role="stringliteral">&quot;PhotonView&#32;ID&#32;duplicate&#32;found:&#32;{0}.&#32;New:&#32;{1}&#32;old:&#32;{2}.&#32;Maybe&#32;one&#32;wasn&apos;t&#32;destroyed&#32;on&#32;scene&#32;load?!&#32;Check&#32;for&#32;&apos;DontDestroyOnLoad&apos;.&#32;Destroying&#32;old&#32;entry,&#32;adding&#32;new.&quot;</emphasis>,&#32;netView.<link linkend="_class_photon_1_1_pun_1_1_photon_view_1a5ed698bf9795e566e9ff343a507de85f">ViewID</link>,&#32;netView,&#32;listedView));
<anchor xml:id="__photon_network_part_8cs_source_1l01014"/>01014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01015"/>01015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01016"/>01016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01017"/>01017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01018"/>01018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01019"/>01019 
<anchor xml:id="__photon_network_part_8cs_source_1l01020"/>01020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RemoveInstantiatedGO(listedView.gameObject,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l01021"/>01021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01022"/>01022 
<anchor xml:id="__photon_network_part_8cs_source_1l01023"/>01023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Debug.Log(&quot;adding&#32;view&#32;to&#32;known&#32;list:&#32;&quot;&#32;+&#32;netView);</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01024"/>01024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;photonViewList.Add(netView.<link linkend="_class_photon_1_1_pun_1_1_photon_view_1a5ed698bf9795e566e9ff343a507de85f">ViewID</link>,&#32;netView);
<anchor xml:id="__photon_network_part_8cs_source_1l01025"/>01025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;netView.removedFromLocalViewList&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01026"/>01026 
<anchor xml:id="__photon_network_part_8cs_source_1l01027"/>01027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Debug.LogError(&quot;view&#32;being&#32;added.&#32;&quot;&#32;+&#32;netView);&#32;&#32;&#32;//&#32;Exit&#32;Games&#32;internal&#32;log</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01028"/>01028 
<anchor xml:id="__photon_network_part_8cs_source_1l01029"/>01029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_pun_1_1_photon_network">PhotonNetwork</link>.<link linkend="_class_photon_1_1_pun_1_1_photon_network_1aa8af6239914ab71acd29b56e9610f534">LogLevel</link>&#32;&gt;=&#32;<link linkend="_group__public_api_1ga5a8128eaeb2f346d4cceb57d48caf9c1">PunLogLevel</link>.Full)
<anchor xml:id="__photon_network_part_8cs_source_1l01030"/>01030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01031"/>01031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_photon_1_1_pun_1ac6a6ed4f0d7a7522026d8cd2beec9671">Debug</link>.Log(<emphasis role="stringliteral">&quot;Registered&#32;PhotonView:&#32;&quot;</emphasis>&#32;+&#32;netView.<link linkend="_class_photon_1_1_pun_1_1_photon_view_1a5ed698bf9795e566e9ff343a507de85f">ViewID</link>);
<anchor xml:id="__photon_network_part_8cs_source_1l01032"/>01032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01033"/>01033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01034"/>01034 
<anchor xml:id="__photon_network_part_8cs_source_1l01035"/>01035 
<anchor xml:id="__photon_network_part_8cs_source_1l01041"/><link linkend="_class_photon_1_1_pun_1_1_photon_network_1a92ebf88db80533a34e0dd73ffb6b1086">01041</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a92ebf88db80533a34e0dd73ffb6b1086">OpCleanActorRpcBuffer</link>(<emphasis role="keywordtype">int</emphasis>&#32;actorNumber)
<anchor xml:id="__photon_network_part_8cs_source_1l01042"/>01042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01043"/>01043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_realtime_1_1_raise_event_options">RaiseEventOptions</link>&#32;options&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_photon_1_1_realtime_1_1_raise_event_options">RaiseEventOptions</link>()&#32;{&#32;CachingOption&#32;=&#32;<link linkend="_namespace_photon_1_1_realtime_1af18c2eb259b8f639c151ea60e026e39d">EventCaching</link>.RemoveFromRoomCache,&#32;TargetActors&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>[]&#32;{&#32;actorNumber&#32;}&#32;};
<anchor xml:id="__photon_network_part_8cs_source_1l01044"/>01044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network">PhotonNetwork</link>.RaiseEventInternal(PunEvent.RPC,&#32;<emphasis role="keyword">null</emphasis>,&#32;options,&#32;SendOptions.SendReliable);
<anchor xml:id="__photon_network_part_8cs_source_1l01045"/>01045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01046"/>01046 
<anchor xml:id="__photon_network_part_8cs_source_1l01051"/><link linkend="_class_photon_1_1_pun_1_1_photon_network_1a1d6b12821927bafd0b26033232400bbd">01051</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a1d6b12821927bafd0b26033232400bbd">OpRemoveCompleteCacheOfPlayer</link>(<emphasis role="keywordtype">int</emphasis>&#32;actorNumber)
<anchor xml:id="__photon_network_part_8cs_source_1l01052"/>01052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01053"/>01053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_realtime_1_1_raise_event_options">RaiseEventOptions</link>&#32;options&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_photon_1_1_realtime_1_1_raise_event_options">RaiseEventOptions</link>()&#32;{&#32;CachingOption&#32;=&#32;<link linkend="_namespace_photon_1_1_realtime_1af18c2eb259b8f639c151ea60e026e39d">EventCaching</link>.RemoveFromRoomCache,&#32;TargetActors&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>[]&#32;{&#32;actorNumber&#32;}&#32;};
<anchor xml:id="__photon_network_part_8cs_source_1l01054"/>01054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network">PhotonNetwork</link>.RaiseEventInternal(0,&#32;<emphasis role="keyword">null</emphasis>,&#32;options,&#32;SendOptions.SendReliable);
<anchor xml:id="__photon_network_part_8cs_source_1l01055"/>01055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01056"/>01056 
<anchor xml:id="__photon_network_part_8cs_source_1l01057"/>01057 
<anchor xml:id="__photon_network_part_8cs_source_1l01058"/><link linkend="_class_photon_1_1_pun_1_1_photon_network_1a499d471cc173a8603d8f3af988eecbca">01058</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a499d471cc173a8603d8f3af988eecbca">OpRemoveCompleteCache</link>()
<anchor xml:id="__photon_network_part_8cs_source_1l01059"/>01059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01060"/>01060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_realtime_1_1_raise_event_options">RaiseEventOptions</link>&#32;options&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_photon_1_1_realtime_1_1_raise_event_options">RaiseEventOptions</link>()&#32;{&#32;CachingOption&#32;=&#32;<link linkend="_namespace_photon_1_1_realtime_1af18c2eb259b8f639c151ea60e026e39d">EventCaching</link>.RemoveFromRoomCache,&#32;Receivers&#32;=&#32;<link linkend="_namespace_photon_1_1_realtime_1a32e1cc9d538d60db8e5fb79b7a4e2e40">ReceiverGroup</link>.MasterClient&#32;};
<anchor xml:id="__photon_network_part_8cs_source_1l01061"/>01061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network">PhotonNetwork</link>.RaiseEventInternal(0,&#32;<emphasis role="keyword">null</emphasis>,&#32;options,&#32;SendOptions.SendReliable);
<anchor xml:id="__photon_network_part_8cs_source_1l01062"/>01062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01063"/>01063 
<anchor xml:id="__photon_network_part_8cs_source_1l01065"/>01065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;RemoveCacheOfLeftPlayers()
<anchor xml:id="__photon_network_part_8cs_source_1l01066"/>01066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01067"/>01067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Dictionary&lt;byte,&#32;object&gt;&#32;opParameters&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Dictionary&lt;byte,&#32;object&gt;();
<anchor xml:id="__photon_network_part_8cs_source_1l01068"/>01068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;opParameters[<link linkend="_class_photon_1_1_realtime_1_1_parameter_code">ParameterCode</link>.<link linkend="_class_photon_1_1_realtime_1_1_parameter_code_1a311d4d2d58c7f10c0e75e8a083b372c3">Code</link>]&#32;=&#32;(byte)0;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;any&#32;event</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01069"/>01069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;opParameters[<link linkend="_class_photon_1_1_realtime_1_1_parameter_code">ParameterCode</link>.<link linkend="_class_photon_1_1_realtime_1_1_parameter_code_1a50859b54bfd299bdf88fe53497f53bb9">Cache</link>]&#32;=&#32;(byte)<link linkend="_namespace_photon_1_1_realtime_1af18c2eb259b8f639c151ea60e026e39d">EventCaching</link>.RemoveFromRoomCacheForActorsLeft;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;option&#32;to&#32;clear&#32;the&#32;room&#32;cache&#32;of&#32;all&#32;events&#32;of&#32;players&#32;who&#32;left</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01070"/>01070 
<anchor xml:id="__photon_network_part_8cs_source_1l01071"/>01071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a312fc99165f039e31b65bebbafdf6736">NetworkingClient</link>.<link linkend="_class_photon_1_1_realtime_1_1_load_balancing_client_1af904931c4eec2bbc5f34ee8d15d0b807">LoadBalancingPeer</link>.SendOperation((<emphasis role="keywordtype">byte</emphasis>)<link linkend="_class_photon_1_1_realtime_1_1_operation_code">OperationCode</link>.<link linkend="_class_photon_1_1_realtime_1_1_operation_code_1a1b88e572bc7ddcfd851354edc261395d">RaiseEvent</link>,&#32;opParameters,&#32;SendOptions.SendReliable);&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;Check&#32;if&#32;this&#32;is&#32;the&#32;best&#32;implementation&#32;possible</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01072"/>01072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01073"/>01073 
<anchor xml:id="__photon_network_part_8cs_source_1l01074"/>01074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Remove&#32;RPCs&#32;of&#32;view&#32;(if&#32;they&#32;are&#32;local&#32;player&apos;s&#32;RPCs)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01075"/><link linkend="_class_photon_1_1_pun_1_1_photon_network_1acf94c5d71fe4fc49213ff466d5613dce">01075</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1acf94c5d71fe4fc49213ff466d5613dce">CleanRpcBufferIfMine</link>(<link linkend="_class_photon_1_1_pun_1_1_photon_view">PhotonView</link>&#32;view)
<anchor xml:id="__photon_network_part_8cs_source_1l01076"/>01076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01077"/>01077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(view.<link linkend="_class_photon_1_1_pun_1_1_photon_view_1a205e8c5b49c4ad865a5bc7c0b8f0b801">OwnerActorNr</link>&#32;!=&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a312fc99165f039e31b65bebbafdf6736">NetworkingClient</link>.<link linkend="_class_photon_1_1_realtime_1_1_load_balancing_client_1a50fb7f5363ea8a9f4200f2793580e895">LocalPlayer</link>.<link linkend="_class_photon_1_1_realtime_1_1_player_1ab06642bd6b1e192ed22a48832cd1b28a">ActorNumber</link>&#32;&amp;&amp;&#32;!<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a312fc99165f039e31b65bebbafdf6736">NetworkingClient</link>.<link linkend="_class_photon_1_1_realtime_1_1_load_balancing_client_1a50fb7f5363ea8a9f4200f2793580e895">LocalPlayer</link>.<link linkend="_class_photon_1_1_realtime_1_1_player_1a650042ff3d147ed8cd559b6258ce238d">IsMasterClient</link>)
<anchor xml:id="__photon_network_part_8cs_source_1l01078"/>01078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01079"/>01079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_photon_1_1_pun_1ac6a6ed4f0d7a7522026d8cd2beec9671">Debug</link>.LogError(<emphasis role="stringliteral">&quot;Cannot&#32;remove&#32;cached&#32;RPCs&#32;on&#32;a&#32;PhotonView&#32;thats&#32;not&#32;ours!&#32;&quot;</emphasis>&#32;+&#32;view.<link linkend="_class_photon_1_1_pun_1_1_photon_view_1ab72b5dbbff54e7e4bc8027998ec9d408">Owner</link>&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;scene:&#32;&quot;</emphasis>&#32;+&#32;view.<link linkend="_class_photon_1_1_pun_1_1_photon_view_1ae6cde08b099b3158e9bfcbf1f709bcb3">IsRoomView</link>);
<anchor xml:id="__photon_network_part_8cs_source_1l01080"/>01080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01081"/>01081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01082"/>01082 
<anchor xml:id="__photon_network_part_8cs_source_1l01083"/>01083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a9aad4dca8370d71a36a72d57a4fb3240">OpCleanRpcBuffer</link>(view);
<anchor xml:id="__photon_network_part_8cs_source_1l01084"/>01084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01085"/>01085 
<anchor xml:id="__photon_network_part_8cs_source_1l01086"/>01086 
<anchor xml:id="__photon_network_part_8cs_source_1l01087"/>01087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;readonly&#32;<link linkend="_namespace_photon_1_1_pun_1ac76b06ac6ca332ba5e95f9521501ed77">Hashtable</link>&#32;rpcFilterByViewId&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;ExitGames.Client.Photon.Hashtable();
<anchor xml:id="__photon_network_part_8cs_source_1l01088"/>01088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;readonly&#32;<link linkend="_class_photon_1_1_realtime_1_1_raise_event_options">RaiseEventOptions</link>&#32;OpCleanRpcBufferOptions&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_photon_1_1_realtime_1_1_raise_event_options">RaiseEventOptions</link>()&#32;{&#32;CachingOption&#32;=&#32;<link linkend="_namespace_photon_1_1_realtime_1af18c2eb259b8f639c151ea60e026e39d">EventCaching</link>.RemoveFromRoomCache&#32;};
<anchor xml:id="__photon_network_part_8cs_source_1l01089"/>01089 
<anchor xml:id="__photon_network_part_8cs_source_1l01091"/><link linkend="_class_photon_1_1_pun_1_1_photon_network_1a9aad4dca8370d71a36a72d57a4fb3240">01091</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a9aad4dca8370d71a36a72d57a4fb3240">OpCleanRpcBuffer</link>(<link linkend="_class_photon_1_1_pun_1_1_photon_view">PhotonView</link>&#32;view)
<anchor xml:id="__photon_network_part_8cs_source_1l01092"/>01092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01093"/>01093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rpcFilterByViewId[keyByteZero]&#32;=&#32;view.<link linkend="_class_photon_1_1_pun_1_1_photon_view_1a5ed698bf9795e566e9ff343a507de85f">ViewID</link>;
<anchor xml:id="__photon_network_part_8cs_source_1l01094"/>01094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network">PhotonNetwork</link>.RaiseEventInternal(PunEvent.RPC,&#32;rpcFilterByViewId,&#32;OpCleanRpcBufferOptions,&#32;SendOptions.SendReliable);
<anchor xml:id="__photon_network_part_8cs_source_1l01095"/>01095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01096"/>01096 
<anchor xml:id="__photon_network_part_8cs_source_1l01106"/><link linkend="_class_photon_1_1_pun_1_1_photon_network_1aae076cc19e6b371c3e0dd5caf651cee3">01106</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1aae076cc19e6b371c3e0dd5caf651cee3">RemoveRPCsInGroup</link>(<emphasis role="keywordtype">int</emphasis>&#32;group)
<anchor xml:id="__photon_network_part_8cs_source_1l01107"/>01107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01108"/>01108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(<link linkend="_class_photon_1_1_pun_1_1_photon_view">PhotonView</link>&#32;view&#32;<emphasis role="keywordflow">in</emphasis>&#32;photonViewList.Values)
<anchor xml:id="__photon_network_part_8cs_source_1l01109"/>01109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01110"/>01110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(view.<link linkend="_class_photon_1_1_pun_1_1_photon_view_1a449aad3553d332c2b8e4d52e4996ba79">Group</link>&#32;==&#32;group)
<anchor xml:id="__photon_network_part_8cs_source_1l01111"/>01111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01112"/>01112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1acf94c5d71fe4fc49213ff466d5613dce">CleanRpcBufferIfMine</link>(view);
<anchor xml:id="__photon_network_part_8cs_source_1l01113"/>01113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01114"/>01114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01115"/>01115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01116"/>01116 
<anchor xml:id="__photon_network_part_8cs_source_1l01124"/><link linkend="_class_photon_1_1_pun_1_1_photon_network_1a945d91d15518d2a5f64e774016e71e54">01124</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a945d91d15518d2a5f64e774016e71e54">RemoveBufferedRPCs</link>(<emphasis role="keywordtype">int</emphasis>&#32;viewId&#32;=&#32;0,&#32;<emphasis role="keywordtype">string</emphasis>&#32;methodName&#32;=&#32;<emphasis role="keyword">null</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>[]&#32;callersActorNumbers&#32;=&#32;<emphasis role="keyword">null</emphasis><emphasis role="comment">/*,&#32;params&#32;object[]&#32;parameters*/</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l01125"/>01125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01126"/>01126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_photon_1_1_pun_1ac76b06ac6ca332ba5e95f9521501ed77">Hashtable</link>&#32;filter&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1ac76b06ac6ca332ba5e95f9521501ed77">Hashtable</link>(2);
<anchor xml:id="__photon_network_part_8cs_source_1l01127"/>01127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(viewId&#32;!=&#32;0)
<anchor xml:id="__photon_network_part_8cs_source_1l01128"/>01128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01129"/>01129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;filter[keyByteZero]&#32;=&#32;viewId;
<anchor xml:id="__photon_network_part_8cs_source_1l01130"/>01130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01131"/>01131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<emphasis role="keywordtype">string</emphasis>.IsNullOrEmpty(methodName))
<anchor xml:id="__photon_network_part_8cs_source_1l01132"/>01132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01133"/>01133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;send&#32;name&#32;or&#32;shortcut&#32;(if&#32;available)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01134"/>01134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;shortcut;
<anchor xml:id="__photon_network_part_8cs_source_1l01135"/>01135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rpcShortcuts.TryGetValue(methodName,&#32;out&#32;shortcut))
<anchor xml:id="__photon_network_part_8cs_source_1l01136"/>01136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01137"/>01137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;filter[keyByteFive]&#32;=&#32;(byte)shortcut;&#32;<emphasis role="comment">//&#32;LIMITS&#32;RPC&#32;COUNT</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01138"/>01138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01139"/>01139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01140"/>01140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01141"/>01141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;filter[keyByteThree]&#32;=&#32;methodName;
<anchor xml:id="__photon_network_part_8cs_source_1l01142"/>01142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01143"/>01143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01144"/>01144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//if&#32;(parameters&#32;!=&#32;null&#32;&amp;&amp;&#32;parameters.Length&#32;&gt;&#32;0)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01145"/>01145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//{</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01146"/>01146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;filter[keyByteFour]&#32;=&#32;parameters;</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01147"/>01147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//}</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01148"/>01148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_realtime_1_1_raise_event_options">RaiseEventOptions</link>&#32;raiseEventOptions&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_photon_1_1_realtime_1_1_raise_event_options">RaiseEventOptions</link>();
<anchor xml:id="__photon_network_part_8cs_source_1l01149"/>01149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;raiseEventOptions.<link linkend="_class_photon_1_1_realtime_1_1_raise_event_options_1a2cafe0d5ae44aff41ff0c56b51ac7371">CachingOption</link>&#32;=&#32;<link linkend="_namespace_photon_1_1_realtime_1af18c2eb259b8f639c151ea60e026e39d">EventCaching</link>.RemoveFromRoomCache;
<anchor xml:id="__photon_network_part_8cs_source_1l01150"/>01150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(callersActorNumbers&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l01151"/>01151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01152"/>01152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;raiseEventOptions.<link linkend="_class_photon_1_1_realtime_1_1_raise_event_options_1a7ae00d7adbbe048dbb1a6a05e09c3d6d">TargetActors</link>&#32;=&#32;callersActorNumbers;
<anchor xml:id="__photon_network_part_8cs_source_1l01153"/>01153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01154"/>01154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;RaiseEventInternal(PunEvent.RPC,&#32;filter,&#32;raiseEventOptions,&#32;SendOptions.SendReliable);
<anchor xml:id="__photon_network_part_8cs_source_1l01155"/>01155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01156"/>01156 
<anchor xml:id="__photon_network_part_8cs_source_1l01172"/><link linkend="_class_photon_1_1_pun_1_1_photon_network_1aa96c0ef07eda12df14185fd5d6aa0dda">01172</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1aa96c0ef07eda12df14185fd5d6aa0dda">SetLevelPrefix</link>(<emphasis role="keywordtype">byte</emphasis>&#32;prefix)
<anchor xml:id="__photon_network_part_8cs_source_1l01173"/>01173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01174"/>01174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;check&#32;can&#32;use&#32;network</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01175"/>01175 
<anchor xml:id="__photon_network_part_8cs_source_1l01176"/>01176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentLevelPrefix&#32;=&#32;prefix;
<anchor xml:id="__photon_network_part_8cs_source_1l01177"/>01177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;should&#32;we&#32;really&#32;change&#32;the&#32;prefix&#32;for&#32;existing&#32;PVs?!&#32;better&#32;keep&#32;it!</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01178"/>01178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//foreach&#32;(PhotonView&#32;view&#32;in&#32;photonViewList.Values)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01179"/>01179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//{</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01180"/>01180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;view.prefix&#32;=&#32;prefix;</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01181"/>01181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//}</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01182"/>01182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01183"/>01183 
<anchor xml:id="__photon_network_part_8cs_source_1l01184"/>01184 
<anchor xml:id="__photon_network_part_8cs_source_1l01194"/>01194 
<anchor xml:id="__photon_network_part_8cs_source_1l01195"/>01195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;ExitGames.Client.Photon.Hashtable&#32;rpcEvent&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;ExitGames.Client.Photon.Hashtable();
<anchor xml:id="__photon_network_part_8cs_source_1l01196"/>01196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_class_photon_1_1_realtime_1_1_raise_event_options">RaiseEventOptions</link>&#32;RpcOptionsToAll&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_photon_1_1_realtime_1_1_raise_event_options">RaiseEventOptions</link>();
<anchor xml:id="__photon_network_part_8cs_source_1l01197"/>01197 
<anchor xml:id="__photon_network_part_8cs_source_1l01198"/>01198 
<anchor xml:id="__photon_network_part_8cs_source_1l01199"/>01199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">internal</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;RPC(<link linkend="_class_photon_1_1_pun_1_1_photon_view">PhotonView</link>&#32;view,&#32;<emphasis role="keywordtype">string</emphasis>&#32;methodName,&#32;<link linkend="_group__public_api_1gad59a35d37925dbf12a969adac050714b">RpcTarget</link>&#32;target,&#32;<link linkend="_class_photon_1_1_realtime_1_1_player">Player</link>&#32;player,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;encrypt,&#32;params&#32;<emphasis role="keywordtype">object</emphasis>[]&#32;parameters)
<anchor xml:id="__photon_network_part_8cs_source_1l01200"/>01200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01201"/>01201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(blockedSendingGroups.Contains(view.<link linkend="_class_photon_1_1_pun_1_1_photon_view_1a449aad3553d332c2b8e4d52e4996ba79">Group</link>))
<anchor xml:id="__photon_network_part_8cs_source_1l01202"/>01202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01203"/>01203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;&#32;<emphasis role="comment">//&#32;Block&#32;sending&#32;on&#32;this&#32;group</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01204"/>01204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01205"/>01205 
<anchor xml:id="__photon_network_part_8cs_source_1l01206"/>01206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(view.<link linkend="_class_photon_1_1_pun_1_1_photon_view_1a5ed698bf9795e566e9ff343a507de85f">ViewID</link>&#32;&lt;&#32;1)
<anchor xml:id="__photon_network_part_8cs_source_1l01207"/>01207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01208"/>01208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogError(<emphasis role="stringliteral">&quot;Illegal&#32;view&#32;ID:&quot;</emphasis>&#32;+&#32;view.<link linkend="_class_photon_1_1_pun_1_1_photon_view_1a5ed698bf9795e566e9ff343a507de85f">ViewID</link>&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;method:&#32;&quot;</emphasis>&#32;+&#32;methodName&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;GO:&quot;</emphasis>&#32;+&#32;view.gameObject.name);
<anchor xml:id="__photon_network_part_8cs_source_1l01209"/>01209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01210"/>01210 
<anchor xml:id="__photon_network_part_8cs_source_1l01211"/>01211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.LogLevel&#32;&gt;=&#32;<link linkend="_group__public_api_1ga5a8128eaeb2f346d4cceb57d48caf9c1">PunLogLevel</link>.Full)
<anchor xml:id="__photon_network_part_8cs_source_1l01212"/>01212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01213"/>01213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.Log(<emphasis role="stringliteral">&quot;Sending&#32;RPC&#32;\&quot;&quot;</emphasis>&#32;+&#32;methodName&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;to&#32;target:&#32;&quot;</emphasis>&#32;+&#32;target&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;or&#32;player:&quot;</emphasis>&#32;+&#32;player&#32;+&#32;<emphasis role="stringliteral">&quot;.&quot;</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l01214"/>01214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01215"/>01215 
<anchor xml:id="__photon_network_part_8cs_source_1l01216"/>01216 
<anchor xml:id="__photon_network_part_8cs_source_1l01217"/>01217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//ts:&#32;changed&#32;RPCs&#32;to&#32;a&#32;one-level&#32;hashtable&#32;as&#32;described&#32;in&#32;internal.txt</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01218"/>01218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rpcEvent.Clear();
<anchor xml:id="__photon_network_part_8cs_source_1l01219"/>01219 
<anchor xml:id="__photon_network_part_8cs_source_1l01220"/>01220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rpcEvent[keyByteZero]&#32;=&#32;(int)view.<link linkend="_class_photon_1_1_pun_1_1_photon_view_1a5ed698bf9795e566e9ff343a507de85f">ViewID</link>;&#32;<emphasis role="comment">//&#32;LIMITS&#32;NETWORKVIEWS&amp;PLAYERS</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01221"/>01221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(view.<link linkend="_class_photon_1_1_pun_1_1_photon_view_1aa12f699ef9764d2992479336743d1b5e">Prefix</link>&#32;&gt;&#32;0)
<anchor xml:id="__photon_network_part_8cs_source_1l01222"/>01222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01223"/>01223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rpcEvent[keyByteOne]&#32;=&#32;(short)view.<link linkend="_class_photon_1_1_pun_1_1_photon_view_1aa12f699ef9764d2992479336743d1b5e">Prefix</link>;
<anchor xml:id="__photon_network_part_8cs_source_1l01224"/>01224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01225"/>01225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rpcEvent[keyByteTwo]&#32;=&#32;PhotonNetwork.ServerTimestamp;
<anchor xml:id="__photon_network_part_8cs_source_1l01226"/>01226 
<anchor xml:id="__photon_network_part_8cs_source_1l01227"/>01227 
<anchor xml:id="__photon_network_part_8cs_source_1l01228"/>01228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;send&#32;name&#32;or&#32;shortcut&#32;(if&#32;available)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01229"/>01229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;shortcut&#32;=&#32;0;
<anchor xml:id="__photon_network_part_8cs_source_1l01230"/>01230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rpcShortcuts.TryGetValue(methodName,&#32;out&#32;shortcut))
<anchor xml:id="__photon_network_part_8cs_source_1l01231"/>01231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01232"/>01232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rpcEvent[keyByteFive]&#32;=&#32;(byte)shortcut;&#32;<emphasis role="comment">//&#32;LIMITS&#32;RPC&#32;COUNT</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01233"/>01233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01234"/>01234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01235"/>01235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01236"/>01236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rpcEvent[keyByteThree]&#32;=&#32;methodName;
<anchor xml:id="__photon_network_part_8cs_source_1l01237"/>01237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01238"/>01238 
<anchor xml:id="__photon_network_part_8cs_source_1l01239"/>01239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parameters&#32;!=&#32;<emphasis role="keyword">null</emphasis>&#32;&amp;&amp;&#32;parameters.Length&#32;&gt;&#32;0)
<anchor xml:id="__photon_network_part_8cs_source_1l01240"/>01240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01241"/>01241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rpcEvent[keyByteFour]&#32;=&#32;(<emphasis role="keywordtype">object</emphasis>[])parameters;
<anchor xml:id="__photon_network_part_8cs_source_1l01242"/>01242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01243"/>01243 
<anchor xml:id="__photon_network_part_8cs_source_1l01244"/>01244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SendOptions&#32;sendOptions&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;SendOptions()&#32;{&#32;Reliability&#32;=&#32;<emphasis role="keyword">true</emphasis>,&#32;Encrypt&#32;=&#32;encrypt&#32;};
<anchor xml:id="__photon_network_part_8cs_source_1l01245"/>01245 
<anchor xml:id="__photon_network_part_8cs_source_1l01246"/>01246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;sent&#32;to&#32;target&#32;player,&#32;this&#32;overrides&#32;the&#32;target</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01247"/>01247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(player&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l01248"/>01248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01249"/>01249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a312fc99165f039e31b65bebbafdf6736">NetworkingClient</link>.<link linkend="_class_photon_1_1_realtime_1_1_load_balancing_client_1a50fb7f5363ea8a9f4200f2793580e895">LocalPlayer</link>.<link linkend="_class_photon_1_1_realtime_1_1_player_1ab06642bd6b1e192ed22a48832cd1b28a">ActorNumber</link>&#32;==&#32;player.<link linkend="_class_photon_1_1_realtime_1_1_player_1ab06642bd6b1e192ed22a48832cd1b28a">ActorNumber</link>)
<anchor xml:id="__photon_network_part_8cs_source_1l01250"/>01250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01251"/>01251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ExecuteRpc(rpcEvent,&#32;player);
<anchor xml:id="__photon_network_part_8cs_source_1l01252"/>01252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01253"/>01253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01254"/>01254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01255"/>01255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RaiseEventOptions&#32;options&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;RaiseEventOptions()&#32;{&#32;TargetActors&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>[]&#32;{&#32;player.<link linkend="_class_photon_1_1_realtime_1_1_player_1ab06642bd6b1e192ed22a48832cd1b28a">ActorNumber</link>&#32;}&#32;};
<anchor xml:id="__photon_network_part_8cs_source_1l01256"/>01256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.RaiseEventInternal(PunEvent.RPC,&#32;rpcEvent,&#32;options,&#32;sendOptions);
<anchor xml:id="__photon_network_part_8cs_source_1l01257"/>01257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NetworkingClient.OpRaiseEvent(PunEvent.RPC,&#32;rpcEvent,&#32;options,&#32;new&#32;SendOptions()&#32;{&#32;Reliability&#32;=&#32;true,&#32;Encrypt&#32;=&#32;encrypt&#32;});</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01258"/>01258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01259"/>01259 
<anchor xml:id="__photon_network_part_8cs_source_1l01260"/>01260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01261"/>01261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01262"/>01262 
<anchor xml:id="__photon_network_part_8cs_source_1l01263"/>01263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(target)
<anchor xml:id="__photon_network_part_8cs_source_1l01264"/>01264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01265"/>01265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;send&#32;to&#32;a&#32;specific&#32;set&#32;of&#32;players</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01266"/>01266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__public_api_1gad59a35d37925dbf12a969adac050714b">RpcTarget</link>.All:
<anchor xml:id="__photon_network_part_8cs_source_1l01267"/>01267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RpcOptionsToAll.<link linkend="_class_photon_1_1_realtime_1_1_raise_event_options_1af4c52d5315b4338538803ef61e676165">InterestGroup</link>&#32;=&#32;(byte)view.<link linkend="_class_photon_1_1_pun_1_1_photon_view_1a449aad3553d332c2b8e4d52e4996ba79">Group</link>;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTE:&#32;Test-wise,&#32;this&#32;is&#32;static&#32;and&#32;re-used&#32;to&#32;avoid&#32;memory&#32;garbage</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01268"/>01268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.RaiseEventInternal(PunEvent.RPC,&#32;rpcEvent,&#32;RpcOptionsToAll,&#32;sendOptions);
<anchor xml:id="__photon_network_part_8cs_source_1l01269"/>01269 
<anchor xml:id="__photon_network_part_8cs_source_1l01270"/>01270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Execute&#32;local</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01271"/>01271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ExecuteRpc(rpcEvent,&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a312fc99165f039e31b65bebbafdf6736">NetworkingClient</link>.<link linkend="_class_photon_1_1_realtime_1_1_load_balancing_client_1a50fb7f5363ea8a9f4200f2793580e895">LocalPlayer</link>);
<anchor xml:id="__photon_network_part_8cs_source_1l01272"/>01272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01273"/>01273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__public_api_1gad59a35d37925dbf12a969adac050714b">RpcTarget</link>.Others:
<anchor xml:id="__photon_network_part_8cs_source_1l01274"/>01274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01275"/>01275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RaiseEventOptions&#32;options&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;RaiseEventOptions()&#32;{&#32;InterestGroup&#32;=&#32;(byte)view.<link linkend="_class_photon_1_1_pun_1_1_photon_view_1a449aad3553d332c2b8e4d52e4996ba79">Group</link>&#32;};
<anchor xml:id="__photon_network_part_8cs_source_1l01276"/>01276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.RaiseEventInternal(PunEvent.RPC,&#32;rpcEvent,&#32;options,&#32;sendOptions);
<anchor xml:id="__photon_network_part_8cs_source_1l01277"/>01277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01278"/>01278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01279"/>01279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__public_api_1gad59a35d37925dbf12a969adac050714b">RpcTarget</link>.AllBuffered:
<anchor xml:id="__photon_network_part_8cs_source_1l01280"/>01280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01281"/>01281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RaiseEventOptions&#32;options&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;RaiseEventOptions()&#32;{&#32;CachingOption&#32;=&#32;<link linkend="_namespace_photon_1_1_realtime_1af18c2eb259b8f639c151ea60e026e39d">EventCaching</link>.AddToRoomCache&#32;};
<anchor xml:id="__photon_network_part_8cs_source_1l01282"/>01282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.RaiseEventInternal(PunEvent.RPC,&#32;rpcEvent,&#32;options,&#32;sendOptions);
<anchor xml:id="__photon_network_part_8cs_source_1l01283"/>01283 
<anchor xml:id="__photon_network_part_8cs_source_1l01284"/>01284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Execute&#32;local</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01285"/>01285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ExecuteRpc(rpcEvent,&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a312fc99165f039e31b65bebbafdf6736">NetworkingClient</link>.<link linkend="_class_photon_1_1_realtime_1_1_load_balancing_client_1a50fb7f5363ea8a9f4200f2793580e895">LocalPlayer</link>);
<anchor xml:id="__photon_network_part_8cs_source_1l01286"/>01286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01287"/>01287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01288"/>01288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__public_api_1gad59a35d37925dbf12a969adac050714b">RpcTarget</link>.OthersBuffered:
<anchor xml:id="__photon_network_part_8cs_source_1l01289"/>01289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01290"/>01290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RaiseEventOptions&#32;options&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;RaiseEventOptions()&#32;{&#32;CachingOption&#32;=&#32;<link linkend="_namespace_photon_1_1_realtime_1af18c2eb259b8f639c151ea60e026e39d">EventCaching</link>.AddToRoomCache&#32;};
<anchor xml:id="__photon_network_part_8cs_source_1l01291"/>01291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.RaiseEventInternal(PunEvent.RPC,&#32;rpcEvent,&#32;options,&#32;sendOptions);
<anchor xml:id="__photon_network_part_8cs_source_1l01292"/>01292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01293"/>01293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01294"/>01294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__public_api_1gad59a35d37925dbf12a969adac050714b">RpcTarget</link>.MasterClient:
<anchor xml:id="__photon_network_part_8cs_source_1l01295"/>01295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01296"/>01296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a312fc99165f039e31b65bebbafdf6736">NetworkingClient</link>.<link linkend="_class_photon_1_1_realtime_1_1_load_balancing_client_1a50fb7f5363ea8a9f4200f2793580e895">LocalPlayer</link>.<link linkend="_class_photon_1_1_realtime_1_1_player_1a650042ff3d147ed8cd559b6258ce238d">IsMasterClient</link>)
<anchor xml:id="__photon_network_part_8cs_source_1l01297"/>01297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01298"/>01298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ExecuteRpc(rpcEvent,&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a312fc99165f039e31b65bebbafdf6736">NetworkingClient</link>.<link linkend="_class_photon_1_1_realtime_1_1_load_balancing_client_1a50fb7f5363ea8a9f4200f2793580e895">LocalPlayer</link>);
<anchor xml:id="__photon_network_part_8cs_source_1l01299"/>01299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01300"/>01300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01301"/>01301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01302"/>01302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RaiseEventOptions&#32;options&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;RaiseEventOptions()&#32;{&#32;Receivers&#32;=&#32;<link linkend="_namespace_photon_1_1_realtime_1a32e1cc9d538d60db8e5fb79b7a4e2e40">ReceiverGroup</link>.MasterClient&#32;};
<anchor xml:id="__photon_network_part_8cs_source_1l01303"/>01303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.RaiseEventInternal(PunEvent.RPC,&#32;rpcEvent,&#32;options,&#32;sendOptions);
<anchor xml:id="__photon_network_part_8cs_source_1l01304"/>01304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01305"/>01305 
<anchor xml:id="__photon_network_part_8cs_source_1l01306"/>01306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01307"/>01307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01308"/>01308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__public_api_1gad59a35d37925dbf12a969adac050714b">RpcTarget</link>.AllViaServer:
<anchor xml:id="__photon_network_part_8cs_source_1l01309"/>01309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01310"/>01310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RaiseEventOptions&#32;options&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;RaiseEventOptions()&#32;{&#32;InterestGroup&#32;=&#32;(byte)view.<link linkend="_class_photon_1_1_pun_1_1_photon_view_1a449aad3553d332c2b8e4d52e4996ba79">Group</link>,&#32;Receivers&#32;=&#32;<link linkend="_namespace_photon_1_1_realtime_1a32e1cc9d538d60db8e5fb79b7a4e2e40">ReceiverGroup</link>.All&#32;};
<anchor xml:id="__photon_network_part_8cs_source_1l01311"/>01311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.RaiseEventInternal(PunEvent.RPC,&#32;rpcEvent,&#32;options,&#32;sendOptions);
<anchor xml:id="__photon_network_part_8cs_source_1l01312"/>01312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.OfflineMode)
<anchor xml:id="__photon_network_part_8cs_source_1l01313"/>01313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01314"/>01314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ExecuteRpc(rpcEvent,&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a312fc99165f039e31b65bebbafdf6736">NetworkingClient</link>.<link linkend="_class_photon_1_1_realtime_1_1_load_balancing_client_1a50fb7f5363ea8a9f4200f2793580e895">LocalPlayer</link>);
<anchor xml:id="__photon_network_part_8cs_source_1l01315"/>01315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01316"/>01316 
<anchor xml:id="__photon_network_part_8cs_source_1l01317"/>01317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01318"/>01318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01319"/>01319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group__public_api_1gad59a35d37925dbf12a969adac050714b">RpcTarget</link>.AllBufferedViaServer:
<anchor xml:id="__photon_network_part_8cs_source_1l01320"/>01320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01321"/>01321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RaiseEventOptions&#32;options&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;RaiseEventOptions()&#32;{&#32;InterestGroup&#32;=&#32;(byte)view.<link linkend="_class_photon_1_1_pun_1_1_photon_view_1a449aad3553d332c2b8e4d52e4996ba79">Group</link>,&#32;Receivers&#32;=&#32;<link linkend="_namespace_photon_1_1_realtime_1a32e1cc9d538d60db8e5fb79b7a4e2e40">ReceiverGroup</link>.All,&#32;CachingOption&#32;=&#32;<link linkend="_namespace_photon_1_1_realtime_1af18c2eb259b8f639c151ea60e026e39d">EventCaching</link>.AddToRoomCache&#32;};
<anchor xml:id="__photon_network_part_8cs_source_1l01322"/>01322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.RaiseEventInternal(PunEvent.RPC,&#32;rpcEvent,&#32;options,&#32;sendOptions);
<anchor xml:id="__photon_network_part_8cs_source_1l01323"/>01323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.OfflineMode)
<anchor xml:id="__photon_network_part_8cs_source_1l01324"/>01324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01325"/>01325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ExecuteRpc(rpcEvent,&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a312fc99165f039e31b65bebbafdf6736">NetworkingClient</link>.<link linkend="_class_photon_1_1_realtime_1_1_load_balancing_client_1a50fb7f5363ea8a9f4200f2793580e895">LocalPlayer</link>);
<anchor xml:id="__photon_network_part_8cs_source_1l01326"/>01326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01327"/>01327 
<anchor xml:id="__photon_network_part_8cs_source_1l01328"/>01328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01329"/>01329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01330"/>01330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
<anchor xml:id="__photon_network_part_8cs_source_1l01331"/>01331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogError(<emphasis role="stringliteral">&quot;Unsupported&#32;target&#32;enum:&#32;&quot;</emphasis>&#32;+&#32;target);
<anchor xml:id="__photon_network_part_8cs_source_1l01332"/>01332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01333"/>01333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01334"/>01334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01335"/>01335 
<anchor xml:id="__photon_network_part_8cs_source_1l01336"/>01336 
<anchor xml:id="__photon_network_part_8cs_source_1l01348"/><link linkend="_class_photon_1_1_pun_1_1_photon_network_1ae25c8c7c59cc3a949c87f65e7fb17137">01348</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1ae25c8c7c59cc3a949c87f65e7fb17137">SetInterestGroups</link>(<emphasis role="keywordtype">byte</emphasis>[]&#32;disableGroups,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;enableGroups)
<anchor xml:id="__photon_network_part_8cs_source_1l01349"/>01349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01350"/>01350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;check&#32;can&#32;use&#32;network</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01351"/>01351 
<anchor xml:id="__photon_network_part_8cs_source_1l01352"/>01352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(disableGroups&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l01353"/>01353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01354"/>01354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(disableGroups.Length&#32;==&#32;0)
<anchor xml:id="__photon_network_part_8cs_source_1l01355"/>01355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01356"/>01356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;a&#32;byte[0]&#32;should&#32;disable&#32;ALL&#32;groups&#32;in&#32;one&#32;step&#32;and&#32;before&#32;any&#32;groups&#32;are&#32;enabled.&#32;we&#32;do&#32;this&#32;locally,&#32;too.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01357"/>01357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allowedReceivingGroups.Clear();
<anchor xml:id="__photon_network_part_8cs_source_1l01358"/>01358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01359"/>01359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01360"/>01360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01361"/>01361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;index&#32;=&#32;0;&#32;index&#32;&lt;&#32;disableGroups.Length;&#32;index++)
<anchor xml:id="__photon_network_part_8cs_source_1l01362"/>01362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01363"/>01363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;g&#32;=&#32;disableGroups[index];
<anchor xml:id="__photon_network_part_8cs_source_1l01364"/>01364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(g&#32;&lt;=&#32;0)
<anchor xml:id="__photon_network_part_8cs_source_1l01365"/>01365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01366"/>01366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_photon_1_1_pun_1ac6a6ed4f0d7a7522026d8cd2beec9671">Debug</link>.LogError(<emphasis role="stringliteral">&quot;Error:&#32;PhotonNetwork.SetInterestGroups&#32;was&#32;called&#32;with&#32;an&#32;illegal&#32;group&#32;number:&#32;&quot;</emphasis>&#32;+&#32;g&#32;+&#32;<emphasis role="stringliteral">&quot;.&#32;The&#32;Group&#32;number&#32;should&#32;be&#32;at&#32;least&#32;1.&quot;</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l01367"/>01367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01368"/>01368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01369"/>01369 
<anchor xml:id="__photon_network_part_8cs_source_1l01370"/>01370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(allowedReceivingGroups.Contains(g))
<anchor xml:id="__photon_network_part_8cs_source_1l01371"/>01371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01372"/>01372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allowedReceivingGroups.Remove(g);
<anchor xml:id="__photon_network_part_8cs_source_1l01373"/>01373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01374"/>01374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01375"/>01375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01376"/>01376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01377"/>01377 
<anchor xml:id="__photon_network_part_8cs_source_1l01378"/>01378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(enableGroups&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l01379"/>01379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01380"/>01380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(enableGroups.Length&#32;==&#32;0)
<anchor xml:id="__photon_network_part_8cs_source_1l01381"/>01381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01382"/>01382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;a&#32;byte[0]&#32;should&#32;enable&#32;ALL&#32;groups&#32;in&#32;one&#32;step.&#32;we&#32;do&#32;this&#32;locally,&#32;too.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01383"/>01383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">byte</emphasis>&#32;index&#32;=&#32;0;&#32;index&#32;&lt;&#32;<emphasis role="keywordtype">byte</emphasis>.MaxValue;&#32;index++)
<anchor xml:id="__photon_network_part_8cs_source_1l01384"/>01384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01385"/>01385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allowedReceivingGroups.Add(index);
<anchor xml:id="__photon_network_part_8cs_source_1l01386"/>01386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01387"/>01387 
<anchor xml:id="__photon_network_part_8cs_source_1l01388"/>01388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allowedReceivingGroups.Add(<emphasis role="keywordtype">byte</emphasis>.MaxValue);
<anchor xml:id="__photon_network_part_8cs_source_1l01389"/>01389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01390"/>01390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01391"/>01391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01392"/>01392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;index&#32;=&#32;0;&#32;index&#32;&lt;&#32;enableGroups.Length;&#32;index++)
<anchor xml:id="__photon_network_part_8cs_source_1l01393"/>01393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01394"/>01394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;g&#32;=&#32;enableGroups[index];
<anchor xml:id="__photon_network_part_8cs_source_1l01395"/>01395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(g&#32;&lt;=&#32;0)
<anchor xml:id="__photon_network_part_8cs_source_1l01396"/>01396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01397"/>01397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_photon_1_1_pun_1ac6a6ed4f0d7a7522026d8cd2beec9671">Debug</link>.LogError(<emphasis role="stringliteral">&quot;Error:&#32;PhotonNetwork.SetInterestGroups&#32;was&#32;called&#32;with&#32;an&#32;illegal&#32;group&#32;number:&#32;&quot;</emphasis>&#32;+&#32;g&#32;+&#32;<emphasis role="stringliteral">&quot;.&#32;The&#32;Group&#32;number&#32;should&#32;be&#32;at&#32;least&#32;1.&quot;</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l01398"/>01398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01399"/>01399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01400"/>01400 
<anchor xml:id="__photon_network_part_8cs_source_1l01401"/>01401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allowedReceivingGroups.Add(g);
<anchor xml:id="__photon_network_part_8cs_source_1l01402"/>01402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01403"/>01403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01404"/>01404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01405"/>01405 
<anchor xml:id="__photon_network_part_8cs_source_1l01406"/>01406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_photon_1_1_pun_1_1_photon_network">PhotonNetwork</link>.offlineMode)
<anchor xml:id="__photon_network_part_8cs_source_1l01407"/>01407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01408"/>01408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a312fc99165f039e31b65bebbafdf6736">NetworkingClient</link>.<link linkend="_class_photon_1_1_realtime_1_1_load_balancing_client_1a41c63e80c17b1f434f27d49ecdcb5fd2">OpChangeGroups</link>(disableGroups,&#32;enableGroups);
<anchor xml:id="__photon_network_part_8cs_source_1l01409"/>01409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01410"/>01410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01411"/>01411 
<anchor xml:id="__photon_network_part_8cs_source_1l01412"/>01412 
<anchor xml:id="__photon_network_part_8cs_source_1l01423"/><link linkend="_class_photon_1_1_pun_1_1_photon_network_1a69cd71b5679fd7990c8c090b067200f2">01423</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a69cd71b5679fd7990c8c090b067200f2">SetSendingEnabled</link>(<emphasis role="keywordtype">byte</emphasis>&#32;group,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;enabled)
<anchor xml:id="__photon_network_part_8cs_source_1l01424"/>01424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01425"/>01425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;check&#32;can&#32;use&#32;network</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01426"/>01426 
<anchor xml:id="__photon_network_part_8cs_source_1l01427"/>01427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!enabled)
<anchor xml:id="__photon_network_part_8cs_source_1l01428"/>01428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01429"/>01429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;blockedSendingGroups.Add(group);&#32;<emphasis role="comment">//&#32;can&#32;be&#32;added&#32;to&#32;HashSet&#32;no&#32;matter&#32;if&#32;already&#32;in&#32;it</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01430"/>01430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01431"/>01431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01432"/>01432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01433"/>01433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;blockedSendingGroups.Remove(group);
<anchor xml:id="__photon_network_part_8cs_source_1l01434"/>01434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01435"/>01435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01436"/>01436 
<anchor xml:id="__photon_network_part_8cs_source_1l01437"/>01437 
<anchor xml:id="__photon_network_part_8cs_source_1l01438"/>01438 
<anchor xml:id="__photon_network_part_8cs_source_1l01448"/><link linkend="_class_photon_1_1_pun_1_1_photon_network_1a4a9b4071611f416c6d12073d5c52fc44">01448</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a4a9b4071611f416c6d12073d5c52fc44">SetSendingEnabled</link>(<emphasis role="keywordtype">byte</emphasis>[]&#32;disableGroups,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;enableGroups)
<anchor xml:id="__photon_network_part_8cs_source_1l01449"/>01449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01450"/>01450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;check&#32;can&#32;use&#32;network</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01451"/>01451 
<anchor xml:id="__photon_network_part_8cs_source_1l01452"/>01452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(disableGroups&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l01453"/>01453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01454"/>01454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;index&#32;=&#32;0;&#32;index&#32;&lt;&#32;disableGroups.Length;&#32;index++)
<anchor xml:id="__photon_network_part_8cs_source_1l01455"/>01455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01456"/>01456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;g&#32;=&#32;disableGroups[index];
<anchor xml:id="__photon_network_part_8cs_source_1l01457"/>01457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;blockedSendingGroups.Add(g);
<anchor xml:id="__photon_network_part_8cs_source_1l01458"/>01458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01459"/>01459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01460"/>01460 
<anchor xml:id="__photon_network_part_8cs_source_1l01461"/>01461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(enableGroups&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l01462"/>01462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01463"/>01463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;index&#32;=&#32;0;&#32;index&#32;&lt;&#32;enableGroups.Length;&#32;index++)
<anchor xml:id="__photon_network_part_8cs_source_1l01464"/>01464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01465"/>01465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;g&#32;=&#32;enableGroups[index];
<anchor xml:id="__photon_network_part_8cs_source_1l01466"/>01466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;blockedSendingGroups.Remove(g);
<anchor xml:id="__photon_network_part_8cs_source_1l01467"/>01467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01468"/>01468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01469"/>01469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01470"/>01470 
<anchor xml:id="__photon_network_part_8cs_source_1l01471"/>01471 
<anchor xml:id="__photon_network_part_8cs_source_1l01472"/>01472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">internal</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;NewSceneLoaded()
<anchor xml:id="__photon_network_part_8cs_source_1l01473"/>01473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01474"/>01474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(loadingLevelAndPausedNetwork)
<anchor xml:id="__photon_network_part_8cs_source_1l01475"/>01475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01476"/>01476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_AsyncLevelLoadingOperation&#32;=&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01477"/>01477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;loadingLevelAndPausedNetwork&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01478"/>01478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network">PhotonNetwork</link>.<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a0ac7974d889dbb6498a161e62be6e4ff">IsMessageQueueRunning</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01479"/>01479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01480"/>01480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01481"/>01481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01482"/>01482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.SetLevelInPropsIfSynced(SceneManagerHelper.ActiveSceneName);
<anchor xml:id="__photon_network_part_8cs_source_1l01483"/>01483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01484"/>01484 
<anchor xml:id="__photon_network_part_8cs_source_1l01485"/>01485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Debug.Log(&quot;OnLevelWasLoaded&#32;photonViewList.Count:&#32;&quot;&#32;+&#32;photonViewList.Count);&#32;//&#32;Exit&#32;Games&#32;internal&#32;log</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01486"/>01486 
<anchor xml:id="__photon_network_part_8cs_source_1l01487"/>01487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;int&gt;&#32;removeKeys&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;int&gt;();
<anchor xml:id="__photon_network_part_8cs_source_1l01488"/>01488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(KeyValuePair&lt;int,&#32;PhotonView&gt;&#32;kvp&#32;<emphasis role="keywordflow">in</emphasis>&#32;photonViewList)
<anchor xml:id="__photon_network_part_8cs_source_1l01489"/>01489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01490"/>01490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonView&#32;view&#32;=&#32;kvp.Value;
<anchor xml:id="__photon_network_part_8cs_source_1l01491"/>01491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(view&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l01492"/>01492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01493"/>01493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;removeKeys.Add(kvp.Key);
<anchor xml:id="__photon_network_part_8cs_source_1l01494"/>01494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01495"/>01495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01496"/>01496 
<anchor xml:id="__photon_network_part_8cs_source_1l01497"/>01497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;index&#32;=&#32;0;&#32;index&#32;&lt;&#32;removeKeys.Count;&#32;index++)
<anchor xml:id="__photon_network_part_8cs_source_1l01498"/>01498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01499"/>01499 
<anchor xml:id="__photon_network_part_8cs_source_1l01500"/>01500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;key&#32;=&#32;removeKeys[index];
<anchor xml:id="__photon_network_part_8cs_source_1l01501"/>01501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;photonViewList.Remove(key);
<anchor xml:id="__photon_network_part_8cs_source_1l01502"/>01502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01503"/>01503 
<anchor xml:id="__photon_network_part_8cs_source_1l01504"/>01504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(removeKeys.Count&#32;&gt;&#32;0)
<anchor xml:id="__photon_network_part_8cs_source_1l01505"/>01505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01506"/>01506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.LogLevel&#32;&gt;=&#32;<link linkend="_group__public_api_1ga5a8128eaeb2f346d4cceb57d48caf9c1">PunLogLevel</link>.Informational)
<anchor xml:id="__photon_network_part_8cs_source_1l01507"/>01507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.Log(<emphasis role="stringliteral">&quot;New&#32;level&#32;loaded.&#32;Removed&#32;&quot;</emphasis>&#32;+&#32;removeKeys.Count&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;scene&#32;view&#32;IDs&#32;from&#32;last&#32;level.&quot;</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l01508"/>01508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01509"/>01509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01510"/>01510 
<anchor xml:id="__photon_network_part_8cs_source_1l01511"/>01511 
<anchor xml:id="__photon_network_part_8cs_source_1l01518"/><link linkend="_class_photon_1_1_pun_1_1_photon_network_1aa3e2d62799e2a42465d46bbdaea3332d">01518</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1aa3e2d62799e2a42465d46bbdaea3332d">ObjectsInOneUpdate</link>&#32;=&#32;20;
<anchor xml:id="__photon_network_part_8cs_source_1l01519"/>01519 
<anchor xml:id="__photon_network_part_8cs_source_1l01520"/>01520 
<anchor xml:id="__photon_network_part_8cs_source_1l01521"/>01521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;readonly&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_stream">PhotonStream</link>&#32;serializeStreamOut&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_stream">PhotonStream</link>(<emphasis role="keyword">true</emphasis>,&#32;<emphasis role="keyword">null</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l01522"/>01522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;readonly&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_stream">PhotonStream</link>&#32;serializeStreamIn&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_stream">PhotonStream</link>(<emphasis role="keyword">false</emphasis>,&#32;<emphasis role="keyword">null</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l01523"/>01523 
<anchor xml:id="__photon_network_part_8cs_source_1l01524"/>01524 
<anchor xml:id="__photon_network_part_8cs_source_1l01526"/>01526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_class_photon_1_1_realtime_1_1_raise_event_options">RaiseEventOptions</link>&#32;serializeRaiseEvOptions&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_photon_1_1_realtime_1_1_raise_event_options">RaiseEventOptions</link>();
<anchor xml:id="__photon_network_part_8cs_source_1l01527"/>01527 
<anchor xml:id="__photon_network_part_8cs_source_1l01528"/>01528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>RaiseEventBatch&#32;:&#32;IEquatable&lt;RaiseEventBatch&gt;
<anchor xml:id="__photon_network_part_8cs_source_1l01529"/>01529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01530"/>01530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>&#32;Group;
<anchor xml:id="__photon_network_part_8cs_source_1l01531"/>01531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Reliable;
<anchor xml:id="__photon_network_part_8cs_source_1l01532"/>01532 
<anchor xml:id="__photon_network_part_8cs_source_1l01533"/>01533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;GetHashCode()
<anchor xml:id="__photon_network_part_8cs_source_1l01534"/>01534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01535"/>01535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(this.Group&#32;&lt;&lt;&#32;1)&#32;+&#32;(this.Reliable&#32;?&#32;1&#32;:&#32;0);
<anchor xml:id="__photon_network_part_8cs_source_1l01536"/>01536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01537"/>01537 
<anchor xml:id="__photon_network_part_8cs_source_1l01538"/>01538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Equals(RaiseEventBatch&#32;other)
<anchor xml:id="__photon_network_part_8cs_source_1l01539"/>01539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01540"/>01540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this.Reliable&#32;==&#32;other.Reliable&#32;&amp;&amp;&#32;this.Group&#32;==&#32;other.Group;
<anchor xml:id="__photon_network_part_8cs_source_1l01541"/>01541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01542"/>01542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01543"/>01543 
<anchor xml:id="__photon_network_part_8cs_source_1l01544"/>01544 
<anchor xml:id="__photon_network_part_8cs_source_1l01545"/>01545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>SerializeViewBatch&#32;:&#32;IEquatable&lt;SerializeViewBatch&gt;,&#32;IEquatable&lt;RaiseEventBatch&gt;
<anchor xml:id="__photon_network_part_8cs_source_1l01546"/>01546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01547"/>01547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;readonly&#32;RaiseEventBatch&#32;Batch;
<anchor xml:id="__photon_network_part_8cs_source_1l01548"/>01548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;List&lt;object&gt;&#32;ObjectUpdates;
<anchor xml:id="__photon_network_part_8cs_source_1l01549"/>01549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;defaultSize&#32;=&#32;PhotonNetwork.ObjectsInOneUpdate;
<anchor xml:id="__photon_network_part_8cs_source_1l01550"/>01550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset;
<anchor xml:id="__photon_network_part_8cs_source_1l01551"/>01551 
<anchor xml:id="__photon_network_part_8cs_source_1l01552"/>01552 
<anchor xml:id="__photon_network_part_8cs_source_1l01553"/>01553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;offset&#32;enables&#32;us&#32;to&#32;skip&#32;the&#32;first&#32;X&#32;entries&#32;in&#32;the&#32;ObjectUpdate(s),&#32;leaving&#32;room&#32;for&#32;(e.g.)&#32;timestamp&#32;of&#32;sending&#32;and&#32;level&#32;prefix</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01554"/>01554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;SerializeViewBatch(RaiseEventBatch&#32;batch,&#32;<emphasis role="keywordtype">int</emphasis>&#32;offset)
<anchor xml:id="__photon_network_part_8cs_source_1l01555"/>01555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01556"/>01556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.Batch&#32;=&#32;batch;
<anchor xml:id="__photon_network_part_8cs_source_1l01557"/>01557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.ObjectUpdates&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;object&gt;(this.defaultSize);
<anchor xml:id="__photon_network_part_8cs_source_1l01558"/>01558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.offset&#32;=&#32;offset;
<anchor xml:id="__photon_network_part_8cs_source_1l01559"/>01559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;offset;&#32;i++)&#32;this.ObjectUpdates.Add(<emphasis role="keyword">null</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l01560"/>01560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01561"/>01561 
<anchor xml:id="__photon_network_part_8cs_source_1l01562"/>01562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;GetHashCode()
<anchor xml:id="__photon_network_part_8cs_source_1l01563"/>01563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01564"/>01564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(this.Batch.Group&#32;&lt;&lt;&#32;1)&#32;+&#32;(this.Batch.Reliable&#32;?&#32;1&#32;:&#32;0);
<anchor xml:id="__photon_network_part_8cs_source_1l01565"/>01565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01566"/>01566 
<anchor xml:id="__photon_network_part_8cs_source_1l01567"/>01567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Equals(SerializeViewBatch&#32;other)
<anchor xml:id="__photon_network_part_8cs_source_1l01568"/>01568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01569"/>01569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this.Equals(other.Batch);
<anchor xml:id="__photon_network_part_8cs_source_1l01570"/>01570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01571"/>01571 
<anchor xml:id="__photon_network_part_8cs_source_1l01572"/>01572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Equals(RaiseEventBatch&#32;other)
<anchor xml:id="__photon_network_part_8cs_source_1l01573"/>01573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01574"/>01574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this.Batch.Reliable&#32;==&#32;other.Reliable&#32;&amp;&amp;&#32;this.Batch.Group&#32;==&#32;other.Group;
<anchor xml:id="__photon_network_part_8cs_source_1l01575"/>01575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01576"/>01576 
<anchor xml:id="__photon_network_part_8cs_source_1l01577"/>01577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Equals(<emphasis role="keywordtype">object</emphasis>&#32;obj)
<anchor xml:id="__photon_network_part_8cs_source_1l01578"/>01578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01579"/>01579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SerializeViewBatch&#32;other&#32;=&#32;obj&#32;as&#32;SerializeViewBatch;
<anchor xml:id="__photon_network_part_8cs_source_1l01580"/>01580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;other&#32;!=&#32;<emphasis role="keyword">null</emphasis>&#32;&amp;&amp;&#32;this.Batch.Equals(other.Batch);
<anchor xml:id="__photon_network_part_8cs_source_1l01581"/>01581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01582"/>01582 
<anchor xml:id="__photon_network_part_8cs_source_1l01583"/>01583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Clear()
<anchor xml:id="__photon_network_part_8cs_source_1l01584"/>01584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01585"/>01585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.ObjectUpdates.Clear();
<anchor xml:id="__photon_network_part_8cs_source_1l01586"/>01586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;offset;&#32;i++)&#32;this.ObjectUpdates.Add(<emphasis role="keyword">null</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l01587"/>01587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01588"/>01588 
<anchor xml:id="__photon_network_part_8cs_source_1l01589"/>01589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Add(List&lt;object&gt;&#32;viewData)
<anchor xml:id="__photon_network_part_8cs_source_1l01590"/>01590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01591"/>01591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.ObjectUpdates.Count&#32;&gt;=&#32;<emphasis role="keyword">this</emphasis>.ObjectUpdates.Capacity)
<anchor xml:id="__photon_network_part_8cs_source_1l01592"/>01592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01593"/>01593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTE:&#32;we&#32;could&#32;also&#32;trim&#32;to&#32;new&#32;size</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01594"/>01594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_photon_1_1_chat_1ae62af83eed801a62ffbe6bd2fcdd454eab0d4998a26f5b5742ad38c4af8817e32">Exception</link>(<emphasis role="stringliteral">&quot;Can&apos;t&#32;add.&#32;Size&#32;exceeded.&quot;</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l01595"/>01595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01596"/>01596 
<anchor xml:id="__photon_network_part_8cs_source_1l01597"/>01597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.ObjectUpdates.Add(viewData);
<anchor xml:id="__photon_network_part_8cs_source_1l01598"/>01598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01599"/>01599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01600"/>01600 
<anchor xml:id="__photon_network_part_8cs_source_1l01601"/>01601 
<anchor xml:id="__photon_network_part_8cs_source_1l01602"/>01602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;readonly&#32;Dictionary&lt;RaiseEventBatch,&#32;SerializeViewBatch&gt;&#32;serializeViewBatches&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Dictionary&lt;RaiseEventBatch,&#32;SerializeViewBatch&gt;();
<anchor xml:id="__photon_network_part_8cs_source_1l01603"/>01603 
<anchor xml:id="__photon_network_part_8cs_source_1l01604"/>01604 
<anchor xml:id="__photon_network_part_8cs_source_1l01606"/>01606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">internal</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;RunViewUpdate()
<anchor xml:id="__photon_network_part_8cs_source_1l01607"/>01607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01608"/>01608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.OfflineMode&#32;||&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a5339e137c6b1461d090f658012ee62c7">CurrentRoom</link>&#32;==&#32;<emphasis role="keyword">null</emphasis>&#32;||&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a5339e137c6b1461d090f658012ee62c7">CurrentRoom</link>.<link linkend="_class_photon_1_1_realtime_1_1_room_1ad1ed20ddc14c6ec0c9a74aff4eb201fa">Players</link>&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l01609"/>01609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01610"/>01610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01611"/>01611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01612"/>01612 
<anchor xml:id="__photon_network_part_8cs_source_1l01613"/>01613 
<anchor xml:id="__photon_network_part_8cs_source_1l01614"/>01614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;no&#32;need&#32;to&#32;send&#32;OnSerialize&#32;messages&#32;while&#32;being&#32;alone&#32;(these&#32;are&#32;not&#32;buffered&#32;anyway)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01615"/>01615 <emphasis role="preprocessor">#if&#32;!PHOTON_DEVELOP</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01616"/>01616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a5339e137c6b1461d090f658012ee62c7">CurrentRoom</link>.<link linkend="_class_photon_1_1_realtime_1_1_room_1ad1ed20ddc14c6ec0c9a74aff4eb201fa">Players</link>.Count&#32;&lt;=&#32;1)
<anchor xml:id="__photon_network_part_8cs_source_1l01617"/>01617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01618"/>01618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01619"/>01619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01620"/>01620 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01621"/>01621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;serializeRaiseEvOptions.<link linkend="_class_photon_1_1_realtime_1_1_raise_event_options_1afc60526a25f308c7e37a05bbf55df58c">Receivers</link>&#32;=&#32;(<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a5339e137c6b1461d090f658012ee62c7">CurrentRoom</link>.<link linkend="_class_photon_1_1_realtime_1_1_room_1ad1ed20ddc14c6ec0c9a74aff4eb201fa">Players</link>.Count&#32;==&#32;1)&#32;?&#32;<link linkend="_namespace_photon_1_1_realtime_1a32e1cc9d538d60db8e5fb79b7a4e2e40">ReceiverGroup</link>.All&#32;:&#32;<link linkend="_namespace_photon_1_1_realtime_1a32e1cc9d538d60db8e5fb79b7a4e2e40">ReceiverGroup</link>.Others;
<anchor xml:id="__photon_network_part_8cs_source_1l01622"/>01622 #endif
<anchor xml:id="__photon_network_part_8cs_source_1l01623"/>01623 
<anchor xml:id="__photon_network_part_8cs_source_1l01624"/>01624 
<anchor xml:id="__photon_network_part_8cs_source_1l01625"/>01625 
<anchor xml:id="__photon_network_part_8cs_source_1l01626"/>01626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Format&#32;of&#32;the&#32;event&apos;s&#32;data&#32;object[]:</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01627"/>01627 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;[0]&#32;=&#32;PhotonNetwork.ServerTimestamp;</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01628"/>01628 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;[1]&#32;=&#32;currentLevelPrefix;&#32;&#32;OPTIONAL!</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01629"/>01629 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;[2]&#32;=&#32;object[]&#32;of&#32;PhotonView&#32;x</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01630"/>01630 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;[3]&#32;=&#32;object[]&#32;of&#32;PhotonView&#32;y&#32;or&#32;NULL</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01631"/>01631 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;[...]</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01632"/>01632 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01633"/>01633 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;We&#32;only&#32;combine&#32;updates&#32;for&#32;XY&#32;objects&#32;into&#32;one&#32;RaiseEvent&#32;to&#32;avoid&#32;fragmentation.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01634"/>01634 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;The&#32;Reliability&#32;and&#32;Interest&#32;Group&#32;are&#32;only&#32;used&#32;for&#32;RaiseEvent&#32;and&#32;not&#32;contained&#32;in&#32;the&#32;event/data&#32;that&#32;reaches&#32;the&#32;other&#32;clients.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01635"/>01635 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;This&#32;is&#32;read&#32;in&#32;OnEvent().</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01636"/>01636 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01637"/>01637 
<anchor xml:id="__photon_network_part_8cs_source_1l01638"/>01638 
<anchor xml:id="__photon_network_part_8cs_source_1l01639"/>01639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;enumerator&#32;=&#32;photonViewList.GetEnumerator();&#32;&#32;&#32;<emphasis role="comment">//&#32;replacing&#32;foreach&#32;(PhotonView&#32;view&#32;in&#32;this.photonViewList.Values)&#32;for&#32;memory&#32;allocation&#32;improvement</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01640"/>01640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(enumerator.MoveNext())
<anchor xml:id="__photon_network_part_8cs_source_1l01641"/>01641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01642"/>01642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonView&#32;view&#32;=&#32;enumerator.Current.Value;
<anchor xml:id="__photon_network_part_8cs_source_1l01643"/>01643 
<anchor xml:id="__photon_network_part_8cs_source_1l01644"/>01644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;a&#32;client&#32;only&#32;sends&#32;updates&#32;for&#32;active,&#32;synchronized&#32;PhotonViews&#32;that&#32;are&#32;under&#32;it&apos;s&#32;control&#32;(isMine)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01645"/>01645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(view.Synchronization&#32;==&#32;<link linkend="_namespace_photon_1_1_pun_1ad826bf995d229831e4d2aeadddc6a048">ViewSynchronization</link>.Off&#32;||&#32;view.IsMine&#32;==&#32;<emphasis role="keyword">false</emphasis>&#32;||&#32;view.isActiveAndEnabled&#32;==&#32;<emphasis role="keyword">false</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l01646"/>01646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01647"/>01647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01648"/>01648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01649"/>01649 
<anchor xml:id="__photon_network_part_8cs_source_1l01650"/>01650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(blockedSendingGroups.Contains(view.Group))
<anchor xml:id="__photon_network_part_8cs_source_1l01651"/>01651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01652"/>01652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;&#32;<emphasis role="comment">//&#32;Block&#32;sending&#32;on&#32;this&#32;group</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01653"/>01653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01654"/>01654 
<anchor xml:id="__photon_network_part_8cs_source_1l01655"/>01655 
<anchor xml:id="__photon_network_part_8cs_source_1l01656"/>01656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;call&#32;the&#32;PhotonView&apos;s&#32;serialize&#32;method(s)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01657"/>01657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;object&gt;&#32;evData&#32;=&#32;OnSerializeWrite(view);
<anchor xml:id="__photon_network_part_8cs_source_1l01658"/>01658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(evData&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l01659"/>01659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01660"/>01660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01661"/>01661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01662"/>01662 
<anchor xml:id="__photon_network_part_8cs_source_1l01663"/>01663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RaiseEventBatch&#32;eventBatch&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;RaiseEventBatch();
<anchor xml:id="__photon_network_part_8cs_source_1l01664"/>01664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;eventBatch.Reliable&#32;=&#32;view.Synchronization&#32;==&#32;<link linkend="_namespace_photon_1_1_pun_1ad826bf995d229831e4d2aeadddc6a048">ViewSynchronization</link>.ReliableDeltaCompressed&#32;||&#32;view.mixedModeIsReliable;
<anchor xml:id="__photon_network_part_8cs_source_1l01665"/>01665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;eventBatch.Group&#32;=&#32;view.Group;
<anchor xml:id="__photon_network_part_8cs_source_1l01666"/>01666 
<anchor xml:id="__photon_network_part_8cs_source_1l01667"/>01667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SerializeViewBatch&#32;svBatch&#32;=&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01668"/>01668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;found&#32;=&#32;serializeViewBatches.TryGetValue(eventBatch,&#32;out&#32;svBatch);
<anchor xml:id="__photon_network_part_8cs_source_1l01669"/>01669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!found)
<anchor xml:id="__photon_network_part_8cs_source_1l01670"/>01670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01671"/>01671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;svBatch&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;SerializeViewBatch(eventBatch,&#32;2);&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTE:&#32;the&#32;2&#32;first&#32;entries&#32;are&#32;kept&#32;empty&#32;for&#32;timestamp&#32;and&#32;level&#32;prefix</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01672"/>01672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;serializeViewBatches.Add(eventBatch,&#32;svBatch);
<anchor xml:id="__photon_network_part_8cs_source_1l01673"/>01673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01674"/>01674 
<anchor xml:id="__photon_network_part_8cs_source_1l01675"/>01675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;svBatch.Add(evData);
<anchor xml:id="__photon_network_part_8cs_source_1l01676"/>01676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(svBatch.ObjectUpdates.Count&#32;==&#32;svBatch.ObjectUpdates.Capacity)
<anchor xml:id="__photon_network_part_8cs_source_1l01677"/>01677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01678"/>01678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SendSerializeViewBatch(svBatch);
<anchor xml:id="__photon_network_part_8cs_source_1l01679"/>01679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01680"/>01680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01681"/>01681 
<anchor xml:id="__photon_network_part_8cs_source_1l01682"/>01682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;enumeratorB&#32;=&#32;serializeViewBatches.GetEnumerator();
<anchor xml:id="__photon_network_part_8cs_source_1l01683"/>01683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(enumeratorB.MoveNext())
<anchor xml:id="__photon_network_part_8cs_source_1l01684"/>01684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01685"/>01685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SendSerializeViewBatch(enumeratorB.Current.Value);
<anchor xml:id="__photon_network_part_8cs_source_1l01686"/>01686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01687"/>01687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01688"/>01688 
<anchor xml:id="__photon_network_part_8cs_source_1l01689"/>01689 
<anchor xml:id="__photon_network_part_8cs_source_1l01690"/>01690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;SendSerializeViewBatch(SerializeViewBatch&#32;batch)
<anchor xml:id="__photon_network_part_8cs_source_1l01691"/>01691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01692"/>01692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(batch&#32;==&#32;<emphasis role="keyword">null</emphasis>&#32;||&#32;batch.ObjectUpdates.Count&#32;&lt;=&#32;2)
<anchor xml:id="__photon_network_part_8cs_source_1l01693"/>01693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01694"/>01694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01695"/>01695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01696"/>01696 
<anchor xml:id="__photon_network_part_8cs_source_1l01697"/>01697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;serializeRaiseEvOptions.<link linkend="_class_photon_1_1_realtime_1_1_raise_event_options_1af4c52d5315b4338538803ef61e676165">InterestGroup</link>&#32;=&#32;batch.Batch.Group;
<anchor xml:id="__photon_network_part_8cs_source_1l01698"/>01698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;batch.ObjectUpdates[0]&#32;=&#32;PhotonNetwork.ServerTimestamp;
<anchor xml:id="__photon_network_part_8cs_source_1l01699"/>01699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;batch.ObjectUpdates[1]&#32;=&#32;(currentLevelPrefix&#32;!=&#32;0)&#32;?&#32;(<emphasis role="keywordtype">object</emphasis>)currentLevelPrefix&#32;:&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01700"/>01700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>&#32;code&#32;=&#32;batch.Batch.Reliable&#32;?&#32;PunEvent.SendSerializeReliable&#32;:&#32;PunEvent.SendSerialize;
<anchor xml:id="__photon_network_part_8cs_source_1l01701"/>01701 
<anchor xml:id="__photon_network_part_8cs_source_1l01702"/>01702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.RaiseEventInternal(code,&#32;batch.ObjectUpdates,&#32;serializeRaiseEvOptions,&#32;batch.Batch.Reliable&#32;?&#32;SendOptions.SendReliable&#32;:&#32;SendOptions.SendUnreliable);
<anchor xml:id="__photon_network_part_8cs_source_1l01703"/>01703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;batch.Clear();
<anchor xml:id="__photon_network_part_8cs_source_1l01704"/>01704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01705"/>01705 
<anchor xml:id="__photon_network_part_8cs_source_1l01706"/>01706 
<anchor xml:id="__photon_network_part_8cs_source_1l01707"/>01707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;calls&#32;OnPhotonSerializeView&#32;(through&#32;ExecuteOnSerialize)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01708"/>01708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;content&#32;created&#32;here&#32;is&#32;consumed&#32;by&#32;receivers&#32;in:&#32;ReadOnSerialize</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01709"/>01709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;List&lt;object&gt;&#32;OnSerializeWrite(PhotonView&#32;view)
<anchor xml:id="__photon_network_part_8cs_source_1l01710"/>01710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01711"/>01711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(view.Synchronization&#32;==&#32;<link linkend="_namespace_photon_1_1_pun_1ad826bf995d229831e4d2aeadddc6a048">ViewSynchronization</link>.Off)
<anchor xml:id="__photon_network_part_8cs_source_1l01712"/>01712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01713"/>01713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01714"/>01714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01715"/>01715 
<anchor xml:id="__photon_network_part_8cs_source_1l01716"/>01716 
<anchor xml:id="__photon_network_part_8cs_source_1l01717"/>01717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;each&#32;view&#32;creates&#32;a&#32;list&#32;of&#32;values&#32;that&#32;should&#32;be&#32;sent</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01718"/>01718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonMessageInfo&#32;info&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;PhotonMessageInfo(<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a312fc99165f039e31b65bebbafdf6736">NetworkingClient</link>.<link linkend="_class_photon_1_1_realtime_1_1_load_balancing_client_1a50fb7f5363ea8a9f4200f2793580e895">LocalPlayer</link>,&#32;PhotonNetwork.ServerTimestamp,&#32;view);
<anchor xml:id="__photon_network_part_8cs_source_1l01719"/>01719 
<anchor xml:id="__photon_network_part_8cs_source_1l01720"/>01720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(view.syncValues&#32;==&#32;<emphasis role="keyword">null</emphasis>)&#32;view.syncValues&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;object&gt;();
<anchor xml:id="__photon_network_part_8cs_source_1l01721"/>01721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;view.syncValues.Clear();
<anchor xml:id="__photon_network_part_8cs_source_1l01722"/>01722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;serializeStreamOut.SetWriteStream(view.syncValues);
<anchor xml:id="__photon_network_part_8cs_source_1l01723"/>01723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;serializeStreamOut.SendNext(<emphasis role="keyword">null</emphasis>);&#32;&#32;<emphasis role="comment">//to&#32;become:&#32;viewID,</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01724"/>01724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;serializeStreamOut.SendNext(<emphasis role="keyword">null</emphasis>);&#32;&#32;<emphasis role="comment">//to&#32;become:&#32;is&#32;compressed</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01725"/>01725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;serializeStreamOut.SendNext(<emphasis role="keyword">null</emphasis>);&#32;&#32;<emphasis role="comment">//to&#32;become:&#32;null-values&#32;(for&#32;compression)&#32;followed&#32;by:&#32;values&#32;for&#32;this&#32;object&apos;s&#32;update</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01726"/>01726 
<anchor xml:id="__photon_network_part_8cs_source_1l01727"/>01727 
<anchor xml:id="__photon_network_part_8cs_source_1l01728"/>01728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;view.SerializeView(serializeStreamOut,&#32;info);
<anchor xml:id="__photon_network_part_8cs_source_1l01729"/>01729 
<anchor xml:id="__photon_network_part_8cs_source_1l01730"/>01730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;if&#32;there&#32;are&#32;actual&#32;values&#32;to&#32;be&#32;sent&#32;(after&#32;the&#32;&quot;header&quot;&#32;of&#32;viewId,&#32;(bool)compressed&#32;and&#32;(int[])nullValues)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01731"/>01731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(serializeStreamOut.Count&#32;&lt;=&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a64300f3e69063fab23cbca77630710cd">SyncFirstValue</link>)
<anchor xml:id="__photon_network_part_8cs_source_1l01732"/>01732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01733"/>01733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01734"/>01734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01735"/>01735 
<anchor xml:id="__photon_network_part_8cs_source_1l01736"/>01736 
<anchor xml:id="__photon_network_part_8cs_source_1l01737"/>01737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;object&gt;&#32;currentValues&#32;=&#32;serializeStreamOut.GetWriteStream();
<anchor xml:id="__photon_network_part_8cs_source_1l01738"/>01738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentValues[<link linkend="_class_photon_1_1_pun_1_1_photon_network_1aa9442689ca13d585f3ee9c602f158015">SyncViewId</link>]&#32;=&#32;view.ViewID;
<anchor xml:id="__photon_network_part_8cs_source_1l01739"/>01739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentValues[<link linkend="_class_photon_1_1_pun_1_1_photon_network_1ac8b6b2e4fb47c0669fa623dec5645570">SyncCompressed</link>]&#32;=&#32;<emphasis role="keyword">false</emphasis>;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(bool)&#32;compression&#32;was&#32;used.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01740"/>01740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentValues[<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a0185ef3c9a6bbc813e98bb4ab8b9b9aa">SyncNullValues</link>]&#32;=&#32;<emphasis role="keyword">null</emphasis>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;reliable&#32;compressed,&#32;this&#32;is&#32;non-null.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01741"/>01741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;next:&#32;sequence&#32;of&#32;values&#32;in&#32;this&#32;object&apos;s&#32;update.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01742"/>01742 
<anchor xml:id="__photon_network_part_8cs_source_1l01743"/>01743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(view.Synchronization&#32;==&#32;<link linkend="_namespace_photon_1_1_pun_1ad826bf995d229831e4d2aeadddc6a048">ViewSynchronization</link>.Unreliable)
<anchor xml:id="__photon_network_part_8cs_source_1l01744"/>01744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01745"/>01745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;currentValues;
<anchor xml:id="__photon_network_part_8cs_source_1l01746"/>01746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01747"/>01747 
<anchor xml:id="__photon_network_part_8cs_source_1l01748"/>01748 
<anchor xml:id="__photon_network_part_8cs_source_1l01749"/>01749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ViewSynchronization:&#32;Off,&#32;Unreliable,&#32;UnreliableOnChange,&#32;ReliableDeltaCompressed</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01750"/>01750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(view.Synchronization&#32;==&#32;<link linkend="_namespace_photon_1_1_pun_1ad826bf995d229831e4d2aeadddc6a048">ViewSynchronization</link>.UnreliableOnChange)
<anchor xml:id="__photon_network_part_8cs_source_1l01751"/>01751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01752"/>01752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(AlmostEquals(currentValues,&#32;view.lastOnSerializeDataSent))
<anchor xml:id="__photon_network_part_8cs_source_1l01753"/>01753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01754"/>01754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(view.mixedModeIsReliable)
<anchor xml:id="__photon_network_part_8cs_source_1l01755"/>01755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01756"/>01756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01757"/>01757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01758"/>01758 
<anchor xml:id="__photon_network_part_8cs_source_1l01759"/>01759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;view.mixedModeIsReliable&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01760"/>01760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;object&gt;&#32;temp&#32;=&#32;view.lastOnSerializeDataSent;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;extract&#32;&quot;exchange&quot;&#32;into&#32;method&#32;in&#32;PV</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01761"/>01761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;view.lastOnSerializeDataSent&#32;=&#32;currentValues;
<anchor xml:id="__photon_network_part_8cs_source_1l01762"/>01762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;view.syncValues&#32;=&#32;temp;
<anchor xml:id="__photon_network_part_8cs_source_1l01763"/>01763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01764"/>01764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01765"/>01765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01766"/>01766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;view.mixedModeIsReliable&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01767"/>01767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;object&gt;&#32;temp&#32;=&#32;view.lastOnSerializeDataSent;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;extract&#32;&quot;exchange&quot;&#32;into&#32;method&#32;in&#32;PV</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01768"/>01768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;view.lastOnSerializeDataSent&#32;=&#32;currentValues;
<anchor xml:id="__photon_network_part_8cs_source_1l01769"/>01769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;view.syncValues&#32;=&#32;temp;
<anchor xml:id="__photon_network_part_8cs_source_1l01770"/>01770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01771"/>01771 
<anchor xml:id="__photon_network_part_8cs_source_1l01772"/>01772 
<anchor xml:id="__photon_network_part_8cs_source_1l01773"/>01773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;currentValues;
<anchor xml:id="__photon_network_part_8cs_source_1l01774"/>01774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01775"/>01775 
<anchor xml:id="__photon_network_part_8cs_source_1l01776"/>01776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(view.Synchronization&#32;==&#32;<link linkend="_namespace_photon_1_1_pun_1ad826bf995d229831e4d2aeadddc6a048">ViewSynchronization</link>.ReliableDeltaCompressed)
<anchor xml:id="__photon_network_part_8cs_source_1l01777"/>01777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01778"/>01778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;fix&#32;delta&#32;compression&#32;/&#32;comparison</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01779"/>01779 
<anchor xml:id="__photon_network_part_8cs_source_1l01780"/>01780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;compress&#32;content&#32;of&#32;data&#32;set&#32;(by&#32;comparing&#32;to&#32;view.lastOnSerializeDataSent)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01781"/>01781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;&quot;original&quot;&#32;dataArray&#32;is&#32;NOT&#32;modified&#32;by&#32;DeltaCompressionWrite</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01782"/>01782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;object&gt;&#32;dataToSend&#32;=&#32;DeltaCompressionWrite(view.lastOnSerializeDataSent,&#32;currentValues);
<anchor xml:id="__photon_network_part_8cs_source_1l01783"/>01783 
<anchor xml:id="__photon_network_part_8cs_source_1l01784"/>01784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;cache&#32;the&#32;values&#32;that&#32;were&#32;written&#32;this&#32;time&#32;(not&#32;the&#32;compressed&#32;values)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01785"/>01785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;object&gt;&#32;temp&#32;=&#32;view.lastOnSerializeDataSent;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;extract&#32;&quot;exchange&quot;&#32;into&#32;method&#32;in&#32;PV</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01786"/>01786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;view.lastOnSerializeDataSent&#32;=&#32;currentValues;
<anchor xml:id="__photon_network_part_8cs_source_1l01787"/>01787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;view.syncValues&#32;=&#32;temp;
<anchor xml:id="__photon_network_part_8cs_source_1l01788"/>01788 
<anchor xml:id="__photon_network_part_8cs_source_1l01789"/>01789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;dataToSend;
<anchor xml:id="__photon_network_part_8cs_source_1l01790"/>01790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01791"/>01791 
<anchor xml:id="__photon_network_part_8cs_source_1l01792"/>01792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01793"/>01793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01794"/>01794 
<anchor xml:id="__photon_network_part_8cs_source_1l01798"/>01798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnSerializeRead(<emphasis role="keywordtype">object</emphasis>[]&#32;data,&#32;Player&#32;sender,&#32;<emphasis role="keywordtype">int</emphasis>&#32;networkTime,&#32;<emphasis role="keywordtype">short</emphasis>&#32;correctPrefix)
<anchor xml:id="__photon_network_part_8cs_source_1l01799"/>01799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01800"/>01800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;read&#32;view&#32;ID&#32;from&#32;key&#32;(byte)0:&#32;a&#32;int-array&#32;(PUN&#32;1.17++)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01801"/>01801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;viewID&#32;=&#32;(int)data[<link linkend="_class_photon_1_1_pun_1_1_photon_network_1aa9442689ca13d585f3ee9c602f158015">SyncViewId</link>];
<anchor xml:id="__photon_network_part_8cs_source_1l01802"/>01802 
<anchor xml:id="__photon_network_part_8cs_source_1l01803"/>01803 
<anchor xml:id="__photon_network_part_8cs_source_1l01804"/>01804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;debug:</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01805"/>01805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//LogObjectArray(data);</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01806"/>01806 
<anchor xml:id="__photon_network_part_8cs_source_1l01807"/>01807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonView&#32;view&#32;=&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a5a0dc3a5cdb4df9d0704a9bd67145cae">GetPhotonView</link>(viewID);
<anchor xml:id="__photon_network_part_8cs_source_1l01808"/>01808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(view&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l01809"/>01809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01810"/>01810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogWarning(<emphasis role="stringliteral">&quot;Received&#32;OnSerialization&#32;for&#32;view&#32;ID&#32;&quot;</emphasis>&#32;+&#32;viewID&#32;+&#32;<emphasis role="stringliteral">&quot;.&#32;We&#32;have&#32;no&#32;such&#32;PhotonView!&#32;Ignore&#32;this&#32;if&#32;you&apos;re&#32;joining&#32;or&#32;leaving&#32;a&#32;room.&#32;State:&#32;&quot;</emphasis>&#32;+&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a312fc99165f039e31b65bebbafdf6736">NetworkingClient</link>.<link linkend="_class_photon_1_1_realtime_1_1_load_balancing_client_1a50b56ed2bd694735fe5d4745ea2f5588">State</link>);
<anchor xml:id="__photon_network_part_8cs_source_1l01811"/>01811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01812"/>01812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01813"/>01813 
<anchor xml:id="__photon_network_part_8cs_source_1l01814"/>01814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(view.Prefix&#32;&gt;&#32;0&#32;&amp;&amp;&#32;correctPrefix&#32;!=&#32;view.Prefix)
<anchor xml:id="__photon_network_part_8cs_source_1l01815"/>01815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01816"/>01816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogError(<emphasis role="stringliteral">&quot;Received&#32;OnSerialization&#32;for&#32;view&#32;ID&#32;&quot;</emphasis>&#32;+&#32;viewID&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;with&#32;prefix&#32;&quot;</emphasis>&#32;+&#32;correctPrefix&#32;+&#32;<emphasis role="stringliteral">&quot;.&#32;Our&#32;prefix&#32;is&#32;&quot;</emphasis>&#32;+&#32;view.Prefix);
<anchor xml:id="__photon_network_part_8cs_source_1l01817"/>01817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01818"/>01818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01819"/>01819 
<anchor xml:id="__photon_network_part_8cs_source_1l01820"/>01820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;SetReceiving&#32;filtering</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01821"/>01821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(view.Group&#32;!=&#32;0&#32;&amp;&amp;&#32;!allowedReceivingGroups.Contains(view.Group))
<anchor xml:id="__photon_network_part_8cs_source_1l01822"/>01822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01823"/>01823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;&#32;<emphasis role="comment">//&#32;Ignore&#32;group</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01824"/>01824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01825"/>01825 
<anchor xml:id="__photon_network_part_8cs_source_1l01826"/>01826 
<anchor xml:id="__photon_network_part_8cs_source_1l01827"/>01827 
<anchor xml:id="__photon_network_part_8cs_source_1l01828"/>01828 
<anchor xml:id="__photon_network_part_8cs_source_1l01829"/>01829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(view.Synchronization&#32;==&#32;<link linkend="_namespace_photon_1_1_pun_1ad826bf995d229831e4d2aeadddc6a048">ViewSynchronization</link>.ReliableDeltaCompressed)
<anchor xml:id="__photon_network_part_8cs_source_1l01830"/>01830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01831"/>01831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">object</emphasis>[]&#32;uncompressed&#32;=&#32;DeltaCompressionRead(view.lastOnSerializeDataReceived,&#32;data);
<anchor xml:id="__photon_network_part_8cs_source_1l01832"/>01832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//LogObjectArray(uncompressed,&quot;uncompressed&#32;&quot;);</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01833"/>01833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(uncompressed&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l01834"/>01834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01835"/>01835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Skip&#32;this&#32;packet&#32;as&#32;we&#32;haven&apos;t&#32;got&#32;received&#32;complete-copy&#32;of&#32;this&#32;view&#32;yet.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01836"/>01836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.LogLevel&#32;&gt;=&#32;<link linkend="_group__public_api_1ga5a8128eaeb2f346d4cceb57d48caf9c1">PunLogLevel</link>.Informational)
<anchor xml:id="__photon_network_part_8cs_source_1l01837"/>01837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01838"/>01838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.Log(<emphasis role="stringliteral">&quot;Skipping&#32;packet&#32;for&#32;&quot;</emphasis>&#32;+&#32;view.name&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;[&quot;</emphasis>&#32;+&#32;view.ViewID&#32;+
<anchor xml:id="__photon_network_part_8cs_source_1l01839"/>01839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;]&#32;as&#32;we&#32;haven&apos;t&#32;received&#32;a&#32;full&#32;packet&#32;for&#32;delta&#32;compression&#32;yet.&#32;This&#32;is&#32;OK&#32;if&#32;it&#32;happens&#32;for&#32;the&#32;first&#32;few&#32;frames&#32;after&#32;joining&#32;a&#32;game.&quot;</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l01840"/>01840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01841"/>01841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01842"/>01842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01843"/>01843 
<anchor xml:id="__photon_network_part_8cs_source_1l01844"/>01844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;store&#32;last&#32;received&#32;values&#32;(uncompressed)&#32;for&#32;delta-compression&#32;usage</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01845"/>01845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;view.lastOnSerializeDataReceived&#32;=&#32;uncompressed;
<anchor xml:id="__photon_network_part_8cs_source_1l01846"/>01846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data&#32;=&#32;uncompressed;
<anchor xml:id="__photon_network_part_8cs_source_1l01847"/>01847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01848"/>01848 
<anchor xml:id="__photon_network_part_8cs_source_1l01849"/>01849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;re-check&#32;if&#32;ownership&#32;needs&#32;to&#32;be&#32;adjusted&#32;based&#32;on&#32;updates.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01850"/>01850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;most&#32;likely,&#32;only&#32;the&#32;PhotonView.Controller&#32;should&#32;be&#32;affected,&#32;if&#32;anything&#32;at&#32;all.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01851"/>01851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;find&#32;a&#32;way&#32;to&#32;sync&#32;the&#32;owner&#32;of&#32;a&#32;PV&#32;for&#32;late&#32;joiners.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01852"/>01852 
<anchor xml:id="__photon_network_part_8cs_source_1l01857"/>01857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//if&#32;(sender.ID&#32;!=&#32;view.OwnerActorNr&#32;&amp;&amp;&#32;(!view.OwnershipWasTransfered&#32;||&#32;view.OwnerActorNr&#32;==&#32;0)&#32;&amp;&amp;&#32;view.currentMasterID&#32;==&#32;-1)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01858"/>01858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//{</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01859"/>01859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;//&#32;obviously&#32;the&#32;owner&#32;changed&#32;and&#32;we&#32;didn&apos;t&#32;yet&#32;notice.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01860"/>01860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;//Debug.Log(&quot;Adjusting&#32;owner&#32;to&#32;sender&#32;of&#32;updates.&#32;From:&#32;&quot;&#32;+&#32;view.OwnerActorNr&#32;+&#32;&quot;&#32;to:&#32;&quot;&#32;+&#32;sender.ID);</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01861"/>01861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;view.OwnerActorNr&#32;=&#32;sender.ID;</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01862"/>01862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//}</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01863"/>01863 
<anchor xml:id="__photon_network_part_8cs_source_1l01864"/>01864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;serializeStreamIn.SetReadStream(data,&#32;3);
<anchor xml:id="__photon_network_part_8cs_source_1l01865"/>01865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonMessageInfo&#32;info&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;PhotonMessageInfo(sender,&#32;networkTime,&#32;view);
<anchor xml:id="__photon_network_part_8cs_source_1l01866"/>01866 
<anchor xml:id="__photon_network_part_8cs_source_1l01867"/>01867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;view.DeserializeView(serializeStreamIn,&#32;info);
<anchor xml:id="__photon_network_part_8cs_source_1l01868"/>01868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01869"/>01869 
<anchor xml:id="__photon_network_part_8cs_source_1l01870"/>01870 
<anchor xml:id="__photon_network_part_8cs_source_1l01871"/>01871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;compresses&#32;currentContent&#32;by&#32;using&#32;NULL&#32;as&#32;value&#32;if&#32;currentContent&#32;equals&#32;previousContent</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01872"/>01872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;skips&#32;initial&#32;indexes,&#32;as&#32;defined&#32;by&#32;SyncFirstValue</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01873"/>01873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;conserve&#32;memory,&#32;the&#32;previousContent&#32;is&#32;re-used&#32;as&#32;buffer&#32;for&#32;the&#32;result!&#32;duplicate&#32;the&#32;values&#32;before&#32;using&#32;this,&#32;if&#32;needed</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01874"/>01874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;returns&#32;null,&#32;if&#32;nothing&#32;must&#32;be&#32;sent&#32;(current&#32;content&#32;might&#32;be&#32;null,&#32;which&#32;also&#32;returns&#32;null)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01875"/>01875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;SyncFirstValue&#32;should&#32;be&#32;the&#32;index&#32;of&#32;the&#32;first&#32;actual&#32;data-value&#32;(3&#32;in&#32;PUN&apos;s&#32;case,&#32;as&#32;0=viewId,&#32;1=(bool)compressed,&#32;2=(int[])values&#32;that&#32;are&#32;now&#32;null)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01876"/><link linkend="_class_photon_1_1_pun_1_1_photon_network_1aa9442689ca13d585f3ee9c602f158015">01876</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1aa9442689ca13d585f3ee9c602f158015">SyncViewId</link>&#32;=&#32;0;
<anchor xml:id="__photon_network_part_8cs_source_1l01877"/><link linkend="_class_photon_1_1_pun_1_1_photon_network_1ac8b6b2e4fb47c0669fa623dec5645570">01877</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1ac8b6b2e4fb47c0669fa623dec5645570">SyncCompressed</link>&#32;=&#32;1;
<anchor xml:id="__photon_network_part_8cs_source_1l01878"/><link linkend="_class_photon_1_1_pun_1_1_photon_network_1a0185ef3c9a6bbc813e98bb4ab8b9b9aa">01878</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a0185ef3c9a6bbc813e98bb4ab8b9b9aa">SyncNullValues</link>&#32;=&#32;2;
<anchor xml:id="__photon_network_part_8cs_source_1l01879"/><link linkend="_class_photon_1_1_pun_1_1_photon_network_1a64300f3e69063fab23cbca77630710cd">01879</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a64300f3e69063fab23cbca77630710cd">SyncFirstValue</link>&#32;=&#32;3;
<anchor xml:id="__photon_network_part_8cs_source_1l01880"/>01880 
<anchor xml:id="__photon_network_part_8cs_source_1l01881"/>01881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;List&lt;object&gt;&#32;DeltaCompressionWrite(List&lt;object&gt;&#32;previousContent,&#32;List&lt;object&gt;&#32;currentContent)
<anchor xml:id="__photon_network_part_8cs_source_1l01882"/>01882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01883"/>01883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(currentContent&#32;==&#32;<emphasis role="keyword">null</emphasis>&#32;||&#32;previousContent&#32;==&#32;<emphasis role="keyword">null</emphasis>&#32;||&#32;previousContent.Count&#32;!=&#32;currentContent.Count)
<anchor xml:id="__photon_network_part_8cs_source_1l01884"/>01884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01885"/>01885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;currentContent;&#32;<emphasis role="comment">//&#32;the&#32;current&#32;data&#32;needs&#32;to&#32;be&#32;sent&#32;(which&#32;might&#32;be&#32;null)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01886"/>01886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01887"/>01887 
<anchor xml:id="__photon_network_part_8cs_source_1l01888"/>01888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(currentContent.Count&#32;&lt;=&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a64300f3e69063fab23cbca77630710cd">SyncFirstValue</link>)
<anchor xml:id="__photon_network_part_8cs_source_1l01889"/>01889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01890"/>01890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">null</emphasis>;&#32;<emphasis role="comment">//&#32;this&#32;send&#32;doesn&apos;t&#32;contain&#32;values&#32;(except&#32;the&#32;&quot;headers&quot;),&#32;so&#32;it&apos;s&#32;not&#32;being&#32;sent</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01891"/>01891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01892"/>01892 
<anchor xml:id="__photon_network_part_8cs_source_1l01893"/>01893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;object&gt;&#32;compressedContent&#32;=&#32;previousContent;&#32;<emphasis role="comment">//&#32;the&#32;previous&#32;content&#32;is&#32;no&#32;longer&#32;needed,&#32;once&#32;we&#32;compared&#32;the&#32;values!</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01894"/>01894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;compressedContent[<link linkend="_class_photon_1_1_pun_1_1_photon_network_1ac8b6b2e4fb47c0669fa623dec5645570">SyncCompressed</link>]&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01895"/>01895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;compressedValues&#32;=&#32;0;
<anchor xml:id="__photon_network_part_8cs_source_1l01896"/>01896 
<anchor xml:id="__photon_network_part_8cs_source_1l01897"/>01897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Queue&lt;int&gt;&#32;valuesThatAreChangedToNull&#32;=&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01898"/>01898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;index&#32;=&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a64300f3e69063fab23cbca77630710cd">SyncFirstValue</link>;&#32;index&#32;&lt;&#32;currentContent.Count;&#32;index++)
<anchor xml:id="__photon_network_part_8cs_source_1l01899"/>01899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01900"/>01900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">object</emphasis>&#32;newObj&#32;=&#32;currentContent[index];
<anchor xml:id="__photon_network_part_8cs_source_1l01901"/>01901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">object</emphasis>&#32;oldObj&#32;=&#32;previousContent[index];
<anchor xml:id="__photon_network_part_8cs_source_1l01902"/>01902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(AlmostEquals(newObj,&#32;oldObj))
<anchor xml:id="__photon_network_part_8cs_source_1l01903"/>01903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01904"/>01904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;compress&#32;(by&#32;using&#32;null,&#32;instead&#32;of&#32;value,&#32;which&#32;is&#32;same&#32;as&#32;before)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01905"/>01905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;compressedValues++;
<anchor xml:id="__photon_network_part_8cs_source_1l01906"/>01906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;compressedContent[index]&#32;=&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01907"/>01907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01908"/>01908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01909"/>01909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01910"/>01910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;compressedContent[index]&#32;=&#32;newObj;
<anchor xml:id="__photon_network_part_8cs_source_1l01911"/>01911 
<anchor xml:id="__photon_network_part_8cs_source_1l01912"/>01912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;value&#32;changed,&#32;we&#32;don&apos;t&#32;replace&#32;it&#32;with&#32;null</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01913"/>01913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;new&#32;value&#32;is&#32;null&#32;(like&#32;a&#32;compressed&#32;value):&#32;we&#32;have&#32;to&#32;mark&#32;it&#32;so&#32;it&#32;STAYS&#32;null&#32;instead&#32;of&#32;being&#32;replaced&#32;with&#32;previous&#32;value</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01914"/>01914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(newObj&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l01915"/>01915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01916"/>01916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(valuesThatAreChangedToNull&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l01917"/>01917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01918"/>01918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;valuesThatAreChangedToNull&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Queue&lt;int&gt;(currentContent.Count);
<anchor xml:id="__photon_network_part_8cs_source_1l01919"/>01919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01920"/>01920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;valuesThatAreChangedToNull.Enqueue(index);
<anchor xml:id="__photon_network_part_8cs_source_1l01921"/>01921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01922"/>01922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01923"/>01923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01924"/>01924 
<anchor xml:id="__photon_network_part_8cs_source_1l01925"/>01925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Only&#32;send&#32;the&#32;list&#32;of&#32;compressed&#32;fields&#32;if&#32;we&#32;actually&#32;compressed&#32;1&#32;or&#32;more&#32;fields.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01926"/>01926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(compressedValues&#32;&gt;&#32;0)
<anchor xml:id="__photon_network_part_8cs_source_1l01927"/>01927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01928"/>01928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(compressedValues&#32;==&#32;currentContent.Count&#32;-&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a64300f3e69063fab23cbca77630710cd">SyncFirstValue</link>)
<anchor xml:id="__photon_network_part_8cs_source_1l01929"/>01929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01930"/>01930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;all&#32;values&#32;are&#32;compressed&#32;to&#32;null,&#32;we&#32;have&#32;nothing&#32;to&#32;send</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01931"/>01931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01932"/>01932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01933"/>01933 
<anchor xml:id="__photon_network_part_8cs_source_1l01934"/>01934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;compressedContent[<link linkend="_class_photon_1_1_pun_1_1_photon_network_1ac8b6b2e4fb47c0669fa623dec5645570">SyncCompressed</link>]&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01935"/>01935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(valuesThatAreChangedToNull&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l01936"/>01936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01937"/>01937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;compressedContent[<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a0185ef3c9a6bbc813e98bb4ab8b9b9aa">SyncNullValues</link>]&#32;=&#32;valuesThatAreChangedToNull.ToArray();&#32;<emphasis role="comment">//&#32;data&#32;that&#32;is&#32;actually&#32;null&#32;(not&#32;just&#32;cause&#32;we&#32;didn&apos;t&#32;want&#32;to&#32;send&#32;it)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01938"/>01938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01939"/>01939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01940"/>01940 
<anchor xml:id="__photon_network_part_8cs_source_1l01941"/>01941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;compressedContent[<link linkend="_class_photon_1_1_pun_1_1_photon_network_1aa9442689ca13d585f3ee9c602f158015">SyncViewId</link>]&#32;=&#32;currentContent[<link linkend="_class_photon_1_1_pun_1_1_photon_network_1aa9442689ca13d585f3ee9c602f158015">SyncViewId</link>];
<anchor xml:id="__photon_network_part_8cs_source_1l01942"/>01942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;compressedContent;&#32;<emphasis role="comment">//&#32;some&#32;data&#32;was&#32;compressed&#32;but&#32;we&#32;need&#32;to&#32;send&#32;something</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01943"/>01943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01944"/>01944 
<anchor xml:id="__photon_network_part_8cs_source_1l01945"/>01945 
<anchor xml:id="__photon_network_part_8cs_source_1l01946"/>01946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">object</emphasis>[]&#32;DeltaCompressionRead(<emphasis role="keywordtype">object</emphasis>[]&#32;lastOnSerializeDataReceived,&#32;<emphasis role="keywordtype">object</emphasis>[]&#32;incomingData)
<anchor xml:id="__photon_network_part_8cs_source_1l01947"/>01947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01948"/>01948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((<emphasis role="keywordtype">bool</emphasis>)incomingData[<link linkend="_class_photon_1_1_pun_1_1_photon_network_1ac8b6b2e4fb47c0669fa623dec5645570">SyncCompressed</link>]&#32;==&#32;<emphasis role="keyword">false</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l01949"/>01949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01950"/>01950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;index&#32;1&#32;marks&#32;&quot;compressed&quot;&#32;as&#32;being&#32;true.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01951"/>01951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;incomingData;
<anchor xml:id="__photon_network_part_8cs_source_1l01952"/>01952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01953"/>01953 
<anchor xml:id="__photon_network_part_8cs_source_1l01954"/>01954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compression&#32;was&#32;applied&#32;(as&#32;data[1]&#32;==&#32;true)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01955"/>01955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;need&#32;a&#32;previous&#32;&quot;full&quot;&#32;list&#32;of&#32;values&#32;to&#32;restore&#32;values&#32;that&#32;are&#32;null&#32;in&#32;this&#32;msg.&#32;else,&#32;ignore&#32;this</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01956"/>01956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lastOnSerializeDataReceived&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l01957"/>01957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01958"/>01958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01959"/>01959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01960"/>01960 
<anchor xml:id="__photon_network_part_8cs_source_1l01961"/>01961 
<anchor xml:id="__photon_network_part_8cs_source_1l01962"/>01962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>[]&#32;indexesThatAreChangedToNull&#32;=&#32;incomingData[2]&#32;as&#32;<emphasis role="keywordtype">int</emphasis>[];
<anchor xml:id="__photon_network_part_8cs_source_1l01963"/>01963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;index&#32;=&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a64300f3e69063fab23cbca77630710cd">SyncFirstValue</link>;&#32;index&#32;&lt;&#32;incomingData.Length;&#32;index++)
<anchor xml:id="__photon_network_part_8cs_source_1l01964"/>01964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01965"/>01965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(indexesThatAreChangedToNull&#32;!=&#32;<emphasis role="keyword">null</emphasis>&#32;&amp;&amp;&#32;indexesThatAreChangedToNull.Contains(index))
<anchor xml:id="__photon_network_part_8cs_source_1l01966"/>01966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01967"/>01967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;&#32;<emphasis role="comment">//&#32;if&#32;a&#32;value&#32;was&#32;set&#32;to&#32;null&#32;in&#32;this&#32;update,&#32;we&#32;don&apos;t&#32;need&#32;to&#32;fetch&#32;it&#32;from&#32;an&#32;earlier&#32;update</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01968"/>01968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01969"/>01969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(incomingData[index]&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l01970"/>01970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01971"/>01971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;replace&#32;null&#32;values&#32;in&#32;this&#32;received&#32;msg&#32;unless&#32;a&#32;index&#32;is&#32;in&#32;the&#32;&quot;changed&#32;to&#32;null&quot;&#32;list</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01972"/>01972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">object</emphasis>&#32;lastValue&#32;=&#32;lastOnSerializeDataReceived[index];
<anchor xml:id="__photon_network_part_8cs_source_1l01973"/>01973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;incomingData[index]&#32;=&#32;lastValue;
<anchor xml:id="__photon_network_part_8cs_source_1l01974"/>01974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01975"/>01975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01976"/>01976 
<anchor xml:id="__photon_network_part_8cs_source_1l01977"/>01977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;incomingData;
<anchor xml:id="__photon_network_part_8cs_source_1l01978"/>01978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01979"/>01979 
<anchor xml:id="__photon_network_part_8cs_source_1l01980"/>01980 
<anchor xml:id="__photon_network_part_8cs_source_1l01981"/>01981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;startIndex&#32;should&#32;be&#32;the&#32;index&#32;of&#32;the&#32;first&#32;actual&#32;data-value&#32;(3&#32;in&#32;PUN&apos;s&#32;case,&#32;as&#32;0=viewId,&#32;1=(bool)compressed,&#32;2=(int[])values&#32;that&#32;are&#32;now&#32;null)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01982"/>01982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;returns&#32;the&#32;incomingData&#32;with&#32;modified&#32;content.&#32;any&#32;object&#32;being&#32;null&#32;(means:&#32;value&#32;unchanged)&#32;gets&#32;replaced&#32;with&#32;a&#32;previously&#32;sent&#32;value.&#32;incomingData&#32;is&#32;being&#32;modified</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l01983"/>01983 
<anchor xml:id="__photon_network_part_8cs_source_1l01984"/>01984 
<anchor xml:id="__photon_network_part_8cs_source_1l01985"/>01985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;AlmostEquals(IList&lt;object&gt;&#32;lastData,&#32;IList&lt;object&gt;&#32;currentContent)
<anchor xml:id="__photon_network_part_8cs_source_1l01986"/>01986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01987"/>01987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lastData&#32;==&#32;<emphasis role="keyword">null</emphasis>&#32;&amp;&amp;&#32;currentContent&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l01988"/>01988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01989"/>01989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01990"/>01990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01991"/>01991 
<anchor xml:id="__photon_network_part_8cs_source_1l01992"/>01992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lastData&#32;==&#32;<emphasis role="keyword">null</emphasis>&#32;||&#32;currentContent&#32;==&#32;<emphasis role="keyword">null</emphasis>&#32;||&#32;(lastData.Count&#32;!=&#32;currentContent.Count))
<anchor xml:id="__photon_network_part_8cs_source_1l01993"/>01993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01994"/>01994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l01995"/>01995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l01996"/>01996 
<anchor xml:id="__photon_network_part_8cs_source_1l01997"/>01997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;index&#32;=&#32;0;&#32;index&#32;&lt;&#32;currentContent.Count;&#32;index++)
<anchor xml:id="__photon_network_part_8cs_source_1l01998"/>01998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l01999"/>01999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">object</emphasis>&#32;newObj&#32;=&#32;currentContent[index];
<anchor xml:id="__photon_network_part_8cs_source_1l02000"/>02000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">object</emphasis>&#32;oldObj&#32;=&#32;lastData[index];
<anchor xml:id="__photon_network_part_8cs_source_1l02001"/>02001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!AlmostEquals(newObj,&#32;oldObj))
<anchor xml:id="__photon_network_part_8cs_source_1l02002"/>02002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02003"/>02003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02004"/>02004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02005"/>02005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02006"/>02006 
<anchor xml:id="__photon_network_part_8cs_source_1l02007"/>02007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02008"/>02008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02009"/>02009 
<anchor xml:id="__photon_network_part_8cs_source_1l02014"/>02014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;AlmostEquals(<emphasis role="keywordtype">object</emphasis>&#32;one,&#32;<emphasis role="keywordtype">object</emphasis>&#32;two)
<anchor xml:id="__photon_network_part_8cs_source_1l02015"/>02015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02016"/>02016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(one&#32;==&#32;<emphasis role="keyword">null</emphasis>&#32;||&#32;two&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l02017"/>02017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02018"/>02018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;one&#32;==&#32;<emphasis role="keyword">null</emphasis>&#32;&amp;&amp;&#32;two&#32;==&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02019"/>02019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02020"/>02020 
<anchor xml:id="__photon_network_part_8cs_source_1l02021"/>02021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!one.Equals(two))
<anchor xml:id="__photon_network_part_8cs_source_1l02022"/>02022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02023"/>02023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;A&#32;is&#32;not&#32;B,&#32;lets&#32;check&#32;if&#32;A&#32;is&#32;almost&#32;B</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02024"/>02024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(one&#32;is&#32;Vector3)
<anchor xml:id="__photon_network_part_8cs_source_1l02025"/>02025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02026"/>02026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;a&#32;=&#32;(Vector3)one;
<anchor xml:id="__photon_network_part_8cs_source_1l02027"/>02027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;b&#32;=&#32;(Vector3)two;
<anchor xml:id="__photon_network_part_8cs_source_1l02028"/>02028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(a.AlmostEquals(b,&#32;PhotonNetwork.PrecisionForVectorSynchronization))
<anchor xml:id="__photon_network_part_8cs_source_1l02029"/>02029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02030"/>02030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02031"/>02031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02032"/>02032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02033"/>02033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(one&#32;is&#32;Vector2)
<anchor xml:id="__photon_network_part_8cs_source_1l02034"/>02034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02035"/>02035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector2&#32;a&#32;=&#32;(Vector2)one;
<anchor xml:id="__photon_network_part_8cs_source_1l02036"/>02036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector2&#32;b&#32;=&#32;(Vector2)two;
<anchor xml:id="__photon_network_part_8cs_source_1l02037"/>02037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(a.AlmostEquals(b,&#32;PhotonNetwork.PrecisionForVectorSynchronization))
<anchor xml:id="__photon_network_part_8cs_source_1l02038"/>02038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02039"/>02039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02040"/>02040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02041"/>02041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02042"/>02042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(one&#32;is&#32;Quaternion)
<anchor xml:id="__photon_network_part_8cs_source_1l02043"/>02043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02044"/>02044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Quaternion&#32;a&#32;=&#32;(Quaternion)one;
<anchor xml:id="__photon_network_part_8cs_source_1l02045"/>02045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Quaternion&#32;b&#32;=&#32;(Quaternion)two;
<anchor xml:id="__photon_network_part_8cs_source_1l02046"/>02046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(a.AlmostEquals(b,&#32;PhotonNetwork.PrecisionForQuaternionSynchronization))
<anchor xml:id="__photon_network_part_8cs_source_1l02047"/>02047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02048"/>02048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02049"/>02049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02050"/>02050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02051"/>02051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(one&#32;is&#32;<emphasis role="keywordtype">float</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l02052"/>02052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02053"/>02053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;a&#32;=&#32;(float)one;
<anchor xml:id="__photon_network_part_8cs_source_1l02054"/>02054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;b&#32;=&#32;(float)two;
<anchor xml:id="__photon_network_part_8cs_source_1l02055"/>02055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(a.AlmostEquals(b,&#32;PhotonNetwork.PrecisionForFloatSynchronization))
<anchor xml:id="__photon_network_part_8cs_source_1l02056"/>02056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02057"/>02057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02058"/>02058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02059"/>02059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02060"/>02060 
<anchor xml:id="__photon_network_part_8cs_source_1l02061"/>02061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;one&#32;does&#32;not&#32;equal&#32;two</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02062"/>02062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02063"/>02063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02064"/>02064 
<anchor xml:id="__photon_network_part_8cs_source_1l02065"/>02065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02066"/>02066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02067"/>02067 
<anchor xml:id="__photon_network_part_8cs_source_1l02068"/>02068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTE:&#32;Might&#32;be&#32;used&#32;as&#32;replacement&#32;for&#32;the&#32;equivalent&#32;method&#32;in&#32;SupportClass.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02069"/>02069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">internal</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;GetMethod(MonoBehaviour&#32;monob,&#32;<emphasis role="keywordtype">string</emphasis>&#32;methodType,&#32;out&#32;MethodInfo&#32;mi)
<anchor xml:id="__photon_network_part_8cs_source_1l02070"/>02070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02071"/>02071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mi&#32;=&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02072"/>02072 
<anchor xml:id="__photon_network_part_8cs_source_1l02073"/>02073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(monob&#32;==&#32;<emphasis role="keyword">null</emphasis>&#32;||&#32;<emphasis role="keywordtype">string</emphasis>.IsNullOrEmpty(methodType))
<anchor xml:id="__photon_network_part_8cs_source_1l02074"/>02074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02075"/>02075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02076"/>02076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02077"/>02077 
<anchor xml:id="__photon_network_part_8cs_source_1l02078"/>02078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;MethodInfo&gt;&#32;methods&#32;=&#32;<link linkend="_namespace_photon_1_1_pun_1a5262cc10d8760dc9f60908f7fb91397e">SupportClassPun</link>.GetMethods(monob.GetType(),&#32;<emphasis role="keyword">null</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l02079"/>02079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;index&#32;=&#32;0;&#32;index&#32;&lt;&#32;methods.Count;&#32;index++)
<anchor xml:id="__photon_network_part_8cs_source_1l02080"/>02080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02081"/>02081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MethodInfo&#32;methodInfo&#32;=&#32;methods[index];
<anchor xml:id="__photon_network_part_8cs_source_1l02082"/>02082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(methodInfo.Name.Equals(methodType))
<anchor xml:id="__photon_network_part_8cs_source_1l02083"/>02083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02084"/>02084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mi&#32;=&#32;methodInfo;
<anchor xml:id="__photon_network_part_8cs_source_1l02085"/>02085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02086"/>02086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02087"/>02087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02088"/>02088 
<anchor xml:id="__photon_network_part_8cs_source_1l02089"/>02089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02090"/>02090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02091"/>02091 
<anchor xml:id="__photon_network_part_8cs_source_1l02092"/>02092 
<anchor xml:id="__photon_network_part_8cs_source_1l02094"/>02094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">internal</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;LoadLevelIfSynced()
<anchor xml:id="__photon_network_part_8cs_source_1l02095"/>02095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02096"/>02096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!PhotonNetwork.AutomaticallySyncScene&#32;||&#32;PhotonNetwork.IsMasterClient&#32;||&#32;PhotonNetwork.CurrentRoom&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l02097"/>02097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02098"/>02098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02099"/>02099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02100"/>02100 
<anchor xml:id="__photon_network_part_8cs_source_1l02101"/>02101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;if&#32;&quot;current&#32;level&quot;&#32;is&#32;set&#32;in&#32;props</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02102"/>02102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!PhotonNetwork.CurrentRoom.CustomProperties.ContainsKey(CurrentSceneProperty))
<anchor xml:id="__photon_network_part_8cs_source_1l02103"/>02103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02104"/>02104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02105"/>02105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02106"/>02106 
<anchor xml:id="__photon_network_part_8cs_source_1l02107"/>02107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;loaded&#32;level&#32;is&#32;not&#32;the&#32;one&#32;defined&#32;by&#32;master&#32;in&#32;props,&#32;load&#32;that&#32;level</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02108"/>02108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">object</emphasis>&#32;sceneId&#32;=&#32;PhotonNetwork.CurrentRoom.CustomProperties[CurrentSceneProperty];
<anchor xml:id="__photon_network_part_8cs_source_1l02109"/>02109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sceneId&#32;is&#32;<emphasis role="keywordtype">int</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l02110"/>02110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02111"/>02111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(SceneManagerHelper.ActiveSceneBuildIndex&#32;!=&#32;(<emphasis role="keywordtype">int</emphasis>)sceneId)
<anchor xml:id="__photon_network_part_8cs_source_1l02112"/>02112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02113"/>02113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.LoadLevel((<emphasis role="keywordtype">int</emphasis>)sceneId);
<anchor xml:id="__photon_network_part_8cs_source_1l02114"/>02114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02115"/>02115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02116"/>02116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sceneId&#32;is&#32;<emphasis role="keywordtype">string</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l02117"/>02117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02118"/>02118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(SceneManagerHelper.ActiveSceneName&#32;!=&#32;(<emphasis role="keywordtype">string</emphasis>)sceneId)
<anchor xml:id="__photon_network_part_8cs_source_1l02119"/>02119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02120"/>02120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.LoadLevel((<emphasis role="keywordtype">string</emphasis>)sceneId);
<anchor xml:id="__photon_network_part_8cs_source_1l02121"/>02121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02122"/>02122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02123"/>02123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02124"/>02124 
<anchor xml:id="__photon_network_part_8cs_source_1l02125"/>02125 
<anchor xml:id="__photon_network_part_8cs_source_1l02126"/>02126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">internal</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;SetLevelInPropsIfSynced(<emphasis role="keywordtype">object</emphasis>&#32;levelId)
<anchor xml:id="__photon_network_part_8cs_source_1l02127"/>02127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02128"/>02128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!PhotonNetwork.AutomaticallySyncScene&#32;||&#32;!PhotonNetwork.IsMasterClient&#32;||&#32;PhotonNetwork.CurrentRoom&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l02129"/>02129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02130"/>02130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02131"/>02131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02132"/>02132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(levelId&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l02133"/>02133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02134"/>02134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogError(<emphasis role="stringliteral">&quot;Parameter&#32;levelId&#32;can&apos;t&#32;be&#32;null!&quot;</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l02135"/>02135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02136"/>02136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02137"/>02137 
<anchor xml:id="__photon_network_part_8cs_source_1l02138"/>02138 
<anchor xml:id="__photon_network_part_8cs_source_1l02139"/>02139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;if&#32;&quot;current&#32;level&quot;&#32;is&#32;already&#32;set&#32;in&#32;the&#32;room&#32;properties&#32;(then&#32;we&#32;don&apos;t&#32;set&#32;it&#32;again)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02140"/>02140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.CurrentRoom.CustomProperties.ContainsKey(CurrentSceneProperty))
<anchor xml:id="__photon_network_part_8cs_source_1l02141"/>02141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02142"/>02142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">object</emphasis>&#32;levelIdInProps&#32;=&#32;PhotonNetwork.CurrentRoom.CustomProperties[CurrentSceneProperty];
<anchor xml:id="__photon_network_part_8cs_source_1l02143"/>02143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Debug.Log(&quot;levelId&#32;(to&#32;set):&#32;&quot;+&#32;levelId&#32;+&#32;&quot;&#32;levelIdInProps:&#32;&quot;&#32;+&#32;levelIdInProps&#32;+&#32;&quot;&#32;SceneManagerHelper.ActiveSceneName:&#32;&quot;+&#32;SceneManagerHelper.ActiveSceneName);</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02144"/>02144 
<anchor xml:id="__photon_network_part_8cs_source_1l02145"/>02145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(levelId.Equals(levelIdInProps))
<anchor xml:id="__photon_network_part_8cs_source_1l02146"/>02146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02147"/>02147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Debug.LogWarning(&quot;The&#32;levelId&#32;equals&#32;levelIdInProps.&#32;Don&apos;t&#32;set&#32;property&#32;again.&quot;);</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02148"/>02148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02149"/>02149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02150"/>02150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02151"/>02151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02152"/>02152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;the&#32;new&#32;levelId&#32;does&#32;not&#32;equal&#32;the&#32;level&#32;in&#32;properties,&#32;there&#32;is&#32;a&#32;chance&#32;that&#32;build&#32;index&#32;and&#32;scene&#32;name&#32;refer&#32;to&#32;the&#32;same&#32;scene.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02153"/>02153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;as&#32;Unity&#32;does&#32;not&#32;provide&#32;all&#32;scenes&#32;with&#32;build&#32;index,&#32;we&#32;only&#32;check&#32;for&#32;the&#32;currently&#32;loaded&#32;scene&#32;(with&#32;a&#32;high&#32;chance&#32;this&#32;is&#32;the&#32;correct&#32;one).</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02154"/>02154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;scnIndex&#32;=&#32;SceneManagerHelper.ActiveSceneBuildIndex;
<anchor xml:id="__photon_network_part_8cs_source_1l02155"/>02155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;scnName&#32;=&#32;SceneManagerHelper.ActiveSceneName;
<anchor xml:id="__photon_network_part_8cs_source_1l02156"/>02156 
<anchor xml:id="__photon_network_part_8cs_source_1l02157"/>02157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((levelId.Equals(scnIndex)&#32;&amp;&amp;&#32;levelIdInProps.Equals(scnName))&#32;||&#32;(levelId.Equals(scnName)&#32;&amp;&amp;&#32;levelIdInProps.Equals(scnIndex)))
<anchor xml:id="__photon_network_part_8cs_source_1l02158"/>02158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02159"/>02159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Debug.LogWarning(&quot;The&#32;levelId&#32;and&#32;levelIdInProps&#32;refer&#32;to&#32;the&#32;same&#32;scene.&#32;Don&apos;t&#32;set&#32;property&#32;for&#32;it.&quot;);</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02160"/>02160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02161"/>02161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02162"/>02162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02163"/>02163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02164"/>02164 
<anchor xml:id="__photon_network_part_8cs_source_1l02165"/>02165 
<anchor xml:id="__photon_network_part_8cs_source_1l02166"/>02166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;the&#32;new&#32;levelId&#32;does&#32;not&#32;match&#32;the&#32;current&#32;room-property,&#32;we&#32;can&#32;cancel&#32;existing&#32;loading&#32;(as&#32;we&#32;start&#32;a&#32;new&#32;one)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02167"/>02167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_AsyncLevelLoadingOperation&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l02168"/>02168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02169"/>02169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_AsyncLevelLoadingOperation.isDone)
<anchor xml:id="__photon_network_part_8cs_source_1l02170"/>02170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02171"/>02171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogWarning(<emphasis role="stringliteral">&quot;PUN&#32;cancels&#32;an&#32;ongoing&#32;async&#32;level&#32;load,&#32;as&#32;another&#32;scene&#32;should&#32;be&#32;loaded.&#32;Next&#32;scene&#32;to&#32;load:&#32;&quot;</emphasis>&#32;+&#32;levelId);
<anchor xml:id="__photon_network_part_8cs_source_1l02172"/>02172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02173"/>02173 
<anchor xml:id="__photon_network_part_8cs_source_1l02174"/>02174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_AsyncLevelLoadingOperation.allowSceneActivation&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02175"/>02175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_AsyncLevelLoadingOperation&#32;=&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02176"/>02176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02177"/>02177 
<anchor xml:id="__photon_network_part_8cs_source_1l02178"/>02178 
<anchor xml:id="__photon_network_part_8cs_source_1l02179"/>02179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;current&#32;level&#32;is&#32;not&#32;yet&#32;in&#32;props,&#32;or&#32;different,&#32;so&#32;this&#32;client&#32;has&#32;to&#32;set&#32;it</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02180"/>02180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__player_controller_8cs_1afa613ef589c02dbd94acc273b62cdcfd">Hashtable</link>&#32;setScene&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1ac76b06ac6ca332ba5e95f9521501ed77">Hashtable</link>();
<anchor xml:id="__photon_network_part_8cs_source_1l02181"/>02181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(levelId&#32;is&#32;<emphasis role="keywordtype">int</emphasis>)&#32;setScene[CurrentSceneProperty]&#32;=&#32;(int)levelId;
<anchor xml:id="__photon_network_part_8cs_source_1l02182"/>02182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(levelId&#32;is&#32;<emphasis role="keywordtype">string</emphasis>)&#32;setScene[CurrentSceneProperty]&#32;=&#32;(string)levelId;
<anchor xml:id="__photon_network_part_8cs_source_1l02183"/>02183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogError(<emphasis role="stringliteral">&quot;Parameter&#32;levelId&#32;must&#32;be&#32;int&#32;or&#32;string!&quot;</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l02184"/>02184 
<anchor xml:id="__photon_network_part_8cs_source_1l02185"/>02185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.CurrentRoom.SetCustomProperties(setScene);
<anchor xml:id="__photon_network_part_8cs_source_1l02186"/>02186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1ac7905c06b48747ec4b86d0b75107ddc4">SendAllOutgoingCommands</link>();&#32;<emphasis role="comment">//&#32;send&#32;immediately!&#32;because:&#32;in&#32;most&#32;cases&#32;the&#32;client&#32;will&#32;begin&#32;to&#32;load&#32;and&#32;pause&#32;sending&#32;anything&#32;for&#32;a&#32;while</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02187"/>02187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02188"/>02188 
<anchor xml:id="__photon_network_part_8cs_source_1l02189"/>02189 
<anchor xml:id="__photon_network_part_8cs_source_1l02190"/>02190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnEvent(EventData&#32;photonEvent)
<anchor xml:id="__photon_network_part_8cs_source_1l02191"/>02191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02192"/>02192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;actorNr&#32;=&#32;photonEvent.Sender;
<anchor xml:id="__photon_network_part_8cs_source_1l02193"/>02193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceemotitron_1_1_utilities_1a0afe234d0cc0a84d0718464b0d871725a636da1d35e805b00eae0fcd8333f9234">Player</link>&#32;originatingPlayer&#32;=&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02194"/>02194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(actorNr&#32;&gt;&#32;0&#32;&amp;&amp;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a312fc99165f039e31b65bebbafdf6736">NetworkingClient</link>.<link linkend="_class_photon_1_1_realtime_1_1_load_balancing_client_1a5b75141df981bebc4f7e1f0edb6a399b">CurrentRoom</link>&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l02195"/>02195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02196"/>02196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;originatingPlayer&#32;=&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a312fc99165f039e31b65bebbafdf6736">NetworkingClient</link>.<link linkend="_class_photon_1_1_realtime_1_1_load_balancing_client_1a5b75141df981bebc4f7e1f0edb6a399b">CurrentRoom</link>.<link linkend="_class_photon_1_1_realtime_1_1_room_1a267b83eaa30e0f7486830dd25e07479c">GetPlayer</link>(actorNr);
<anchor xml:id="__photon_network_part_8cs_source_1l02197"/>02197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02198"/>02198 
<anchor xml:id="__photon_network_part_8cs_source_1l02199"/>02199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(photonEvent.Code)
<anchor xml:id="__photon_network_part_8cs_source_1l02200"/>02200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02201"/>02201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;EventCode.Join:
<anchor xml:id="__photon_network_part_8cs_source_1l02202"/>02202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ResetPhotonViewsOnSerialize();
<anchor xml:id="__photon_network_part_8cs_source_1l02203"/>02203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02204"/>02204 
<anchor xml:id="__photon_network_part_8cs_source_1l02205"/>02205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PunEvent.RPC:
<anchor xml:id="__photon_network_part_8cs_source_1l02206"/>02206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ExecuteRpc(photonEvent.CustomData&#32;as&#32;<link linkend="__player_controller_8cs_1afa613ef589c02dbd94acc273b62cdcfd">Hashtable</link>,&#32;originatingPlayer);
<anchor xml:id="__photon_network_part_8cs_source_1l02207"/>02207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02208"/>02208 
<anchor xml:id="__photon_network_part_8cs_source_1l02209"/>02209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PunEvent.SendSerialize:
<anchor xml:id="__photon_network_part_8cs_source_1l02210"/>02210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PunEvent.SendSerializeReliable:
<anchor xml:id="__photon_network_part_8cs_source_1l02211"/>02211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Debug.Log(photonEvent.ToStringFull());</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02212"/>02212 
<anchor xml:id="__photon_network_part_8cs_source_1l02213"/>02213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;This&#32;case&#32;must&#32;match&#32;definition&#32;in&#32;RunViewUpdate()&#32;and&#32;OnSerializeWrite().</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02214"/>02214 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;Format&#32;of&#32;the&#32;event&apos;s&#32;data&#32;object[]:</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02215"/>02215 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;[0]&#32;=&#32;PhotonNetwork.ServerTimestamp;</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02216"/>02216 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;[1]&#32;=&#32;currentLevelPrefix;&#32;&#32;OPTIONAL!</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02217"/>02217 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;[2]&#32;=&#32;object[]&#32;of&#32;PhotonView&#32;x</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02218"/>02218 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;[3]&#32;=&#32;object[]&#32;of&#32;PhotonView&#32;y&#32;or&#32;NULL</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02219"/>02219 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;[...]</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02220"/>02220 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02221"/>02221 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;We&#32;only&#32;combine&#32;updates&#32;for&#32;XY&#32;objects&#32;into&#32;one&#32;RaiseEvent&#32;to&#32;avoid&#32;fragmentation.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02222"/>02222 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;The&#32;Reliability&#32;and&#32;Interest&#32;Group&#32;are&#32;only&#32;used&#32;for&#32;RaiseEvent&#32;and&#32;not&#32;contained&#32;in&#32;the&#32;event/data&#32;that&#32;reaches&#32;the&#32;other&#32;clients.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02223"/>02223 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;This&#32;is&#32;read&#32;in&#32;OnEvent().</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02224"/>02224 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02225"/>02225 
<anchor xml:id="__photon_network_part_8cs_source_1l02226"/>02226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">object</emphasis>[]&#32;pvUpdates&#32;=&#32;(<emphasis role="keywordtype">object</emphasis>[])photonEvent[ParameterCode.Data];
<anchor xml:id="__photon_network_part_8cs_source_1l02227"/>02227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;remoteUpdateServerTimestamp&#32;=&#32;(<emphasis role="keywordtype">int</emphasis>)pvUpdates[0];
<anchor xml:id="__photon_network_part_8cs_source_1l02228"/>02228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">short</emphasis>&#32;remoteLevelPrefix&#32;=&#32;(pvUpdates[1]&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;?&#32;(<emphasis role="keywordtype">byte</emphasis>)pvUpdates[1]&#32;:&#32;(short)0;
<anchor xml:id="__photon_network_part_8cs_source_1l02229"/>02229 
<anchor xml:id="__photon_network_part_8cs_source_1l02230"/>02230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">object</emphasis>[]&#32;viewUpdate&#32;=&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02231"/>02231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;2;&#32;i&#32;&lt;&#32;pvUpdates.Length;&#32;i++)
<anchor xml:id="__photon_network_part_8cs_source_1l02232"/>02232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02233"/>02233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;viewUpdate&#32;=&#32;pvUpdates[i]&#32;as&#32;<emphasis role="keywordtype">object</emphasis>[];
<anchor xml:id="__photon_network_part_8cs_source_1l02234"/>02234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(viewUpdate&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l02235"/>02235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02236"/>02236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02237"/>02237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02238"/>02238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OnSerializeRead(viewUpdate,&#32;originatingPlayer,&#32;remoteUpdateServerTimestamp,&#32;remoteLevelPrefix);
<anchor xml:id="__photon_network_part_8cs_source_1l02239"/>02239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02240"/>02240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02241"/>02241 
<anchor xml:id="__photon_network_part_8cs_source_1l02242"/>02242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PunEvent.Instantiation:
<anchor xml:id="__photon_network_part_8cs_source_1l02243"/>02243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NetworkInstantiate((<link linkend="__player_controller_8cs_1afa613ef589c02dbd94acc273b62cdcfd">Hashtable</link>)photonEvent.CustomData,&#32;originatingPlayer);
<anchor xml:id="__photon_network_part_8cs_source_1l02244"/>02244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02245"/>02245 
<anchor xml:id="__photon_network_part_8cs_source_1l02246"/>02246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PunEvent.CloseConnection:
<anchor xml:id="__photon_network_part_8cs_source_1l02247"/>02247 
<anchor xml:id="__photon_network_part_8cs_source_1l02248"/>02248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;MasterClient&#32;&quot;requests&quot;&#32;a&#32;disconnection&#32;from&#32;us</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02249"/>02249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.EnableCloseConnection&#32;==&#32;<emphasis role="keyword">false</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l02250"/>02250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02251"/>02251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogWarning(<emphasis role="stringliteral">&quot;CloseConnection&#32;received&#32;from&#32;&quot;</emphasis>&#32;+&#32;originatingPlayer&#32;+&#32;<emphasis role="stringliteral">&quot;.&#32;PhotonNetwork.EnableCloseConnection&#32;is&#32;false.&#32;Ignoring&#32;the&#32;request&#32;(this&#32;client&#32;stays&#32;in&#32;the&#32;room).&quot;</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l02252"/>02252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02253"/>02253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(originatingPlayer&#32;==&#32;<emphasis role="keyword">null</emphasis>&#32;||&#32;!originatingPlayer.IsMasterClient)
<anchor xml:id="__photon_network_part_8cs_source_1l02254"/>02254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02255"/>02255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogWarning(<emphasis role="stringliteral">&quot;CloseConnection&#32;received&#32;from&#32;&quot;</emphasis>&#32;+&#32;originatingPlayer&#32;+&#32;<emphasis role="stringliteral">&quot;.&#32;That&#32;player&#32;is&#32;not&#32;the&#32;Master&#32;Client.&#32;&quot;</emphasis>&#32;+&#32;PhotonNetwork.MasterClient&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;is.&quot;</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l02256"/>02256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02257"/>02257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.EnableCloseConnection)
<anchor xml:id="__photon_network_part_8cs_source_1l02258"/>02258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02259"/>02259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.LeaveRoom(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l02260"/>02260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02261"/>02261 
<anchor xml:id="__photon_network_part_8cs_source_1l02262"/>02262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02263"/>02263 
<anchor xml:id="__photon_network_part_8cs_source_1l02264"/>02264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PunEvent.DestroyPlayer:
<anchor xml:id="__photon_network_part_8cs_source_1l02265"/>02265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__player_controller_8cs_1afa613ef589c02dbd94acc273b62cdcfd">Hashtable</link>&#32;evData&#32;=&#32;(<link linkend="_namespace_photon_1_1_pun_1ac76b06ac6ca332ba5e95f9521501ed77">Hashtable</link>)photonEvent.CustomData;
<anchor xml:id="__photon_network_part_8cs_source_1l02266"/>02266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;targetPlayerId&#32;=&#32;(<emphasis role="keywordtype">int</emphasis>)evData[keyByteZero];
<anchor xml:id="__photon_network_part_8cs_source_1l02267"/>02267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(targetPlayerId&#32;&gt;=&#32;0)
<anchor xml:id="__photon_network_part_8cs_source_1l02268"/>02268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02269"/>02269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1aee9bc16543629db01f0879339c1fcc8e">DestroyPlayerObjects</link>(targetPlayerId,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l02270"/>02270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02271"/>02271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02272"/>02272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02273"/>02273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1ad2885fef5a61d3561a740f3abf3ab69a">DestroyAll</link>(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l02274"/>02274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02275"/>02275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02276"/>02276 
<anchor xml:id="__photon_network_part_8cs_source_1l02277"/>02277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;EventCode.Leave:
<anchor xml:id="__photon_network_part_8cs_source_1l02278"/>02278 
<anchor xml:id="__photon_network_part_8cs_source_1l02279"/>02279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;destroy&#32;objects&#32;&amp;&#32;buffered&#32;messages</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02280"/>02280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a5339e137c6b1461d090f658012ee62c7">CurrentRoom</link>&#32;!=&#32;<emphasis role="keyword">null</emphasis>&#32;&amp;&amp;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a5339e137c6b1461d090f658012ee62c7">CurrentRoom</link>.<link linkend="_class_photon_1_1_realtime_1_1_room_1a71478a698297b122b5f29098fe6399c5">AutoCleanUp</link>&#32;&amp;&amp;&#32;(originatingPlayer&#32;==&#32;<emphasis role="keyword">null</emphasis>&#32;||&#32;!originatingPlayer.IsInactive))
<anchor xml:id="__photon_network_part_8cs_source_1l02281"/>02281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02282"/>02282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1aee9bc16543629db01f0879339c1fcc8e">DestroyPlayerObjects</link>(actorNr,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l02283"/>02283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02284"/>02284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02285"/>02285 
<anchor xml:id="__photon_network_part_8cs_source_1l02286"/>02286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PunEvent.Destroy:
<anchor xml:id="__photon_network_part_8cs_source_1l02287"/>02287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;evData&#32;=&#32;(<link linkend="_namespace_photon_1_1_pun_1ac76b06ac6ca332ba5e95f9521501ed77">Hashtable</link>)photonEvent.CustomData;
<anchor xml:id="__photon_network_part_8cs_source_1l02288"/>02288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;instantiationId&#32;=&#32;(<emphasis role="keywordtype">int</emphasis>)evData[keyByteZero];
<anchor xml:id="__photon_network_part_8cs_source_1l02289"/>02289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Debug.Log(&quot;Ev&#32;Destroy&#32;for&#32;viewId:&#32;&quot;&#32;+&#32;instantiationId&#32;+&#32;&quot;&#32;sent&#32;by&#32;owner:&#32;&quot;&#32;+&#32;(instantiationId&#32;/&#32;PhotonNetwork.MAX_VIEW_IDS&#32;==&#32;actorNr)&#32;+&#32;&quot;&#32;this&#32;client&#32;is&#32;owner:&#32;&quot;&#32;+&#32;(instantiationId&#32;/&#32;PhotonNetwork.MAX_VIEW_IDS&#32;==&#32;this.LocalPlayer.ID));</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02290"/>02290 
<anchor xml:id="__photon_network_part_8cs_source_1l02291"/>02291 
<anchor xml:id="__photon_network_part_8cs_source_1l02292"/>02292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonView&#32;pvToDestroy&#32;=&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02293"/>02293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(photonViewList.TryGetValue(instantiationId,&#32;out&#32;pvToDestroy))
<anchor xml:id="__photon_network_part_8cs_source_1l02294"/>02294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02295"/>02295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RemoveInstantiatedGO(pvToDestroy.gameObject,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l02296"/>02296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02297"/>02297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02298"/>02298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02299"/>02299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogError(<emphasis role="stringliteral">&quot;Ev&#32;Destroy&#32;Failed.&#32;Could&#32;not&#32;find&#32;PhotonView&#32;with&#32;instantiationId&#32;&quot;</emphasis>&#32;+&#32;instantiationId&#32;+&#32;<emphasis role="stringliteral">&quot;.&#32;Sent&#32;by&#32;actorNr:&#32;&quot;</emphasis>&#32;+&#32;actorNr);
<anchor xml:id="__photon_network_part_8cs_source_1l02300"/>02300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02301"/>02301 
<anchor xml:id="__photon_network_part_8cs_source_1l02302"/>02302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02303"/>02303 
<anchor xml:id="__photon_network_part_8cs_source_1l02304"/>02304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PunEvent.OwnershipRequest:
<anchor xml:id="__photon_network_part_8cs_source_1l02305"/>02305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02306"/>02306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>[]&#32;requestValues&#32;=&#32;(<emphasis role="keywordtype">int</emphasis>[])photonEvent.CustomData;
<anchor xml:id="__photon_network_part_8cs_source_1l02307"/>02307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;requestedViewId&#32;=&#32;requestValues[0];
<anchor xml:id="__photon_network_part_8cs_source_1l02308"/>02308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;requestedFromOwnerId&#32;=&#32;requestValues[1];
<anchor xml:id="__photon_network_part_8cs_source_1l02309"/>02309 
<anchor xml:id="__photon_network_part_8cs_source_1l02310"/>02310 
<anchor xml:id="__photon_network_part_8cs_source_1l02311"/>02311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonView&#32;requestedView&#32;=&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a5a0dc3a5cdb4df9d0704a9bd67145cae">GetPhotonView</link>(requestedViewId);
<anchor xml:id="__photon_network_part_8cs_source_1l02312"/>02312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(requestedView&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l02313"/>02313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02314"/>02314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogWarning(<emphasis role="stringliteral">&quot;Can&apos;t&#32;find&#32;PhotonView&#32;of&#32;incoming&#32;OwnershipRequest.&#32;ViewId&#32;not&#32;found:&#32;&quot;</emphasis>&#32;+&#32;requestedViewId);
<anchor xml:id="__photon_network_part_8cs_source_1l02315"/>02315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02316"/>02316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02317"/>02317 
<anchor xml:id="__photon_network_part_8cs_source_1l02318"/>02318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.LogLevel&#32;==&#32;<link linkend="_group__public_api_1ga5a8128eaeb2f346d4cceb57d48caf9c1">PunLogLevel</link>.Informational)
<anchor xml:id="__photon_network_part_8cs_source_1l02319"/>02319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02320"/>02320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.Log(<emphasis role="keywordtype">string</emphasis>.Format(<emphasis role="stringliteral">&quot;OwnershipRequest.&#32;actorNr&#32;{0}&#32;requests&#32;view&#32;{1}&#32;from&#32;{2}.&#32;current&#32;pv&#32;owner:&#32;{3}&#32;is&#32;{4}.&#32;isMine:&#32;{6}&#32;master&#32;client:&#32;{5}&quot;</emphasis>,&#32;actorNr,&#32;requestedViewId,&#32;requestedFromOwnerId,&#32;requestedView.OwnerActorNr,&#32;requestedView.IsOwnerActive&#32;?&#32;<emphasis role="stringliteral">&quot;active&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;inactive&quot;</emphasis>,&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a7ab30903c626b476fb4500ba897da7d4">MasterClient</link>.<link linkend="_class_photon_1_1_realtime_1_1_player_1ab06642bd6b1e192ed22a48832cd1b28a">ActorNumber</link>,&#32;requestedView.IsMine));
<anchor xml:id="__photon_network_part_8cs_source_1l02321"/>02321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02322"/>02322 
<anchor xml:id="__photon_network_part_8cs_source_1l02323"/>02323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(requestedView.OwnershipTransfer)
<anchor xml:id="__photon_network_part_8cs_source_1l02324"/>02324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02325"/>02325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1a35f7e59ff14396520c50af04b1d6479e">OwnershipOption</link>.Takeover:
<anchor xml:id="__photon_network_part_8cs_source_1l02326"/>02326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;currentPvOwnerId&#32;=&#32;requestedView.OwnerActorNr;
<anchor xml:id="__photon_network_part_8cs_source_1l02327"/>02327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(requestedFromOwnerId&#32;==&#32;currentPvOwnerId&#32;||&#32;(requestedFromOwnerId&#32;==&#32;0&#32;&amp;&amp;&#32;currentPvOwnerId&#32;==&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a7ab30903c626b476fb4500ba897da7d4">MasterClient</link>.<link linkend="_class_photon_1_1_realtime_1_1_player_1ab06642bd6b1e192ed22a48832cd1b28a">ActorNumber</link>)&#32;||&#32;currentPvOwnerId&#32;==&#32;0)
<anchor xml:id="__photon_network_part_8cs_source_1l02328"/>02328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02329"/>02329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;a&#32;takeover&#32;is&#32;successful&#32;automatically,&#32;if&#32;taken&#32;from&#32;current&#32;owner</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02330"/>02330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceemotitron_1_1_utilities_1a0afe234d0cc0a84d0718464b0d871725a636da1d35e805b00eae0fcd8333f9234">Player</link>&#32;prevOwner&#32;=&#32;requestedView.Owner;
<anchor xml:id="__photon_network_part_8cs_source_1l02331"/>02331 
<anchor xml:id="__photon_network_part_8cs_source_1l02332"/>02332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;requestedView.OwnerActorNr&#32;=&#32;actorNr;
<anchor xml:id="__photon_network_part_8cs_source_1l02333"/>02333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;requestedView.ControllerActorNr&#32;=&#32;actorNr;
<anchor xml:id="__photon_network_part_8cs_source_1l02334"/>02334 
<anchor xml:id="__photon_network_part_8cs_source_1l02335"/>02335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.OnOwnershipTransferedEv&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l02336"/>02336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02337"/>02337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.OnOwnershipTransferedEv(requestedView,&#32;prevOwner);
<anchor xml:id="__photon_network_part_8cs_source_1l02338"/>02338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02339"/>02339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02340"/>02340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02341"/>02341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02342"/>02342 
<anchor xml:id="__photon_network_part_8cs_source_1l02343"/>02343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.OnOwnershipTransferFailedEv&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l02344"/>02344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02345"/>02345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.OnOwnershipTransferFailedEv(requestedView,&#32;originatingPlayer);
<anchor xml:id="__photon_network_part_8cs_source_1l02346"/>02346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02347"/>02347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Debug.LogWarning(&quot;requestedView.OwnershipTransfer&#32;was&#32;ignored!&#32;&quot;);</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02348"/>02348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02349"/>02349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02350"/>02350 
<anchor xml:id="__photon_network_part_8cs_source_1l02351"/>02351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1a35f7e59ff14396520c50af04b1d6479e">OwnershipOption</link>.Request:
<anchor xml:id="__photon_network_part_8cs_source_1l02352"/>02352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.OnOwnershipRequestEv&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l02353"/>02353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02354"/>02354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.OnOwnershipRequestEv(requestedView,&#32;originatingPlayer);
<anchor xml:id="__photon_network_part_8cs_source_1l02355"/>02355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02356"/>02356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02357"/>02357 
<anchor xml:id="__photon_network_part_8cs_source_1l02358"/>02358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
<anchor xml:id="__photon_network_part_8cs_source_1l02359"/>02359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogWarning(<emphasis role="stringliteral">&quot;Ownership&#32;mode&#32;==&#32;&quot;</emphasis>&#32;+&#32;(requestedView.OwnershipTransfer)&#32;+&#32;<emphasis role="stringliteral">&quot;.&#32;Ignoring&#32;request.&quot;</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l02360"/>02360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02361"/>02361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02362"/>02362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02363"/>02363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02364"/>02364 
<anchor xml:id="__photon_network_part_8cs_source_1l02365"/>02365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PunEvent.OwnershipTransfer:
<anchor xml:id="__photon_network_part_8cs_source_1l02366"/>02366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02367"/>02367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>[]&#32;transferViewToUserID&#32;=&#32;(<emphasis role="keywordtype">int</emphasis>[])photonEvent.CustomData;
<anchor xml:id="__photon_network_part_8cs_source_1l02368"/>02368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;requestedViewId&#32;=&#32;transferViewToUserID[0];
<anchor xml:id="__photon_network_part_8cs_source_1l02369"/>02369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;newOwnerId&#32;=&#32;transferViewToUserID[1];
<anchor xml:id="__photon_network_part_8cs_source_1l02370"/>02370 
<anchor xml:id="__photon_network_part_8cs_source_1l02371"/>02371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(PhotonNetwork.LogLevel&#32;&gt;=&#32;<link linkend="_group__public_api_1ga5a8128eaeb2f346d4cceb57d48caf9c1">PunLogLevel</link>.Informational)
<anchor xml:id="__photon_network_part_8cs_source_1l02372"/>02372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02373"/>02373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.Log(<emphasis role="stringliteral">&quot;Ev&#32;OwnershipTransfer.&#32;ViewID&#32;&quot;</emphasis>&#32;+&#32;requestedViewId&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;to:&#32;&quot;</emphasis>&#32;+&#32;newOwnerId&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;Time:&#32;&quot;</emphasis>&#32;+&#32;Environment.TickCount&#32;%&#32;1000);
<anchor xml:id="__photon_network_part_8cs_source_1l02374"/>02374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02375"/>02375 
<anchor xml:id="__photon_network_part_8cs_source_1l02376"/>02376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonView&#32;requestedView&#32;=&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a5a0dc3a5cdb4df9d0704a9bd67145cae">GetPhotonView</link>(requestedViewId);
<anchor xml:id="__photon_network_part_8cs_source_1l02377"/>02377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(requestedView&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l02378"/>02378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02379"/>02379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Only&#32;apply&#32;this&#32;if&#32;pv&#32;allows&#32;Takeover,&#32;or&#32;allows&#32;Request&#32;and&#32;this&#32;message&#32;originates&#32;from&#32;the&#32;controller&#32;or&#32;owner.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02380"/>02380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(requestedView.OwnershipTransfer&#32;==&#32;<link linkend="_namespace_photon_1_1_pun_1a35f7e59ff14396520c50af04b1d6479e">OwnershipOption</link>.Takeover&#32;||
<anchor xml:id="__photon_network_part_8cs_source_1l02381"/>02381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(requestedView.OwnershipTransfer&#32;==&#32;<link linkend="_namespace_photon_1_1_pun_1a35f7e59ff14396520c50af04b1d6479e">OwnershipOption</link>.Request&#32;&amp;&amp;&#32;(originatingPlayer&#32;==&#32;requestedView.Controller&#32;||&#32;originatingPlayer&#32;==&#32;requestedView.Owner)))
<anchor xml:id="__photon_network_part_8cs_source_1l02382"/>02382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02383"/>02383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceemotitron_1_1_utilities_1a0afe234d0cc0a84d0718464b0d871725a636da1d35e805b00eae0fcd8333f9234">Player</link>&#32;prevOwner&#32;=&#32;requestedView.Owner;
<anchor xml:id="__photon_network_part_8cs_source_1l02384"/>02384 
<anchor xml:id="__photon_network_part_8cs_source_1l02385"/>02385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;requestedView.OwnerActorNr=&#32;newOwnerId;
<anchor xml:id="__photon_network_part_8cs_source_1l02386"/>02386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;requestedView.ControllerActorNr&#32;=&#32;newOwnerId;
<anchor xml:id="__photon_network_part_8cs_source_1l02387"/>02387 
<anchor xml:id="__photon_network_part_8cs_source_1l02388"/>02388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.OnOwnershipTransferedEv&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l02389"/>02389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02390"/>02390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.OnOwnershipTransferedEv(requestedView,&#32;prevOwner);
<anchor xml:id="__photon_network_part_8cs_source_1l02391"/>02391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02392"/>02392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02393"/>02393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.LogLevel&#32;&gt;=&#32;<link linkend="_group__public_api_1ga5a8128eaeb2f346d4cceb57d48caf9c1">PunLogLevel</link>.Informational)
<anchor xml:id="__photon_network_part_8cs_source_1l02394"/>02394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02395"/>02395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(requestedView.OwnershipTransfer&#32;==&#32;<link linkend="_namespace_photon_1_1_pun_1a35f7e59ff14396520c50af04b1d6479e">OwnershipOption</link>.Request)
<anchor xml:id="__photon_network_part_8cs_source_1l02396"/>02396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.Log(<emphasis role="stringliteral">&quot;Failed&#32;incoming&#32;OwnershipTransfer&#32;attempt&#32;for&#32;&apos;&quot;</emphasis>&#32;+&#32;requestedView.name&#32;+&#32;<emphasis role="stringliteral">&quot;;&#32;&quot;</emphasis>&#32;+&#32;requestedViewId&#32;+
<anchor xml:id="__photon_network_part_8cs_source_1l02397"/>02397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;-&#32;photonView&#32;has&#32;OwnershipTransfer&#32;set&#32;to&#32;OwnershipOption.Request,&#32;but&#32;Player&#32;attempting&#32;to&#32;change&#32;owner&#32;is&#32;not&#32;the&#32;current&#32;owner/controller.&quot;</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l02398"/>02398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02399"/>02399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.Log(<emphasis role="stringliteral">&quot;Failed&#32;incoming&#32;OwnershipTransfer&#32;attempt&#32;for&#32;&apos;&quot;</emphasis>&#32;+&#32;requestedView.name&#32;+&#32;<emphasis role="stringliteral">&quot;;&#32;&quot;</emphasis>&#32;+&#32;requestedViewId&#32;+
<anchor xml:id="__photon_network_part_8cs_source_1l02400"/>02400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;-&#32;photonView&#32;has&#32;OwnershipTransfer&#32;set&#32;to&#32;OwnershipOption.Fixed.&quot;</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l02401"/>02401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02402"/>02402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02403"/>02403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.LogLevel&#32;&gt;=&#32;<link linkend="_group__public_api_1ga5a8128eaeb2f346d4cceb57d48caf9c1">PunLogLevel</link>.ErrorsOnly)
<anchor xml:id="__photon_network_part_8cs_source_1l02404"/>02404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02405"/>02405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogErrorFormat(<emphasis role="stringliteral">&quot;Failed&#32;to&#32;find&#32;a&#32;PhotonView&#32;with&#32;ID={0}&#32;for&#32;incoming&#32;OwnershipTransfer&#32;event&#32;(newOwnerActorNumber={1}),&#32;sender={2}&quot;</emphasis>,
<anchor xml:id="__photon_network_part_8cs_source_1l02406"/>02406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;requestedViewId,&#32;newOwnerId,&#32;actorNr);
<anchor xml:id="__photon_network_part_8cs_source_1l02407"/>02407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02408"/>02408 
<anchor xml:id="__photon_network_part_8cs_source_1l02409"/>02409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02410"/>02410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02411"/>02411 
<anchor xml:id="__photon_network_part_8cs_source_1l02412"/>02412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;PunEvent.OwnershipUpdate:
<anchor xml:id="__photon_network_part_8cs_source_1l02413"/>02413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02414"/>02414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reusablePVHashset.Clear();
<anchor xml:id="__photon_network_part_8cs_source_1l02415"/>02415 
<anchor xml:id="__photon_network_part_8cs_source_1l02416"/>02416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Deserialize&#32;the&#32;list&#32;of&#32;exceptions,&#32;these&#32;are&#32;views&#32;on&#32;the&#32;master&#32;who&apos;s&#32;Owner&#32;and&#32;Creator&#32;didn&apos;t&#32;match.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02417"/>02417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>[]&#32;viewOwnerPair&#32;=&#32;(<emphasis role="keywordtype">int</emphasis>[])photonEvent.CustomData;
<anchor xml:id="__photon_network_part_8cs_source_1l02418"/>02418 
<anchor xml:id="__photon_network_part_8cs_source_1l02419"/>02419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0,&#32;cnt&#32;=&#32;viewOwnerPair.Length;&#32;i&#32;&lt;&#32;cnt;&#32;i++)
<anchor xml:id="__photon_network_part_8cs_source_1l02420"/>02420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02421"/>02421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;viewId&#32;=&#32;viewOwnerPair[i];
<anchor xml:id="__photon_network_part_8cs_source_1l02422"/>02422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;
<anchor xml:id="__photon_network_part_8cs_source_1l02423"/>02423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;newOwnerId&#32;=&#32;viewOwnerPair[i];
<anchor xml:id="__photon_network_part_8cs_source_1l02424"/>02424 
<anchor xml:id="__photon_network_part_8cs_source_1l02425"/>02425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonView&#32;view&#32;=&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a5a0dc3a5cdb4df9d0704a9bd67145cae">GetPhotonView</link>(viewId);
<anchor xml:id="__photon_network_part_8cs_source_1l02426"/>02426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(view&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l02427"/>02427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02428"/>02428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.LogLevel&#32;&gt;=&#32;<link linkend="_group__public_api_1ga5a8128eaeb2f346d4cceb57d48caf9c1">PunLogLevel</link>.ErrorsOnly)
<anchor xml:id="__photon_network_part_8cs_source_1l02429"/>02429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02430"/>02430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogErrorFormat(<emphasis role="stringliteral">&quot;Failed&#32;to&#32;find&#32;a&#32;PhotonView&#32;with&#32;ID={0}&#32;for&#32;incoming&#32;OwnershipUpdate&#32;event&#32;(newOwnerActorNumber={1}),&#32;sender={2}.&#32;If&#32;you&#32;load&#32;scenes,&#32;make&#32;sure&#32;to&#32;pause&#32;the&#32;message&#32;queue.&quot;</emphasis>,&#32;viewId,&#32;newOwnerId,&#32;actorNr);
<anchor xml:id="__photon_network_part_8cs_source_1l02431"/>02431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02432"/>02432 
<anchor xml:id="__photon_network_part_8cs_source_1l02433"/>02433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02434"/>02434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02435"/>02435 
<anchor xml:id="__photon_network_part_8cs_source_1l02436"/>02436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceemotitron_1_1_utilities_1a0afe234d0cc0a84d0718464b0d871725a636da1d35e805b00eae0fcd8333f9234">Player</link>&#32;prevOwner&#32;=&#32;view.Owner;
<anchor xml:id="__photon_network_part_8cs_source_1l02437"/>02437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceemotitron_1_1_utilities_1a0afe234d0cc0a84d0718464b0d871725a636da1d35e805b00eae0fcd8333f9234">Player</link>&#32;newOwner&#32;=&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a5339e137c6b1461d090f658012ee62c7">CurrentRoom</link>.<link linkend="_class_photon_1_1_realtime_1_1_room_1a267b83eaa30e0f7486830dd25e07479c">GetPlayer</link>(newOwnerId,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l02438"/>02438 
<anchor xml:id="__photon_network_part_8cs_source_1l02439"/>02439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;view.OwnerActorNr=&#32;newOwnerId;
<anchor xml:id="__photon_network_part_8cs_source_1l02440"/>02440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;view.ControllerActorNr&#32;=&#32;newOwnerId;
<anchor xml:id="__photon_network_part_8cs_source_1l02441"/>02441 
<anchor xml:id="__photon_network_part_8cs_source_1l02442"/>02442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reusablePVHashset.Add(view);
<anchor xml:id="__photon_network_part_8cs_source_1l02443"/>02443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;this&#32;produces&#32;an&#32;owner&#32;change&#32;locally,&#32;fire&#32;the&#32;OnOwnershipTransfered&#32;callbacks</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02444"/>02444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.OnOwnershipTransferedEv&#32;!=&#32;<emphasis role="keyword">null</emphasis>&#32;&amp;&amp;&#32;newOwner&#32;!=&#32;prevOwner)
<anchor xml:id="__photon_network_part_8cs_source_1l02445"/>02445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02446"/>02446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.OnOwnershipTransferedEv(view,&#32;prevOwner);
<anchor xml:id="__photon_network_part_8cs_source_1l02447"/>02447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02448"/>02448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02449"/>02449 
<anchor xml:id="__photon_network_part_8cs_source_1l02450"/>02450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Initialize&#32;all&#32;views.&#32;Typically&#32;this&#32;is&#32;just&#32;fired&#32;on&#32;a&#32;new&#32;client&#32;after&#32;it&#32;joins&#32;a&#32;room&#32;and&#32;gets&#32;the&#32;first&#32;OwnershipUpdate&#32;from&#32;the&#32;Master.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02451"/>02451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;was&#32;moved&#32;from&#32;PhotonHandler&#32;OnJoinedRoom&#32;to&#32;here,&#32;to&#32;allow&#32;objects&#32;to&#32;retain&#32;controller&#32;=&#32;-1&#32;until&#32;an&#32;controller&#32;is&#32;actually&#32;known.</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02452"/>02452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(var&#32;view&#32;<emphasis role="keywordflow">in</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1ad1d644efe090df91db9623e4b5293c7d">PhotonViewCollection</link>)
<anchor xml:id="__photon_network_part_8cs_source_1l02453"/>02453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02454"/>02454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!reusablePVHashset.Contains(view))
<anchor xml:id="__photon_network_part_8cs_source_1l02455"/>02455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;view.RebuildControllerCache();
<anchor xml:id="__photon_network_part_8cs_source_1l02456"/>02456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02457"/>02457 
<anchor xml:id="__photon_network_part_8cs_source_1l02458"/>02458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02459"/>02459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02460"/>02460 
<anchor xml:id="__photon_network_part_8cs_source_1l02461"/>02461 
<anchor xml:id="__photon_network_part_8cs_source_1l02462"/>02462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02463"/>02463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02464"/>02464 
<anchor xml:id="__photon_network_part_8cs_source_1l02465"/>02465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnOperation(OperationResponse&#32;opResponse)
<anchor xml:id="__photon_network_part_8cs_source_1l02466"/>02466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02467"/>02467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(opResponse.OperationCode)
<anchor xml:id="__photon_network_part_8cs_source_1l02468"/>02468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02469"/>02469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;OperationCode.GetRegions:
<anchor xml:id="__photon_network_part_8cs_source_1l02470"/>02470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(opResponse.ReturnCode&#32;!=&#32;0)
<anchor xml:id="__photon_network_part_8cs_source_1l02471"/>02471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02472"/>02472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.LogLevel&#32;&gt;=&#32;<link linkend="_group__public_api_1ga5a8128eaeb2f346d4cceb57d48caf9c1">PunLogLevel</link>.Full)
<anchor xml:id="__photon_network_part_8cs_source_1l02473"/>02473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02474"/>02474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.Log(<emphasis role="stringliteral">&quot;OpGetRegions&#32;failed.&#32;Will&#32;not&#32;ping&#32;any.&#32;ReturnCode:&#32;&quot;</emphasis>&#32;+&#32;opResponse.ReturnCode);
<anchor xml:id="__photon_network_part_8cs_source_1l02475"/>02475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02476"/>02476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02477"/>02477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02478"/>02478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a3599fcd464562cb936006da206361cdd">ConnectMethod</link>&#32;==&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a3599fcd464562cb936006da206361cdd">ConnectMethod</link>.ConnectToBest)
<anchor xml:id="__photon_network_part_8cs_source_1l02479"/>02479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02480"/>02480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;previousBestRegionSummary&#32;=&#32;PhotonNetwork.BestRegionSummaryInPreferences;
<anchor xml:id="__photon_network_part_8cs_source_1l02481"/>02481 
<anchor xml:id="__photon_network_part_8cs_source_1l02482"/>02482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.LogLevel&#32;&gt;=&#32;<link linkend="_group__public_api_1ga5a8128eaeb2f346d4cceb57d48caf9c1">PunLogLevel</link>.Informational)
<anchor xml:id="__photon_network_part_8cs_source_1l02483"/>02483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02484"/>02484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.Log(<emphasis role="stringliteral">&quot;PUN&#32;got&#32;region&#32;list.&#32;Going&#32;to&#32;ping&#32;minimum&#32;regions,&#32;based&#32;on&#32;this&#32;previous&#32;result&#32;summary:&#32;&quot;</emphasis>&#32;+&#32;previousBestRegionSummary);
<anchor xml:id="__photon_network_part_8cs_source_1l02485"/>02485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02486"/>02486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a312fc99165f039e31b65bebbafdf6736">NetworkingClient</link>.<link linkend="_class_photon_1_1_realtime_1_1_load_balancing_client_1ad685355e0650ee313f72edb9e6751cf3">RegionHandler</link>.<link linkend="_class_photon_1_1_realtime_1_1_region_handler_1a667ee30920336dcb56113bdab8795887">PingMinimumOfRegions</link>(OnRegionsPinged,&#32;previousBestRegionSummary);
<anchor xml:id="__photon_network_part_8cs_source_1l02487"/>02487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02488"/>02488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02489"/>02489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;OperationCode.JoinGame:
<anchor xml:id="__photon_network_part_8cs_source_1l02490"/>02490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_pun_1_1_photon_network_1abbb2b33d7b82a1822a080ac51945db0b">Server</link>&#32;==&#32;<link linkend="_namespace_photon_1_1_realtime_1a354e0e08dc26547ca0735fbcc3825356">ServerConnection</link>.GameServer)
<anchor xml:id="__photon_network_part_8cs_source_1l02491"/>02491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02492"/>02492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.LoadLevelIfSynced();
<anchor xml:id="__photon_network_part_8cs_source_1l02493"/>02493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02494"/>02494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02495"/>02495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02496"/>02496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02497"/>02497 
<anchor xml:id="__photon_network_part_8cs_source_1l02498"/>02498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnClientStateChanged(<link linkend="_group__public_api_1ga5500bb7cf5b4d5493f545a2fcb02ae16">ClientState</link>&#32;previousState,&#32;<link linkend="_group__public_api_1ga5500bb7cf5b4d5493f545a2fcb02ae16">ClientState</link>&#32;state)
<anchor xml:id="__photon_network_part_8cs_source_1l02499"/>02499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02500"/>02500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(
<anchor xml:id="__photon_network_part_8cs_source_1l02501"/>02501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(previousState&#32;==&#32;<link linkend="_group__public_api_1ga5500bb7cf5b4d5493f545a2fcb02ae16">ClientState</link>.Joined&#32;&amp;&amp;&#32;state&#32;==&#32;<link linkend="_group__public_api_1ga5500bb7cf5b4d5493f545a2fcb02ae16">ClientState</link>.Disconnected)&#32;||
<anchor xml:id="__photon_network_part_8cs_source_1l02502"/>02502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<link linkend="_class_photon_1_1_pun_1_1_photon_network_1abbb2b33d7b82a1822a080ac51945db0b">Server</link>&#32;==&#32;<link linkend="_namespace_photon_1_1_realtime_1a354e0e08dc26547ca0735fbcc3825356">ServerConnection</link>.GameServer&#32;&amp;&amp;&#32;(state&#32;==&#32;<link linkend="_group__public_api_1ga5500bb7cf5b4d5493f545a2fcb02ae16">ClientState</link>.Disconnecting&#32;||&#32;state&#32;==&#32;<link linkend="_group__public_api_1ga5500bb7cf5b4d5493f545a2fcb02ae16">ClientState</link>.DisconnectingFromGameServer))
<anchor xml:id="__photon_network_part_8cs_source_1l02503"/>02503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)
<anchor xml:id="__photon_network_part_8cs_source_1l02504"/>02504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02505"/>02505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LeftRoomCleanup();
<anchor xml:id="__photon_network_part_8cs_source_1l02506"/>02506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02507"/>02507 
<anchor xml:id="__photon_network_part_8cs_source_1l02508"/>02508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(state&#32;==&#32;<link linkend="_group__public_api_1ga5500bb7cf5b4d5493f545a2fcb02ae16">ClientState</link>.ConnectedToMasterServer&#32;&amp;&amp;&#32;_cachedRegionHandler&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__photon_network_part_8cs_source_1l02509"/>02509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02510"/>02510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a00c321ca2b6e39ab5288f3f40215fb00">BestRegionSummaryInPreferences</link>&#32;=&#32;_cachedRegionHandler.<link linkend="_class_photon_1_1_realtime_1_1_region_handler_1abae9234263a708650942388cb3c24ea5">SummaryToCache</link>;
<anchor xml:id="__photon_network_part_8cs_source_1l02511"/>02511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_cachedRegionHandler&#32;=&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02512"/>02512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02513"/>02513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02514"/>02514 
<anchor xml:id="__photon_network_part_8cs_source_1l02515"/>02515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;be&#32;used&#32;in&#32;the&#32;main&#32;thread.&#32;as&#32;OnRegionsPinged&#32;is&#32;called&#32;in&#32;a&#32;separate&#32;thread&#32;and&#32;so&#32;we&#32;can&apos;t&#32;use&#32;some&#32;of&#32;the&#32;Unity&#32;methods&#32;(like&#32;saving&#32;playerPrefs)</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02516"/>02516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;RegionHandler&#32;_cachedRegionHandler;
<anchor xml:id="__photon_network_part_8cs_source_1l02517"/>02517 
<anchor xml:id="__photon_network_part_8cs_source_1l02518"/>02518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnRegionsPinged(RegionHandler&#32;regionHandler)
<anchor xml:id="__photon_network_part_8cs_source_1l02519"/>02519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02520"/>02520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.LogLevel&#32;&gt;=&#32;<link linkend="_group__public_api_1ga5a8128eaeb2f346d4cceb57d48caf9c1">PunLogLevel</link>.Informational)
<anchor xml:id="__photon_network_part_8cs_source_1l02521"/>02521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02522"/>02522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.Log(regionHandler.GetResults());
<anchor xml:id="__photon_network_part_8cs_source_1l02523"/>02523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02524"/>02524 
<anchor xml:id="__photon_network_part_8cs_source_1l02525"/>02525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_cachedRegionHandler&#32;=&#32;regionHandler;
<anchor xml:id="__photon_network_part_8cs_source_1l02526"/>02526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//PhotonNetwork.BestRegionSummaryInPreferences&#32;=&#32;regionHandler.SummaryToCache;&#32;//&#32;can&#32;not&#32;be&#32;called&#32;here,&#32;as&#32;it&apos;s&#32;not&#32;in&#32;the&#32;main&#32;thread</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02527"/>02527 
<anchor xml:id="__photon_network_part_8cs_source_1l02528"/>02528 
<anchor xml:id="__photon_network_part_8cs_source_1l02529"/>02529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;dev&#32;region&#32;overrides&#32;the&#32;best&#32;region&#32;selection&#32;in&#32;&quot;development&quot;&#32;builds&#32;(unless&#32;it&#32;was&#32;set&#32;but&#32;is&#32;empty).</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02530"/>02530 
<anchor xml:id="__photon_network_part_8cs_source_1l02531"/>02531 <emphasis role="preprocessor">#if&#32;UNITY_EDITOR</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02532"/>02532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a44320ea58c806435375af9fedaafc56d">PhotonServerSettings</link>.DevRegionSetOnce)
<anchor xml:id="__photon_network_part_8cs_source_1l02533"/>02533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02534"/>02534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;no&#32;dev&#32;region&#32;was&#32;defined&#32;before&#32;or&#32;if&#32;the&#32;dev&#32;region&#32;is&#32;unavailable,&#32;set&#32;a&#32;new&#32;dev&#32;region</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02535"/>02535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a44320ea58c806435375af9fedaafc56d">PhotonServerSettings</link>.DevRegionSetOnce&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02536"/>02536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a44320ea58c806435375af9fedaafc56d">PhotonServerSettings</link>.<link linkend="_class_photon_1_1_pun_1_1_server_settings_1afecd5c89b13b34747c61f80f6ba578f3">DevRegion</link>&#32;=&#32;_cachedRegionHandler.BestRegion.Code;
<anchor xml:id="__photon_network_part_8cs_source_1l02537"/>02537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02538"/>02538 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02539"/>02539 
<anchor xml:id="__photon_network_part_8cs_source_1l02540"/>02540 <emphasis role="preprocessor">#if&#32;DEVELOPMENT_BUILD&#32;||&#32;UNITY_EDITOR</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02541"/>02541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<emphasis role="keywordtype">string</emphasis>.IsNullOrEmpty(<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a44320ea58c806435375af9fedaafc56d">PhotonServerSettings</link>.<link linkend="_class_photon_1_1_pun_1_1_server_settings_1afecd5c89b13b34747c61f80f6ba578f3">DevRegion</link>)&#32;&amp;&amp;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a3599fcd464562cb936006da206361cdd">ConnectMethod</link>&#32;==&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a3599fcd464562cb936006da206361cdd">ConnectMethod</link>.ConnectToBest)
<anchor xml:id="__photon_network_part_8cs_source_1l02542"/>02542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02543"/>02543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogWarning(<emphasis role="stringliteral">&quot;PUN&#32;is&#32;in&#32;development&#32;mode&#32;(development&#32;build).&#32;As&#32;the&#32;&apos;dev&#32;region&apos;&#32;is&#32;not&#32;empty&#32;(&quot;</emphasis>&#32;+&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a44320ea58c806435375af9fedaafc56d">PhotonServerSettings</link>.<link linkend="_class_photon_1_1_pun_1_1_server_settings_1afecd5c89b13b34747c61f80f6ba578f3">DevRegion</link>&#32;+&#32;<emphasis role="stringliteral">&quot;)&#32;it&#32;overrides&#32;the&#32;found&#32;best&#32;region.&#32;See&#32;PhotonServerSettings.&quot;</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l02544"/>02544 
<anchor xml:id="__photon_network_part_8cs_source_1l02545"/>02545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;_finalDevRegion&#32;=&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a44320ea58c806435375af9fedaafc56d">PhotonServerSettings</link>.<link linkend="_class_photon_1_1_pun_1_1_server_settings_1afecd5c89b13b34747c61f80f6ba578f3">DevRegion</link>;
<anchor xml:id="__photon_network_part_8cs_source_1l02546"/>02546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_cachedRegionHandler.EnabledRegions.Any(p&#32;=&gt;&#32;p.Code&#32;==&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a44320ea58c806435375af9fedaafc56d">PhotonServerSettings</link>.<link linkend="_class_photon_1_1_pun_1_1_server_settings_1afecd5c89b13b34747c61f80f6ba578f3">DevRegion</link>))
<anchor xml:id="__photon_network_part_8cs_source_1l02547"/>02547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02548"/>02548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_finalDevRegion&#32;=&#32;_cachedRegionHandler.EnabledRegions[0].Code;
<anchor xml:id="__photon_network_part_8cs_source_1l02549"/>02549 
<anchor xml:id="__photon_network_part_8cs_source_1l02550"/>02550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogWarning(<emphasis role="stringliteral">&quot;The&#32;&apos;dev&#32;region&apos;&#32;(&quot;</emphasis>&#32;+&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a44320ea58c806435375af9fedaafc56d">PhotonServerSettings</link>.<link linkend="_class_photon_1_1_pun_1_1_server_settings_1afecd5c89b13b34747c61f80f6ba578f3">DevRegion</link>&#32;+&#32;<emphasis role="stringliteral">&quot;)&#32;was&#32;not&#32;found&#32;in&#32;the&#32;enabled&#32;regions,&#32;the&#32;first&#32;enabled&#32;region&#32;is&#32;picked&#32;(&quot;</emphasis>&#32;+&#32;_finalDevRegion&#32;+&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>);
<anchor xml:id="__photon_network_part_8cs_source_1l02551"/>02551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02552"/>02552 
<anchor xml:id="__photon_network_part_8cs_source_1l02553"/>02553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.NetworkingClient.ConnectToRegionMaster(_finalDevRegion);
<anchor xml:id="__photon_network_part_8cs_source_1l02554"/>02554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__photon_network_part_8cs_source_1l02555"/>02555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02556"/>02556 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__photon_network_part_8cs_source_1l02557"/>02557 
<anchor xml:id="__photon_network_part_8cs_source_1l02558"/>02558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a6ced17c19314be4dbd68c83d99a6df9e">NetworkClientState</link>&#32;==&#32;<link linkend="_group__public_api_1ga5500bb7cf5b4d5493f545a2fcb02ae16">ClientState</link>.ConnectedToNameServer)
<anchor xml:id="__photon_network_part_8cs_source_1l02559"/>02559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__photon_network_part_8cs_source_1l02560"/>02560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.NetworkingClient.ConnectToRegionMaster(regionHandler.BestRegion.Code);
<anchor xml:id="__photon_network_part_8cs_source_1l02561"/>02561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02562"/>02562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02563"/>02563 &#32;&#32;&#32;&#32;}
<anchor xml:id="__photon_network_part_8cs_source_1l02564"/>02564 }
</programlisting></section>
