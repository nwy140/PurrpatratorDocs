<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__primitive_pack_bits_ext_8cs_source" xml:lang="en-US">
<title>PrimitivePackBitsExt.cs</title>
<indexterm><primary>C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/PrimitivePackBitsExt.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00001"/>00001 <emphasis role="comment">/*</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00002"/>00002 <emphasis role="comment">*&#32;The&#32;MIT&#32;License&#32;(MIT)</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00003"/>00003 <emphasis role="comment">*&#32;</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00004"/>00004 <emphasis role="comment">*&#32;Copyright&#32;(c)&#32;2018-2019&#32;Davin&#32;Carten&#32;(emotitron)&#32;(davincarten@gmail.com)</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00005"/>00005 <emphasis role="comment">*&#32;</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00006"/>00006 <emphasis role="comment">*&#32;Permission&#32;is&#32;hereby&#32;granted,&#32;free&#32;of&#32;charge,&#32;to&#32;any&#32;person&#32;obtaining&#32;a&#32;copy</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00007"/>00007 <emphasis role="comment">*&#32;of&#32;this&#32;software&#32;and&#32;associated&#32;documentation&#32;files&#32;(the&#32;&quot;Software&quot;),&#32;to&#32;deal</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00008"/>00008 <emphasis role="comment">*&#32;in&#32;the&#32;Software&#32;without&#32;restriction,&#32;including&#32;without&#32;limitation&#32;the&#32;rights</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00009"/>00009 <emphasis role="comment">*&#32;to&#32;use,&#32;copy,&#32;modify,&#32;merge,&#32;publish,&#32;distribute,&#32;sublicense,&#32;and/or&#32;sell</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00010"/>00010 <emphasis role="comment">*&#32;copies&#32;of&#32;the&#32;Software,&#32;and&#32;to&#32;permit&#32;persons&#32;to&#32;whom&#32;the&#32;Software&#32;is</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00011"/>00011 <emphasis role="comment">*&#32;furnished&#32;to&#32;do&#32;so,&#32;subject&#32;to&#32;the&#32;following&#32;conditions:</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00012"/>00012 <emphasis role="comment">*&#32;</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00013"/>00013 <emphasis role="comment">*&#32;The&#32;above&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;shall&#32;be&#32;included&#32;in</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00014"/>00014 <emphasis role="comment">*&#32;all&#32;copies&#32;or&#32;substantial&#32;portions&#32;of&#32;the&#32;Software.</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00015"/>00015 <emphasis role="comment">*&#32;</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00016"/>00016 <emphasis role="comment">*&#32;THE&#32;SOFTWARE&#32;IS&#32;PROVIDED&#32;&quot;AS&#32;IS&quot;,&#32;WITHOUT&#32;WARRANTY&#32;OF&#32;ANY&#32;KIND,&#32;EXPRESS&#32;OR</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00017"/>00017 <emphasis role="comment">*&#32;IMPLIED,&#32;INCLUDING&#32;BUT&#32;NOT&#32;LIMITED&#32;TO&#32;THE&#32;WARRANTIES&#32;OF&#32;MERCHANTABILITY,</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00018"/>00018 <emphasis role="comment">*&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE&#32;AND&#32;NONINFRINGEMENT.&#32;IN&#32;NO&#32;EVENT&#32;SHALL&#32;THE</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00019"/>00019 <emphasis role="comment">*&#32;AUTHORS&#32;OR&#32;COPYRIGHT&#32;HOLDERS&#32;BE&#32;LIABLE&#32;FOR&#32;ANY&#32;CLAIM,&#32;DAMAGES&#32;OR&#32;OTHER</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00020"/>00020 <emphasis role="comment">*&#32;LIABILITY,&#32;WHETHER&#32;IN&#32;AN&#32;ACTION&#32;OF&#32;CONTRACT,&#32;TORT&#32;OR&#32;OTHERWISE,&#32;ARISING&#32;FROM,</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00021"/>00021 <emphasis role="comment">*&#32;OUT&#32;OF&#32;OR&#32;IN&#32;CONNECTION&#32;WITH&#32;THE&#32;SOFTWARE&#32;OR&#32;THE&#32;USE&#32;OR&#32;OTHER&#32;DEALINGS&#32;IN</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00022"/>00022 <emphasis role="comment">*&#32;THE&#32;SOFTWARE.</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00023"/>00023 <emphasis role="comment">*/</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00024"/>00024 
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00025"/>00025 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_photon_1_1_compression">Photon.Compression</link>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00026"/>00026 {
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00030"/><link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bits_ext">00030</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bits_ext">PrimitivePackBitsExt</link>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00031"/>00031 &#32;&#32;&#32;&#32;{
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00032"/>00032 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Primary&#32;Inject/Write&#32;Packed</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00033"/>00033 
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00037"/><link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bits_ext_1a9b2538895f7a255c26e5ab9901d9cc76">00037</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;ulong&#32;<link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bits_ext_1a9b2538895f7a255c26e5ab9901d9cc76">WritePackedBits</link>(<emphasis role="keyword">this</emphasis>&#32;ulong&#32;buffer,&#32;uint&#32;value,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;countbits&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_bit_counter">BitCounter</link>.<link linkend="_class_photon_1_1_compression_1_1_bit_counter_1aeaa849e5cf156b94518b9776517b2c55">UsedBitCount</link>((uint)bits);
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cnt&#32;=&#32;value.UsedBitCount();
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00041"/>00041 
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;=&#32;buffer.Write((uint)(cnt),&#32;ref&#32;bitposition,&#32;(<emphasis role="keywordtype">int</emphasis>)countbits);
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;=&#32;buffer.Write(value,&#32;ref&#32;bitposition,&#32;cnt);
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00044"/>00044 
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//UnityEngine.Debug.Log(value&#32;+&#32;&quot;&#32;=&#32;ones&#32;:&#32;&quot;&#32;+&#32;cnt&#32;+&#32;&quot;&#32;/&#32;&quot;&#32;+&#32;(int)countbits&#32;+&#32;&quot;&#32;&#32;total&#32;bits:&#32;&quot;&#32;+&#32;((int)countbits&#32;+&#32;cnt));</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;buffer;
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00051"/><link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bits_ext_1a3731a162f14999e029c78cd2e73ad2cb">00051</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;uint&#32;<link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bits_ext_1a3731a162f14999e029c78cd2e73ad2cb">WritePackedBits</link>(<emphasis role="keyword">this</emphasis>&#32;uint&#32;buffer,&#32;ushort&#32;value,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;countbits&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_bit_counter">BitCounter</link>.<link linkend="_class_photon_1_1_compression_1_1_bit_counter_1aeaa849e5cf156b94518b9776517b2c55">UsedBitCount</link>((uint)bits);
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cnt&#32;=&#32;value.UsedBitCount();
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00055"/>00055 
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;=&#32;buffer.Write((uint)(cnt),&#32;ref&#32;bitposition,&#32;(<emphasis role="keywordtype">int</emphasis>)countbits);
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;=&#32;buffer.Write(value,&#32;ref&#32;bitposition,&#32;cnt);
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00058"/>00058 
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//UnityEngine.Debug.Log(value&#32;+&#32;&quot;&#32;=&#32;ones&#32;:&#32;&quot;&#32;+&#32;cnt&#32;+&#32;&quot;&#32;/&#32;&quot;&#32;+&#32;(int)countbits&#32;+&#32;&quot;&#32;&#32;total&#32;bits:&#32;&quot;&#32;+&#32;((int)countbits&#32;+&#32;cnt));</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;buffer;
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00065"/><link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bits_ext_1a0592f71e2a5dca86c1d649593d1f35e8">00065</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;ushort&#32;<link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bits_ext_1a0592f71e2a5dca86c1d649593d1f35e8">WritePackedBits</link>(<emphasis role="keyword">this</emphasis>&#32;ushort&#32;buffer,&#32;<emphasis role="keywordtype">byte</emphasis>&#32;value,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;countbits&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_bit_counter">BitCounter</link>.<link linkend="_class_photon_1_1_compression_1_1_bit_counter_1aeaa849e5cf156b94518b9776517b2c55">UsedBitCount</link>((uint)bits);
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cnt&#32;=&#32;value.UsedBitCount();
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00069"/>00069 
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;=&#32;buffer.Write((uint)(cnt),&#32;ref&#32;bitposition,&#32;(<emphasis role="keywordtype">int</emphasis>)countbits);
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;=&#32;buffer.Write(value,&#32;ref&#32;bitposition,&#32;cnt);
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00072"/>00072 
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//UnityEngine.Debug.Log(value&#32;+&#32;&quot;&#32;=&#32;ones&#32;:&#32;&quot;&#32;+&#32;cnt&#32;+&#32;&quot;&#32;/&#32;&quot;&#32;+&#32;(int)countbits&#32;+&#32;&quot;&#32;&#32;total&#32;bits:&#32;&quot;&#32;+&#32;((int)countbits&#32;+&#32;cnt));</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;buffer;
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00076"/>00076 
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00077"/>00077 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00079"/>00079 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Primary&#32;Read&#32;Packed</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00080"/>00080 
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00084"/><link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bits_ext_1af35b15f249d4d9384e14974abcbd538d">00084</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;ulong&#32;<link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bits_ext_1af35b15f249d4d9384e14974abcbd538d">ReadPackedBits</link>(<emphasis role="keyword">this</emphasis>&#32;ulong&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;packsize&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_bit_counter">BitCounter</link>.<link linkend="_class_photon_1_1_compression_1_1_bit_counter_1aeaa849e5cf156b94518b9776517b2c55">UsedBitCount</link>(bits);
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cnt&#32;=&#32;(int)buffer.Read(ref&#32;bitposition,&#32;(<emphasis role="keywordtype">int</emphasis>)packsize);
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;buffer.Read(ref&#32;bitposition,&#32;cnt);
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00093"/><link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bits_ext_1a7db86e2a01decbdf7ea5fe387c9884f1">00093</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;ulong&#32;<link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bits_ext_1a7db86e2a01decbdf7ea5fe387c9884f1">ReadPackedBits</link>(<emphasis role="keyword">this</emphasis>&#32;uint&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;packsize&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_bit_counter">BitCounter</link>.<link linkend="_class_photon_1_1_compression_1_1_bit_counter_1aeaa849e5cf156b94518b9776517b2c55">UsedBitCount</link>(bits);
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cnt&#32;=&#32;(int)buffer.Read(ref&#32;bitposition,&#32;(<emphasis role="keywordtype">int</emphasis>)packsize);
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;buffer.Read(ref&#32;bitposition,&#32;cnt);
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00102"/><link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bits_ext_1a5b939833651f482e7dab82fe8351bc89">00102</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;ulong&#32;<link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bits_ext_1a5b939833651f482e7dab82fe8351bc89">ReadPackedBits</link>(<emphasis role="keyword">this</emphasis>&#32;ushort&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;packsize&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_bit_counter">BitCounter</link>.<link linkend="_class_photon_1_1_compression_1_1_bit_counter_1aeaa849e5cf156b94518b9776517b2c55">UsedBitCount</link>(bits);
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cnt&#32;=&#32;(int)buffer.Read(ref&#32;bitposition,&#32;(<emphasis role="keywordtype">int</emphasis>)packsize);
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;buffer.Read(ref&#32;bitposition,&#32;cnt);
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00108"/>00108 
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00109"/>00109 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00110"/>00110 
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00111"/>00111 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Packed&#32;Signed</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00112"/>00112 
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Primary&#32;Writers</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00118"/><link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bits_ext_1ae36dad316562f8e3812a611b8fbd4543">00118</link> <emphasis role="comment"></emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;ulong&#32;<link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bits_ext_1ae36dad316562f8e3812a611b8fbd4543">WriteSignedPackedBits</link>(<emphasis role="keyword">this</emphasis>&#32;ulong&#32;buffer,&#32;<emphasis role="keywordtype">int</emphasis>&#32;value,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;zigzag&#32;=&#32;(uint)((value&#32;&lt;&lt;&#32;1)&#32;^&#32;(value&#32;&gt;&gt;&#32;31));
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;=&#32;buffer.WritePackedBits(zigzag,&#32;ref&#32;bitposition,&#32;bits);
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;buffer;
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00128"/><link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bits_ext_1aad4eac4accea5448274259f8017b145b">00128</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;uint&#32;<link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bits_ext_1aad4eac4accea5448274259f8017b145b">WriteSignedPackedBits</link>(<emphasis role="keyword">this</emphasis>&#32;uint&#32;buffer,&#32;<emphasis role="keywordtype">short</emphasis>&#32;value,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;zigzag&#32;=&#32;(uint)((value&#32;&lt;&lt;&#32;1)&#32;^&#32;(value&#32;&gt;&gt;&#32;31));
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;=&#32;buffer.WritePackedBits((ushort)zigzag,&#32;ref&#32;bitposition,&#32;bits);
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;buffer;
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00138"/><link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bits_ext_1ab72436d6b2aed3cdcaf3c0f2ded2ea15">00138</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;ushort&#32;<link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bits_ext_1ab72436d6b2aed3cdcaf3c0f2ded2ea15">WriteSignedPackedBits</link>(<emphasis role="keyword">this</emphasis>&#32;ushort&#32;buffer,&#32;sbyte&#32;value,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;zigzag&#32;=&#32;(uint)((value&#32;&lt;&lt;&#32;1)&#32;^&#32;(value&#32;&gt;&gt;&#32;31));
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;=&#32;buffer.WritePackedBits((<emphasis role="keywordtype">byte</emphasis>)zigzag,&#32;ref&#32;bitposition,&#32;bits);
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;buffer;
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00144"/>00144 
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Primary&#32;Readers</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00146"/>00146 
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00151"/><link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bits_ext_1ae6fe4a033513f2032f338d7384977fb7">00151</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bits_ext_1ae6fe4a033513f2032f338d7384977fb7">ReadSignedPackedBits</link>(<emphasis role="keyword">this</emphasis>&#32;ulong&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;value&#32;=&#32;(uint)buffer.ReadPackedBits(ref&#32;bitposition,&#32;bits);
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;zagzig&#32;=&#32;(int)((value&#32;&gt;&gt;&#32;1)&#32;^&#32;(-(int)(value&#32;&amp;&#32;1)));
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>)zagzig;
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00157"/>00157 
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00162"/><link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bits_ext_1a273552c44b08f68a38afdd41096499ab">00162</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bits_ext_1a273552c44b08f68a38afdd41096499ab">ReadSignedPackedBits</link>(<emphasis role="keyword">this</emphasis>&#32;uint&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;value&#32;=&#32;(uint)buffer.ReadPackedBits(ref&#32;bitposition,&#32;bits);
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;zagzig&#32;=&#32;(int)((value&#32;&gt;&gt;&#32;1)&#32;^&#32;(-(int)(value&#32;&amp;&#32;1)));
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">short</emphasis>)zagzig;
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00168"/>00168 
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00173"/><link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bits_ext_1a20ff92e064748ac1706417a9b25571f5">00173</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;sbyte&#32;<link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bits_ext_1a20ff92e064748ac1706417a9b25571f5">ReadSignedPackedBits</link>(<emphasis role="keyword">this</emphasis>&#32;ushort&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;value&#32;=&#32;(uint)buffer.ReadPackedBits(ref&#32;bitposition,&#32;bits);
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;zagzig&#32;=&#32;(int)((value&#32;&gt;&gt;&#32;1)&#32;^&#32;(-(int)(value&#32;&amp;&#32;1)));
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(sbyte)zagzig;
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00179"/>00179 
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00180"/>00180 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00181"/>00181 
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00182"/>00182 &#32;&#32;&#32;&#32;}
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00183"/>00183 }
<anchor xml:id="__primitive_pack_bits_ext_8cs_source_1l00184"/>00184 
</programlisting></section>
