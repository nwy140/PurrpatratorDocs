<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__primitive_pack_bytes_ext_8cs_source" xml:lang="en-US">
<title>PrimitivePackBytesExt.cs</title>
<indexterm><primary>C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/PrimitivePackBytesExt.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00001"/>00001 <emphasis role="comment">/*</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00002"/>00002 <emphasis role="comment">*&#32;The&#32;MIT&#32;License&#32;(MIT)</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00003"/>00003 <emphasis role="comment">*&#32;</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00004"/>00004 <emphasis role="comment">*&#32;Copyright&#32;(c)&#32;2018-2019&#32;Davin&#32;Carten&#32;(emotitron)&#32;(davincarten@gmail.com)</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00005"/>00005 <emphasis role="comment">*&#32;</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00006"/>00006 <emphasis role="comment">*&#32;Permission&#32;is&#32;hereby&#32;granted,&#32;free&#32;of&#32;charge,&#32;to&#32;any&#32;person&#32;obtaining&#32;a&#32;copy</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00007"/>00007 <emphasis role="comment">*&#32;of&#32;this&#32;software&#32;and&#32;associated&#32;documentation&#32;files&#32;(the&#32;&quot;Software&quot;),&#32;to&#32;deal</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00008"/>00008 <emphasis role="comment">*&#32;in&#32;the&#32;Software&#32;without&#32;restriction,&#32;including&#32;without&#32;limitation&#32;the&#32;rights</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00009"/>00009 <emphasis role="comment">*&#32;to&#32;use,&#32;copy,&#32;modify,&#32;merge,&#32;publish,&#32;distribute,&#32;sublicense,&#32;and/or&#32;sell</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00010"/>00010 <emphasis role="comment">*&#32;copies&#32;of&#32;the&#32;Software,&#32;and&#32;to&#32;permit&#32;persons&#32;to&#32;whom&#32;the&#32;Software&#32;is</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00011"/>00011 <emphasis role="comment">*&#32;furnished&#32;to&#32;do&#32;so,&#32;subject&#32;to&#32;the&#32;following&#32;conditions:</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00012"/>00012 <emphasis role="comment">*&#32;</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00013"/>00013 <emphasis role="comment">*&#32;The&#32;above&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;shall&#32;be&#32;included&#32;in</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00014"/>00014 <emphasis role="comment">*&#32;all&#32;copies&#32;or&#32;substantial&#32;portions&#32;of&#32;the&#32;Software.</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00015"/>00015 <emphasis role="comment">*&#32;</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00016"/>00016 <emphasis role="comment">*&#32;THE&#32;SOFTWARE&#32;IS&#32;PROVIDED&#32;&quot;AS&#32;IS&quot;,&#32;WITHOUT&#32;WARRANTY&#32;OF&#32;ANY&#32;KIND,&#32;EXPRESS&#32;OR</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00017"/>00017 <emphasis role="comment">*&#32;IMPLIED,&#32;INCLUDING&#32;BUT&#32;NOT&#32;LIMITED&#32;TO&#32;THE&#32;WARRANTIES&#32;OF&#32;MERCHANTABILITY,</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00018"/>00018 <emphasis role="comment">*&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE&#32;AND&#32;NONINFRINGEMENT.&#32;IN&#32;NO&#32;EVENT&#32;SHALL&#32;THE</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00019"/>00019 <emphasis role="comment">*&#32;AUTHORS&#32;OR&#32;COPYRIGHT&#32;HOLDERS&#32;BE&#32;LIABLE&#32;FOR&#32;ANY&#32;CLAIM,&#32;DAMAGES&#32;OR&#32;OTHER</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00020"/>00020 <emphasis role="comment">*&#32;LIABILITY,&#32;WHETHER&#32;IN&#32;AN&#32;ACTION&#32;OF&#32;CONTRACT,&#32;TORT&#32;OR&#32;OTHERWISE,&#32;ARISING&#32;FROM,</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00021"/>00021 <emphasis role="comment">*&#32;OUT&#32;OF&#32;OR&#32;IN&#32;CONNECTION&#32;WITH&#32;THE&#32;SOFTWARE&#32;OR&#32;THE&#32;USE&#32;OR&#32;OTHER&#32;DEALINGS&#32;IN</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00022"/>00022 <emphasis role="comment">*&#32;THE&#32;SOFTWARE.</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00023"/>00023 <emphasis role="comment">*/</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00024"/>00024 
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00025"/>00025 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_photon_1_1_compression">Photon.Compression</link>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00026"/>00026 {
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00027"/>00027 
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00031"/><link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bytes_ext">00031</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bytes_ext">PrimitivePackBytesExt</link>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00032"/>00032 &#32;&#32;&#32;&#32;{
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00033"/>00033 
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00034"/>00034 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Primary&#32;Write&#32;/&#32;Inject&#32;Packed</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00035"/>00035 
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00039"/><link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bytes_ext_1aebabecf816e347fc2d037228c21d2da4">00039</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;ulong&#32;<link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bytes_ext_1aebabecf816e347fc2d037228c21d2da4">WritePackedBytes</link>(<emphasis role="keyword">this</emphasis>&#32;ulong&#32;buffer,&#32;ulong&#32;value,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bytes&#32;=&#32;(bits&#32;+&#32;7)&#32;&gt;&gt;&#32;3;
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sizebits&#32;=&#32;bytes.UsedBitCount();
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;valuebytes&#32;=&#32;value.UsedByteCount();
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00044"/>00044 
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;=&#32;buffer.Write((uint)(valuebytes),&#32;ref&#32;bitposition,&#32;(<emphasis role="keywordtype">int</emphasis>)sizebits);
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;=&#32;buffer.Write(value,&#32;ref&#32;bitposition,&#32;valuebytes&#32;&lt;&lt;&#32;3);
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00047"/>00047 
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//UnityEngine.Debug.Log(value&#32;+&#32;&quot;&#32;buff:&quot;&#32;+&#32;buffer&#32;+&#32;&quot;bytes&#32;&quot;&#32;+&#32;bytes&#32;+&#32;</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&quot;&#32;=&#32;[&quot;&#32;+&#32;(int)sizebits&#32;&#32;+&#32;&quot;&#32;:&#32;&quot;&#32;+&#32;(valuebytes&#32;&lt;&lt;&#32;3)&#32;+&#32;&quot;]&#32;&#32;total&#32;bits:&#32;&quot;&#32;+&#32;((int)sizebits&#32;+&#32;(valuebytes&#32;&lt;&lt;&#32;3)));</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00050"/>00050 
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;buffer;
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00056"/><link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bytes_ext_1a275f61afb535f3e4819ab16ba6e885b6">00056</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;uint&#32;<link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bytes_ext_1a275f61afb535f3e4819ab16ba6e885b6">WritePackedBytes</link>(<emphasis role="keyword">this</emphasis>&#32;uint&#32;buffer,&#32;uint&#32;value,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bytes&#32;=&#32;(bits&#32;+&#32;7)&#32;&gt;&gt;&#32;3;
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sizebits&#32;=&#32;bytes.UsedBitCount();
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;valuebytes&#32;=&#32;value.UsedByteCount();
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00061"/>00061 
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;=&#32;buffer.Write((uint)(valuebytes),&#32;ref&#32;bitposition,&#32;sizebits);
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;=&#32;buffer.Write(value,&#32;ref&#32;bitposition,&#32;valuebytes&#32;&lt;&lt;&#32;3);
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00064"/>00064 
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//UnityEngine.Debug.Log(value&#32;+&#32;&quot;&#32;buff:&quot;&#32;+&#32;buffer&#32;+&#32;&quot;bytes&#32;&quot;&#32;+&#32;bytes&#32;+&#32;</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&quot;&#32;=&#32;[&quot;&#32;+&#32;(int)sizebits&#32;+&#32;&quot;&#32;:&#32;&quot;&#32;+&#32;(valuebytes&#32;&lt;&lt;&#32;3)&#32;+&#32;&quot;]&#32;&#32;total&#32;bits:&#32;&quot;&#32;+&#32;((int)sizebits&#32;+&#32;(valuebytes&#32;&lt;&lt;&#32;3)));</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00067"/>00067 
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;buffer;
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00070"/>00070 
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00074"/><link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bytes_ext_1abf633749ba57f044c28f0070693cf0eb">00074</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bytes_ext_1abf633749ba57f044c28f0070693cf0eb">InjectPackedBytes</link>(<emphasis role="keyword">this</emphasis>&#32;&#32;ulong&#32;value,&#32;ref&#32;ulong&#32;buffer,ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bytes&#32;=&#32;(bits&#32;+&#32;7)&#32;&gt;&gt;&#32;3;
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sizebits&#32;=&#32;bytes.UsedBitCount();
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;valuebytes&#32;=&#32;value.UsedByteCount();
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00079"/>00079 
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;=&#32;buffer.Write((uint)(valuebytes),&#32;ref&#32;bitposition,&#32;(<emphasis role="keywordtype">int</emphasis>)sizebits);
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;=&#32;buffer.Write(value,&#32;ref&#32;bitposition,&#32;valuebytes&#32;&lt;&lt;&#32;3);
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00082"/>00082 
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//UnityEngine.Debug.Log(value&#32;+&#32;&quot;&#32;buff:&quot;&#32;+&#32;buffer&#32;+&#32;&quot;bytes&#32;&quot;&#32;+&#32;bytes&#32;+</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&quot;&#32;=&#32;[&quot;&#32;+&#32;(int)sizebits&#32;+&#32;&quot;&#32;:&#32;&quot;&#32;+&#32;(valuebytes&#32;&lt;&lt;&#32;3)&#32;+&#32;&quot;]&#32;&#32;total&#32;bits:&#32;&quot;&#32;+&#32;((int)sizebits&#32;+&#32;(valuebytes&#32;&lt;&lt;&#32;3)));</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00089"/><link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bytes_ext_1ac31d543ac62c5778b4235dc3a897dce5">00089</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bytes_ext_1ac31d543ac62c5778b4235dc3a897dce5">InjectPackedBytes</link>(<emphasis role="keyword">this</emphasis>&#32;uint&#32;value,&#32;ref&#32;uint&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bytes&#32;=&#32;(bits&#32;+&#32;7)&#32;&gt;&gt;&#32;3;
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sizebits&#32;=&#32;bytes.UsedBitCount();
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;valuebytes&#32;=&#32;value.UsedByteCount();
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00094"/>00094 
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;=&#32;buffer.Write((uint)(valuebytes),&#32;ref&#32;bitposition,&#32;sizebits);
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer&#32;=&#32;buffer.Write(value,&#32;ref&#32;bitposition,&#32;valuebytes&#32;&lt;&lt;&#32;3);
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00097"/>00097 
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//UnityEngine.Debug.Log(value&#32;+&#32;&quot;&#32;buff:&quot;&#32;+&#32;buffer&#32;+&#32;&quot;bytes&#32;&quot;&#32;+&#32;bytes&#32;+</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&quot;&#32;=&#32;[&quot;&#32;+&#32;(int)sizebits&#32;+&#32;&quot;&#32;:&#32;&quot;&#32;+&#32;(valuebytes&#32;&lt;&lt;&#32;3)&#32;+&#32;&quot;]&#32;&#32;total&#32;bits:&#32;&quot;&#32;+&#32;((int)sizebits&#32;+&#32;(valuebytes&#32;&lt;&lt;&#32;3)));</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00101"/>00101 
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00102"/>00102 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00103"/>00103 
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00104"/>00104 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Primary&#32;Read&#32;Packed</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00105"/>00105 
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00109"/><link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bytes_ext_1aad62ac9eaf8a4f50db86f72e6782e1e1">00109</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;ulong&#32;<link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bytes_ext_1aad62ac9eaf8a4f50db86f72e6782e1e1">ReadPackedBytes</link>(<emphasis role="keyword">this</emphasis>&#32;ulong&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bytes&#32;=&#32;(bits&#32;+&#32;7)&#32;&gt;&gt;&#32;3;
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sizebits&#32;=&#32;bytes.UsedBitCount();
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;valuebytes&#32;=&#32;(int)buffer.Read(ref&#32;bitposition,&#32;sizebits);
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;buffer.Read(ref&#32;bitposition,&#32;valuebytes&#32;&lt;&lt;&#32;3);
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00119"/><link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bytes_ext_1ac0ea3ebef2c8dbeb2f43615979099ba2">00119</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;uint&#32;<link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bytes_ext_1ac0ea3ebef2c8dbeb2f43615979099ba2">ReadPackedBytes</link>(<emphasis role="keyword">this</emphasis>&#32;uint&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bytes&#32;=&#32;(bits&#32;+&#32;7)&#32;&gt;&gt;&#32;3;
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sizebits&#32;=&#32;bytes.UsedBitCount();
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;valuebytes&#32;=&#32;(int)buffer.Read(ref&#32;bitposition,&#32;sizebits);
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;buffer.Read(ref&#32;bitposition,&#32;valuebytes&#32;&lt;&lt;&#32;3);
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00126"/>00126 
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00127"/>00127 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00128"/>00128 
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00129"/>00129 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Packed&#32;Signed</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00130"/>00130 
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00134"/><link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bytes_ext_1a7a062c6fac8836159d0a8e37678426b0">00134</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;ulong&#32;<link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bytes_ext_1a7a062c6fac8836159d0a8e37678426b0">WriteSignedPackedBytes</link>(<emphasis role="keyword">this</emphasis>&#32;ulong&#32;buffer,&#32;<emphasis role="keywordtype">int</emphasis>&#32;value,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;zigzag&#32;=&#32;(uint)((value&#32;&lt;&lt;&#32;1)&#32;^&#32;(value&#32;&gt;&gt;&#32;31));
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;buffer.WritePackedBytes(zigzag,&#32;ref&#32;bitposition,&#32;bits);
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00142"/><link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bytes_ext_1a76ab38414c624647fc12b646f9d1f3bc">00142</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_primitive_pack_bytes_ext_1a76ab38414c624647fc12b646f9d1f3bc">ReadSignedPackedBytes</link>(<emphasis role="keyword">this</emphasis>&#32;ulong&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bits)
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;value&#32;=&#32;(uint)buffer.ReadPackedBytes(ref&#32;bitposition,&#32;bits);
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;zagzig&#32;=&#32;(int)((value&#32;&gt;&gt;&#32;1)&#32;^&#32;(-(int)(value&#32;&amp;&#32;1)));
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;zagzig;
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00148"/>00148 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00149"/>00149 &#32;&#32;&#32;&#32;}
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00150"/>00150 }
<anchor xml:id="__primitive_pack_bytes_ext_8cs_source_1l00151"/>00151 
</programlisting></section>
