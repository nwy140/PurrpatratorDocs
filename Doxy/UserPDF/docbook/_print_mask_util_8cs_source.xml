<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__print_mask_util_8cs_source" xml:lang="en-US">
<title>PrintMaskUtil.cs</title>
<indexterm><primary>C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/BitUtilities/PrintMaskUtil.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__print_mask_util_8cs_source_1l00001"/>00001 
<anchor xml:id="__print_mask_util_8cs_source_1l00002"/>00002 
<anchor xml:id="__print_mask_util_8cs_source_1l00003"/>00003 <emphasis role="keyword">using</emphasis>&#32;System.Collections;
<anchor xml:id="__print_mask_util_8cs_source_1l00004"/>00004 <emphasis role="keyword">using</emphasis>&#32;System.Diagnostics;
<anchor xml:id="__print_mask_util_8cs_source_1l00005"/>00005 <emphasis role="keyword">using</emphasis>&#32;System.Collections.Generic;
<anchor xml:id="__print_mask_util_8cs_source_1l00006"/>00006 <emphasis role="keyword">using</emphasis>&#32;System.Text;
<anchor xml:id="__print_mask_util_8cs_source_1l00007"/>00007 <emphasis role="keyword">using</emphasis>&#32;UnityEngine;
<anchor xml:id="__print_mask_util_8cs_source_1l00008"/>00008 
<anchor xml:id="__print_mask_util_8cs_source_1l00009"/><link linkend="_namespaceemotitron">00009</link> <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceemotitron_1_1_utilities">emotitron.Utilities</link>
<anchor xml:id="__print_mask_util_8cs_source_1l00010"/>00010 {
<anchor xml:id="__print_mask_util_8cs_source_1l00011"/><link linkend="_classemotitron_1_1_utilities_1_1_print_mask_util">00011</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classemotitron_1_1_utilities_1_1_print_mask_util">PrintMaskUtil</link>
<anchor xml:id="__print_mask_util_8cs_source_1l00012"/>00012 &#32;&#32;&#32;&#32;{
<anchor xml:id="__print_mask_util_8cs_source_1l00013"/>00013 
<anchor xml:id="__print_mask_util_8cs_source_1l00014"/>00014 <emphasis role="preprocessor">#if&#32;DEBUG&#32;||&#32;UNITY_EDITOR&#32;||&#32;DEVELOPMENT_BUILD</emphasis>
<anchor xml:id="__print_mask_util_8cs_source_1l00015"/>00015 
<anchor xml:id="__print_mask_util_8cs_source_1l00016"/>00016 
<anchor xml:id="__print_mask_util_8cs_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;str&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;StringBuilder(512);
<anchor xml:id="__print_mask_util_8cs_source_1l00018"/>00018 
<anchor xml:id="__print_mask_util_8cs_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;<link linkend="_classemotitron_1_1_utilities_1_1_print_mask_util_1a5bf56f47c0d3e9c1d36f81eab60f8c40">PrintMask</link>(<emphasis role="keyword">this</emphasis>&#32;BitArray&#32;ba,&#32;<emphasis role="keywordtype">int</emphasis>&#32;greenbit&#32;=&#32;-1,&#32;<emphasis role="keywordtype">int</emphasis>&#32;redbit&#32;=&#32;-1)
<anchor xml:id="__print_mask_util_8cs_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__print_mask_util_8cs_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Length&#32;=&#32;0;
<anchor xml:id="__print_mask_util_8cs_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append(<emphasis role="stringliteral">&quot;[&quot;</emphasis>);
<anchor xml:id="__print_mask_util_8cs_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;ba.Count&#32;-&#32;1;&#32;i&#32;&gt;=&#32;0;&#32;--i)
<anchor xml:id="__print_mask_util_8cs_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__print_mask_util_8cs_source_1l00025"/>00025 
<anchor xml:id="__print_mask_util_8cs_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;==&#32;greenbit)
<anchor xml:id="__print_mask_util_8cs_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append(<emphasis role="stringliteral">&quot;&lt;b&gt;&lt;color=#00ff00&gt;&quot;</emphasis>&#32;+&#32;(ba[i]&#32;?&#32;1&#32;:&#32;0)&#32;+&#32;<emphasis role="stringliteral">&quot;&lt;/color&gt;&lt;/b&gt;&quot;</emphasis>);
<anchor xml:id="__print_mask_util_8cs_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;==&#32;redbit)
<anchor xml:id="__print_mask_util_8cs_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append(<emphasis role="stringliteral">&quot;&lt;b&gt;&lt;color=#ff0000&gt;&quot;</emphasis>&#32;+&#32;(ba[i]&#32;?&#32;1&#32;:&#32;0)&#32;+&#32;<emphasis role="stringliteral">&quot;&lt;/color&gt;&lt;/b&gt;&quot;</emphasis>);
<anchor xml:id="__print_mask_util_8cs_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__print_mask_util_8cs_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append(ba[i]&#32;?&#32;<emphasis role="stringliteral">&quot;1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;&lt;color=#0f0f0f&gt;0&lt;/color&gt;&quot;</emphasis>);
<anchor xml:id="__print_mask_util_8cs_source_1l00032"/>00032 
<anchor xml:id="__print_mask_util_8cs_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;%&#32;32&#32;==&#32;0)
<anchor xml:id="__print_mask_util_8cs_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append((i&#32;==&#32;0)&#32;?&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;]&#32;[&quot;</emphasis>);
<anchor xml:id="__print_mask_util_8cs_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;%&#32;8&#32;==&#32;0&#32;&amp;&amp;&#32;i&#32;!=&#32;0)
<anchor xml:id="__print_mask_util_8cs_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append(<emphasis role="stringliteral">&quot;:&quot;</emphasis>);
<anchor xml:id="__print_mask_util_8cs_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__print_mask_util_8cs_source_1l00038"/>00038 
<anchor xml:id="__print_mask_util_8cs_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str;
<anchor xml:id="__print_mask_util_8cs_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__print_mask_util_8cs_source_1l00041"/>00041 
<anchor xml:id="__print_mask_util_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;<link linkend="_classemotitron_1_1_utilities_1_1_print_mask_util_1a5bf56f47c0d3e9c1d36f81eab60f8c40">PrintMask</link>(<emphasis role="keyword">this</emphasis>&#32;BitArray&#32;ba,&#32;<emphasis role="keywordtype">int</emphasis>&#32;greenbit&#32;=&#32;-1,&#32;<emphasis role="keywordtype">bool</emphasis>[]&#32;redbits&#32;=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__print_mask_util_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__print_mask_util_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Length&#32;=&#32;0;
<anchor xml:id="__print_mask_util_8cs_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append(<emphasis role="stringliteral">&quot;[&quot;</emphasis>);
<anchor xml:id="__print_mask_util_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;ba.Count&#32;-&#32;1;&#32;i&#32;&gt;=&#32;0;&#32;--i)
<anchor xml:id="__print_mask_util_8cs_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__print_mask_util_8cs_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;==&#32;greenbit)
<anchor xml:id="__print_mask_util_8cs_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append(<emphasis role="stringliteral">&quot;&lt;b&gt;&lt;color=#00ff00&gt;&quot;</emphasis>).Append(ba[i]&#32;?&#32;1&#32;:&#32;0).Append(<emphasis role="stringliteral">&quot;&lt;/color&gt;&lt;/b&gt;&quot;</emphasis>);
<anchor xml:id="__print_mask_util_8cs_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(redbits&#32;!=&#32;<emphasis role="keyword">null</emphasis>&#32;&amp;&amp;&#32;i&#32;&lt;&#32;redbits.Length&#32;&amp;&amp;&#32;redbits[i])
<anchor xml:id="__print_mask_util_8cs_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append(<emphasis role="stringliteral">&quot;&lt;b&gt;&lt;color=#ff0000&gt;&quot;</emphasis>&#32;+&#32;(ba[i]&#32;?&#32;1&#32;:&#32;0)&#32;+&#32;<emphasis role="stringliteral">&quot;&lt;/color&gt;&lt;/b&gt;&quot;</emphasis>);
<anchor xml:id="__print_mask_util_8cs_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__print_mask_util_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append(ba[i]&#32;?&#32;<emphasis role="stringliteral">&quot;1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;&lt;color=#0f0f0f&gt;0&lt;/color&gt;&quot;</emphasis>);
<anchor xml:id="__print_mask_util_8cs_source_1l00054"/>00054 
<anchor xml:id="__print_mask_util_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;%&#32;32&#32;==&#32;0)
<anchor xml:id="__print_mask_util_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append((i&#32;==&#32;0)&#32;?&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;]&#32;[&quot;</emphasis>);
<anchor xml:id="__print_mask_util_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;%&#32;8&#32;==&#32;0&#32;&amp;&amp;&#32;i&#32;!=&#32;0)
<anchor xml:id="__print_mask_util_8cs_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append(<emphasis role="stringliteral">&quot;:&quot;</emphasis>);
<anchor xml:id="__print_mask_util_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__print_mask_util_8cs_source_1l00060"/>00060 
<anchor xml:id="__print_mask_util_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str;
<anchor xml:id="__print_mask_util_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__print_mask_util_8cs_source_1l00063"/>00063 
<anchor xml:id="__print_mask_util_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;<link linkend="_classemotitron_1_1_utilities_1_1_print_mask_util_1a5bf56f47c0d3e9c1d36f81eab60f8c40">PrintMask</link>(<emphasis role="keyword">this</emphasis>&#32;BitArray&#32;ba,&#32;StringBuilder[]&#32;colorbits&#32;=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__print_mask_util_8cs_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__print_mask_util_8cs_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Length&#32;=&#32;0;
<anchor xml:id="__print_mask_util_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append(<emphasis role="stringliteral">&quot;[&quot;</emphasis>);
<anchor xml:id="__print_mask_util_8cs_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;ba.Count&#32;-&#32;1;&#32;i&#32;&gt;=&#32;0;&#32;--i)
<anchor xml:id="__print_mask_util_8cs_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__print_mask_util_8cs_source_1l00070"/>00070 
<anchor xml:id="__print_mask_util_8cs_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(colorbits&#32;!=&#32;<emphasis role="keyword">null</emphasis>&#32;&amp;&amp;&#32;i&#32;&lt;&#32;colorbits.Length&#32;&amp;&amp;&#32;colorbits[i]&#32;!=&#32;<emphasis role="keyword">null</emphasis>&#32;&amp;&amp;&#32;colorbits[i].ToString()&#32;!=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)
<anchor xml:id="__print_mask_util_8cs_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append(<emphasis role="stringliteral">&quot;&lt;b&gt;&lt;color=&quot;</emphasis>&#32;+&#32;colorbits[i].ToString()&#32;+&#32;<emphasis role="stringliteral">&quot;&gt;&quot;</emphasis>&#32;+&#32;(ba[i]&#32;?&#32;1&#32;:&#32;0)&#32;+&#32;<emphasis role="stringliteral">&quot;&lt;/color&gt;&lt;/b&gt;&quot;</emphasis>);
<anchor xml:id="__print_mask_util_8cs_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__print_mask_util_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append(ba[i]&#32;?&#32;<emphasis role="stringliteral">&quot;1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;&lt;color=#0f0f0f&gt;0&lt;/color&gt;&quot;</emphasis>);
<anchor xml:id="__print_mask_util_8cs_source_1l00075"/>00075 
<anchor xml:id="__print_mask_util_8cs_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;%&#32;32&#32;==&#32;0)
<anchor xml:id="__print_mask_util_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append((i&#32;==&#32;0)&#32;?&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;]&#32;[&quot;</emphasis>);
<anchor xml:id="__print_mask_util_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;%&#32;8&#32;==&#32;0&#32;&amp;&amp;&#32;i&#32;!=&#32;0)
<anchor xml:id="__print_mask_util_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.Append(<emphasis role="stringliteral">&quot;:&quot;</emphasis>);
<anchor xml:id="__print_mask_util_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__print_mask_util_8cs_source_1l00081"/>00081 
<anchor xml:id="__print_mask_util_8cs_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str;
<anchor xml:id="__print_mask_util_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__print_mask_util_8cs_source_1l00084"/>00084 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="__print_mask_util_8cs_source_1l00085"/><link linkend="_classemotitron_1_1_utilities_1_1_print_mask_util_1a5bf56f47c0d3e9c1d36f81eab60f8c40">00085</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;StringBuilder&#32;<link linkend="_classemotitron_1_1_utilities_1_1_print_mask_util_1a5bf56f47c0d3e9c1d36f81eab60f8c40">PrintMask</link>(<emphasis role="keyword">this</emphasis>&#32;BitArray&#32;ba,&#32;<emphasis role="keywordtype">int</emphasis>&#32;hiliteBit&#32;=&#32;-1)
<anchor xml:id="__print_mask_util_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;{
<anchor xml:id="__print_mask_util_8cs_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__print_mask_util_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;}
<anchor xml:id="__print_mask_util_8cs_source_1l00089"/>00089 
<anchor xml:id="__print_mask_util_8cs_source_1l00090"/>00090 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__print_mask_util_8cs_source_1l00091"/>00091 
<anchor xml:id="__print_mask_util_8cs_source_1l00092"/><link linkend="_classemotitron_1_1_utilities_1_1_print_mask_util_1ad0fc2da034709d8bf768d44fac6f6e3d">00092</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classemotitron_1_1_utilities_1_1_print_mask_util_1ad0fc2da034709d8bf768d44fac6f6e3d">CountTrue</link>(<emphasis role="keyword">this</emphasis>&#32;BitArray&#32;ba)
<anchor xml:id="__print_mask_util_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__print_mask_util_8cs_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;truecount&#32;=&#32;0;
<anchor xml:id="__print_mask_util_8cs_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cnt&#32;=&#32;ba.Count;
<anchor xml:id="__print_mask_util_8cs_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;cnt;&#32;++i)
<anchor xml:id="__print_mask_util_8cs_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ba[i])
<anchor xml:id="__print_mask_util_8cs_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;truecount++;
<anchor xml:id="__print_mask_util_8cs_source_1l00099"/>00099 
<anchor xml:id="__print_mask_util_8cs_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;truecount;
<anchor xml:id="__print_mask_util_8cs_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__print_mask_util_8cs_source_1l00102"/>00102 
<anchor xml:id="__print_mask_util_8cs_source_1l00103"/><link linkend="_classemotitron_1_1_utilities_1_1_print_mask_util_1a43e5314f7ccd2d7209d514d6729ed0e0">00103</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classemotitron_1_1_utilities_1_1_print_mask_util_1a43e5314f7ccd2d7209d514d6729ed0e0">CountFalse</link>(<emphasis role="keyword">this</emphasis>&#32;BitArray&#32;ba)
<anchor xml:id="__print_mask_util_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__print_mask_util_8cs_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;falsecount&#32;=&#32;0;
<anchor xml:id="__print_mask_util_8cs_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cnt&#32;=&#32;ba.Count;
<anchor xml:id="__print_mask_util_8cs_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;cnt;&#32;++i)
<anchor xml:id="__print_mask_util_8cs_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!ba[i])
<anchor xml:id="__print_mask_util_8cs_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;falsecount++;
<anchor xml:id="__print_mask_util_8cs_source_1l00110"/>00110 
<anchor xml:id="__print_mask_util_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;falsecount;
<anchor xml:id="__print_mask_util_8cs_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__print_mask_util_8cs_source_1l00113"/>00113 
<anchor xml:id="__print_mask_util_8cs_source_1l00117"/><link linkend="_classemotitron_1_1_utilities_1_1_print_mask_util_1ad9f7ed5e922a551cf4937ba885eaa853">00117</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classemotitron_1_1_utilities_1_1_print_mask_util_1ad9f7ed5e922a551cf4937ba885eaa853">CountValidRange</link>(<emphasis role="keyword">this</emphasis>&#32;BitArray&#32;ba,&#32;<emphasis role="keywordtype">int</emphasis>&#32;start,&#32;<emphasis role="keywordtype">int</emphasis>&#32;lookahead)
<anchor xml:id="__print_mask_util_8cs_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__print_mask_util_8cs_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;len&#32;=&#32;ba.Length;
<anchor xml:id="__print_mask_util_8cs_source_1l00120"/>00120 
<anchor xml:id="__print_mask_util_8cs_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;lookahead;&#32;i&#32;&gt;=&#32;0;&#32;--i)
<anchor xml:id="__print_mask_util_8cs_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__print_mask_util_8cs_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;b&#32;=&#32;start&#32;+&#32;i;
<anchor xml:id="__print_mask_util_8cs_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(b&#32;&gt;=&#32;len)
<anchor xml:id="__print_mask_util_8cs_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;b&#32;-=&#32;len;
<anchor xml:id="__print_mask_util_8cs_source_1l00126"/>00126 
<anchor xml:id="__print_mask_util_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ba[b]&#32;==&#32;<emphasis role="keyword">true</emphasis>)
<anchor xml:id="__print_mask_util_8cs_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;i&#32;+&#32;1;
<anchor xml:id="__print_mask_util_8cs_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__print_mask_util_8cs_source_1l00130"/>00130 
<anchor xml:id="__print_mask_util_8cs_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__print_mask_util_8cs_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__print_mask_util_8cs_source_1l00133"/>00133 
<anchor xml:id="__print_mask_util_8cs_source_1l00140"/><link linkend="_classemotitron_1_1_utilities_1_1_print_mask_util_1af1368caf9706e312c7243083fa71c5b3">00140</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classemotitron_1_1_utilities_1_1_print_mask_util_1af1368caf9706e312c7243083fa71c5b3">ClearBitsBefore</link>(<emphasis role="keyword">this</emphasis>&#32;BitArray&#32;ba,&#32;<emphasis role="keywordtype">int</emphasis>&#32;start,&#32;<emphasis role="keywordtype">int</emphasis>&#32;count)
<anchor xml:id="__print_mask_util_8cs_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__print_mask_util_8cs_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;len&#32;=&#32;ba.Length;
<anchor xml:id="__print_mask_util_8cs_source_1l00143"/>00143 
<anchor xml:id="__print_mask_util_8cs_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cnt&#32;=&#32;start&#32;-&#32;count;&#32;<emphasis role="comment">//&#32;&#32;5&#32;-&#32;1&#32;=&#32;4</emphasis>
<anchor xml:id="__print_mask_util_8cs_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;start&#32;-&#32;1;&#32;i&#32;&gt;=&#32;cnt;&#32;--i)
<anchor xml:id="__print_mask_util_8cs_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__print_mask_util_8cs_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;b&#32;=&#32;(i&#32;&lt;&#32;0)&#32;?&#32;i&#32;+&#32;len&#32;:&#32;i;
<anchor xml:id="__print_mask_util_8cs_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ba[b]&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__print_mask_util_8cs_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__print_mask_util_8cs_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__print_mask_util_8cs_source_1l00151"/>00151 &#32;&#32;&#32;&#32;}
<anchor xml:id="__print_mask_util_8cs_source_1l00152"/>00152 
<anchor xml:id="__print_mask_util_8cs_source_1l00153"/>00153 }
</programlisting></section>
