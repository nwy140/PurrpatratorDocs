<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__socket_web_tcp_8cs_source" xml:lang="en-US">
<title>SocketWebTcp.cs</title>
<indexterm><primary>C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonLibs/WebSocket/SocketWebTcp.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__socket_web_tcp_8cs_source_1l00001"/>00001 <emphasis role="preprocessor">#if&#32;UNITY_WEBGL&#32;||&#32;WEBSOCKET&#32;||&#32;((UNITY_XBOXONE&#32;||&#32;UNITY_GAMECORE)&#32;&amp;&amp;&#32;UNITY_EDITOR)</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00002"/>00002 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00003"/>00003 <emphasis role="comment">//&#32;--------------------------------------------------------------------------------------------------------------------</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00004"/>00004 <emphasis role="comment">//&#32;&lt;copyright&#32;file=&quot;SocketWebTcp.cs&quot;&#32;company=&quot;Exit&#32;Games&#32;GmbH&quot;&gt;</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00005"/>00005 <emphasis role="comment">//&#32;&#32;&#32;Copyright&#32;(c)&#32;Exit&#32;Games&#32;GmbH.&#32;&#32;All&#32;rights&#32;reserved.</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00006"/>00006 <emphasis role="comment">//&#32;&lt;/copyright&gt;</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00007"/>00007 <emphasis role="comment">//&#32;&lt;summary&gt;</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00008"/>00008 <emphasis role="comment">//&#32;&#32;&#32;Internal&#32;class&#32;to&#32;encapsulate&#32;the&#32;network&#32;i/o&#32;functionality&#32;for&#32;the&#32;realtime&#32;library.</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00009"/>00009 <emphasis role="comment">//&#32;&lt;/summary&gt;</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00010"/>00010 <emphasis role="comment">//&#32;&lt;author&gt;developer@exitgames.com&lt;/author&gt;</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00011"/>00011 <emphasis role="comment">//&#32;--------------------------------------------------------------------------------------------------------------------</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00012"/>00012 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00013"/>00013 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00014"/>00014 <emphasis role="keyword">namespace&#32;</emphasis>ExitGames.Client.Photon
<anchor xml:id="__socket_web_tcp_8cs_source_1l00015"/>00015 {
<anchor xml:id="__socket_web_tcp_8cs_source_1l00016"/>00016 &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;System;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00017"/>00017 &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;System.Collections;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00018"/>00018 &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;UnityEngine;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00019"/>00019 &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1a5262cc10d8760dc9f60908f7fb91397e">SupportClassPun</link>&#32;=&#32;ExitGames.Client.Photon.SupportClass;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00020"/>00020 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00021"/>00021 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00022"/>00022 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#if&#32;!(UNITY_WEBGL&#32;||&#32;NETFX_CORE)</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00023"/>00023 &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;System.Net;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00024"/>00024 &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;System.Net.Sockets;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00025"/>00025 &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;System.Threading;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00026"/>00026 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00027"/>00027 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00031"/>00031 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;sealed&#32;<emphasis role="keyword">class&#32;</emphasis>WaitForRealSeconds&#32;:&#32;CustomYieldInstruction
<anchor xml:id="__socket_web_tcp_8cs_source_1l00032"/>00032 &#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;readonly&#32;<emphasis role="keywordtype">float</emphasis>&#32;_endTime;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00034"/>00034 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;keepWaiting
<anchor xml:id="__socket_web_tcp_8cs_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this._endTime&#32;&gt;&#32;Time.realtimeSinceStartup;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00039"/>00039 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;WaitForRealSeconds(<emphasis role="keywordtype">float</emphasis>&#32;seconds)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this._endTime&#32;=&#32;Time.realtimeSinceStartup&#32;+&#32;seconds;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00045"/>00045 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00046"/>00046 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00050"/>00050 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>SocketWebTcp&#32;:&#32;IPhotonSocket,&#32;IDisposable
<anchor xml:id="__socket_web_tcp_8cs_source_1l00051"/>00051 &#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;WebSocket&#32;sock;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00053"/>00053 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;readonly&#32;<emphasis role="keywordtype">object</emphasis>&#32;syncer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;object();
<anchor xml:id="__socket_web_tcp_8cs_source_1l00055"/>00055 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;SocketWebTcp(PeerBase&#32;npeer)&#32;:&#32;base(npeer)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.ServerAddress&#32;=&#32;npeer.ServerAddress;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.ReportDebugOfLevel(DebugLevel.INFO))
<anchor xml:id="__socket_web_tcp_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.Listener.DebugReturn(DebugLevel.INFO,&#32;<emphasis role="stringliteral">&quot;new&#32;SocketWebTcp()&#32;for&#32;Unity.&#32;Server:&#32;&quot;</emphasis>&#32;+&#32;<emphasis role="keyword">this</emphasis>.ServerAddress);
<anchor xml:id="__socket_web_tcp_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00063"/>00063 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//this.Protocol&#32;=&#32;ConnectionProtocol.WebSocket;</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.PollReceive&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00067"/>00067 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Dispose()
<anchor xml:id="__socket_web_tcp_8cs_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.<link linkend="_namespace_photon_1_1_compression_1a316c25ff520f46923c1acc8c4ab4096ba46a2a41cc6e552044816a2d04634545d">State</link>&#32;=&#32;PhotonSocketState.Disconnecting;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00071"/>00071 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.sock&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.sock.Connected)&#32;this.sock.Close();
<anchor xml:id="__socket_web_tcp_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(Exception&#32;ex)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.EnqueueDebugReturn(DebugLevel.INFO,&#32;<emphasis role="stringliteral">&quot;Exception&#32;in&#32;Dispose():&#32;&quot;</emphasis>&#32;+&#32;ex);
<anchor xml:id="__socket_web_tcp_8cs_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00083"/>00083 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.sock&#32;=&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.<link linkend="_namespace_photon_1_1_compression_1a316c25ff520f46923c1acc8c4ab4096ba46a2a41cc6e552044816a2d04634545d">State</link>&#32;=&#32;PhotonSocketState.Disconnected;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00087"/>00087 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a056d4010391c5d568746195703eff547a3d164a4fbbdd103bddb596268f741bae">GameObject</link>&#32;websocketConnectionObject;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Connect()
<anchor xml:id="__socket_web_tcp_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//bool&#32;baseOk&#32;=&#32;base.Connect();</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//if&#32;(!baseOk)</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//{</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;return&#32;false;</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//}</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00096"/>00096 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00097"/>00097 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.<link linkend="_namespace_photon_1_1_compression_1a316c25ff520f46923c1acc8c4ab4096ba46a2a41cc6e552044816a2d04634545d">State</link>&#32;=&#32;PhotonSocketState.Connecting;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00099"/>00099 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.websocketConnectionObject&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;UnityEngine.Object.Destroy(this.websocketConnectionObject);
<anchor xml:id="__socket_web_tcp_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00104"/>00104 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.websocketConnectionObject&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace_photon_1_1_pun_1_1_simple_1a056d4010391c5d568746195703eff547a3d164a4fbbdd103bddb596268f741bae">GameObject</link>(<emphasis role="stringliteral">&quot;websocketConnectionObject&quot;</emphasis>);
<anchor xml:id="__socket_web_tcp_8cs_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MonoBehaviour&#32;mb&#32;=&#32;this.websocketConnectionObject.AddComponent&lt;MonoBehaviourExt&gt;();
<anchor xml:id="__socket_web_tcp_8cs_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.websocketConnectionObject.hideFlags&#32;=&#32;HideFlags.HideInHierarchy;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;UnityEngine.Object.DontDestroyOnLoad(this.websocketConnectionObject);
<anchor xml:id="__socket_web_tcp_8cs_source_1l00109"/>00109 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00110"/>00110 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;UNITY_WEBGL&#32;||&#32;NETFX_CORE</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.sock&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;WebSocket(<emphasis role="keyword">new</emphasis>&#32;Uri(this.ConnectAddress),&#32;this.SerializationProtocol);
<anchor xml:id="__socket_web_tcp_8cs_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.sock.Connect();
<anchor xml:id="__socket_web_tcp_8cs_source_1l00113"/>00113 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mb.StartCoroutine(this.ReceiveLoop());
<anchor xml:id="__socket_web_tcp_8cs_source_1l00115"/>00115 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#else</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00116"/>00116 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mb.StartCoroutine(this.DetectIpVersionAndConnect(mb));
<anchor xml:id="__socket_web_tcp_8cs_source_1l00118"/>00118 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00119"/>00119 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00122"/>00122 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00123"/>00123 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00124"/>00124 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;!(UNITY_WEBGL&#32;||&#32;NETFX_CORE)</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ipVersionDetectDone;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;IEnumerator&#32;DetectIpVersionAndConnect(MonoBehaviour&#32;mb)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Uri&#32;uri&#32;=&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uri&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Uri(this.ConnectAddress);
<anchor xml:id="__socket_web_tcp_8cs_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(Exception&#32;ex)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.ReportDebugOfLevel(DebugLevel.ERROR))
<anchor xml:id="__socket_web_tcp_8cs_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.Listener.DebugReturn(DebugLevel.ERROR,&#32;<emphasis role="stringliteral">&quot;Failed&#32;to&#32;create&#32;a&#32;URI&#32;from&#32;ConnectAddress&#32;(&quot;</emphasis>&#32;+&#32;ConnectAddress&#32;+&#32;<emphasis role="stringliteral">&quot;).&#32;Exception:&#32;&quot;</emphasis>&#32;+&#32;ex);
<anchor xml:id="__socket_web_tcp_8cs_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00140"/>00140 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(uri&#32;!=&#32;<emphasis role="keyword">null</emphasis>&#32;&amp;&amp;&#32;uri.HostNameType&#32;==&#32;UriHostNameType.Dns)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ipVersionDetectDone&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00144"/>00144 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ThreadPool.QueueUserWorkItem(this.DetectIpVersion,&#32;uri.Host);
<anchor xml:id="__socket_web_tcp_8cs_source_1l00146"/>00146 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!this.ipVersionDetectDone)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;yield&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;WaitForRealSeconds(0.1f);
<anchor xml:id="__socket_web_tcp_8cs_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00152"/>00152 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.AddressResolvedAsIpv6)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.ConnectAddress&#32;+=&#32;<emphasis role="stringliteral">&quot;&amp;IPv6&quot;</emphasis>;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00157"/>00157 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.ReportDebugOfLevel(DebugLevel.INFO))
<anchor xml:id="__socket_web_tcp_8cs_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.Listener.DebugReturn(DebugLevel.INFO,&#32;<emphasis role="stringliteral">&quot;DetectIpVersionAndConnect()&#32;AddressResolvedAsIpv6:&#32;&quot;</emphasis>&#32;+&#32;<emphasis role="keyword">this</emphasis>.AddressResolvedAsIpv6&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;ConnectAddress:&#32;&quot;</emphasis>&#32;+&#32;ConnectAddress);
<anchor xml:id="__socket_web_tcp_8cs_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00162"/>00162 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00163"/>00163 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.sock&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;WebSocket(<emphasis role="keyword">new</emphasis>&#32;Uri(this.ConnectAddress),&#32;this.SerializationProtocol);
<anchor xml:id="__socket_web_tcp_8cs_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.sock.Connect();
<anchor xml:id="__socket_web_tcp_8cs_source_1l00166"/>00166 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mb.StartCoroutine(this.ReceiveLoop());
<anchor xml:id="__socket_web_tcp_8cs_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00169"/>00169 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;state&#32;has&#32;to&#32;be&#32;the&#32;hostname&#32;string</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;DetectIpVersion(<emphasis role="keywordtype">object</emphasis>&#32;state)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;host&#32;=&#32;state&#32;as&#32;string;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IPAddress[]&#32;ipAddresses;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ipAddresses&#32;=&#32;Dns.GetHostAddresses(host);
<anchor xml:id="__socket_web_tcp_8cs_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(IPAddress&#32;ipAddress&#32;<emphasis role="keywordflow">in</emphasis>&#32;ipAddresses)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ipAddress.AddressFamily&#32;==&#32;AddressFamily.InterNetworkV6)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.AddressResolvedAsIpv6&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(Exception&#32;ex)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.Listener.DebugReturn(DebugLevel.INFO,&#32;<emphasis role="stringliteral">&quot;DetectIpVersionAndConnect&#32;(uri:&#32;&quot;</emphasis>&#32;+&#32;host&#32;+&#32;<emphasis role="stringliteral">&quot;=&#32;thread&#32;failed:&#32;&quot;</emphasis>&#32;+&#32;ex);
<anchor xml:id="__socket_web_tcp_8cs_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00191"/>00191 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.ipVersionDetectDone&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00194"/>00194 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00195"/>00195 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00196"/>00196 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Disconnect()
<anchor xml:id="__socket_web_tcp_8cs_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.ReportDebugOfLevel(DebugLevel.INFO))
<anchor xml:id="__socket_web_tcp_8cs_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.Listener.DebugReturn(DebugLevel.INFO,&#32;<emphasis role="stringliteral">&quot;SocketWebTcp.Disconnect()&quot;</emphasis>);
<anchor xml:id="__socket_web_tcp_8cs_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00203"/>00203 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.<link linkend="_namespace_photon_1_1_compression_1a316c25ff520f46923c1acc8c4ab4096ba46a2a41cc6e552044816a2d04634545d">State</link>&#32;=&#32;PhotonSocketState.Disconnecting;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00205"/>00205 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lock&#32;(this.syncer)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.sock&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.sock.Close();
<anchor xml:id="__socket_web_tcp_8cs_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(Exception&#32;ex)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.Listener.DebugReturn(DebugLevel.ERROR,&#32;<emphasis role="stringliteral">&quot;Exception&#32;in&#32;Disconnect():&#32;&quot;</emphasis>&#32;+&#32;ex);
<anchor xml:id="__socket_web_tcp_8cs_source_1l00217"/>00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00218"/>00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.sock&#32;=&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00221"/>00221 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.websocketConnectionObject&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00223"/>00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;UnityEngine.Object.Destroy(this.websocketConnectionObject);
<anchor xml:id="__socket_web_tcp_8cs_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00226"/>00226 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.<link linkend="_namespace_photon_1_1_compression_1a316c25ff520f46923c1acc8c4ab4096ba46a2a41cc6e552044816a2d04634545d">State</link>&#32;=&#32;PhotonSocketState.Disconnected;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00228"/>00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00229"/>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00230"/>00230 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00234"/>00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;PhotonSocketError&#32;Send(<emphasis role="keywordtype">byte</emphasis>[]&#32;data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;length)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00235"/>00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00236"/>00236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.State&#32;!=&#32;PhotonSocketState.Connected)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00237"/>00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00238"/>00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PhotonSocketError.Skipped;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00239"/>00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00240"/>00240 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00241"/>00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(data.Length&#32;&gt;&#32;length)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00245"/>00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;trimmedData&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>[length];
<anchor xml:id="__socket_web_tcp_8cs_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Buffer.BlockCopy(data,&#32;0,&#32;trimmedData,&#32;0,&#32;length);
<anchor xml:id="__socket_web_tcp_8cs_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data&#32;=&#32;trimmedData;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00249"/>00249 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.ReportDebugOfLevel(DebugLevel.ALL))
<anchor xml:id="__socket_web_tcp_8cs_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.Listener.DebugReturn(DebugLevel.ALL,&#32;<emphasis role="stringliteral">&quot;Sending:&#32;&quot;</emphasis>&#32;+&#32;<link linkend="_namespace_photon_1_1_pun_1a5262cc10d8760dc9f60908f7fb91397e">SupportClassPun</link>.ByteArrayToString(data));
<anchor xml:id="__socket_web_tcp_8cs_source_1l00253"/>00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00254"/>00254 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00255"/>00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.sock&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00256"/>00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00257"/>00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.sock.Send(data);
<anchor xml:id="__socket_web_tcp_8cs_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00259"/>00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(Exception&#32;e)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00261"/>00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00262"/>00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.Listener.DebugReturn(DebugLevel.ERROR,&#32;<emphasis role="stringliteral">&quot;Cannot&#32;send&#32;to:&#32;&quot;</emphasis>&#32;+&#32;<emphasis role="keyword">this</emphasis>.ServerAddress&#32;+&#32;<emphasis role="stringliteral">&quot;.&#32;&quot;</emphasis>&#32;+&#32;e.Message);
<anchor xml:id="__socket_web_tcp_8cs_source_1l00263"/>00263 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.HandleException(StatusCode.Exception);
<anchor xml:id="__socket_web_tcp_8cs_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PhotonSocketError.Exception;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00267"/>00267 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PhotonSocketError.Success;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00269"/>00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00270"/>00270 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00271"/>00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;PhotonSocketError&#32;Receive(out&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;data)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00272"/>00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00273"/>00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data&#32;=&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PhotonSocketError.NoData;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00275"/>00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00276"/>00276 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00277"/>00277 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00278"/>00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">internal</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ALL_HEADER_BYTES&#32;=&#32;9;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00279"/>00279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">internal</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;TCP_HEADER_BYTES&#32;=&#32;7;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00280"/>00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">internal</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;MSG_HEADER_BYTES&#32;=&#32;2;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00281"/>00281 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;IEnumerator&#32;ReceiveLoop()
<anchor xml:id="__socket_web_tcp_8cs_source_1l00283"/>00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//this.Listener.DebugReturn(DebugLevel.INFO,&#32;&quot;ReceiveLoop()&quot;);</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.sock&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(this.sock&#32;!=&#32;<emphasis role="keyword">null</emphasis>&#32;&amp;&amp;&#32;!this.sock.Connected&#32;&amp;&amp;&#32;<emphasis role="keyword">this</emphasis>.sock.Error&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00288"/>00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00289"/>00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;yield&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;WaitForRealSeconds(0.1f);
<anchor xml:id="__socket_web_tcp_8cs_source_1l00290"/>00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00291"/>00291 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00292"/>00292 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.sock&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00294"/>00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.sock.Error&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.Listener.DebugReturn(DebugLevel.ERROR,&#32;<emphasis role="stringliteral">&quot;Exiting&#32;receive&#32;thread.&#32;Server:&#32;&quot;</emphasis>&#32;+&#32;<emphasis role="keyword">this</emphasis>.ServerAddress&#32;+&#32;<emphasis role="stringliteral">&quot;:&quot;</emphasis>&#32;+&#32;<emphasis role="keyword">this</emphasis>.ServerPort&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;Error:&#32;&quot;</emphasis>&#32;+&#32;<emphasis role="keyword">this</emphasis>.sock.Error);
<anchor xml:id="__socket_web_tcp_8cs_source_1l00298"/>00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.HandleException(StatusCode.ExceptionOnConnect);
<anchor xml:id="__socket_web_tcp_8cs_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00301"/>00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00302"/>00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;connected</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.ReportDebugOfLevel(DebugLevel.ALL))
<anchor xml:id="__socket_web_tcp_8cs_source_1l00304"/>00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00305"/>00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.Listener.DebugReturn(DebugLevel.ALL,&#32;<emphasis role="stringliteral">&quot;Receiving&#32;by&#32;websocket.&#32;this.State:&#32;&quot;</emphasis>&#32;+&#32;<emphasis role="keyword">this</emphasis>.State);
<anchor xml:id="__socket_web_tcp_8cs_source_1l00306"/>00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00307"/>00307 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00308"/>00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.<link linkend="_namespace_photon_1_1_compression_1a316c25ff520f46923c1acc8c4ab4096ba46a2a41cc6e552044816a2d04634545d">State</link>&#32;=&#32;PhotonSocketState.Connected;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00309"/>00309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.peerBase.OnConnect();
<anchor xml:id="__socket_web_tcp_8cs_source_1l00310"/>00310 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00311"/>00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(this.State&#32;==&#32;PhotonSocketState.Connected)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00312"/>00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.sock&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.sock.Error&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00317"/>00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.Listener.DebugReturn(DebugLevel.ERROR,&#32;<emphasis role="stringliteral">&quot;Exiting&#32;receive&#32;thread&#32;(inside&#32;loop).&#32;Server:&#32;&quot;</emphasis>&#32;+&#32;<emphasis role="keyword">this</emphasis>.ServerAddress&#32;+&#32;<emphasis role="stringliteral">&quot;:&quot;</emphasis>&#32;+&#32;<emphasis role="keyword">this</emphasis>.ServerPort&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;Error:&#32;&quot;</emphasis>&#32;+&#32;<emphasis role="keyword">this</emphasis>.sock.Error);
<anchor xml:id="__socket_web_tcp_8cs_source_1l00318"/>00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.HandleException(StatusCode.ExceptionOnReceive);
<anchor xml:id="__socket_web_tcp_8cs_source_1l00319"/>00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00320"/>00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00321"/>00321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00322"/>00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00323"/>00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;inBuff&#32;=&#32;this.sock.Recv();
<anchor xml:id="__socket_web_tcp_8cs_source_1l00324"/>00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(inBuff&#32;==&#32;<emphasis role="keyword">null</emphasis>&#32;||&#32;inBuff.Length&#32;==&#32;0)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00325"/>00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00326"/>00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;nothing&#32;received.&#32;wait&#32;a&#32;bit,&#32;try&#32;again</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00327"/>00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;yield&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;WaitForRealSeconds(0.02f);
<anchor xml:id="__socket_web_tcp_8cs_source_1l00328"/>00328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__socket_web_tcp_8cs_source_1l00329"/>00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00330"/>00330 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00331"/>00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.ReportDebugOfLevel(DebugLevel.ALL))
<anchor xml:id="__socket_web_tcp_8cs_source_1l00332"/>00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00333"/>00333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.Listener.DebugReturn(DebugLevel.ALL,&#32;<emphasis role="stringliteral">&quot;TCP&#32;&lt;&lt;&#32;&quot;</emphasis>&#32;+&#32;inBuff.Length&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;=&#32;&quot;</emphasis>&#32;+&#32;<link linkend="_namespace_photon_1_1_pun_1a5262cc10d8760dc9f60908f7fb91397e">SupportClassPun</link>.ByteArrayToString(inBuff));
<anchor xml:id="__socket_web_tcp_8cs_source_1l00334"/>00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00335"/>00335 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00336"/>00336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(inBuff.Length&#32;&gt;&#32;0)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00337"/>00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00338"/>00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>
<anchor xml:id="__socket_web_tcp_8cs_source_1l00339"/>00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00340"/>00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.HandleReceivedDatagram(inBuff,&#32;inBuff.Length,&#32;<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__socket_web_tcp_8cs_source_1l00341"/>00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00342"/>00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(Exception&#32;e)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00343"/>00343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00344"/>00344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.State&#32;!=&#32;PhotonSocketState.Disconnecting&#32;&amp;&amp;&#32;<emphasis role="keyword">this</emphasis>.State&#32;!=&#32;PhotonSocketState.Disconnected)
<anchor xml:id="__socket_web_tcp_8cs_source_1l00345"/>00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00346"/>00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.ReportDebugOfLevel(DebugLevel.ERROR))
<anchor xml:id="__socket_web_tcp_8cs_source_1l00347"/>00347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__socket_web_tcp_8cs_source_1l00348"/>00348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.EnqueueDebugReturn(DebugLevel.ERROR,&#32;<emphasis role="stringliteral">&quot;Receive&#32;issue.&#32;State:&#32;&quot;</emphasis>&#32;+&#32;<emphasis role="keyword">this</emphasis>.State&#32;+&#32;<emphasis role="stringliteral">&quot;.&#32;Server:&#32;&apos;&quot;</emphasis>&#32;+&#32;<emphasis role="keyword">this</emphasis>.ServerAddress&#32;+&#32;<emphasis role="stringliteral">&quot;&apos;&#32;Exception:&#32;&quot;</emphasis>&#32;+&#32;e);
<anchor xml:id="__socket_web_tcp_8cs_source_1l00349"/>00349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00350"/>00350 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00351"/>00351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.HandleException(StatusCode.ExceptionOnReceive);
<anchor xml:id="__socket_web_tcp_8cs_source_1l00352"/>00352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00353"/>00353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00354"/>00354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00355"/>00355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00356"/>00356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00357"/>00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00358"/>00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00359"/>00359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00360"/>00360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00361"/>00361 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00362"/>00362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.Disconnect();
<anchor xml:id="__socket_web_tcp_8cs_source_1l00363"/>00363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00364"/>00364 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00365"/>00365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>MonoBehaviourExt&#32;:&#32;MonoBehaviour&#32;{&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00366"/>00366 &#32;&#32;&#32;&#32;}
<anchor xml:id="__socket_web_tcp_8cs_source_1l00367"/>00367 }
<anchor xml:id="__socket_web_tcp_8cs_source_1l00368"/>00368 
<anchor xml:id="__socket_web_tcp_8cs_source_1l00369"/>00369 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
