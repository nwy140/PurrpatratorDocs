<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__states_gui_8cs_source" xml:lang="en-US">
<title>StatesGui.cs</title>
<indexterm><primary>C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUnityNetworking/UtilityScripts/Debugging/StatesGui.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__states_gui_8cs_source_1l00001"/>00001 <emphasis role="comment">//&#32;--------------------------------------------------------------------------------------------------------------------</emphasis>
<anchor xml:id="__states_gui_8cs_source_1l00002"/>00002 <emphasis role="comment">//&#32;&lt;copyright&#32;file=&quot;TabViewManager.cs&quot;&#32;company=&quot;Exit&#32;Games&#32;GmbH&quot;&gt;</emphasis>
<anchor xml:id="__states_gui_8cs_source_1l00003"/>00003 <emphasis role="comment">//&#32;&lt;/copyright&gt;</emphasis>
<anchor xml:id="__states_gui_8cs_source_1l00004"/>00004 <emphasis role="comment">//&#32;&lt;summary&gt;</emphasis>
<anchor xml:id="__states_gui_8cs_source_1l00005"/>00005 <emphasis role="comment">//&#32;&#32;Output&#32;detailed&#32;information&#32;about&#32;Pun&#32;Current&#32;states,&#32;using&#32;the&#32;old&#32;Unity&#32;UI&#32;framework.</emphasis>
<anchor xml:id="__states_gui_8cs_source_1l00006"/>00006 <emphasis role="comment">//&#32;&lt;/summary&gt;</emphasis>
<anchor xml:id="__states_gui_8cs_source_1l00007"/>00007 <emphasis role="comment">//&#32;&lt;author&gt;developer@exitgames.com&lt;/author&gt;</emphasis>
<anchor xml:id="__states_gui_8cs_source_1l00008"/>00008 <emphasis role="comment">//&#32;--------------------------------------------------------------------------------------------------------------------</emphasis>
<anchor xml:id="__states_gui_8cs_source_1l00009"/>00009 
<anchor xml:id="__states_gui_8cs_source_1l00010"/>00010 <emphasis role="keyword">using</emphasis>&#32;UnityEngine;
<anchor xml:id="__states_gui_8cs_source_1l00011"/>00011 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_photon">Photon</link>.<link linkend="_namespace_photon_1_1_realtime">Realtime</link>;
<anchor xml:id="__states_gui_8cs_source_1l00012"/>00012 
<anchor xml:id="__states_gui_8cs_source_1l00013"/>00013 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_photon_1_1_pun_1_1_utility_scripts">Photon.Pun.UtilityScripts</link>
<anchor xml:id="__states_gui_8cs_source_1l00014"/>00014 {
<anchor xml:id="__states_gui_8cs_source_1l00018"/><link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui">00018</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui">StatesGui</link>&#32;:&#32;MonoBehaviour
<anchor xml:id="__states_gui_8cs_source_1l00019"/>00019 &#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00020"/><link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1ab2b4c16920dc0a32af57a30f8487fe47">00020</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Rect&#32;<link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1ab2b4c16920dc0a32af57a30f8487fe47">GuiOffset</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Rect(250,&#32;0,&#32;300,&#32;300);
<anchor xml:id="__states_gui_8cs_source_1l00021"/><link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1a06ba1f5f39c8cf10df033eabb8261212">00021</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1a06ba1f5f39c8cf10df033eabb8261212">DontDestroy</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__states_gui_8cs_source_1l00022"/><link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1a16c973edd2b9102a2f385e0ab3e21619">00022</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1a16c973edd2b9102a2f385e0ab3e21619">ServerTimestamp</link>;
<anchor xml:id="__states_gui_8cs_source_1l00023"/><link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1ac7ba2bae608a5380f71133651a261245">00023</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1ac7ba2bae608a5380f71133651a261245">DetailedConnection</link>;
<anchor xml:id="__states_gui_8cs_source_1l00024"/><link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1ad83846f645f3225730fe1e4c16a2945b">00024</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1ad83846f645f3225730fe1e4c16a2945b">Server</link>;
<anchor xml:id="__states_gui_8cs_source_1l00025"/><link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1ae1ee0faa195884fa8d985a3144dc746f">00025</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1ae1ee0faa195884fa8d985a3144dc746f">AppVersion</link>;
<anchor xml:id="__states_gui_8cs_source_1l00026"/><link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1ad8433e8b02e4a4d11ee62bd63f07eb4a">00026</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1ad8433e8b02e4a4d11ee62bd63f07eb4a">UserId</link>;
<anchor xml:id="__states_gui_8cs_source_1l00027"/><link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1ad0b3253cfa4210d8e898edd23f94a7d1">00027</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1ad0b3253cfa4210d8e898edd23f94a7d1">Room</link>;
<anchor xml:id="__states_gui_8cs_source_1l00028"/><link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1a642ca9f3253dea2253c356843313455c">00028</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1a642ca9f3253dea2253c356843313455c">RoomProps</link>;
<anchor xml:id="__states_gui_8cs_source_1l00029"/><link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1a90cfbdd7b7529c5bc62d998143b94c82">00029</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1a90cfbdd7b7529c5bc62d998143b94c82">EventsIn</link>;
<anchor xml:id="__states_gui_8cs_source_1l00030"/><link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1a08e6d6aea1d9b42207def739636058b9">00030</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1a08e6d6aea1d9b42207def739636058b9">LocalPlayer</link>;
<anchor xml:id="__states_gui_8cs_source_1l00031"/><link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1ad163028c28c91a9a05e4cee2a9bbb9ce">00031</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1ad163028c28c91a9a05e4cee2a9bbb9ce">PlayerProps</link>;
<anchor xml:id="__states_gui_8cs_source_1l00032"/><link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1a410e3162954d3b4d94d0db05489ab0e4">00032</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1a410e3162954d3b4d94d0db05489ab0e4">Others</link>;
<anchor xml:id="__states_gui_8cs_source_1l00033"/><link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1adc207397901a3811e6f1f3f98c7cc843">00033</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1adc207397901a3811e6f1f3f98c7cc843">Buttons</link>;
<anchor xml:id="__states_gui_8cs_source_1l00034"/><link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1a87f211b5bf37c545678f3eacbe4bf749">00034</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1a87f211b5bf37c545678f3eacbe4bf749">ExpectedUsers</link>;
<anchor xml:id="__states_gui_8cs_source_1l00035"/>00035 
<anchor xml:id="__states_gui_8cs_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Rect&#32;GuiRect&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Rect();
<anchor xml:id="__states_gui_8cs_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui">StatesGui</link>&#32;Instance;
<anchor xml:id="__states_gui_8cs_source_1l00038"/>00038 
<anchor xml:id="__states_gui_8cs_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;Awake()
<anchor xml:id="__states_gui_8cs_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Instance&#32;!=&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__states_gui_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DestroyImmediate(this.gameObject);
<anchor xml:id="__states_gui_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__states_gui_8cs_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1a06ba1f5f39c8cf10df033eabb8261212">DontDestroy</link>)
<anchor xml:id="__states_gui_8cs_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Instance&#32;=&#32;<emphasis role="keyword">this</emphasis>;
<anchor xml:id="__states_gui_8cs_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DontDestroyOnLoad(this.gameObject);
<anchor xml:id="__states_gui_8cs_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00051"/>00051 
<anchor xml:id="__states_gui_8cs_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1a90cfbdd7b7529c5bc62d998143b94c82">EventsIn</link>)
<anchor xml:id="__states_gui_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_photon_network">PhotonNetwork</link>.<link linkend="_class_photon_1_1_pun_1_1_photon_network_1a312fc99165f039e31b65bebbafdf6736">NetworkingClient</link>.<link linkend="_class_photon_1_1_realtime_1_1_load_balancing_client_1af904931c4eec2bbc5f34ee8d15d0b807">LoadBalancingPeer</link>.TrafficStatsEnabled&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__states_gui_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00057"/>00057 
<anchor xml:id="__states_gui_8cs_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnDisable()
<anchor xml:id="__states_gui_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1a06ba1f5f39c8cf10df033eabb8261212">DontDestroy</link>&#32;&amp;&amp;&#32;Instance&#32;==&#32;<emphasis role="keyword">this</emphasis>)
<anchor xml:id="__states_gui_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Instance&#32;=&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__states_gui_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00064"/>00064 
<anchor xml:id="__states_gui_8cs_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00066"/>00066 
<anchor xml:id="__states_gui_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;native_width&#32;=&#32;800;
<anchor xml:id="__states_gui_8cs_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;native_height&#32;=&#32;480;
<anchor xml:id="__states_gui_8cs_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnGUI()
<anchor xml:id="__states_gui_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.NetworkingClient&#32;==&#32;<emphasis role="keyword">null</emphasis>&#32;||&#32;PhotonNetwork.NetworkingClient.LoadBalancingPeer&#32;==&#32;<emphasis role="keyword">null</emphasis>&#32;||&#32;PhotonNetwork.NetworkingClient.LoadBalancingPeer.TrafficStatsIncoming&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__states_gui_8cs_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__states_gui_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00075"/>00075 
<anchor xml:id="__states_gui_8cs_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//set&#32;up&#32;scaling</emphasis>
<anchor xml:id="__states_gui_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;rx&#32;=&#32;Screen.width&#32;/&#32;native_width;
<anchor xml:id="__states_gui_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;ry&#32;=&#32;Screen.height&#32;/&#32;native_height;
<anchor xml:id="__states_gui_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GUI.matrix&#32;=&#32;Matrix4x4.TRS&#32;(<emphasis role="keyword">new</emphasis>&#32;Vector3(0,&#32;0,&#32;0),&#32;Quaternion.identity,&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3&#32;(rx,&#32;ry,&#32;1));
<anchor xml:id="__states_gui_8cs_source_1l00080"/>00080 
<anchor xml:id="__states_gui_8cs_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Rect&#32;GuiOffsetRuntime&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Rect(this.GuiOffset);
<anchor xml:id="__states_gui_8cs_source_1l00082"/>00082 
<anchor xml:id="__states_gui_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(GuiOffsetRuntime.x&#32;&lt;&#32;0)
<anchor xml:id="__states_gui_8cs_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GuiOffsetRuntime.x&#32;=&#32;Screen.width&#32;-&#32;GuiOffsetRuntime.width;
<anchor xml:id="__states_gui_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GuiRect.xMin&#32;=&#32;GuiOffsetRuntime.x;
<anchor xml:id="__states_gui_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GuiRect.yMin&#32;=&#32;GuiOffsetRuntime.y;
<anchor xml:id="__states_gui_8cs_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GuiRect.xMax&#32;=&#32;GuiOffsetRuntime.x&#32;+&#32;GuiOffsetRuntime.width;
<anchor xml:id="__states_gui_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GuiRect.yMax&#32;=&#32;GuiOffsetRuntime.y&#32;+&#32;GuiOffsetRuntime.height;
<anchor xml:id="__states_gui_8cs_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GUILayout.BeginArea(GuiRect);
<anchor xml:id="__states_gui_8cs_source_1l00092"/>00092 
<anchor xml:id="__states_gui_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GUILayout.BeginHorizontal();
<anchor xml:id="__states_gui_8cs_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.ServerTimestamp)
<anchor xml:id="__states_gui_8cs_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GUILayout.Label((((<emphasis role="keywordtype">double</emphasis>)PhotonNetwork.ServerTimestamp)&#32;/&#32;1000d).ToString(<emphasis role="stringliteral">&quot;F3&quot;</emphasis>));
<anchor xml:id="__states_gui_8cs_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00098"/>00098 
<anchor xml:id="__states_gui_8cs_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1ad83846f645f3225730fe1e4c16a2945b">Server</link>)
<anchor xml:id="__states_gui_8cs_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GUILayout.Label(PhotonNetwork.ServerAddress&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;+&#32;PhotonNetwork.Server);
<anchor xml:id="__states_gui_8cs_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1ac7ba2bae608a5380f71133651a261245">DetailedConnection</link>)
<anchor xml:id="__states_gui_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GUILayout.Label(PhotonNetwork.NetworkClientState.ToString());
<anchor xml:id="__states_gui_8cs_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1ae1ee0faa195884fa8d985a3144dc746f">AppVersion</link>)
<anchor xml:id="__states_gui_8cs_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GUILayout.Label(PhotonNetwork.NetworkingClient.AppVersion);
<anchor xml:id="__states_gui_8cs_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GUILayout.EndHorizontal();
<anchor xml:id="__states_gui_8cs_source_1l00112"/>00112 
<anchor xml:id="__states_gui_8cs_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GUILayout.BeginHorizontal();
<anchor xml:id="__states_gui_8cs_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1ad8433e8b02e4a4d11ee62bd63f07eb4a">UserId</link>)
<anchor xml:id="__states_gui_8cs_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GUILayout.Label(<emphasis role="stringliteral">&quot;UID:&#32;&quot;</emphasis>&#32;+&#32;((PhotonNetwork.AuthValues&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;?&#32;PhotonNetwork.AuthValues.UserId&#32;:&#32;<emphasis role="stringliteral">&quot;no&#32;UserId&quot;</emphasis>));
<anchor xml:id="__states_gui_8cs_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GUILayout.Label(<emphasis role="stringliteral">&quot;UserId:&quot;</emphasis>&#32;+&#32;PhotonNetwork.LocalPlayer.UserId);
<anchor xml:id="__states_gui_8cs_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GUILayout.EndHorizontal();
<anchor xml:id="__states_gui_8cs_source_1l00120"/>00120 
<anchor xml:id="__states_gui_8cs_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_realtime_1_1_room">Room</link>)
<anchor xml:id="__states_gui_8cs_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.InRoom)
<anchor xml:id="__states_gui_8cs_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GUILayout.Label(this.RoomProps&#32;?&#32;PhotonNetwork.CurrentRoom.ToStringFull()&#32;:&#32;PhotonNetwork.CurrentRoom.ToString());
<anchor xml:id="__states_gui_8cs_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__states_gui_8cs_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GUILayout.Label(<emphasis role="stringliteral">&quot;not&#32;in&#32;room&quot;</emphasis>);
<anchor xml:id="__states_gui_8cs_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00132"/>00132 
<anchor xml:id="__states_gui_8cs_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1a90cfbdd7b7529c5bc62d998143b94c82">EventsIn</link>)
<anchor xml:id="__states_gui_8cs_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;fragments&#32;=&#32;PhotonNetwork.NetworkingClient.LoadBalancingPeer.TrafficStatsIncoming.FragmentCommandCount;
<anchor xml:id="__states_gui_8cs_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GUILayout.Label(<emphasis role="stringliteral">&quot;Events&#32;Received:&#32;&quot;</emphasis>+PhotonNetwork.NetworkingClient.LoadBalancingPeer.TrafficStatsGameLevel.EventCount&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;Fragments:&#32;&quot;</emphasis>+fragments);
<anchor xml:id="__states_gui_8cs_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00138"/>00138 
<anchor xml:id="__states_gui_8cs_source_1l00139"/>00139 
<anchor xml:id="__states_gui_8cs_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.LocalPlayer)
<anchor xml:id="__states_gui_8cs_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GUILayout.Label(PlayerToString(PhotonNetwork.LocalPlayer));
<anchor xml:id="__states_gui_8cs_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1a410e3162954d3b4d94d0db05489ab0e4">Others</link>)
<anchor xml:id="__states_gui_8cs_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(<link linkend="_class_photon_1_1_realtime_1_1_player">Player</link>&#32;player&#32;<emphasis role="keywordflow">in</emphasis>&#32;PhotonNetwork.PlayerListOthers)
<anchor xml:id="__states_gui_8cs_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GUILayout.Label(PlayerToString(player));
<anchor xml:id="__states_gui_8cs_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1a87f211b5bf37c545678f3eacbe4bf749">ExpectedUsers</link>)
<anchor xml:id="__states_gui_8cs_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.InRoom)
<anchor xml:id="__states_gui_8cs_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;countExpected&#32;=&#32;(PhotonNetwork.CurrentRoom.ExpectedUsers&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;?&#32;PhotonNetwork.CurrentRoom.ExpectedUsers.Length&#32;:&#32;0;
<anchor xml:id="__states_gui_8cs_source_1l00156"/>00156 
<anchor xml:id="__states_gui_8cs_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GUILayout.Label(<emphasis role="stringliteral">&quot;Expected:&#32;&quot;</emphasis>&#32;+&#32;countExpected&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&#32;+
<anchor xml:id="__states_gui_8cs_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((PhotonNetwork.CurrentRoom.ExpectedUsers&#32;!=&#32;<emphasis role="keyword">null</emphasis>)&#32;?&#32;<emphasis role="keywordtype">string</emphasis>.Join(<emphasis role="stringliteral">&quot;,&quot;</emphasis>,&#32;PhotonNetwork.CurrentRoom.ExpectedUsers)&#32;:&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)
<anchor xml:id="__states_gui_8cs_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
<anchor xml:id="__states_gui_8cs_source_1l00160"/>00160 
<anchor xml:id="__states_gui_8cs_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00163"/>00163 
<anchor xml:id="__states_gui_8cs_source_1l00164"/>00164 
<anchor xml:id="__states_gui_8cs_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_pun_1_1_utility_scripts_1_1_states_gui_1adc207397901a3811e6f1f3f98c7cc843">Buttons</link>)
<anchor xml:id="__states_gui_8cs_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!PhotonNetwork.IsConnected&#32;&amp;&amp;&#32;GUILayout.Button(<emphasis role="stringliteral">&quot;Connect&quot;</emphasis>))
<anchor xml:id="__states_gui_8cs_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.ConnectUsingSettings();
<anchor xml:id="__states_gui_8cs_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GUILayout.BeginHorizontal();
<anchor xml:id="__states_gui_8cs_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.IsConnected&#32;&amp;&amp;&#32;GUILayout.Button(<emphasis role="stringliteral">&quot;Disconnect&quot;</emphasis>))
<anchor xml:id="__states_gui_8cs_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.Disconnect();
<anchor xml:id="__states_gui_8cs_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.IsConnected&#32;&amp;&amp;&#32;GUILayout.Button(<emphasis role="stringliteral">&quot;Close&#32;Socket&quot;</emphasis>))
<anchor xml:id="__states_gui_8cs_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.NetworkingClient.LoadBalancingPeer.StopThread();
<anchor xml:id="__states_gui_8cs_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GUILayout.EndHorizontal();
<anchor xml:id="__states_gui_8cs_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.IsConnected&#32;&amp;&amp;&#32;PhotonNetwork.InRoom&#32;&amp;&amp;&#32;GUILayout.Button(<emphasis role="stringliteral">&quot;Leave&quot;</emphasis>))
<anchor xml:id="__states_gui_8cs_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.LeaveRoom();
<anchor xml:id="__states_gui_8cs_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.IsConnected&#32;&amp;&amp;&#32;PhotonNetwork.InRoom&#32;&amp;&amp;&#32;PhotonNetwork.CurrentRoom.PlayerTtl&gt;0&#32;&amp;&amp;&#32;GUILayout.Button(<emphasis role="stringliteral">&quot;Leave(abandon)&quot;</emphasis>))
<anchor xml:id="__states_gui_8cs_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.LeaveRoom(<emphasis role="keyword">false</emphasis>);
<anchor xml:id="__states_gui_8cs_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.IsConnected&#32;&amp;&amp;&#32;!PhotonNetwork.InRoom&#32;&amp;&amp;&#32;GUILayout.Button(<emphasis role="stringliteral">&quot;Join&#32;Random&quot;</emphasis>))
<anchor xml:id="__states_gui_8cs_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.JoinRandomRoom();
<anchor xml:id="__states_gui_8cs_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.IsConnected&#32;&amp;&amp;&#32;!PhotonNetwork.InRoom&#32;&amp;&amp;&#32;GUILayout.Button(<emphasis role="stringliteral">&quot;Create&#32;Room&quot;</emphasis>))
<anchor xml:id="__states_gui_8cs_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PhotonNetwork.CreateRoom(<emphasis role="keyword">null</emphasis>);
<anchor xml:id="__states_gui_8cs_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00198"/>00198 
<anchor xml:id="__states_gui_8cs_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GUILayout.EndArea();
<anchor xml:id="__states_gui_8cs_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00201"/>00201 
<anchor xml:id="__states_gui_8cs_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;PlayerToString(<link linkend="_class_photon_1_1_realtime_1_1_player">Player</link>&#32;player)
<anchor xml:id="__states_gui_8cs_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(PhotonNetwork.NetworkingClient&#32;==&#32;<emphasis role="keyword">null</emphasis>)
<anchor xml:id="__states_gui_8cs_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__states_gui_8cs_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.LogError(<emphasis role="stringliteral">&quot;nwp&#32;is&#32;null&quot;</emphasis>);
<anchor xml:id="__states_gui_8cs_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="__states_gui_8cs_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>.Format(<emphasis role="stringliteral">&quot;#{0:00}&#32;&apos;{1}&apos;{5}&#32;{4}{2}&#32;{3}&#32;{6}&quot;</emphasis>,&#32;player.<link linkend="_class_photon_1_1_realtime_1_1_player_1ab06642bd6b1e192ed22a48832cd1b28a">ActorNumber</link>&#32;+&#32;<emphasis role="stringliteral">&quot;/userId:&lt;&quot;</emphasis>&#32;+&#32;player.<link linkend="_class_photon_1_1_realtime_1_1_player_1ac012a3903d9dfd3e36b9a3d5bdf0d5e1">UserId</link>&#32;+&#32;<emphasis role="stringliteral">&quot;&gt;&quot;</emphasis>,&#32;player.<link linkend="_class_photon_1_1_realtime_1_1_player_1adf7350041e899cf8138dc2c31e2bbb62">NickName</link>,&#32;player.<link linkend="_class_photon_1_1_realtime_1_1_player_1a650042ff3d147ed8cd559b6258ce238d">IsMasterClient</link>&#32;?&#32;<emphasis role="stringliteral">&quot;(master)&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;<emphasis role="keyword">this</emphasis>.PlayerProps&#32;?&#32;player.<link linkend="_class_photon_1_1_realtime_1_1_player_1a813cf3bb802339d81c408e022cecaf0f">CustomProperties</link>.ToStringFull()&#32;:&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;(PhotonNetwork.LocalPlayer.ActorNumber&#32;==&#32;player.<link linkend="_class_photon_1_1_realtime_1_1_player_1ab06642bd6b1e192ed22a48832cd1b28a">ActorNumber</link>)&#32;?&#32;<emphasis role="stringliteral">&quot;(you)&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;player.<link linkend="_class_photon_1_1_realtime_1_1_player_1ac012a3903d9dfd3e36b9a3d5bdf0d5e1">UserId</link>,&#32;player.<link linkend="_class_photon_1_1_realtime_1_1_player_1acccf96319b4f5998beef8574f3244795">IsInactive</link>&#32;?&#32;<emphasis role="stringliteral">&quot;&#32;/&#32;Is&#32;Inactive&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="__states_gui_8cs_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00211"/>00211 &#32;&#32;&#32;&#32;}
<anchor xml:id="__states_gui_8cs_source_1l00212"/>00212 }
</programlisting></section>
