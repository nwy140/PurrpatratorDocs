<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__sync_int_attribute_8cs_source" xml:lang="en-US">
<title>SyncIntAttribute.cs</title>
<indexterm><primary>C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/PackObject/Attributes/SyncIntAttribute.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__sync_int_attribute_8cs_source_1l00001"/>00001 <emphasis role="comment">//&#32;---------------------------------------------------------------------------------------------</emphasis>
<anchor xml:id="__sync_int_attribute_8cs_source_1l00002"/>00002 <emphasis role="comment">//&#32;&lt;copyright&gt;PhotonNetwork&#32;Framework&#32;for&#32;Unity&#32;-&#32;Copyright&#32;(C)&#32;2020&#32;Exit&#32;Games&#32;GmbH&lt;/copyright&gt;</emphasis>
<anchor xml:id="__sync_int_attribute_8cs_source_1l00003"/>00003 <emphasis role="comment">//&#32;&lt;author&gt;developer@exitgames.com&lt;/author&gt;</emphasis>
<anchor xml:id="__sync_int_attribute_8cs_source_1l00004"/>00004 <emphasis role="comment">//&#32;---------------------------------------------------------------------------------------------</emphasis>
<anchor xml:id="__sync_int_attribute_8cs_source_1l00005"/>00005 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00006"/>00006 <emphasis role="keyword">using</emphasis>&#32;System;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00007"/>00007 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_photon">Photon</link>.<link linkend="_namespace_photon_1_1_compression">Compression</link>.<link linkend="_namespace_photon_1_1_compression_1_1_internal">Internal</link>;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00008"/>00008 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_photon">Photon</link>.<link linkend="_namespace_photon_1_1_utilities">Utilities</link>;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00009"/>00009 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00010"/>00010 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_photon_1_1_compression">Photon.Compression</link>
<anchor xml:id="__sync_int_attribute_8cs_source_1l00011"/>00011 {
<anchor xml:id="__sync_int_attribute_8cs_source_1l00012"/>00012 &#32;&#32;&#32;&#32;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00013"/><link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute">00013</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute">SyncRangedIntAttribute</link>&#32;:&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute">SyncVarBaseAttribute</link>
<anchor xml:id="__sync_int_attribute_8cs_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;<link linkend="_interface_photon_1_1_compression_1_1_internal_1_1_i_pack_byte">IPackByte</link>,&#32;<link linkend="_interface_photon_1_1_compression_1_1_internal_1_1_i_pack_s_byte">IPackSByte</link>
<anchor xml:id="__sync_int_attribute_8cs_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;<link linkend="_interface_photon_1_1_compression_1_1_internal_1_1_i_pack_u_int16">IPackUInt16</link>,&#32;<link linkend="_interface_photon_1_1_compression_1_1_internal_1_1_i_pack_int16">IPackInt16</link>
<anchor xml:id="__sync_int_attribute_8cs_source_1l00016"/>00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;<link linkend="_interface_photon_1_1_compression_1_1_internal_1_1_i_pack_u_int32">IPackUInt32</link>,&#32;<link linkend="_interface_photon_1_1_compression_1_1_internal_1_1_i_pack_int32">IPackInt32</link>
<anchor xml:id="__sync_int_attribute_8cs_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;<link linkend="_interface_photon_1_1_compression_1_1_internal_1_1_i_pack_u_int64">IPackUInt64</link>,&#32;<link linkend="_interface_photon_1_1_compression_1_1_internal_1_1_i_pack_int64">IPackInt64</link>
<anchor xml:id="__sync_int_attribute_8cs_source_1l00018"/>00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;<link linkend="_interface_photon_1_1_compression_1_1_internal_1_1_i_pack_single">IPackSingle</link>,&#32;<link linkend="_interface_photon_1_1_compression_1_1_internal_1_1_i_pack_double">IPackDouble</link>
<anchor xml:id="__sync_int_attribute_8cs_source_1l00019"/>00019 &#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;min,&#32;max;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;readonly&#32;<emphasis role="keywordtype">int</emphasis>&#32;smallest,&#32;biggest;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;readonly&#32;<link linkend="_namespace_photon_1_1_compression_1aa2627b852658c470ea7b971a4aa31d1f">IndicatorBits</link>&#32;indicatorBits;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00031"/><link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1a173dd9fef50628d30107b8a105990002">00031</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1a173dd9fef50628d30107b8a105990002">SyncRangedIntAttribute</link>(<emphasis role="keywordtype">int</emphasis>&#32;min,&#32;<emphasis role="keywordtype">int</emphasis>&#32;max,&#32;<link linkend="_namespace_photon_1_1_compression_1aa2627b852658c470ea7b971a4aa31d1f">IndicatorBits</link>&#32;indicatorBits&#32;=&#32;<link linkend="_namespace_photon_1_1_compression_1aa2627b852658c470ea7b971a4aa31d1f">IndicatorBits</link>.None,&#32;<link linkend="_namespace_photon_1_1_compression_1a1da0d42c82933128235596213119ee72">KeyRate</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1a2030a3075b5fa018144ce63d9713f92e">keyRate</link>&#32;=&#32;<link linkend="_namespace_photon_1_1_compression_1a1da0d42c82933128235596213119ee72">KeyRate</link>.UseDefault)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.min&#32;=&#32;min;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.max&#32;=&#32;max;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.indicatorBits&#32;=&#32;indicatorBits;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1a2030a3075b5fa018144ce63d9713f92e">keyRate</link>&#32;=&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1a2030a3075b5fa018144ce63d9713f92e">keyRate</link>;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00037"/>00037 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(min&#32;&lt;&#32;max)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;smallest&#32;=&#32;min;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;biggest&#32;=&#32;max;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__sync_int_attribute_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;smallest&#32;=&#32;max;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;biggest&#32;=&#32;min;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint&#32;range&#32;=&#32;(uint)(biggest&#32;-&#32;smallest);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1ae19a110d9ae6f4740e132fc62a0013ca">bitCount</link>&#32;=&#32;range.GetBitsForMaxValue();
<anchor xml:id="__sync_int_attribute_8cs_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00051"/>00051 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00052"/><link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1aa068ecf1da03be933443838791b2cfd0">00052</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">override</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1aa068ecf1da03be933443838791b2cfd0">GetMaxBits</link>(Type&#32;fieldType)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(indicatorBits)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1aa2627b852658c470ea7b971a4aa31d1f">IndicatorBits</link>.IsZero:
<anchor xml:id="__sync_int_attribute_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1ae19a110d9ae6f4740e132fc62a0013ca">bitCount</link>&#32;+&#32;1;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00058"/>00058 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1aa2627b852658c470ea7b971a4aa31d1f">IndicatorBits</link>.IsZeroMidMinMax:
<anchor xml:id="__sync_int_attribute_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1ae19a110d9ae6f4740e132fc62a0013ca">bitCount</link>&#32;+&#32;2;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00061"/>00061 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
<anchor xml:id="__sync_int_attribute_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1ae19a110d9ae6f4740e132fc62a0013ca">bitCount</link>;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00066"/>00066 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00067"/>00067 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Packer/Unpackers</emphasis>
<anchor xml:id="__sync_int_attribute_8cs_source_1l00068"/>00068 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;8&#32;Bits</emphasis>
<anchor xml:id="__sync_int_attribute_8cs_source_1l00070"/>00070 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;Write(<emphasis role="keywordtype">int</emphasis>&#32;value,&#32;<emphasis role="keywordtype">int</emphasis>&#32;prevValue,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frameId,&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;writeFlags)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00073"/>00073 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;clamped&#32;=&#32;(value&#32;&gt;&#32;biggest)&#32;?&#32;biggest&#32;:&#32;(value&#32;&lt;&#32;smallest)&#32;?&#32;smallest&#32;:&#32;value;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00075"/>00075 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1a3686b9cc8b5dec852afda7b425c998fd">IsForced</link>(frameId,&#32;clamped,&#32;prevValue,&#32;writeFlags))
<anchor xml:id="__sync_int_attribute_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.None;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00080"/>00080 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(indicatorBits&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1aa2627b852658c470ea7b971a4aa31d1f">IndicatorBits</link>.IsZero)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(clamped&#32;==&#32;0)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write(0,&#32;ref&#32;bitposition,&#32;1);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.IsComplete;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write(1,&#32;ref&#32;bitposition,&#32;1);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00090"/>00090 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(indicatorBits&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1aa2627b852658c470ea7b971a4aa31d1f">IndicatorBits</link>.IsZeroMidMinMax)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(clamped&#32;==&#32;0)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write(0,&#32;ref&#32;bitposition,&#32;1);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.IsComplete;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(clamped&#32;==&#32;min)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write(1,&#32;ref&#32;bitposition,&#32;1);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.IsComplete;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(clamped&#32;==&#32;max)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write(3,&#32;ref&#32;bitposition,&#32;1);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.IsComplete;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write(3,&#32;ref&#32;bitposition,&#32;1);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1ae19a110d9ae6f4740e132fc62a0013ca">bitCount</link>&#32;&lt;&#32;16)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.Write((ulong)(clamped&#32;-&#32;smallest),&#32;ref&#32;bitposition,&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1ae19a110d9ae6f4740e132fc62a0013ca">bitCount</link>);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__sync_int_attribute_8cs_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer.WritePackedBytes((ulong)(clamped&#32;-&#32;smallest),&#32;ref&#32;bitposition,&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1ae19a110d9ae6f4740e132fc62a0013ca">bitCount</link>);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00115"/>00115 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.IsComplete;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00118"/>00118 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;Read(<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frameId,&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;writeFlags)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00121"/>00121 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(indicatorBits&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1aa2627b852658c470ea7b971a4aa31d1f">IndicatorBits</link>.IsZero)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(buffer.Read(ref&#32;bitposition,&#32;1)&#32;==&#32;0)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(indicatorBits&#32;==&#32;<link linkend="_namespace_photon_1_1_compression_1aa2627b852658c470ea7b971a4aa31d1f">IndicatorBits</link>.IsZeroMidMinMax)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ulong&#32;indicator&#32;=&#32;buffer.Read(ref&#32;bitposition,&#32;2);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(indicator)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0:
<anchor xml:id="__sync_int_attribute_8cs_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;1:
<anchor xml:id="__sync_int_attribute_8cs_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;min;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;2:
<anchor xml:id="__sync_int_attribute_8cs_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;max;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1ae19a110d9ae6f4740e132fc62a0013ca">bitCount</link>&#32;&lt;&#32;16)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>)buffer.Read(ref&#32;bitposition,&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1ae19a110d9ae6f4740e132fc62a0013ca">bitCount</link>)&#32;+&#32;smallest;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__sync_int_attribute_8cs_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>)((long)buffer.ReadPackedBytes(ref&#32;bitposition,&#32;<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1ae19a110d9ae6f4740e132fc62a0013ca">bitCount</link>)&#32;+&#32;smallest);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00145"/>00145 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00147"/>00147 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00148"/><link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1a6185166f43be863b1dfc8b774c72047d">00148</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1a6185166f43be863b1dfc8b774c72047d">Pack</link>(ref&#32;Byte&#32;value,&#32;Byte&#32;prevValue,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frameId,&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;writeFlags)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1a3686b9cc8b5dec852afda7b425c998fd">IsForced</link>(frameId,&#32;value,&#32;prevValue,&#32;writeFlags))
<anchor xml:id="__sync_int_attribute_8cs_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.None;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00152"/>00152 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Write(value,&#32;(<emphasis role="keywordtype">int</emphasis>)prevValue,&#32;buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00155"/><link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1abee681d6cfa564626171aabc66e62c08">00155</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1abee681d6cfa564626171aabc66e62c08">Unpack</link>(ref&#32;Byte&#32;value,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frameId,&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;writeFlags)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value&#32;=&#32;(<link linkend="_namespace_photon_1_1_utilities_1a3bfa5049728e06afa002851a4f694a4faa245c3230debe5c956484ecc6fa93877">Byte</link>)Read(buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.IsComplete;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00160"/>00160 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00161"/><link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1ab9783aebdb60a43356a246134bd15595">00161</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1ab9783aebdb60a43356a246134bd15595">Pack</link>(ref&#32;SByte&#32;value,&#32;SByte&#32;prevValue,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frameId,&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;writeFlags)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1a3686b9cc8b5dec852afda7b425c998fd">IsForced</link>(frameId,&#32;value,&#32;prevValue,&#32;writeFlags))
<anchor xml:id="__sync_int_attribute_8cs_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.None;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00165"/>00165 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Write(value,&#32;(<emphasis role="keywordtype">int</emphasis>)prevValue,&#32;buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00168"/><link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1af813457441a17a784c27fce261ce598b">00168</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1af813457441a17a784c27fce261ce598b">Unpack</link>(ref&#32;SByte&#32;value,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frameId,&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;writeFlags)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value&#32;=&#32;(SByte)Read(buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.IsComplete;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00173"/>00173 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;16&#32;bits</emphasis>
<anchor xml:id="__sync_int_attribute_8cs_source_1l00175"/>00175 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00176"/><link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1a24622d813d7f9cc6a2f50aaedc9ed2b3">00176</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1a24622d813d7f9cc6a2f50aaedc9ed2b3">Pack</link>(ref&#32;UInt16&#32;value,&#32;UInt16&#32;prevValue,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frameId,&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;writeFlags)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1a3686b9cc8b5dec852afda7b425c998fd">IsForced</link>(frameId,&#32;value,&#32;prevValue,&#32;writeFlags))
<anchor xml:id="__sync_int_attribute_8cs_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.None;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00180"/>00180 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Write(value,&#32;(<emphasis role="keywordtype">int</emphasis>)prevValue,&#32;buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00183"/><link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1a4816a5a69e5bfbffe005ba36b7a93db9">00183</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1a4816a5a69e5bfbffe005ba36b7a93db9">Unpack</link>(ref&#32;UInt16&#32;value,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frameId,&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;writeFlags)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value&#32;=&#32;(<link linkend="_namespace_photon_1_1_compression_1ab0293b7438e9a070843df7266c0c5548a8bd950a9d7779b83f5c30046c9aaf1cf">UInt16</link>)Read(buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.IsComplete;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00188"/>00188 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00189"/><link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1a41281677b316844bb555bc50f61886d1">00189</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1a41281677b316844bb555bc50f61886d1">Pack</link>(ref&#32;Int16&#32;value,&#32;Int16&#32;prevValue,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frameId,&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;writeFlags)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1a3686b9cc8b5dec852afda7b425c998fd">IsForced</link>(frameId,&#32;value,&#32;prevValue,&#32;writeFlags))
<anchor xml:id="__sync_int_attribute_8cs_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.None;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00193"/>00193 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Write(value,&#32;(<emphasis role="keywordtype">int</emphasis>)prevValue,&#32;buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00196"/><link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1aeb9028fc369c091e66ddf62516632bbe">00196</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1aeb9028fc369c091e66ddf62516632bbe">Unpack</link>(ref&#32;Int16&#32;value,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frameId,&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;writeFlags)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value&#32;=&#32;(Int16)Read(buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.IsComplete;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00201"/>00201 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;32&#32;bits</emphasis>
<anchor xml:id="__sync_int_attribute_8cs_source_1l00203"/>00203 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00204"/><link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1ab8d86f785b2c5493dd1f7d031e2b194e">00204</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1ab8d86f785b2c5493dd1f7d031e2b194e">Pack</link>(ref&#32;UInt32&#32;value,&#32;UInt32&#32;prevValue,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frameId,&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;writeFlags)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1a3686b9cc8b5dec852afda7b425c998fd">IsForced</link>(frameId,&#32;value,&#32;prevValue,&#32;writeFlags))
<anchor xml:id="__sync_int_attribute_8cs_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.None;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00208"/>00208 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Write((<emphasis role="keywordtype">int</emphasis>)value,&#32;(<emphasis role="keywordtype">int</emphasis>)prevValue,&#32;buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00211"/><link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1a3ebaa2e1320b3e0f42152c216966e7ba">00211</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1a3ebaa2e1320b3e0f42152c216966e7ba">Unpack</link>(ref&#32;UInt32&#32;value,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frameId,&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;writeFlags)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value&#32;=&#32;(<link linkend="_namespace_photon_1_1_compression_1ab0293b7438e9a070843df7266c0c5548ae7956ed7be1c5025a27ed3cb42a396bd">UInt32</link>)Read(buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.IsComplete;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00216"/>00216 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00217"/><link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1ad9b611c8de6539af9dc0fb54d9c828a8">00217</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1ad9b611c8de6539af9dc0fb54d9c828a8">Pack</link>(ref&#32;Int32&#32;value,&#32;Int32&#32;prevValue,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frameId,&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;writeFlags)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00218"/>00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1a3686b9cc8b5dec852afda7b425c998fd">IsForced</link>(frameId,&#32;value,&#32;prevValue,&#32;writeFlags))
<anchor xml:id="__sync_int_attribute_8cs_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.None;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00221"/>00221 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Write(value,&#32;(<emphasis role="keywordtype">int</emphasis>)prevValue,&#32;buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00223"/>00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00224"/><link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1a3c4301ac7a3f6693b6833589969fb726">00224</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1a3c4301ac7a3f6693b6833589969fb726">Unpack</link>(ref&#32;Int32&#32;value,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frameId,&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;writeFlags)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value&#32;=&#32;(Int32)Read(buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.IsComplete;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00228"/>00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00229"/>00229 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;32&#32;bits</emphasis>
<anchor xml:id="__sync_int_attribute_8cs_source_1l00231"/>00231 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00232"/><link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1a0fb68f43d1b9d73a97ed43298ebcc2f6">00232</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1a0fb68f43d1b9d73a97ed43298ebcc2f6">Pack</link>(ref&#32;UInt64&#32;value,&#32;UInt64&#32;prevValue,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frameId,&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;writeFlags)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00233"/>00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00234"/>00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1a3686b9cc8b5dec852afda7b425c998fd">IsForced</link>(frameId,&#32;value,&#32;prevValue,&#32;writeFlags))
<anchor xml:id="__sync_int_attribute_8cs_source_1l00235"/>00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.None;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00236"/>00236 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00237"/>00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Write((<emphasis role="keywordtype">int</emphasis>)value,&#32;(<emphasis role="keywordtype">int</emphasis>)prevValue,&#32;buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00238"/>00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00239"/><link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1abe23a47d6ef1f86b0879aec84cf51a8e">00239</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1abe23a47d6ef1f86b0879aec84cf51a8e">Unpack</link>(ref&#32;UInt64&#32;value,<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frameId,&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;writeFlags)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00240"/>00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00241"/>00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value&#32;=&#32;(<link linkend="_namespace_photon_1_1_compression_1ab0293b7438e9a070843df7266c0c5548aaf71234725f0470ccf993e263a8b820a">UInt64</link>)Read(buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.IsComplete;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00244"/>00244 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00245"/><link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1a821c6dad920940e870fdba90e90d09ec">00245</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1a821c6dad920940e870fdba90e90d09ec">Pack</link>(ref&#32;Int64&#32;value,&#32;Int64&#32;prevValue,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frameId,&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;writeFlags)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1a3686b9cc8b5dec852afda7b425c998fd">IsForced</link>(frameId,&#32;value,&#32;prevValue,&#32;writeFlags))
<anchor xml:id="__sync_int_attribute_8cs_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.None;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00249"/>00249 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Write((<emphasis role="keywordtype">int</emphasis>)value,&#32;(<emphasis role="keywordtype">int</emphasis>)prevValue,&#32;buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00252"/><link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1a4f93e3fe83c6d162a46c586101377e01">00252</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1a4f93e3fe83c6d162a46c586101377e01">Unpack</link>(ref&#32;Int64&#32;value,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frameId,&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;writeFlags)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00253"/>00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00254"/>00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value&#32;=&#32;(Int64)Read(buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00255"/>00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.IsComplete;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00256"/>00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00257"/>00257 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;float</emphasis>
<anchor xml:id="__sync_int_attribute_8cs_source_1l00259"/>00259 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00260"/><link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1ae1877925766032717872a862aebbe80a">00260</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1ae1877925766032717872a862aebbe80a">Pack</link>(ref&#32;Single&#32;value,&#32;Single&#32;prevValue,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frameId,&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;writeFlags)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00261"/>00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00262"/>00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;rounded&#32;=&#32;(int)Math.Round(value);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00263"/>00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;prevrounded&#32;=&#32;(int)Math.Round(prevValue);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00264"/>00264 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1a3686b9cc8b5dec852afda7b425c998fd">IsForced</link>(frameId,&#32;writeFlags)&#32;&amp;&amp;&#32;rounded&#32;==&#32;prevrounded)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.None;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00267"/>00267 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Write(rounded,&#32;prevrounded,&#32;buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00269"/>00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00270"/><link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1ae60efcffb074ac1c5b25ca4c3c213a8d">00270</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1ae60efcffb074ac1c5b25ca4c3c213a8d">Unpack</link>(ref&#32;Single&#32;value,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frameId,&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;writeFlags)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00271"/>00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00272"/>00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value&#32;=&#32;(Single)Read(buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00273"/>00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.IsComplete;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00275"/>00275 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00276"/><link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1abe7981744b1f73c58af074f535ef3f31">00276</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1abe7981744b1f73c58af074f535ef3f31">Pack</link>(ref&#32;Double&#32;value,&#32;Double&#32;prevValue,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frameId,&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;writeFlags)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00277"/>00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00278"/>00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;rounded&#32;=&#32;(int)Math.Round(value);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00279"/>00279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;prevrounded&#32;=&#32;(int)Math.Round(prevValue);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00280"/>00280 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00281"/>00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_photon_1_1_compression_1_1_internal_1_1_sync_var_base_attribute_1a3686b9cc8b5dec852afda7b425c998fd">IsForced</link>(frameId,&#32;writeFlags)&#32;&amp;&amp;&#32;rounded&#32;==&#32;prevrounded)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.None;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00283"/>00283 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Write(rounded,&#32;prevrounded,&#32;buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00286"/><link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1aa2e3ee41c58685769585fdca9a3e11b6">00286</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;<link linkend="_class_photon_1_1_compression_1_1_sync_ranged_int_attribute_1aa2e3ee41c58685769585fdca9a3e11b6">Unpack</link>(ref&#32;Double&#32;value,&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;buffer,&#32;ref&#32;<emphasis role="keywordtype">int</emphasis>&#32;bitposition,&#32;<emphasis role="keywordtype">int</emphasis>&#32;frameId,&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>&#32;writeFlags)
<anchor xml:id="__sync_int_attribute_8cs_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__sync_int_attribute_8cs_source_1l00288"/>00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value&#32;=&#32;(Double)Read(buffer,&#32;ref&#32;bitposition,&#32;frameId,&#32;writeFlags);
<anchor xml:id="__sync_int_attribute_8cs_source_1l00289"/>00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_photon_1_1_compression_1a7b198bd5a8ce576ca5350a00a8d60c9a">SerializationFlags</link>.IsComplete;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00290"/>00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00291"/>00291 
<anchor xml:id="__sync_int_attribute_8cs_source_1l00292"/>00292 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__sync_int_attribute_8cs_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__sync_int_attribute_8cs_source_1l00294"/>00294 &#32;&#32;&#32;&#32;}
<anchor xml:id="__sync_int_attribute_8cs_source_1l00295"/>00295 }
</programlisting></section>
