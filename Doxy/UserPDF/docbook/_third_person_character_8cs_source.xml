<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__third_person_character_8cs_source" xml:lang="en-US">
<title>ThirdPersonCharacter.cs</title>
<indexterm><primary>C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUnityNetworking/Demos/Shared Assets/Scripts/ThirdPersonCharacter.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__third_person_character_8cs_source_1l00001"/>00001 <emphasis role="keyword">using</emphasis>&#32;UnityEngine;
<anchor xml:id="__third_person_character_8cs_source_1l00002"/>00002 
<anchor xml:id="__third_person_character_8cs_source_1l00003"/><link linkend="_namespace_unity_standard_assets">00003</link> <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_unity_standard_assets_1_1_characters_1_1_third_person_1_1_pun_demos">UnityStandardAssets.Characters.ThirdPerson.PunDemos</link>
<anchor xml:id="__third_person_character_8cs_source_1l00004"/>00004 {
<anchor xml:id="__third_person_character_8cs_source_1l00005"/>00005 &#32;&#32;&#32;&#32;[RequireComponent(typeof(Rigidbody))]
<anchor xml:id="__third_person_character_8cs_source_1l00006"/>00006 &#32;&#32;&#32;&#32;[RequireComponent(typeof(CapsuleCollider))]
<anchor xml:id="__third_person_character_8cs_source_1l00007"/>00007 &#32;&#32;&#32;&#32;[RequireComponent(typeof(Animator))]
<anchor xml:id="__third_person_character_8cs_source_1l00008"/><link linkend="_class_unity_standard_assets_1_1_characters_1_1_third_person_1_1_pun_demos_1_1_third_person_character">00008</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_unity_standard_assets_1_1_characters_1_1_third_person_1_1_pun_demos_1_1_third_person_character">ThirdPersonCharacter</link>&#32;:&#32;MonoBehaviour
<anchor xml:id="__third_person_character_8cs_source_1l00009"/>00009 &#32;&#32;&#32;&#32;{
<anchor xml:id="__third_person_character_8cs_source_1l00010"/>00010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[SerializeField]&#32;<emphasis role="keywordtype">float</emphasis>&#32;m_MovingTurnSpeed&#32;=&#32;360;
<anchor xml:id="__third_person_character_8cs_source_1l00011"/>00011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[SerializeField]&#32;<emphasis role="keywordtype">float</emphasis>&#32;m_StationaryTurnSpeed&#32;=&#32;180;
<anchor xml:id="__third_person_character_8cs_source_1l00012"/>00012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[SerializeField]&#32;<emphasis role="keywordtype">float</emphasis>&#32;m_JumpPower&#32;=&#32;12f;
<anchor xml:id="__third_person_character_8cs_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[Range(1f,&#32;4f)][SerializeField]&#32;<emphasis role="keywordtype">float</emphasis>&#32;m_GravityMultiplier&#32;=&#32;2f;
<anchor xml:id="__third_person_character_8cs_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[SerializeField]&#32;<emphasis role="keywordtype">float</emphasis>&#32;m_RunCycleLegOffset&#32;=&#32;0.2f;&#32;<emphasis role="comment">//specific&#32;to&#32;the&#32;character&#32;in&#32;sample&#32;assets,&#32;will&#32;need&#32;to&#32;be&#32;modified&#32;to&#32;work&#32;with&#32;others</emphasis>
<anchor xml:id="__third_person_character_8cs_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[SerializeField]&#32;<emphasis role="keywordtype">float</emphasis>&#32;m_MoveSpeedMultiplier&#32;=&#32;1f;
<anchor xml:id="__third_person_character_8cs_source_1l00016"/>00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[SerializeField]&#32;<emphasis role="keywordtype">float</emphasis>&#32;m_AnimSpeedMultiplier&#32;=&#32;1f;
<anchor xml:id="__third_person_character_8cs_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[SerializeField]&#32;<emphasis role="keywordtype">float</emphasis>&#32;m_GroundCheckDistance&#32;=&#32;0.1f;
<anchor xml:id="__third_person_character_8cs_source_1l00018"/>00018 
<anchor xml:id="__third_person_character_8cs_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Rigidbody&#32;m_Rigidbody;
<anchor xml:id="__third_person_character_8cs_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Animator&#32;m_Animator;
<anchor xml:id="__third_person_character_8cs_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;m_IsGrounded;
<anchor xml:id="__third_person_character_8cs_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;m_OrigGroundCheckDistance;
<anchor xml:id="__third_person_character_8cs_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;k_Half&#32;=&#32;0.5f;
<anchor xml:id="__third_person_character_8cs_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;m_TurnAmount;
<anchor xml:id="__third_person_character_8cs_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;m_ForwardAmount;
<anchor xml:id="__third_person_character_8cs_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;m_GroundNormal;
<anchor xml:id="__third_person_character_8cs_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;m_CapsuleHeight;
<anchor xml:id="__third_person_character_8cs_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;m_CapsuleCenter;
<anchor xml:id="__third_person_character_8cs_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CapsuleCollider&#32;m_Capsule;
<anchor xml:id="__third_person_character_8cs_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;m_Crouching;
<anchor xml:id="__third_person_character_8cs_source_1l00031"/>00031 
<anchor xml:id="__third_person_character_8cs_source_1l00032"/>00032 
<anchor xml:id="__third_person_character_8cs_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;Start()
<anchor xml:id="__third_person_character_8cs_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__third_person_character_8cs_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_Animator&#32;=&#32;GetComponent&lt;Animator&gt;();
<anchor xml:id="__third_person_character_8cs_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_Rigidbody&#32;=&#32;GetComponent&lt;Rigidbody&gt;();
<anchor xml:id="__third_person_character_8cs_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_Capsule&#32;=&#32;GetComponent&lt;CapsuleCollider&gt;();
<anchor xml:id="__third_person_character_8cs_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_CapsuleHeight&#32;=&#32;m_Capsule.height;
<anchor xml:id="__third_person_character_8cs_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_CapsuleCenter&#32;=&#32;m_Capsule.center;
<anchor xml:id="__third_person_character_8cs_source_1l00040"/>00040 
<anchor xml:id="__third_person_character_8cs_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_Rigidbody.constraints&#32;=&#32;RigidbodyConstraints.FreezeRotationX&#32;|&#32;RigidbodyConstraints.FreezeRotationY&#32;|&#32;RigidbodyConstraints.FreezeRotationZ;
<anchor xml:id="__third_person_character_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_OrigGroundCheckDistance&#32;=&#32;m_GroundCheckDistance;
<anchor xml:id="__third_person_character_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__third_person_character_8cs_source_1l00044"/>00044 
<anchor xml:id="__third_person_character_8cs_source_1l00045"/>00045 
<anchor xml:id="__third_person_character_8cs_source_1l00046"/><link linkend="_class_unity_standard_assets_1_1_characters_1_1_third_person_1_1_pun_demos_1_1_third_person_character_1aa79d38e14b9c64856678263f09b2ea5a">00046</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_unity_standard_assets_1_1_characters_1_1_third_person_1_1_pun_demos_1_1_third_person_character_1aa79d38e14b9c64856678263f09b2ea5a">Move</link>(Vector3&#32;move,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;crouch,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;jump)
<anchor xml:id="__third_person_character_8cs_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__third_person_character_8cs_source_1l00048"/>00048 
<anchor xml:id="__third_person_character_8cs_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;convert&#32;the&#32;world&#32;relative&#32;moveInput&#32;vector&#32;into&#32;a&#32;local-relative</emphasis>
<anchor xml:id="__third_person_character_8cs_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;turn&#32;amount&#32;and&#32;forward&#32;amount&#32;required&#32;to&#32;head&#32;in&#32;the&#32;desired</emphasis>
<anchor xml:id="__third_person_character_8cs_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;direction.</emphasis>
<anchor xml:id="__third_person_character_8cs_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(move.magnitude&#32;&gt;&#32;1f)&#32;move.Normalize();
<anchor xml:id="__third_person_character_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;move&#32;=&#32;transform.InverseTransformDirection(move);
<anchor xml:id="__third_person_character_8cs_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CheckGroundStatus();
<anchor xml:id="__third_person_character_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;move&#32;=&#32;Vector3.ProjectOnPlane(move,&#32;m_GroundNormal);
<anchor xml:id="__third_person_character_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_TurnAmount&#32;=&#32;Mathf.Atan2(move.x,&#32;move.z);
<anchor xml:id="__third_person_character_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_ForwardAmount&#32;=&#32;move.z;
<anchor xml:id="__third_person_character_8cs_source_1l00058"/>00058 
<anchor xml:id="__third_person_character_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ApplyExtraTurnRotation();
<anchor xml:id="__third_person_character_8cs_source_1l00060"/>00060 
<anchor xml:id="__third_person_character_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;control&#32;and&#32;velocity&#32;handling&#32;is&#32;different&#32;when&#32;grounded&#32;and&#32;airborne:</emphasis>
<anchor xml:id="__third_person_character_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_IsGrounded)
<anchor xml:id="__third_person_character_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__third_person_character_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HandleGroundedMovement(crouch,&#32;jump);
<anchor xml:id="__third_person_character_8cs_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__third_person_character_8cs_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__third_person_character_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__third_person_character_8cs_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HandleAirborneMovement();
<anchor xml:id="__third_person_character_8cs_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__third_person_character_8cs_source_1l00070"/>00070 
<anchor xml:id="__third_person_character_8cs_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ScaleCapsuleForCrouching(crouch);
<anchor xml:id="__third_person_character_8cs_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PreventStandingInLowHeadroom();
<anchor xml:id="__third_person_character_8cs_source_1l00073"/>00073 
<anchor xml:id="__third_person_character_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;send&#32;input&#32;and&#32;other&#32;state&#32;parameters&#32;to&#32;the&#32;animator</emphasis>
<anchor xml:id="__third_person_character_8cs_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;UpdateAnimator(move);
<anchor xml:id="__third_person_character_8cs_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__third_person_character_8cs_source_1l00077"/>00077 
<anchor xml:id="__third_person_character_8cs_source_1l00078"/>00078 
<anchor xml:id="__third_person_character_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ScaleCapsuleForCrouching(<emphasis role="keywordtype">bool</emphasis>&#32;crouch)
<anchor xml:id="__third_person_character_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__third_person_character_8cs_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_IsGrounded&#32;&amp;&amp;&#32;crouch)
<anchor xml:id="__third_person_character_8cs_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__third_person_character_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_Crouching)&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__third_person_character_8cs_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_Capsule.height&#32;=&#32;m_Capsule.height&#32;/&#32;2f;
<anchor xml:id="__third_person_character_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_Capsule.center&#32;=&#32;m_Capsule.center&#32;/&#32;2f;
<anchor xml:id="__third_person_character_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_Crouching&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__third_person_character_8cs_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__third_person_character_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__third_person_character_8cs_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__third_person_character_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Ray&#32;crouchRay&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Ray(m_Rigidbody.position&#32;+&#32;Vector3.up&#32;*&#32;m_Capsule.radius&#32;*&#32;k_Half,&#32;Vector3.up);
<anchor xml:id="__third_person_character_8cs_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;crouchRayLength&#32;=&#32;m_CapsuleHeight&#32;-&#32;m_Capsule.radius&#32;*&#32;k_Half;
<anchor xml:id="__third_person_character_8cs_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Physics.SphereCast(crouchRay,&#32;m_Capsule.radius&#32;*&#32;k_Half,&#32;crouchRayLength,&#32;Physics.AllLayers,&#32;QueryTriggerInteraction.Ignore))
<anchor xml:id="__third_person_character_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__third_person_character_8cs_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_Crouching&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__third_person_character_8cs_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__third_person_character_8cs_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__third_person_character_8cs_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_Capsule.height&#32;=&#32;m_CapsuleHeight;
<anchor xml:id="__third_person_character_8cs_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_Capsule.center&#32;=&#32;m_CapsuleCenter;
<anchor xml:id="__third_person_character_8cs_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_Crouching&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__third_person_character_8cs_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__third_person_character_8cs_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__third_person_character_8cs_source_1l00102"/>00102 
<anchor xml:id="__third_person_character_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;PreventStandingInLowHeadroom()
<anchor xml:id="__third_person_character_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__third_person_character_8cs_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;prevent&#32;standing&#32;up&#32;in&#32;crouch-only&#32;zones</emphasis>
<anchor xml:id="__third_person_character_8cs_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!m_Crouching)
<anchor xml:id="__third_person_character_8cs_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__third_person_character_8cs_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Ray&#32;crouchRay&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Ray(m_Rigidbody.position&#32;+&#32;Vector3.up&#32;*&#32;m_Capsule.radius&#32;*&#32;k_Half,&#32;Vector3.up);
<anchor xml:id="__third_person_character_8cs_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;crouchRayLength&#32;=&#32;m_CapsuleHeight&#32;-&#32;m_Capsule.radius&#32;*&#32;k_Half;
<anchor xml:id="__third_person_character_8cs_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Physics.SphereCast(crouchRay,&#32;m_Capsule.radius&#32;*&#32;k_Half,&#32;crouchRayLength,&#32;Physics.AllLayers,&#32;QueryTriggerInteraction.Ignore))
<anchor xml:id="__third_person_character_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__third_person_character_8cs_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_Crouching&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__third_person_character_8cs_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__third_person_character_8cs_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__third_person_character_8cs_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__third_person_character_8cs_source_1l00116"/>00116 
<anchor xml:id="__third_person_character_8cs_source_1l00117"/>00117 
<anchor xml:id="__third_person_character_8cs_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;UpdateAnimator(Vector3&#32;move)
<anchor xml:id="__third_person_character_8cs_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__third_person_character_8cs_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;update&#32;the&#32;animator&#32;parameters</emphasis>
<anchor xml:id="__third_person_character_8cs_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_Animator.SetFloat(<emphasis role="stringliteral">&quot;Forward&quot;</emphasis>,&#32;m_ForwardAmount,&#32;0.1f,&#32;Time.deltaTime);
<anchor xml:id="__third_person_character_8cs_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_Animator.SetFloat(<emphasis role="stringliteral">&quot;Turn&quot;</emphasis>,&#32;m_TurnAmount,&#32;0.1f,&#32;Time.deltaTime);
<anchor xml:id="__third_person_character_8cs_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_Animator.SetBool(<emphasis role="stringliteral">&quot;Crouch&quot;</emphasis>,&#32;m_Crouching);
<anchor xml:id="__third_person_character_8cs_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_Animator.SetBool(<emphasis role="stringliteral">&quot;OnGround&quot;</emphasis>,&#32;m_IsGrounded);
<anchor xml:id="__third_person_character_8cs_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!m_IsGrounded)
<anchor xml:id="__third_person_character_8cs_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__third_person_character_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_Animator.SetFloat(<emphasis role="stringliteral">&quot;Jump&quot;</emphasis>,&#32;m_Rigidbody.velocity.y);
<anchor xml:id="__third_person_character_8cs_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__third_person_character_8cs_source_1l00129"/>00129 
<anchor xml:id="__third_person_character_8cs_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;calculate&#32;which&#32;leg&#32;is&#32;behind,&#32;so&#32;as&#32;to&#32;leave&#32;that&#32;leg&#32;trailing&#32;in&#32;the&#32;jump&#32;animation</emphasis>
<anchor xml:id="__third_person_character_8cs_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(This&#32;code&#32;is&#32;reliant&#32;on&#32;the&#32;specific&#32;run&#32;cycle&#32;offset&#32;in&#32;our&#32;animations,</emphasis>
<anchor xml:id="__third_person_character_8cs_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;assumes&#32;one&#32;leg&#32;passes&#32;the&#32;other&#32;at&#32;the&#32;normalized&#32;clip&#32;times&#32;of&#32;0.0&#32;and&#32;0.5)</emphasis>
<anchor xml:id="__third_person_character_8cs_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;runCycle&#32;=
<anchor xml:id="__third_person_character_8cs_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Mathf.Repeat(
<anchor xml:id="__third_person_character_8cs_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_Animator.GetCurrentAnimatorStateInfo(0).normalizedTime&#32;+&#32;m_RunCycleLegOffset,&#32;1);
<anchor xml:id="__third_person_character_8cs_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;jumpLeg&#32;=&#32;(runCycle&#32;&lt;&#32;k_Half&#32;?&#32;1&#32;:&#32;-1)&#32;*&#32;m_ForwardAmount;
<anchor xml:id="__third_person_character_8cs_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_IsGrounded)
<anchor xml:id="__third_person_character_8cs_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__third_person_character_8cs_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_Animator.SetFloat(<emphasis role="stringliteral">&quot;JumpLeg&quot;</emphasis>,&#32;jumpLeg);
<anchor xml:id="__third_person_character_8cs_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__third_person_character_8cs_source_1l00141"/>00141 
<anchor xml:id="__third_person_character_8cs_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;anim&#32;speed&#32;multiplier&#32;allows&#32;the&#32;overall&#32;speed&#32;of&#32;walking/running&#32;to&#32;be&#32;tweaked&#32;in&#32;the&#32;inspector,</emphasis>
<anchor xml:id="__third_person_character_8cs_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;which&#32;affects&#32;the&#32;movement&#32;speed&#32;because&#32;of&#32;the&#32;root&#32;motion.</emphasis>
<anchor xml:id="__third_person_character_8cs_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_IsGrounded&#32;&amp;&amp;&#32;move.magnitude&#32;&gt;&#32;0)
<anchor xml:id="__third_person_character_8cs_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__third_person_character_8cs_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_Animator.speed&#32;=&#32;m_AnimSpeedMultiplier;
<anchor xml:id="__third_person_character_8cs_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__third_person_character_8cs_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__third_person_character_8cs_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__third_person_character_8cs_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;don&apos;t&#32;use&#32;that&#32;while&#32;airborne</emphasis>
<anchor xml:id="__third_person_character_8cs_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_Animator.speed&#32;=&#32;1;
<anchor xml:id="__third_person_character_8cs_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__third_person_character_8cs_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__third_person_character_8cs_source_1l00154"/>00154 
<anchor xml:id="__third_person_character_8cs_source_1l00155"/>00155 
<anchor xml:id="__third_person_character_8cs_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;HandleAirborneMovement()
<anchor xml:id="__third_person_character_8cs_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__third_person_character_8cs_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;apply&#32;extra&#32;gravity&#32;from&#32;multiplier:</emphasis>
<anchor xml:id="__third_person_character_8cs_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;extraGravityForce&#32;=&#32;(Physics.gravity&#32;*&#32;m_GravityMultiplier)&#32;-&#32;Physics.gravity;
<anchor xml:id="__third_person_character_8cs_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_Rigidbody.AddForce(extraGravityForce);
<anchor xml:id="__third_person_character_8cs_source_1l00161"/>00161 
<anchor xml:id="__third_person_character_8cs_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_GroundCheckDistance&#32;=&#32;m_Rigidbody.velocity.y&#32;&lt;&#32;0&#32;?&#32;m_OrigGroundCheckDistance&#32;:&#32;0.01f;
<anchor xml:id="__third_person_character_8cs_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__third_person_character_8cs_source_1l00164"/>00164 
<anchor xml:id="__third_person_character_8cs_source_1l00165"/>00165 
<anchor xml:id="__third_person_character_8cs_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;HandleGroundedMovement(<emphasis role="keywordtype">bool</emphasis>&#32;crouch,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;jump)
<anchor xml:id="__third_person_character_8cs_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__third_person_character_8cs_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;whether&#32;conditions&#32;are&#32;right&#32;to&#32;allow&#32;a&#32;jump:</emphasis>
<anchor xml:id="__third_person_character_8cs_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(jump&#32;&amp;&amp;&#32;!crouch&#32;&amp;&amp;&#32;m_Animator.GetCurrentAnimatorStateInfo(0).IsName(<emphasis role="stringliteral">&quot;Grounded&quot;</emphasis>))
<anchor xml:id="__third_person_character_8cs_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__third_person_character_8cs_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;jump!</emphasis>
<anchor xml:id="__third_person_character_8cs_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_Rigidbody.velocity&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(m_Rigidbody.velocity.x,&#32;m_JumpPower,&#32;m_Rigidbody.velocity.z);
<anchor xml:id="__third_person_character_8cs_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_IsGrounded&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__third_person_character_8cs_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_Animator.applyRootMotion&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__third_person_character_8cs_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_GroundCheckDistance&#32;=&#32;0.1f;
<anchor xml:id="__third_person_character_8cs_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__third_person_character_8cs_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__third_person_character_8cs_source_1l00178"/>00178 
<anchor xml:id="__third_person_character_8cs_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ApplyExtraTurnRotation()
<anchor xml:id="__third_person_character_8cs_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__third_person_character_8cs_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;help&#32;the&#32;character&#32;turn&#32;faster&#32;(this&#32;is&#32;in&#32;addition&#32;to&#32;root&#32;rotation&#32;in&#32;the&#32;animation)</emphasis>
<anchor xml:id="__third_person_character_8cs_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;turnSpeed&#32;=&#32;Mathf.Lerp(m_StationaryTurnSpeed,&#32;m_MovingTurnSpeed,&#32;m_ForwardAmount);
<anchor xml:id="__third_person_character_8cs_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;transform.Rotate(0,&#32;m_TurnAmount&#32;*&#32;turnSpeed&#32;*&#32;Time.deltaTime,&#32;0);
<anchor xml:id="__third_person_character_8cs_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__third_person_character_8cs_source_1l00185"/>00185 
<anchor xml:id="__third_person_character_8cs_source_1l00186"/>00186 
<anchor xml:id="__third_person_character_8cs_source_1l00187"/><link linkend="_class_unity_standard_assets_1_1_characters_1_1_third_person_1_1_pun_demos_1_1_third_person_character_1a37b17cbb8e5f458b72927f5ae703bbfc">00187</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_unity_standard_assets_1_1_characters_1_1_third_person_1_1_pun_demos_1_1_third_person_character_1a37b17cbb8e5f458b72927f5ae703bbfc">OnAnimatorMove</link>()
<anchor xml:id="__third_person_character_8cs_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__third_person_character_8cs_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;implement&#32;this&#32;function&#32;to&#32;override&#32;the&#32;default&#32;root&#32;motion.</emphasis>
<anchor xml:id="__third_person_character_8cs_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;this&#32;allows&#32;us&#32;to&#32;modify&#32;the&#32;positional&#32;speed&#32;before&#32;it&apos;s&#32;applied.</emphasis>
<anchor xml:id="__third_person_character_8cs_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_IsGrounded&#32;&amp;&amp;&#32;Time.deltaTime&#32;&gt;&#32;0)
<anchor xml:id="__third_person_character_8cs_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__third_person_character_8cs_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;v&#32;=&#32;(m_Animator.deltaPosition&#32;*&#32;m_MoveSpeedMultiplier)&#32;/&#32;Time.deltaTime;
<anchor xml:id="__third_person_character_8cs_source_1l00194"/>00194 
<anchor xml:id="__third_person_character_8cs_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;preserve&#32;the&#32;existing&#32;y&#32;part&#32;of&#32;the&#32;current&#32;velocity.</emphasis>
<anchor xml:id="__third_person_character_8cs_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v.y&#32;=&#32;m_Rigidbody.velocity.y;
<anchor xml:id="__third_person_character_8cs_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_Rigidbody.velocity&#32;=&#32;v;
<anchor xml:id="__third_person_character_8cs_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__third_person_character_8cs_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__third_person_character_8cs_source_1l00200"/>00200 
<anchor xml:id="__third_person_character_8cs_source_1l00201"/>00201 
<anchor xml:id="__third_person_character_8cs_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;CheckGroundStatus()
<anchor xml:id="__third_person_character_8cs_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__third_person_character_8cs_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RaycastHit&#32;hitInfo;
<anchor xml:id="__third_person_character_8cs_source_1l00205"/>00205 <emphasis role="preprocessor">#if&#32;UNITY_EDITOR</emphasis>
<anchor xml:id="__third_person_character_8cs_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;helper&#32;to&#32;visualise&#32;the&#32;ground&#32;check&#32;ray&#32;in&#32;the&#32;scene&#32;view</emphasis>
<anchor xml:id="__third_person_character_8cs_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__clones_manager_8cs_1a0100be52d45f14348918ea69ec09f959">Debug</link>.DrawLine(transform.position&#32;+&#32;(Vector3.up&#32;*&#32;0.1f),&#32;transform.position&#32;+&#32;(Vector3.up&#32;*&#32;0.1f)&#32;+&#32;(Vector3.down&#32;*&#32;m_GroundCheckDistance));
<anchor xml:id="__third_person_character_8cs_source_1l00208"/>00208 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="__third_person_character_8cs_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0.1f&#32;is&#32;a&#32;small&#32;offset&#32;to&#32;start&#32;the&#32;ray&#32;from&#32;inside&#32;the&#32;character</emphasis>
<anchor xml:id="__third_person_character_8cs_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;it&#32;is&#32;also&#32;good&#32;to&#32;note&#32;that&#32;the&#32;transform&#32;position&#32;in&#32;the&#32;sample&#32;assets&#32;is&#32;at&#32;the&#32;base&#32;of&#32;the&#32;character</emphasis>
<anchor xml:id="__third_person_character_8cs_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Physics.Raycast(transform.position&#32;+&#32;(Vector3.up&#32;*&#32;0.1f),&#32;Vector3.down,&#32;out&#32;hitInfo,&#32;m_GroundCheckDistance))
<anchor xml:id="__third_person_character_8cs_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__third_person_character_8cs_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_GroundNormal&#32;=&#32;hitInfo.normal;
<anchor xml:id="__third_person_character_8cs_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_IsGrounded&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__third_person_character_8cs_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_Animator.applyRootMotion&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__third_person_character_8cs_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__third_person_character_8cs_source_1l00217"/>00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__third_person_character_8cs_source_1l00218"/>00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__third_person_character_8cs_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_IsGrounded&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__third_person_character_8cs_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_GroundNormal&#32;=&#32;Vector3.up;
<anchor xml:id="__third_person_character_8cs_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_Animator.applyRootMotion&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__third_person_character_8cs_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__third_person_character_8cs_source_1l00223"/>00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__third_person_character_8cs_source_1l00224"/>00224 &#32;&#32;&#32;&#32;}
<anchor xml:id="__third_person_character_8cs_source_1l00225"/>00225 }
</programlisting></section>
