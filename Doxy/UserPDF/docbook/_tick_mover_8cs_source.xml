<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__tick_mover_8cs_source" xml:lang="en-US">
<title>TickMover.cs</title>
<indexterm><primary>C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/Simple/Example/Scripts/TickMover.cs</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__tick_mover_8cs_source_1l00001"/>00001 <emphasis role="keyword">using</emphasis>&#32;System.Collections;
<anchor xml:id="__tick_mover_8cs_source_1l00002"/>00002 <emphasis role="keyword">using</emphasis>&#32;System.Collections.Generic;
<anchor xml:id="__tick_mover_8cs_source_1l00003"/>00003 <emphasis role="keyword">using</emphasis>&#32;UnityEngine;
<anchor xml:id="__tick_mover_8cs_source_1l00004"/>00004 <emphasis role="keyword">using</emphasis>&#32;<link linkend="_namespace_photon">Photon</link>.<link linkend="_namespace_photon_1_1_pun">Pun</link>.<link linkend="_namespace_photon_1_1_pun_1_1_simple">Simple</link>;
<anchor xml:id="__tick_mover_8cs_source_1l00005"/>00005 <emphasis role="keyword">using</emphasis>&#32;UnityEngine.UI;
<anchor xml:id="__tick_mover_8cs_source_1l00006"/>00006 
<anchor xml:id="__tick_mover_8cs_source_1l00007"/><link linkend="_class_tick_mover">00007</link> <emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_tick_mover">TickMover</link>&#32;:&#32;MonoBehaviour,&#32;<link linkend="_interface_photon_1_1_pun_1_1_simple_1_1_i_on_post_simulate">IOnPostSimulate</link>
<anchor xml:id="__tick_mover_8cs_source_1l00008"/>00008 {
<anchor xml:id="__tick_mover_8cs_source_1l00009"/>00009 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Vector3&#32;rotationPerTick;
<anchor xml:id="__tick_mover_8cs_source_1l00010"/>00010 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;TextMesh&#32;tickText;
<anchor xml:id="__tick_mover_8cs_source_1l00011"/>00011 
<anchor xml:id="__tick_mover_8cs_source_1l00012"/>00012 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;this&#32;for&#32;initialization</emphasis>
<anchor xml:id="__tick_mover_8cs_source_1l00013"/>00013 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;Awake&#32;()
<anchor xml:id="__tick_mover_8cs_source_1l00014"/>00014 &#32;&#32;&#32;&#32;{
<anchor xml:id="__tick_mover_8cs_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_net_master_callbacks">NetMasterCallbacks</link>.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_net_master_callbacks_1a0fd2abe1a8a88121c1f2bd6ca7a8a9de">RegisterCallbackInterfaces</link>(<emphasis role="keyword">this</emphasis>,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__tick_mover_8cs_source_1l00016"/>00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rotationPerTick&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3(0,&#32;0,&#32;360f&#32;*&#32;(Time.fixedDeltaTime&#32;*&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_tick_engine_settings">TickEngineSettings</link>.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_tick_engine_settings_1a0e800604b4088ad34ba6994dde26987f">sendEveryXTick</link>));
<anchor xml:id="__tick_mover_8cs_source_1l00017"/>00017 
<anchor xml:id="__tick_mover_8cs_source_1l00018"/>00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tickText&#32;=&#32;GetComponentInChildren&lt;TextMesh&gt;();
<anchor xml:id="__tick_mover_8cs_source_1l00019"/>00019 
<anchor xml:id="__tick_mover_8cs_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!tickText)
<anchor xml:id="__tick_mover_8cs_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tickText&#32;=&#32;GetComponentInParent&lt;TextMesh&gt;();
<anchor xml:id="__tick_mover_8cs_source_1l00022"/>00022 
<anchor xml:id="__tick_mover_8cs_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tickText)
<anchor xml:id="__tick_mover_8cs_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tickText.text&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="__tick_mover_8cs_source_1l00025"/>00025 &#32;&#32;&#32;&#32;}
<anchor xml:id="__tick_mover_8cs_source_1l00026"/>00026 
<anchor xml:id="__tick_mover_8cs_source_1l00027"/>00027 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;OnDestroy()
<anchor xml:id="__tick_mover_8cs_source_1l00028"/>00028 &#32;&#32;&#32;&#32;{
<anchor xml:id="__tick_mover_8cs_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_net_master_callbacks">NetMasterCallbacks</link>.<link linkend="_class_photon_1_1_pun_1_1_simple_1_1_net_master_callbacks_1a0fd2abe1a8a88121c1f2bd6ca7a8a9de">RegisterCallbackInterfaces</link>(<emphasis role="keyword">this</emphasis>,&#32;<emphasis role="keyword">false</emphasis>,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__tick_mover_8cs_source_1l00030"/>00030 &#32;&#32;&#32;&#32;}
<anchor xml:id="__tick_mover_8cs_source_1l00031"/>00031 
<anchor xml:id="__tick_mover_8cs_source_1l00032"/><link linkend="_class_tick_mover_1ab9888e55ccef836d6833a8b943a1c657">00032</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_tick_mover_1ab9888e55ccef836d6833a8b943a1c657">OnPostSimulate</link>(<emphasis role="keywordtype">int</emphasis>&#32;frameId,&#32;<emphasis role="keywordtype">int</emphasis>&#32;subFrameId,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isNetTick)
<anchor xml:id="__tick_mover_8cs_source_1l00033"/>00033 &#32;&#32;&#32;&#32;{
<anchor xml:id="__tick_mover_8cs_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!isNetTick)
<anchor xml:id="__tick_mover_8cs_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="__tick_mover_8cs_source_1l00036"/>00036 
<anchor xml:id="__tick_mover_8cs_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;transform.eulerAngles&#32;-=&#32;rotationPerTick;
<anchor xml:id="__tick_mover_8cs_source_1l00038"/>00038 
<anchor xml:id="__tick_mover_8cs_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tickText)
<anchor xml:id="__tick_mover_8cs_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tickText.text&#32;=&#32;frameId.ToString();
<anchor xml:id="__tick_mover_8cs_source_1l00041"/>00041 &#32;&#32;&#32;&#32;}
<anchor xml:id="__tick_mover_8cs_source_1l00042"/>00042 }
</programlisting></section>
