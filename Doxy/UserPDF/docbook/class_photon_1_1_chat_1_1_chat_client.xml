<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_photon_1_1_chat_1_1_chat_client" xml:lang="en-US">
<title>Photon.Chat.ChatClient Class Reference</title>
<indexterm><primary>Photon.Chat.ChatClient</primary></indexterm>
<para>

<para>Central class of the <link linkend="_namespace_photon">Photon</link> <link linkend="_namespace_photon_1_1_chat">Chat</link> API to connect, handle channels and messages. </para>
 
</para>
Inheritance diagram for Photon.Chat.ChatClient:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_chat_1_1_chat_client__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for Photon.Chat.ChatClient:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_chat_1_1_chat_client__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>bool <link linkend="_class_photon_1_1_chat_1_1_chat_client_1a9319494267567de368f56a737b643634">CanChatInChannel</link> (string channelName)</para>

<para>Checks if this client is ready to publish messages inside a public channel. </para>
</listitem>
            <listitem><para><link linkend="_class_photon_1_1_chat_1_1_chat_client_1ab42b0bad653802e35481597091cc4c57">ChatClient</link> (<link linkend="_interface_photon_1_1_chat_1_1_i_chat_client_listener">IChatClientListener</link> listener, ConnectionProtocol protocol=ConnectionProtocol.Udp)</para>

<para><link linkend="_namespace_photon_1_1_chat">Chat</link> client constructor. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_photon_1_1_chat_1_1_chat_client_1a55a715b3029d0f17c1eb537960c7aa5b">ConnectUsingSettings</link> (<link linkend="_class_photon_1_1_chat_1_1_chat_app_settings">ChatAppSettings</link> appSettings)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_photon_1_1_chat_1_1_chat_client_1a26295d698e9cea35b3e6411623c54ded">Connect</link> (string appId, string appVersion, <link linkend="_class_photon_1_1_chat_1_1_authentication_values">AuthenticationValues</link> authValues)</para>

<para>Connects this client to the <link linkend="_namespace_photon">Photon</link> <link linkend="_namespace_photon_1_1_chat">Chat</link> Cloud service, which will also authenticate the user (and set a UserId). </para>
</listitem>
            <listitem><para>bool <link linkend="_class_photon_1_1_chat_1_1_chat_client_1ae8f7f17505875382395e1cc898c6ca61">ConnectAndSetStatus</link> (string appId, string appVersion, <link linkend="_class_photon_1_1_chat_1_1_authentication_values">AuthenticationValues</link> authValues, int status=<link linkend="_class_photon_1_1_chat_1_1_chat_user_status_1a5dd001713c1f5f001beaf278fa3978bb">ChatUserStatus.Online</link>, object message=null)</para>

<para>Connects this client to the <link linkend="_namespace_photon">Photon</link> <link linkend="_namespace_photon_1_1_chat">Chat</link> Cloud service, which will also authenticate the user (and set a UserId). </para>
</listitem>
            <listitem><para>void <link linkend="_class_photon_1_1_chat_1_1_chat_client_1aa08129ee3ee957c825e0a91a61e97993">Service</link> ()</para>

<para>Must be called regularly to keep connection between client and server alive and to process incoming messages. </para>
</listitem>
            <listitem><para>void <link linkend="_class_photon_1_1_chat_1_1_chat_client_1a9fffdb1eda49e68bf205c17c99d8b217">SendAcksOnly</link> ()</para>

<para>Obsolete: Better use UseBackgroundWorkerForSending and <link linkend="_class_photon_1_1_chat_1_1_chat_client_1aa08129ee3ee957c825e0a91a61e97993">Service()</link>. </para>
</listitem>
            <listitem><para>void <link linkend="_class_photon_1_1_chat_1_1_chat_client_1a9eac49b1efa140099bd95f95df3cc8c2">Disconnect</link> (<link linkend="_namespace_photon_1_1_chat_1ae62af83eed801a62ffbe6bd2fcdd454e">ChatDisconnectCause</link> cause=<link linkend="_namespace_photon_1_1_chat_1ae62af83eed801a62ffbe6bd2fcdd454ea8b87ea0f6c00718bace24e4c4f616d84">ChatDisconnectCause.DisconnectByClientLogic</link>)</para>

<para>Disconnects from the <link linkend="_namespace_photon_1_1_chat">Chat</link> Server by sending a &quot;disconnect command&quot;, which prevents a timeout server-side. </para>
</listitem>
            <listitem><para>void <link linkend="_class_photon_1_1_chat_1_1_chat_client_1a7e3cc4c17ac091055422d6f21dd59818">StopThread</link> ()</para>

<para>Locally shuts down the connection to the <link linkend="_namespace_photon_1_1_chat">Chat</link> Server. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_photon_1_1_chat_1_1_chat_client_1abe55a18070d332c5cad63a884d6a1242">Subscribe</link> (string[] channels)</para>

<para>Sends operation to subscribe to a list of channels by name. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_photon_1_1_chat_1_1_chat_client_1a9443c39e4fde86cbfe6e2687642d3f79">Subscribe</link> (string[] channels, int[] lastMsgIds)</para>

<para>Sends operation to subscribe to a list of channels by name and possibly retrieve messages we did not receive while unsubscribed. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_photon_1_1_chat_1_1_chat_client_1a34ca1fde36c382177f9941c70402e5d7">Subscribe</link> (string[] channels, int messagesFromHistory)</para>

<para>Sends operation to subscribe client to channels, optionally fetching a number of messages from the cache. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_photon_1_1_chat_1_1_chat_client_1a107f60bcc98b3ed19922d3222f7a32b7">Unsubscribe</link> (string[] channels)</para>

<para>Unsubscribes from a list of channels, which stops getting messages from those. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_photon_1_1_chat_1_1_chat_client_1afefc5d6f79d10d6d755669d14eee9c12">PublishMessage</link> (string channelName, object message, bool forwardAsWebhook=false)</para>

<para>Sends a message to a public channel which this client subscribed to. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_photon_1_1_chat_1_1_chat_client_1ad50dca47b8149b0952746af0fe25dad2">SendPrivateMessage</link> (string target, object message, bool forwardAsWebhook=false)</para>

<para>Sends a private message to a single target user. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_photon_1_1_chat_1_1_chat_client_1af667c9375be0cfdd9d626c24f1bb4deb">SendPrivateMessage</link> (string target, object message, bool encrypt, bool forwardAsWebhook)</para>

<para>Sends a private message to a single target user. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_photon_1_1_chat_1_1_chat_client_1a0d5755dc7972e0a68cf51863ff2d6ed1">SetOnlineStatus</link> (int status)</para>

<para>Sets the user&apos;s status without changing your status-message. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_photon_1_1_chat_1_1_chat_client_1ac910645633b86071da9f1bb928b42243">SetOnlineStatus</link> (int status, object message)</para>

<para>Sets the user&apos;s status without changing your status-message. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_photon_1_1_chat_1_1_chat_client_1a03179eafc39116476b13ebd68ae43b58">AddFriends</link> (string[] friends)</para>

<para>Adds friends to a list on the <link linkend="_namespace_photon_1_1_chat">Chat</link> Server which will send you status updates for those. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_photon_1_1_chat_1_1_chat_client_1a9dc5c47ec3c216142d3dcdf6b5a5e1a0">RemoveFriends</link> (string[] friends)</para>

<para>Removes the provided entries from the list on the <link linkend="_namespace_photon_1_1_chat">Chat</link> Server and stops their status updates. </para>
</listitem>
            <listitem><para>string <link linkend="_class_photon_1_1_chat_1_1_chat_client_1ab1feb7b68f1125ecd4a5c1994767a8ce">GetPrivateChannelNameByUser</link> (string userName)</para>

<para>Get you the (locally used) channel name for the chat between this client and another user. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_photon_1_1_chat_1_1_chat_client_1a5dd578fb1b7cbbebcbe28a95187bb85e">TryGetChannel</link> (string channelName, bool isPrivate, out <link linkend="_class_photon_1_1_chat_1_1_chat_channel">ChatChannel</link> channel)</para>

<para>Simplified access to either private or public channels by name. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_photon_1_1_chat_1_1_chat_client_1a5e6a8762289fd86be605bef46d67018d">TryGetChannel</link> (string channelName, out <link linkend="_class_photon_1_1_chat_1_1_chat_channel">ChatChannel</link> channel)</para>

<para>Simplified access to all channels by name. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_photon_1_1_chat_1_1_chat_client_1af9f150401be83cd00b7061fe04a07456">TryGetPrivateChannelByUser</link> (string userId, out <link linkend="_class_photon_1_1_chat_1_1_chat_channel">ChatChannel</link> channel)</para>

<para>Simplified access to private channels by target user. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_photon_1_1_chat_1_1_chat_client_1a0f1ee1bc79ae06278ad7229706441141">Subscribe</link> (string channel, int lastMsgId=0, int messagesFromHistory=-1, <link linkend="_class_photon_1_1_chat_1_1_channel_creation_options">ChannelCreationOptions</link> creationOptions=null)</para>

<para>Subscribe to a single channel and optionally sets its well-know channel properties in case the channel is created. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para>int <link linkend="_class_photon_1_1_chat_1_1_chat_client_1a145da05ec4438bf37eb12603459b66b5">MessageLimit</link></para>

<para>If greater than 0, new channels will limit the number of messages they cache locally. </para>
</listitem>
            <listitem><para>int <link linkend="_class_photon_1_1_chat_1_1_chat_client_1a7097434874100e46b581916dbba5ced1">PrivateChatHistoryLength</link> = -1</para>

<para>Limits the number of messages from private channel histories. </para>
</listitem>
            <listitem><para>readonly Dictionary&lt; string, <link linkend="_class_photon_1_1_chat_1_1_chat_channel">ChatChannel</link> &gt; <link linkend="_class_photon_1_1_chat_1_1_chat_client_1a83932af87d8d3a71deb04cda9c7961c0">PublicChannels</link></para>

<para>Public channels this client is subscribed to. </para>
</listitem>
            <listitem><para>readonly Dictionary&lt; string, <link linkend="_class_photon_1_1_chat_1_1_chat_channel">ChatChannel</link> &gt; <link linkend="_class_photon_1_1_chat_1_1_chat_client_1a595d3160ff5fa3ba96ec5c972ad8528b">PrivateChannels</link></para>

<para>Private channels in which this client has exchanged messages. </para>
</listitem>
            <listitem><para><link linkend="_class_photon_1_1_chat_1_1_chat_peer">ChatPeer</link> <link linkend="_class_photon_1_1_chat_1_1_chat_client_1af8e65e153d95d5ba0378393fd39e1a1e">chatPeer</link> = null</para>

<para>The <link linkend="_namespace_photon_1_1_chat">Chat</link> Peer used by this client. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Attributes    </title>
        <itemizedlist>
            <listitem><para>const int <link linkend="_class_photon_1_1_chat_1_1_chat_client_1ac37c92ca11e06427a261abde9809ce3f">DefaultMaxSubscribers</link> = 100</para>

<para>Default maximum value possible for <link linkend="_class_photon_1_1_chat_1_1_chat_channel_1a458b3f57d85acd8d6c775828bdd78d00">ChatChannel.MaxSubscribers</link> when <link linkend="_class_photon_1_1_chat_1_1_chat_channel_1a67ecb9b6dfcd34e0c761f571a642d8fe">ChatChannel.PublishSubscribers</link> is enabled</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Properties    </title>
        <itemizedlist>
            <listitem><para>bool <link linkend="_class_photon_1_1_chat_1_1_chat_client_1a0299296d1acde3271523056464c0ac11">EnableProtocolFallback</link><computeroutput> [getset]</computeroutput>
</para>

<para>Enables a fallback to another protocol in case a connect to the Name Server fails. </para>
</listitem>
            <listitem><para>string <link linkend="_class_photon_1_1_chat_1_1_chat_client_1acd09983e6a7c5f77386068daea5c1e5e">NameServerAddress</link><computeroutput> [get]</computeroutput>
</para>

<para>The address of last connected Name Server.</para>
</listitem>
            <listitem><para>string <link linkend="_class_photon_1_1_chat_1_1_chat_client_1a586cbe47663c00ba006c4b1fca8973fc">FrontendAddress</link><computeroutput> [get]</computeroutput>
</para>

<para>The address of the actual chat server assigned from NameServer. Public for read only.</para>
</listitem>
            <listitem><para>string <link linkend="_class_photon_1_1_chat_1_1_chat_client_1a44a3e865b745b732bc02213a5388c1ea">ChatRegion</link><computeroutput> [getset]</computeroutput>
</para>

<para>Settable only before you connect! Defaults to &quot;EU&quot;.</para>
</listitem>
            <listitem><para><link linkend="_namespace_photon_1_1_chat_1afc6e9ce1b2729658dbf7d583305c6c81">ChatState</link> <link linkend="_class_photon_1_1_chat_1_1_chat_client_1a433c87f11e648a9b24a44c0bcad5c6b7">State</link><computeroutput> [get]</computeroutput>
</para>

<para>Current state of the <link linkend="_class_photon_1_1_chat_1_1_chat_client">ChatClient</link>. Also use CanChat.</para>
</listitem>
            <listitem><para><link linkend="_namespace_photon_1_1_chat_1ae62af83eed801a62ffbe6bd2fcdd454e">ChatDisconnectCause</link> <link linkend="_class_photon_1_1_chat_1_1_chat_client_1af21defff503f937fec64ac09ec502b50">DisconnectedCause</link><computeroutput> [get]</computeroutput>
</para>

<para>Disconnection cause. Check this inside <link linkend="_interface_photon_1_1_chat_1_1_i_chat_client_listener_1a8d918edf361f65d6ab749da04604b138">IChatClientListener.OnDisconnected</link>. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_photon_1_1_chat_1_1_chat_client_1a24f7e37f078c3ea6d24b032a428e45b5">CanChat</link><computeroutput> [get]</computeroutput>
</para>

<para>Checks if this client is ready to send messages. </para>
</listitem>
            <listitem><para>string <link linkend="_class_photon_1_1_chat_1_1_chat_client_1adc7265160bf8f2697ae12f1fbe027eb3">AppVersion</link><computeroutput> [get]</computeroutput>
</para>

<para>The version of your client. A new version also creates a new &quot;virtual app&quot; to separate players from older client versions.</para>
</listitem>
            <listitem><para>string <link linkend="_class_photon_1_1_chat_1_1_chat_client_1ad90fda837d118577340199e9485bba84">AppId</link><computeroutput> [get]</computeroutput>
</para>

<para>The AppID as assigned from the <link linkend="_namespace_photon">Photon</link> Cloud.</para>
</listitem>
            <listitem><para><link linkend="_class_photon_1_1_chat_1_1_authentication_values">AuthenticationValues</link> <link linkend="_class_photon_1_1_chat_1_1_chat_client_1a2883e249a1a3b89d2058f84105549a61">AuthValues</link><computeroutput> [getset]</computeroutput>
</para>

<para>Settable only before you connect!</para>
</listitem>
            <listitem><para>string? <link linkend="_class_photon_1_1_chat_1_1_chat_client_1abe9eae1c888f8f58a32c4f3298038546">UserId</link><computeroutput> [get]</computeroutput>
</para>

<para>The unique ID of a user/person, stored in AuthValues.UserId. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_photon_1_1_chat_1_1_chat_client_1a9a625d156affdbf51778ebf60a302df6">UseBackgroundWorkerForSending</link><computeroutput> [getset]</computeroutput>
</para>

<para>Defines if a background thread will call SendOutgoingCommands, while your code calls Service to dispatch received messages. </para>
</listitem>
            <listitem><para>ConnectionProtocol? <link linkend="_class_photon_1_1_chat_1_1_chat_client_1a5a7d22fc0ccda0c61fff2cf9ffb798ff">TransportProtocol</link><computeroutput> [getset]</computeroutput>
</para>

<para>Exposes the TransportProtocol of the used PhotonPeer. Settable while not connected.</para>
</listitem>
            <listitem><para>Dictionary&lt; ConnectionProtocol, Type &gt; <link linkend="_class_photon_1_1_chat_1_1_chat_client_1a8a166f5011405a4a85e957ac2d1ea498">SocketImplementationConfig</link><computeroutput> [get]</computeroutput>
</para>

<para>Defines which IPhotonSocket class to use per ConnectionProtocol. </para>
</listitem>
            <listitem><para>DebugLevel <link linkend="_class_photon_1_1_chat_1_1_chat_client_1af4333dbf23b2a561999bf4afc359617b">DebugOut</link><computeroutput> [getset]</computeroutput>
</para>

<para>Sets the level (and amount) of debug output provided by the library. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Central class of the <link linkend="_namespace_photon">Photon</link> <link linkend="_namespace_photon_1_1_chat">Chat</link> API to connect, handle channels and messages. </para>



<para>This class must be instantiated with a <link linkend="_interface_photon_1_1_chat_1_1_i_chat_client_listener">IChatClientListener</link> instance to get the callbacks. Integrate it into your game loop by calling Service regularly. If the target platform supports Threads/Tasks, set UseBackgroundWorkerForSending = true, to let the <link linkend="_class_photon_1_1_chat_1_1_chat_client">ChatClient</link> keep the connection by sending from an independent thread.</para>

<para>Call Connect with an AppId that is setup as <link linkend="_namespace_photon">Photon</link> <link linkend="_namespace_photon_1_1_chat">Chat</link> application. Note: Connect covers multiple messages between this client and the servers. A short workflow will connect you to a chat server.</para>

<para>Each <link linkend="_class_photon_1_1_chat_1_1_chat_client">ChatClient</link> resembles a user in chat (set in Connect). Each user automatically subscribes a channel for incoming private messages and can message any other user privately. Before you publish messages in any non-private channel, that channel must be subscribed.</para>

<para>PublicChannels is a list of subscribed channels, containing messages and senders. PrivateChannels contains all incoming and sent private messages. </para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00041">41</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1ab42b0bad653802e35481597091cc4c57"/><section>
    <title>ChatClient()</title>
<indexterm><primary>ChatClient</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>ChatClient</secondary></indexterm>
<para><computeroutput>Photon.Chat.ChatClient.ChatClient (<link linkend="_interface_photon_1_1_chat_1_1_i_chat_client_listener">IChatClientListener</link> listener, ConnectionProtocol protocol = <computeroutput>ConnectionProtocol.Udp</computeroutput>
)</computeroutput></para><para>

<para><link linkend="_namespace_photon_1_1_chat">Chat</link> client constructor. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>listener</entry><entry>
<para>The chat listener implementation.</para>
</entry>
                            </row>
                            <row>
<entry>protocol</entry><entry>
<para>Connection protocol to be used by this client. Default is ConnectionProtocol.Udp.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00220">220</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1a03179eafc39116476b13ebd68ae43b58"/><section>
    <title>AddFriends()</title>
<indexterm><primary>AddFriends</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>AddFriends</secondary></indexterm>
<para><computeroutput>bool Photon.Chat.ChatClient.AddFriends (string[] friends)</computeroutput></para><para>

<para>Adds friends to a list on the <link linkend="_namespace_photon_1_1_chat">Chat</link> Server which will send you status updates for those. </para>
</para>

<para>AddFriends and RemoveFriends enable clients to handle their friend list in the <link linkend="_namespace_photon">Photon</link> <link linkend="_namespace_photon_1_1_chat">Chat</link> server. Having users on your friends list gives you access to their current online status (and whatever info your client sets in it).</para>

<para>Each user can set an online status consisting of an integer and an arbitrary (serializable) object. The object can be null, Hashtable, object[] or anything else <link linkend="_namespace_photon">Photon</link> can serialize.</para>

<para>The status is published automatically to friends (anyone who set your user ID with AddFriends).</para>

<para><link linkend="_namespace_photon">Photon</link> flushes friends-list when a chat client disconnects, so it has to be set each time. If your community API gives you access to online status already, you could filter and set online friends in AddFriends.</para>

<para>Actual friend relations are not persistent and have to be stored outside of <link linkend="_namespace_photon">Photon</link>. </para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>friends</entry><entry>
<para>Array of friend userIds.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>If the operation could be sent.</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00764">764</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_chat_1_1_chat_client_a03179eafc39116476b13ebd68ae43b58_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1a9319494267567de368f56a737b643634"/><section>
    <title>CanChatInChannel()</title>
<indexterm><primary>CanChatInChannel</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>CanChatInChannel</secondary></indexterm>
<para><computeroutput>bool Photon.Chat.ChatClient.CanChatInChannel (string channelName)</computeroutput></para><para>

<para>Checks if this client is ready to publish messages inside a public channel. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>channelName</entry><entry>
<para>The channel to do the check with.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Whether or not this client is ready to publish messages inside the public channel with the specified channelName.</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00094">94</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1a26295d698e9cea35b3e6411623c54ded"/><section>
    <title>Connect()</title>
<indexterm><primary>Connect</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>Connect</secondary></indexterm>
<para><computeroutput>bool Photon.Chat.ChatClient.Connect (string appId, string appVersion, <link linkend="_class_photon_1_1_chat_1_1_authentication_values">AuthenticationValues</link> authValues)</computeroutput></para><para>

<para>Connects this client to the <link linkend="_namespace_photon">Photon</link> <link linkend="_namespace_photon_1_1_chat">Chat</link> Cloud service, which will also authenticate the user (and set a UserId). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>appId</entry><entry>
<para>Get your <link linkend="_namespace_photon">Photon</link> <link linkend="_namespace_photon_1_1_chat">Chat</link> AppId from the <link xlink:href="https://dashboard.photonengine.com">Dashboard</link>.</para>
</entry>
                            </row>
                            <row>
<entry>appVersion</entry><entry>
<para>Any version string you make up. Used to separate users and variants of your clients, which might be incompatible.</para>
</entry>
                            </row>
                            <row>
<entry>authValues</entry><entry>
<para>Values for authentication. You can leave this null, if you set a UserId before. If you set authValues, they will override any UserId set before.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00269">269</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_chat_1_1_chat_client_a26295d698e9cea35b3e6411623c54ded_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_chat_1_1_chat_client_a26295d698e9cea35b3e6411623c54ded_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1ae8f7f17505875382395e1cc898c6ca61"/><section>
    <title>ConnectAndSetStatus()</title>
<indexterm><primary>ConnectAndSetStatus</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>ConnectAndSetStatus</secondary></indexterm>
<para><computeroutput>bool Photon.Chat.ChatClient.ConnectAndSetStatus (string appId, string appVersion, <link linkend="_class_photon_1_1_chat_1_1_authentication_values">AuthenticationValues</link> authValues, int status = <computeroutput><link linkend="_class_photon_1_1_chat_1_1_chat_user_status_1a5dd001713c1f5f001beaf278fa3978bb">ChatUserStatus.Online</link></computeroutput>
, object message = <computeroutput>null</computeroutput>
)</computeroutput></para><para>

<para>Connects this client to the <link linkend="_namespace_photon">Photon</link> <link linkend="_namespace_photon_1_1_chat">Chat</link> Cloud service, which will also authenticate the user (and set a UserId). </para>
</para>

<para>This also sets an online status once connected. By default it will set user status to <link linkend="_class_photon_1_1_chat_1_1_chat_user_status_1a5dd001713c1f5f001beaf278fa3978bb">ChatUserStatus.Online</link>. See <link linkend="_class_photon_1_1_chat_1_1_chat_client_1ac910645633b86071da9f1bb928b42243">SetOnlineStatus(int,object)</link> for more information. </para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>appId</entry><entry>
<para>Get your <link linkend="_namespace_photon">Photon</link> <link linkend="_namespace_photon_1_1_chat">Chat</link> AppId from the <link xlink:href="https://dashboard.photonengine.com">Dashboard</link>.</para>
</entry>
                            </row>
                            <row>
<entry>appVersion</entry><entry>
<para>Any version string you make up. Used to separate users and variants of your clients, which might be incompatible.</para>
</entry>
                            </row>
                            <row>
<entry>authValues</entry><entry>
<para>Values for authentication. You can leave this null, if you set a UserId before. If you set authValues, they will override any UserId set before.</para>
</entry>
                            </row>
                            <row>
<entry>status</entry><entry>
<para>User status to set when connected. Predefined states are in class <link linkend="_class_photon_1_1_chat_1_1_chat_user_status">ChatUserStatus</link>. Other values can be used at will.</para>
</entry>
                            </row>
                            <row>
<entry>message</entry><entry>
<para>Optional status Also sets a status-message which your friends can get.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>If the connection attempt could be sent at all.</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00329">329</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_chat_1_1_chat_client_ae8f7f17505875382395e1cc898c6ca61_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1a55a715b3029d0f17c1eb537960c7aa5b"/><section>
    <title>ConnectUsingSettings()</title>
<indexterm><primary>ConnectUsingSettings</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>ConnectUsingSettings</secondary></indexterm>
<para><computeroutput>bool Photon.Chat.ChatClient.ConnectUsingSettings (<link linkend="_class_photon_1_1_chat_1_1_chat_app_settings">ChatAppSettings</link> appSettings)</computeroutput></para><para>
Definition at line <link linkend="__chat_client_8cs_source_1l00235">235</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_chat_1_1_chat_client_a55a715b3029d0f17c1eb537960c7aa5b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_chat_1_1_chat_client_a55a715b3029d0f17c1eb537960c7aa5b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1a9eac49b1efa140099bd95f95df3cc8c2"/><section>
    <title>Disconnect()</title>
<indexterm><primary>Disconnect</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>Disconnect</secondary></indexterm>
<para><computeroutput>void Photon.Chat.ChatClient.Disconnect (<link linkend="_namespace_photon_1_1_chat_1ae62af83eed801a62ffbe6bd2fcdd454e">ChatDisconnectCause</link> cause = <computeroutput><link linkend="_namespace_photon_1_1_chat_1ae62af83eed801a62ffbe6bd2fcdd454ea8b87ea0f6c00718bace24e4c4f616d84">ChatDisconnectCause.DisconnectByClientLogic</link></computeroutput>
)</computeroutput></para><para>

<para>Disconnects from the <link linkend="_namespace_photon_1_1_chat">Chat</link> Server by sending a &quot;disconnect command&quot;, which prevents a timeout server-side. </para>
</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00389">389</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_chat_1_1_chat_client_a9eac49b1efa140099bd95f95df3cc8c2_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1ab1feb7b68f1125ecd4a5c1994767a8ce"/><section>
    <title>GetPrivateChannelNameByUser()</title>
<indexterm><primary>GetPrivateChannelNameByUser</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>GetPrivateChannelNameByUser</secondary></indexterm>
<para><computeroutput>string Photon.Chat.ChatClient.GetPrivateChannelNameByUser (string userName)</computeroutput></para><para>

<para>Get you the (locally used) channel name for the chat between this client and another user. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>userName</entry><entry>
<para>Remote user&apos;s name or UserId.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The (locally used) channel name for a private channel.</para>
</formalpara>
</para>

<para>Do not subscribe to this channel. Private channels do not need to be explicitly subscribed to. Use this for debugging purposes mainly.</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00886">886</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_chat_1_1_chat_client_ab1feb7b68f1125ecd4a5c1994767a8ce_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1afefc5d6f79d10d6d755669d14eee9c12"/><section>
    <title>PublishMessage()</title>
<indexterm><primary>PublishMessage</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>PublishMessage</secondary></indexterm>
<para><computeroutput>bool Photon.Chat.ChatClient.PublishMessage (string channelName, object message, bool forwardAsWebhook = <computeroutput>false</computeroutput>
)</computeroutput></para><para>

<para>Sends a message to a public channel which this client subscribed to. </para>
</para>

<para>Before you publish to a channel, you have to subscribe it. Everyone in that channel will get the message. </para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>channelName</entry><entry>
<para>Name of the channel to publish to.</para>
</entry>
                            </row>
                            <row>
<entry>message</entry><entry>
<para>Your message (string or any serializable data).</para>
</entry>
                            </row>
                            <row>
<entry>forwardAsWebhook</entry><entry>
<para>Optionally, public messages can be forwarded as webhooks. Configure webhooks for your <link linkend="_namespace_photon_1_1_chat">Chat</link> app to use this.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>False if the client is not yet ready to send messages.</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00555">555</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_chat_1_1_chat_client_afefc5d6f79d10d6d755669d14eee9c12_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1a9dc5c47ec3c216142d3dcdf6b5a5e1a0"/><section>
    <title>RemoveFriends()</title>
<indexterm><primary>RemoveFriends</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>RemoveFriends</secondary></indexterm>
<para><computeroutput>bool Photon.Chat.ChatClient.RemoveFriends (string[] friends)</computeroutput></para><para>

<para>Removes the provided entries from the list on the <link linkend="_namespace_photon_1_1_chat">Chat</link> Server and stops their status updates. </para>
</para>

<para><link linkend="_namespace_photon">Photon</link> flushes friends-list when a chat client disconnects. Unless you want to remove individual entries, you don&apos;t have to RemoveFriends.</para>

<para>AddFriends and RemoveFriends enable clients to handle their friend list in the <link linkend="_namespace_photon">Photon</link> <link linkend="_namespace_photon_1_1_chat">Chat</link> server. Having users on your friends list gives you access to their current online status (and whatever info your client sets in it).</para>

<para>Each user can set an online status consisting of an integer and an arbitratry (serializable) object. The object can be null, Hashtable, object[] or anything else <link linkend="_namespace_photon">Photon</link> can serialize.</para>

<para>The status is published automatically to friends (anyone who set your user ID with AddFriends).</para>

<para><link linkend="_namespace_photon">Photon</link> flushes friends-list when a chat client disconnects, so it has to be set each time. If your community API gives you access to online status already, you could filter and set online friends in AddFriends.</para>

<para>Actual friend relations are not persistent and have to be stored outside of <link linkend="_namespace_photon">Photon</link>.</para>

<para>AddFriends and RemoveFriends enable clients to handle their friend list in the <link linkend="_namespace_photon">Photon</link> <link linkend="_namespace_photon_1_1_chat">Chat</link> server. Having users on your friends list gives you access to their current online status (and whatever info your client sets in it).</para>

<para>Each user can set an online status consisting of an integer and an arbitratry (serializable) object. The object can be null, Hashtable, object[] or anything else <link linkend="_namespace_photon">Photon</link> can serialize.</para>

<para>The status is published automatically to friends (anyone who set your user ID with AddFriends).</para>

<para>Actual friend relations are not persistent and have to be stored outside of <link linkend="_namespace_photon">Photon</link>. </para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>friends</entry><entry>
<para>Array of friend userIds.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>If the operation could be sent.</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00842">842</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1a9fffdb1eda49e68bf205c17c99d8b217"/><section>
    <title>SendAcksOnly()</title>
<indexterm><primary>SendAcksOnly</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>SendAcksOnly</secondary></indexterm>
<para><computeroutput>void Photon.Chat.ChatClient.SendAcksOnly ( )</computeroutput></para><para>

<para>Obsolete: Better use UseBackgroundWorkerForSending and <link linkend="_class_photon_1_1_chat_1_1_chat_client_1aa08129ee3ee957c825e0a91a61e97993">Service()</link>. </para>
</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00380">380</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1af667c9375be0cfdd9d626c24f1bb4deb"/><section>
    <title>SendPrivateMessage()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>SendPrivateMessage</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>SendPrivateMessage</secondary></indexterm>
<para><computeroutput>bool Photon.Chat.ChatClient.SendPrivateMessage (string target, object message, bool encrypt, bool forwardAsWebhook)</computeroutput></para><para>

<para>Sends a private message to a single target user. </para>
</para>

<para>Calls OnPrivateMessage on the receiving client. </para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>target</entry><entry>
<para>Username to send this message to.</para>
</entry>
                            </row>
                            <row>
<entry>message</entry><entry>
<para>The message you want to send. Can be a simple string or anything serializable.</para>
</entry>
                            </row>
                            <row>
<entry>encrypt</entry><entry>
<para>Optionally, private messages can be encrypted. Encryption is not end-to-end as the server decrypts the message.</para>
</entry>
                            </row>
                            <row>
<entry>forwardAsWebhook</entry><entry>
<para>Optionally, private messages can be forwarded as webhooks. Configure webhooks for your <link linkend="_namespace_photon_1_1_chat">Chat</link> app to use this.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>True if this clients can send the message to the server.</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00618">618</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1ad50dca47b8149b0952746af0fe25dad2"/><section>
    <title>SendPrivateMessage()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>SendPrivateMessage</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>SendPrivateMessage</secondary></indexterm>
<para><computeroutput>bool Photon.Chat.ChatClient.SendPrivateMessage (string target, object message, bool forwardAsWebhook = <computeroutput>false</computeroutput>
)</computeroutput></para><para>

<para>Sends a private message to a single target user. </para>
</para>

<para>Calls OnPrivateMessage on the receiving client. </para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>target</entry><entry>
<para>Username to send this message to.</para>
</entry>
                            </row>
                            <row>
<entry>message</entry><entry>
<para>The message you want to send. Can be a simple string or anything serializable.</para>
</entry>
                            </row>
                            <row>
<entry>forwardAsWebhook</entry><entry>
<para>Optionally, private messages can be forwarded as webhooks. Configure webhooks for your <link linkend="_namespace_photon_1_1_chat">Chat</link> app to use this.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>True if this clients can send the message to the server.</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00605">605</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_chat_1_1_chat_client_ad50dca47b8149b0952746af0fe25dad2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_chat_1_1_chat_client_ad50dca47b8149b0952746af0fe25dad2_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1aa08129ee3ee957c825e0a91a61e97993"/><section>
    <title>Service()</title>
<indexterm><primary>Service</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>Service</secondary></indexterm>
<para><computeroutput>void Photon.Chat.ChatClient.Service ( )</computeroutput></para><para>

<para>Must be called regularly to keep connection between client and server alive and to process incoming messages. </para>
</para>

<para>This method limits the effort it does automatically using the private variable msDeltaForServiceCalls. That value is lower for connect and multiplied by 4 when chat-server connection is ready. </para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00344">344</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_chat_1_1_chat_client_aa08129ee3ee957c825e0a91a61e97993_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1a0d5755dc7972e0a68cf51863ff2d6ed1"/><section>
    <title>SetOnlineStatus()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>SetOnlineStatus</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>SetOnlineStatus</secondary></indexterm>
<para><computeroutput>bool Photon.Chat.ChatClient.SetOnlineStatus (int status)</computeroutput></para><para>

<para>Sets the user&apos;s status without changing your status-message. </para>
</para>

<para>The predefined status values can be found in class <link linkend="_class_photon_1_1_chat_1_1_chat_user_status">ChatUserStatus</link>. State <link linkend="_class_photon_1_1_chat_1_1_chat_user_status_1aa68c785d513085589c97caedd932cad1">ChatUserStatus.Invisible</link> will make you offline for everyone and send no message.</para>

<para>You can set custom values in the status integer. Aside from the pre-configured ones, all states will be considered visible and online. Else, no one would see the custom state.</para>

<para>This overload does not change the set message. </para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>status</entry><entry>
<para>Predefined states are in class <link linkend="_class_photon_1_1_chat_1_1_chat_user_status">ChatUserStatus</link>. Other values can be used at will.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>True if the operation gets called on the server.</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00716">716</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1ac910645633b86071da9f1bb928b42243"/><section>
    <title>SetOnlineStatus()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>SetOnlineStatus</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>SetOnlineStatus</secondary></indexterm>
<para><computeroutput>bool Photon.Chat.ChatClient.SetOnlineStatus (int status, object message)</computeroutput></para><para>

<para>Sets the user&apos;s status without changing your status-message. </para>
</para>

<para>The predefined status values can be found in class <link linkend="_class_photon_1_1_chat_1_1_chat_user_status">ChatUserStatus</link>. State <link linkend="_class_photon_1_1_chat_1_1_chat_user_status_1aa68c785d513085589c97caedd932cad1">ChatUserStatus.Invisible</link> will make you offline for everyone and send no message.</para>

<para>You can set custom values in the status integer. Aside from the pre-configured ones, all states will be considered visible and online. Else, no one would see the custom state.</para>

<para>The message object can be anything that <link linkend="_namespace_photon">Photon</link> can serialize, including (but not limited to) Hashtable, object[] and string. This value is defined by your own conventions. </para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>status</entry><entry>
<para>Predefined states are in class <link linkend="_class_photon_1_1_chat_1_1_chat_user_status">ChatUserStatus</link>. Other values can be used at will.</para>
</entry>
                            </row>
                            <row>
<entry>message</entry><entry>
<para>Also sets a status-message which your friends can get.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>True if the operation gets called on the server.</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00735">735</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1a7e3cc4c17ac091055422d6f21dd59818"/><section>
    <title>StopThread()</title>
<indexterm><primary>StopThread</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>StopThread</secondary></indexterm>
<para><computeroutput>void Photon.Chat.ChatClient.StopThread ( )</computeroutput></para><para>

<para>Locally shuts down the connection to the <link linkend="_namespace_photon_1_1_chat">Chat</link> Server. </para>
</para>

<para>This resets states locally but the server will have to timeout this peer. </para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00402">402</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1a0f1ee1bc79ae06278ad7229706441141"/><section>
    <title>Subscribe()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>Subscribe</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>Subscribe</secondary></indexterm>
<para><computeroutput>bool Photon.Chat.ChatClient.Subscribe (string channel, int lastMsgId = <computeroutput>0</computeroutput>
, int messagesFromHistory = <computeroutput>-1</computeroutput>
, <link linkend="_class_photon_1_1_chat_1_1_channel_creation_options">ChannelCreationOptions</link> creationOptions = <computeroutput>null</computeroutput>
)</computeroutput></para><para>

<para>Subscribe to a single channel and optionally sets its well-know channel properties in case the channel is created. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>channel</entry><entry>
<para>name of the channel to subscribe to</para>
</entry>
                            </row>
                            <row>
<entry>lastMsgId</entry><entry>
<para>ID of the last received message from this channel when re subscribing to receive only missed messages, default is 0</para>
</entry>
                            </row>
                            <row>
<entry>messagesFromHistory</entry><entry>
<para>how many missed messages to receive from history, default is -1 (available history). 0 will get you no items. Positive values are capped by a server side limit.</para>
</entry>
                            </row>
                            <row>
<entry>creationOptions</entry><entry>
<para>options to be used in case the channel to subscribe to will be created.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l01586">1586</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1abe55a18070d332c5cad63a884d6a1242"/><section>
    <title>Subscribe()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>Subscribe</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>Subscribe</secondary></indexterm>
<para><computeroutput>bool Photon.Chat.ChatClient.Subscribe (string[] channels)</computeroutput></para><para>

<para>Sends operation to subscribe to a list of channels by name. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>channels</entry><entry>
<para>List of channels to subscribe to. Avoid null or empty values.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>If the operation could be sent at all (Example: Fails if not connected to <link linkend="_namespace_photon_1_1_chat">Chat</link> Server).</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00413">413</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_chat_1_1_chat_client_abe55a18070d332c5cad63a884d6a1242_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_chat_1_1_chat_client_abe55a18070d332c5cad63a884d6a1242_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1a34ca1fde36c382177f9941c70402e5d7"/><section>
    <title>Subscribe()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>Subscribe</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>Subscribe</secondary></indexterm>
<para><computeroutput>bool Photon.Chat.ChatClient.Subscribe (string[] channels, int messagesFromHistory)</computeroutput></para><para>

<para>Sends operation to subscribe client to channels, optionally fetching a number of messages from the cache. </para>
</para>

<para>Subscribes channels will forward new messages to this user. Use PublishMessage to do so. The messages cache is limited but can be useful to get into ongoing conversations, if that&apos;s needed. </para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>channels</entry><entry>
<para>List of channels to subscribe to. Avoid null or empty values.</para>
</entry>
                            </row>
                            <row>
<entry>messagesFromHistory</entry><entry>
<para>0: no history. 1 and higher: number of messages in history. -1: all available history.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>If the operation could be sent at all (Example: Fails if not connected to <link linkend="_namespace_photon_1_1_chat">Chat</link> Server).</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00485">485</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1a9443c39e4fde86cbfe6e2687642d3f79"/><section>
    <title>Subscribe()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>Subscribe</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>Subscribe</secondary></indexterm>
<para><computeroutput>bool Photon.Chat.ChatClient.Subscribe (string[] channels, int[] lastMsgIds)</computeroutput></para><para>

<para>Sends operation to subscribe to a list of channels by name and possibly retrieve messages we did not receive while unsubscribed. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>channels</entry><entry>
<para>List of channels to subscribe to. Avoid null or empty values.</para>
</entry>
                            </row>
                            <row>
<entry>lastMsgIds</entry><entry>
<para>ID of last message received per channel. Useful when re subscribing to receive only messages we missed.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>If the operation could be sent at all (Example: Fails if not connected to <link linkend="_namespace_photon_1_1_chat">Chat</link> Server).</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00424">424</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1a5dd578fb1b7cbbebcbe28a95187bb85e"/><section>
    <title>TryGetChannel()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>TryGetChannel</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>TryGetChannel</secondary></indexterm>
<para><computeroutput>bool Photon.Chat.ChatClient.TryGetChannel (string channelName, bool isPrivate, out <link linkend="_class_photon_1_1_chat_1_1_chat_channel">ChatChannel</link> channel)</computeroutput></para><para>

<para>Simplified access to either private or public channels by name. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>channelName</entry><entry>
<para>Name of the channel to get. For private channels, the channel-name is composed of both user&apos;s names.</para>
</entry>
                            </row>
                            <row>
<entry>isPrivate</entry><entry>
<para>Define if you expect a private or public channel.</para>
</entry>
                            </row>
                            <row>
<entry>channel</entry><entry>
<para>Out parameter gives you the found channel, if any.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>True if the channel was found.</para>
</formalpara>
</para>

<para>Public channels exist only when subscribed to them. Private channels exist only when at least one message is exchanged with the target user privately.</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00900">900</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_chat_1_1_chat_client_a5dd578fb1b7cbbebcbe28a95187bb85e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1a5e6a8762289fd86be605bef46d67018d"/><section>
    <title>TryGetChannel()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>TryGetChannel</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>TryGetChannel</secondary></indexterm>
<para><computeroutput>bool Photon.Chat.ChatClient.TryGetChannel (string channelName, out <link linkend="_class_photon_1_1_chat_1_1_chat_channel">ChatChannel</link> channel)</computeroutput></para><para>

<para>Simplified access to all channels by name. </para>
</para>

<para>Checks public channels first, then private ones. </para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>channelName</entry><entry>
<para>Name of the channel to get.</para>
</entry>
                            </row>
                            <row>
<entry>channel</entry><entry>
<para>Out parameter gives you the found channel, if any.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>True if the channel was found.</para>
</formalpara>
</para>

<para>Public channels exist only when subscribed to them. Private channels exist only when at least one message is exchanged with the target user privately.</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00920">920</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1af9f150401be83cd00b7061fe04a07456"/><section>
    <title>TryGetPrivateChannelByUser()</title>
<indexterm><primary>TryGetPrivateChannelByUser</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>TryGetPrivateChannelByUser</secondary></indexterm>
<para><computeroutput>bool Photon.Chat.ChatClient.TryGetPrivateChannelByUser (string userId, out <link linkend="_class_photon_1_1_chat_1_1_chat_channel">ChatChannel</link> channel)</computeroutput></para><para>

<para>Simplified access to private channels by target user. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>userId</entry><entry>
<para>UserId of the target user in the private channel.</para>
</entry>
                            </row>
                            <row>
<entry>channel</entry><entry>
<para>Out parameter gives you the found channel, if any.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>True if the channel was found.</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00936">936</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_chat_1_1_chat_client_af9f150401be83cd00b7061fe04a07456_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1a107f60bcc98b3ed19922d3222f7a32b7"/><section>
    <title>Unsubscribe()</title>
<indexterm><primary>Unsubscribe</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>Unsubscribe</secondary></indexterm>
<para><computeroutput>bool Photon.Chat.ChatClient.Unsubscribe (string[] channels)</computeroutput></para><para>

<para>Unsubscribes from a list of channels, which stops getting messages from those. </para>
</para>

<para>The client will remove these channels from the PublicChannels dictionary once the server sent a response to this request.</para>

<para>The request will be sent to the server and <link linkend="_interface_photon_1_1_chat_1_1_i_chat_client_listener_1a54c546b010d3578316532d0af31ee183">IChatClientListener.OnUnsubscribed</link> gets called when the server actually removed the channel subscriptions.</para>

<para>Unsubscribe will fail if you include null or empty channel names. </para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>channels</entry><entry>
<para>Names of channels to unsubscribe.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>False, if not connected to a chat server.</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00519">519</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1af8e65e153d95d5ba0378393fd39e1a1e"/><section>
    <title>chatPeer</title>
<indexterm><primary>chatPeer</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>chatPeer</secondary></indexterm>
<para><computeroutput><link linkend="_class_photon_1_1_chat_1_1_chat_peer">ChatPeer</link> Photon.Chat.ChatClient.chatPeer = null</computeroutput></para><para>

<para>The <link linkend="_namespace_photon_1_1_chat">Chat</link> Peer used by this client. </para>
</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00164">164</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1ac37c92ca11e06427a261abde9809ce3f"/><section>
    <title>DefaultMaxSubscribers</title>
<indexterm><primary>DefaultMaxSubscribers</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>DefaultMaxSubscribers</secondary></indexterm>
<para><computeroutput>const int Photon.Chat.ChatClient.DefaultMaxSubscribers = 100<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Default maximum value possible for <link linkend="_class_photon_1_1_chat_1_1_chat_channel_1a458b3f57d85acd8d6c775828bdd78d00">ChatChannel.MaxSubscribers</link> when <link linkend="_class_photon_1_1_chat_1_1_chat_channel_1a67ecb9b6dfcd34e0c761f571a642d8fe">ChatChannel.PublishSubscribers</link> is enabled</para>
</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00046">46</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1a145da05ec4438bf37eb12603459b66b5"/><section>
    <title>MessageLimit</title>
<indexterm><primary>MessageLimit</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>MessageLimit</secondary></indexterm>
<para><computeroutput>int Photon.Chat.ChatClient.MessageLimit</computeroutput></para><para>

<para>If greater than 0, new channels will limit the number of messages they cache locally. </para>
</para>

<para>This can be useful to limit the amount of memory used by chats. You can set a MessageLimit per channel but this value gets applied to new ones.</para>

<para>Note: Changing this value, does not affect ChatChannels that are already in use! </para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00142">142</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1a595d3160ff5fa3ba96ec5c972ad8528b"/><section>
    <title>PrivateChannels</title>
<indexterm><primary>PrivateChannels</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>PrivateChannels</secondary></indexterm>
<para><computeroutput>readonly Dictionary&lt;string, <link linkend="_class_photon_1_1_chat_1_1_chat_channel">ChatChannel</link>&gt; Photon.Chat.ChatClient.PrivateChannels</computeroutput></para><para>

<para>Private channels in which this client has exchanged messages. </para>
</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00156">156</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1a7097434874100e46b581916dbba5ced1"/><section>
    <title>PrivateChatHistoryLength</title>
<indexterm><primary>PrivateChatHistoryLength</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>PrivateChatHistoryLength</secondary></indexterm>
<para><computeroutput>int Photon.Chat.ChatClient.PrivateChatHistoryLength = -1</computeroutput></para><para>

<para>Limits the number of messages from private channel histories. </para>
</para>

<para>This is applied to all private channels on reconnect, as there is no explicit re-joining private channels.
<literallayout>&#160;&#xa;</literallayout>
 Default is -1, which gets available messages up to a maximum set by the server.
<literallayout>&#160;&#xa;</literallayout>
 A value of 0 gets you zero messages.
<literallayout>&#160;&#xa;</literallayout>
 The server&apos;s limit of messages may be lower. If so, the server&apos;s value will overrule this.
<literallayout>&#160;&#xa;</literallayout>
 </para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00151">151</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1a83932af87d8d3a71deb04cda9c7961c0"/><section>
    <title>PublicChannels</title>
<indexterm><primary>PublicChannels</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>PublicChannels</secondary></indexterm>
<para><computeroutput>readonly Dictionary&lt;string, <link linkend="_class_photon_1_1_chat_1_1_chat_channel">ChatChannel</link>&gt; Photon.Chat.ChatClient.PublicChannels</computeroutput></para><para>

<para>Public channels this client is subscribed to. </para>
</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00154">154</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
</section>
<section>
<title>Property Documentation</title>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1ad90fda837d118577340199e9485bba84"/><section>
    <title>AppId</title>
<indexterm><primary>AppId</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>AppId</secondary></indexterm>
<para><computeroutput>string Photon.Chat.ChatClient.AppId<computeroutput>[get]</computeroutput></computeroutput></para><para>

<para>The AppID as assigned from the <link linkend="_namespace_photon">Photon</link> Cloud.</para>
</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00108">108</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1adc7265160bf8f2697ae12f1fbe027eb3"/><section>
    <title>AppVersion</title>
<indexterm><primary>AppVersion</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>AppVersion</secondary></indexterm>
<para><computeroutput>string Photon.Chat.ChatClient.AppVersion<computeroutput>[get]</computeroutput></computeroutput></para><para>

<para>The version of your client. A new version also creates a new &quot;virtual app&quot; to separate players from older client versions.</para>
</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00105">105</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1a2883e249a1a3b89d2058f84105549a61"/><section>
    <title>AuthValues</title>
<indexterm><primary>AuthValues</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>AuthValues</secondary></indexterm>
<para><computeroutput><link linkend="_class_photon_1_1_chat_1_1_authentication_values">AuthenticationValues</link> Photon.Chat.ChatClient.AuthValues<computeroutput>[get]</computeroutput>, <computeroutput>[set]</computeroutput></computeroutput></para><para>

<para>Settable only before you connect!</para>
</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00112">112</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1a24f7e37f078c3ea6d24b032a428e45b5"/><section>
    <title>CanChat</title>
<indexterm><primary>CanChat</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>CanChat</secondary></indexterm>
<para><computeroutput>bool Photon.Chat.ChatClient.CanChat<computeroutput>[get]</computeroutput></computeroutput></para><para>

<para>Checks if this client is ready to send messages. </para>
</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00085">85</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1a44a3e865b745b732bc02213a5388c1ea"/><section>
    <title>ChatRegion</title>
<indexterm><primary>ChatRegion</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>ChatRegion</secondary></indexterm>
<para><computeroutput>string Photon.Chat.ChatClient.ChatRegion<computeroutput>[get]</computeroutput>, <computeroutput>[set]</computeroutput></computeroutput></para><para>

<para>Settable only before you connect! Defaults to &quot;EU&quot;.</para>
</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00071">71</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1af4333dbf23b2a561999bf4afc359617b"/><section>
    <title>DebugOut</title>
<indexterm><primary>DebugOut</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>DebugOut</secondary></indexterm>
<para><computeroutput>DebugLevel Photon.Chat.ChatClient.DebugOut<computeroutput>[get]</computeroutput>, <computeroutput>[set]</computeroutput></computeroutput></para><para>

<para>Sets the level (and amount) of debug output provided by the library. </para>
</para>

<para>This affects the callbacks to <link linkend="_interface_photon_1_1_chat_1_1_i_chat_client_listener_1a4b905d8308b42d3da45d11193f928983">IChatClientListener.DebugReturn</link>. Default Level: Error. </para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00954">954</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1af21defff503f937fec64ac09ec502b50"/><section>
    <title>DisconnectedCause</title>
<indexterm><primary>DisconnectedCause</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>DisconnectedCause</secondary></indexterm>
<para><computeroutput><link linkend="_namespace_photon_1_1_chat_1ae62af83eed801a62ffbe6bd2fcdd454e">ChatDisconnectCause</link> Photon.Chat.ChatClient.DisconnectedCause<computeroutput>[get]</computeroutput></computeroutput></para><para>

<para>Disconnection cause. Check this inside <link linkend="_interface_photon_1_1_chat_1_1_i_chat_client_listener_1a8d918edf361f65d6ab749da04604b138">IChatClientListener.OnDisconnected</link>. </para>
</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00081">81</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1a0299296d1acde3271523056464c0ac11"/><section>
    <title>EnableProtocolFallback</title>
<indexterm><primary>EnableProtocolFallback</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>EnableProtocolFallback</secondary></indexterm>
<para><computeroutput>bool Photon.Chat.ChatClient.EnableProtocolFallback<computeroutput>[get]</computeroutput>, <computeroutput>[set]</computeroutput></computeroutput></para><para>

<para>Enables a fallback to another protocol in case a connect to the Name Server fails. </para>
</para>

<para>When connecting to the Name Server fails for a first time, the client will select an alternative network protocol and re-try to connect.</para>

<para>The fallback will use the default Name Server port as defined by ProtocolToNameServerPort.</para>

<para>The fallback for TCP is UDP. All other protocols fallback to TCP. </para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00059">59</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1a586cbe47663c00ba006c4b1fca8973fc"/><section>
    <title>FrontendAddress</title>
<indexterm><primary>FrontendAddress</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>FrontendAddress</secondary></indexterm>
<para><computeroutput>string Photon.Chat.ChatClient.FrontendAddress<computeroutput>[get]</computeroutput></computeroutput></para><para>

<para>The address of the actual chat server assigned from NameServer. Public for read only.</para>
</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00065">65</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1acd09983e6a7c5f77386068daea5c1e5e"/><section>
    <title>NameServerAddress</title>
<indexterm><primary>NameServerAddress</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>NameServerAddress</secondary></indexterm>
<para><computeroutput>string Photon.Chat.ChatClient.NameServerAddress<computeroutput>[get]</computeroutput></computeroutput></para><para>

<para>The address of last connected Name Server.</para>
</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00062">62</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1a8a166f5011405a4a85e957ac2d1ea498"/><section>
    <title>SocketImplementationConfig</title>
<indexterm><primary>SocketImplementationConfig</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>SocketImplementationConfig</secondary></indexterm>
<para><computeroutput>Dictionary&lt;ConnectionProtocol, Type&gt; Photon.Chat.ChatClient.SocketImplementationConfig<computeroutput>[get]</computeroutput></computeroutput></para><para>

<para>Defines which IPhotonSocket class to use per ConnectionProtocol. </para>
</para>

<para>Several platforms have special Socket implementations and slightly different APIs. To accomodate this, switching the socket implementation for a network protocol was made available. By default, UDP and TCP have socket implementations assigned.</para>

<para>You only need to set the SocketImplementationConfig once, after creating a PhotonPeer and before connecting. If you switch the TransportProtocol, the correct implementation is being used. </para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00210">210</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1a433c87f11e648a9b24a44c0bcad5c6b7"/><section>
    <title>State</title>
<indexterm><primary>State</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>State</secondary></indexterm>
<para><computeroutput><link linkend="_namespace_photon_1_1_chat_1afc6e9ce1b2729658dbf7d583305c6c81">ChatState</link> Photon.Chat.ChatClient.State<computeroutput>[get]</computeroutput></computeroutput></para><para>

<para>Current state of the <link linkend="_class_photon_1_1_chat_1_1_chat_client">ChatClient</link>. Also use CanChat.</para>
</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00078">78</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1a5a7d22fc0ccda0c61fff2cf9ffb798ff"/><section>
    <title>TransportProtocol</title>
<indexterm><primary>TransportProtocol</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>TransportProtocol</secondary></indexterm>
<para><computeroutput>ConnectionProtocol? Photon.Chat.ChatClient.TransportProtocol<computeroutput>[get]</computeroutput>, <computeroutput>[set]</computeroutput></computeroutput></para><para>

<para>Exposes the TransportProtocol of the used PhotonPeer. Settable while not connected.</para>
</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00187">187</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1a9a625d156affdbf51778ebf60a302df6"/><section>
    <title>UseBackgroundWorkerForSending</title>
<indexterm><primary>UseBackgroundWorkerForSending</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>UseBackgroundWorkerForSending</secondary></indexterm>
<para><computeroutput>bool Photon.Chat.ChatClient.UseBackgroundWorkerForSending<computeroutput>[get]</computeroutput>, <computeroutput>[set]</computeroutput></computeroutput></para><para>

<para>Defines if a background thread will call SendOutgoingCommands, while your code calls Service to dispatch received messages. </para>
</para>

<para>The benefit of using a background thread to call SendOutgoingCommands is this:</para>

<para>Even if your game logic is being paused, the background thread will keep the connection to the server up. On a lower level, acknowledgements and pings will prevent a server-side timeout while (e.g.) Unity loads assets.</para>

<para>Your game logic still has to call Service regularly, or else incoming messages are not dispatched. As this typically triggers UI updates, it&apos;s easier to call Service from the main/UI thread. </para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00184">184</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_chat_1_1_chat_client_1abe9eae1c888f8f58a32c4f3298038546"/><section>
    <title>UserId</title>
<indexterm><primary>UserId</primary><secondary>Photon.Chat.ChatClient</secondary></indexterm>
<indexterm><primary>Photon.Chat.ChatClient</primary><secondary>UserId</secondary></indexterm>
<para><computeroutput>string? Photon.Chat.ChatClient.UserId<computeroutput>[get]</computeroutput></computeroutput></para><para>

<para>The unique ID of a user/person, stored in AuthValues.UserId. </para>
</para>

<para>Set it before you connect.</para>

<para>This value wraps AuthValues.UserId. It&apos;s not a nickname and we assume users with the same userID are the same person.</para>
<para>
Definition at line <link linkend="__chat_client_8cs_source_1l00118">118</link> of file <link linkend="__chat_client_8cs_source">ChatClient.cs</link>.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonChat/Code/<link linkend="__chat_client_8cs">ChatClient.cs</link></section>
</section>
