<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_photon_1_1_compression_1_1_array_pack_bits_ext" xml:lang="en-US">
<title>Photon.Compression.ArrayPackBitsExt Class Reference</title>
<indexterm><primary>Photon.Compression.ArrayPackBitsExt</primary></indexterm>
<para>

<para>Experimental packers, that counts number of used bits for serialization. </para>
 
</para>
Collaboration diagram for Photon.Compression.ArrayPackBitsExt:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_pack_bits_ext__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a7aa4bf5228a942524e44499747ea30f7">WritePackedBits</link> (ulong *uPtr, ulong value, ref int bitposition, int bits)</para>

<para>EXPERIMENTAL: Primary UNSAFE WritePacked Method. </para>
</listitem>
            <listitem><para>static void <link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a3b849e1c6d450d974ed2abea73aef8c5">WritePackedBits</link> (this ulong[] buffer, ulong value, ref int bitposition, int bits)</para>

<para>EXPERIMENTAL: Primary WritePacked Method </para>
</listitem>
            <listitem><para>static void <link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a0272281b2501bf0b94b5dff51c31aa9f">WritePackedBits</link> (this uint[] buffer, ulong value, ref int bitposition, int bits)</para>

<para>EXPERIMENTAL: Primary WritePacked Method </para>
</listitem>
            <listitem><para>static void <link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a5ed8dc40ce421494abee8a7288e087fc">WritePackedBits</link> (this byte[] buffer, ulong value, ref int bitposition, int bits)</para>

<para>EXPERIMENTAL: Primary WritePacked Method </para>
</listitem>
            <listitem><para>static unsafe ulong <link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a47724a2140489273a73215fb045ed016">ReadPackedBits</link> (ulong *uPtr, ref int bitposition, int bits)</para>

<para>Primary UNSAFE Reader for PackedBits. </para>
</listitem>
            <listitem><para>static ulong <link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a13d85c233f3f68aea3ad5e7a14297869">ReadPackedBits</link> (this ulong[] buffer, ref int bitposition, int bits)</para>

<para>Primary Reader for PackedBits. </para>
</listitem>
            <listitem><para>static ulong <link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1ab10e6b857477acde6663173ea9f9dec3">ReadPackedBits</link> (this uint[] buffer, ref int bitposition, int bits)</para>

<para>Primary Reader for PackedBits. </para>
</listitem>
            <listitem><para>static ulong <link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a289fcdbd38546d0bc24be8efb795c049">ReadPackedBits</link> (this byte[] buffer, ref int bitposition, int bits)</para>

<para>Primary Reader for PackedBits. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a6c2a4459af37d41b70a3f5d88dff7886">WriteSignedPackedBits</link> (ulong *uPtr, int value, ref int bitposition, int bits)</para>

<para>EXPERIMENTAL: Primary UNSAFE Write packed signed value. </para>
</listitem>
            <listitem><para>static unsafe int <link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1ab32db61412b91fa8c2a732729c7d6939">ReadSignedPackedBits</link> (ulong *buffer, ref int bitposition, int bits)</para>

<para>EXPERIMENTAL: Primary UNSAFE Read packed signed value. </para>
</listitem>
            <listitem><para>static void <link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a58418af5b8c92b833969fd47a99a788e">WriteSignedPackedBits</link> (this ulong[] buffer, int value, ref int bitposition, int bits)</para>

<para>EXPERIMENTAL: Primary Write packed signed value. </para>
</listitem>
            <listitem><para>static int <link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a5d4dc2d2713632a8b7a59bea29627e6b">ReadSignedPackedBits</link> (this ulong[] buffer, ref int bitposition, int bits)</para>

<para>EXPERIMENTAL: Primary Read packed signed value. </para>
</listitem>
            <listitem><para>static void <link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a2908035f3a482091f5dfecd596aa143c">WriteSignedPackedBits</link> (this uint[] buffer, int value, ref int bitposition, int bits)</para>

<para>EXPERIMENTAL: Primary Write packed signed value. </para>
</listitem>
            <listitem><para>static int <link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1aec220a902869e135d64dad9618d6a1ec">ReadSignedPackedBits</link> (this uint[] buffer, ref int bitposition, int bits)</para>

<para>EXPERIMENTAL: Primary Read packed signed value. </para>
</listitem>
            <listitem><para>static void <link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1aece6270685beb00f756679b85911caf0">WriteSignedPackedBits</link> (this byte[] buffer, int value, ref int bitposition, int bits)</para>

<para>EXPERIMENTAL: Primary Write packed signed value. </para>
</listitem>
            <listitem><para>static int <link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a610c0972bbd1236d2183344e8492de21">ReadSignedPackedBits</link> (this byte[] buffer, ref int bitposition, int bits)</para>

<para>EXPERIMENTAL: Primary Read packed signed value. </para>
</listitem>
            <listitem><para>static void <link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1aa3968be741b713a9598369bed5c913db">WriteSignedPackedBits64</link> (this byte[] buffer, long value, ref int bitposition, int bits)</para>

<para>EXPERIMENTAL: Primary Write packed signed value. </para>
</listitem>
            <listitem><para>static long <link linkend="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1af428f144064c18baf10b2ce471e6f2b7">ReadSignedPackedBits64</link> (this byte[] buffer, ref int bitposition, int bits)</para>

<para>EXPERIMENTAL: Primary Read packed signed value. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Experimental packers, that counts number of used bits for serialization. </para>



<para>Effective for values that hover close to zero. </para>
<para>
Definition at line <link linkend="__array_pack_bits_ext_8cs_source_1l00034">34</link> of file <link linkend="__array_pack_bits_ext_8cs_source">ArrayPackBitsExt.cs</link>.</para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a289fcdbd38546d0bc24be8efb795c049"/><section>
    <title>ReadPackedBits()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>ReadPackedBits</primary><secondary>Photon.Compression.ArrayPackBitsExt</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArrayPackBitsExt</primary><secondary>ReadPackedBits</secondary></indexterm>
<para><computeroutput>static ulong Photon.Compression.ArrayPackBitsExt.ReadPackedBits (this byte[] buffer, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Primary Reader for PackedBits. </para>
</para>
<para>
Definition at line <link linkend="__array_pack_bits_ext_8cs_source_1l00154">154</link> of file <link linkend="__array_pack_bits_ext_8cs_source">ArrayPackBitsExt.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1ab10e6b857477acde6663173ea9f9dec3"/><section>
    <title>ReadPackedBits()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>ReadPackedBits</primary><secondary>Photon.Compression.ArrayPackBitsExt</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArrayPackBitsExt</primary><secondary>ReadPackedBits</secondary></indexterm>
<para><computeroutput>static ulong Photon.Compression.ArrayPackBitsExt.ReadPackedBits (this uint[] buffer, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Primary Reader for PackedBits. </para>
</para>
<para>
Definition at line <link linkend="__array_pack_bits_ext_8cs_source_1l00137">137</link> of file <link linkend="__array_pack_bits_ext_8cs_source">ArrayPackBitsExt.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a13d85c233f3f68aea3ad5e7a14297869"/><section>
    <title>ReadPackedBits()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>ReadPackedBits</primary><secondary>Photon.Compression.ArrayPackBitsExt</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArrayPackBitsExt</primary><secondary>ReadPackedBits</secondary></indexterm>
<para><computeroutput>static ulong Photon.Compression.ArrayPackBitsExt.ReadPackedBits (this ulong[] buffer, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Primary Reader for PackedBits. </para>
</para>
<para>
Definition at line <link linkend="__array_pack_bits_ext_8cs_source_1l00123">123</link> of file <link linkend="__array_pack_bits_ext_8cs_source">ArrayPackBitsExt.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a47724a2140489273a73215fb045ed016"/><section>
    <title>ReadPackedBits()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>ReadPackedBits</primary><secondary>Photon.Compression.ArrayPackBitsExt</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArrayPackBitsExt</primary><secondary>ReadPackedBits</secondary></indexterm>
<para><computeroutput>static unsafe ulong Photon.Compression.ArrayPackBitsExt.ReadPackedBits (ulong * uPtr, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Primary UNSAFE Reader for PackedBits. </para>
</para>
<para>
Definition at line <link linkend="__array_pack_bits_ext_8cs_source_1l00109">109</link> of file <link linkend="__array_pack_bits_ext_8cs_source">ArrayPackBitsExt.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_pack_bits_ext_a47724a2140489273a73215fb045ed016_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_pack_bits_ext_a47724a2140489273a73215fb045ed016_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a610c0972bbd1236d2183344e8492de21"/><section>
    <title>ReadSignedPackedBits()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>ReadSignedPackedBits</primary><secondary>Photon.Compression.ArrayPackBitsExt</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArrayPackBitsExt</primary><secondary>ReadSignedPackedBits</secondary></indexterm>
<para><computeroutput>static int Photon.Compression.ArrayPackBitsExt.ReadSignedPackedBits (this byte[] buffer, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>EXPERIMENTAL: Primary Read packed signed value. </para>
</para>

<para>ZigZag is employed to move the sign to the rightmost position. Packed values work best for serializing fields that have a large possible range, but are mostly hover closer to zero in value. </para>
<para>
Definition at line <link linkend="__array_pack_bits_ext_8cs_source_1l00252">252</link> of file <link linkend="__array_pack_bits_ext_8cs_source">ArrayPackBitsExt.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1aec220a902869e135d64dad9618d6a1ec"/><section>
    <title>ReadSignedPackedBits()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>ReadSignedPackedBits</primary><secondary>Photon.Compression.ArrayPackBitsExt</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArrayPackBitsExt</primary><secondary>ReadSignedPackedBits</secondary></indexterm>
<para><computeroutput>static int Photon.Compression.ArrayPackBitsExt.ReadSignedPackedBits (this uint[] buffer, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>EXPERIMENTAL: Primary Read packed signed value. </para>
</para>

<para>ZigZag is employed to move the sign to the rightmost position. Packed values work best for serializing fields that have a large possible range, but are mostly hover closer to zero in value. </para>
<para>
Definition at line <link linkend="__array_pack_bits_ext_8cs_source_1l00229">229</link> of file <link linkend="__array_pack_bits_ext_8cs_source">ArrayPackBitsExt.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a5d4dc2d2713632a8b7a59bea29627e6b"/><section>
    <title>ReadSignedPackedBits()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>ReadSignedPackedBits</primary><secondary>Photon.Compression.ArrayPackBitsExt</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArrayPackBitsExt</primary><secondary>ReadSignedPackedBits</secondary></indexterm>
<para><computeroutput>static int Photon.Compression.ArrayPackBitsExt.ReadSignedPackedBits (this ulong[] buffer, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>EXPERIMENTAL: Primary Read packed signed value. </para>
</para>

<para>ZigZag is employed to move the sign to the rightmost position. Packed values work best for serializing fields that have a large possible range, but are mostly hover closer to zero in value. </para>
<para>
Definition at line <link linkend="__array_pack_bits_ext_8cs_source_1l00207">207</link> of file <link linkend="__array_pack_bits_ext_8cs_source">ArrayPackBitsExt.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1ab32db61412b91fa8c2a732729c7d6939"/><section>
    <title>ReadSignedPackedBits()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>ReadSignedPackedBits</primary><secondary>Photon.Compression.ArrayPackBitsExt</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArrayPackBitsExt</primary><secondary>ReadSignedPackedBits</secondary></indexterm>
<para><computeroutput>static unsafe int Photon.Compression.ArrayPackBitsExt.ReadSignedPackedBits (ulong * buffer, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>EXPERIMENTAL: Primary UNSAFE Read packed signed value. </para>
</para>

<para>ZigZag is employed to move the sign to the rightmost position. Packed values work best for serializing fields that have a large possible range, but are mostly hover closer to zero in value. </para>
<para>
Definition at line <link linkend="__array_pack_bits_ext_8cs_source_1l00186">186</link> of file <link linkend="__array_pack_bits_ext_8cs_source">ArrayPackBitsExt.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_pack_bits_ext_ab32db61412b91fa8c2a732729c7d6939_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1af428f144064c18baf10b2ce471e6f2b7"/><section>
    <title>ReadSignedPackedBits64()</title>
<indexterm><primary>ReadSignedPackedBits64</primary><secondary>Photon.Compression.ArrayPackBitsExt</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArrayPackBitsExt</primary><secondary>ReadSignedPackedBits64</secondary></indexterm>
<para><computeroutput>static long Photon.Compression.ArrayPackBitsExt.ReadSignedPackedBits64 (this byte[] buffer, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>EXPERIMENTAL: Primary Read packed signed value. </para>
</para>

<para>ZigZag is employed to move the sign to the rightmost position. Packed values work best for serializing fields that have a large possible range, but are mostly hover closer to zero in value. </para>
<para>
Definition at line <link linkend="__array_pack_bits_ext_8cs_source_1l00273">273</link> of file <link linkend="__array_pack_bits_ext_8cs_source">ArrayPackBitsExt.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a5ed8dc40ce421494abee8a7288e087fc"/><section>
    <title>WritePackedBits()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>WritePackedBits</primary><secondary>Photon.Compression.ArrayPackBitsExt</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArrayPackBitsExt</primary><secondary>WritePackedBits</secondary></indexterm>
<para><computeroutput>static void Photon.Compression.ArrayPackBitsExt.WritePackedBits (this byte[] buffer, ulong value, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>EXPERIMENTAL: Primary WritePacked Method </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>countbits</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__array_pack_bits_ext_8cs_source_1l00092">92</link> of file <link linkend="__array_pack_bits_ext_8cs_source">ArrayPackBitsExt.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a0272281b2501bf0b94b5dff51c31aa9f"/><section>
    <title>WritePackedBits()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>WritePackedBits</primary><secondary>Photon.Compression.ArrayPackBitsExt</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArrayPackBitsExt</primary><secondary>WritePackedBits</secondary></indexterm>
<para><computeroutput>static void Photon.Compression.ArrayPackBitsExt.WritePackedBits (this uint[] buffer, ulong value, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>EXPERIMENTAL: Primary WritePacked Method </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>countbits</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__array_pack_bits_ext_8cs_source_1l00076">76</link> of file <link linkend="__array_pack_bits_ext_8cs_source">ArrayPackBitsExt.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a3b849e1c6d450d974ed2abea73aef8c5"/><section>
    <title>WritePackedBits()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>WritePackedBits</primary><secondary>Photon.Compression.ArrayPackBitsExt</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArrayPackBitsExt</primary><secondary>WritePackedBits</secondary></indexterm>
<para><computeroutput>static void Photon.Compression.ArrayPackBitsExt.WritePackedBits (this ulong[] buffer, ulong value, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>EXPERIMENTAL: Primary WritePacked Method </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>countbits</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__array_pack_bits_ext_8cs_source_1l00059">59</link> of file <link linkend="__array_pack_bits_ext_8cs_source">ArrayPackBitsExt.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a7aa4bf5228a942524e44499747ea30f7"/><section>
    <title>WritePackedBits()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>WritePackedBits</primary><secondary>Photon.Compression.ArrayPackBitsExt</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArrayPackBitsExt</primary><secondary>WritePackedBits</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArrayPackBitsExt.WritePackedBits (ulong * uPtr, ulong value, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>EXPERIMENTAL: Primary UNSAFE WritePacked Method. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>countbits</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__array_pack_bits_ext_8cs_source_1l00042">42</link> of file <link linkend="__array_pack_bits_ext_8cs_source">ArrayPackBitsExt.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_pack_bits_ext_a7aa4bf5228a942524e44499747ea30f7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_pack_bits_ext_a7aa4bf5228a942524e44499747ea30f7_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1aece6270685beb00f756679b85911caf0"/><section>
    <title>WriteSignedPackedBits()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>WriteSignedPackedBits</primary><secondary>Photon.Compression.ArrayPackBitsExt</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArrayPackBitsExt</primary><secondary>WriteSignedPackedBits</secondary></indexterm>
<para><computeroutput>static void Photon.Compression.ArrayPackBitsExt.WriteSignedPackedBits (this byte[] buffer, int value, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>EXPERIMENTAL: Primary Write packed signed value. </para>
</para>

<para>ZigZag is employed to move the sign to the rightmost position. Packed values work best for serializing fields that have a large possible range, but are mostly hover closer to zero in value. </para>
<para>
Definition at line <link linkend="__array_pack_bits_ext_8cs_source_1l00243">243</link> of file <link linkend="__array_pack_bits_ext_8cs_source">ArrayPackBitsExt.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a2908035f3a482091f5dfecd596aa143c"/><section>
    <title>WriteSignedPackedBits()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>WriteSignedPackedBits</primary><secondary>Photon.Compression.ArrayPackBitsExt</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArrayPackBitsExt</primary><secondary>WriteSignedPackedBits</secondary></indexterm>
<para><computeroutput>static void Photon.Compression.ArrayPackBitsExt.WriteSignedPackedBits (this uint[] buffer, int value, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>EXPERIMENTAL: Primary Write packed signed value. </para>
</para>

<para>ZigZag is employed to move the sign to the rightmost position. Packed values work best for serializing fields that have a large possible range, but are mostly hover closer to zero in value. </para>
<para>
Definition at line <link linkend="__array_pack_bits_ext_8cs_source_1l00220">220</link> of file <link linkend="__array_pack_bits_ext_8cs_source">ArrayPackBitsExt.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a58418af5b8c92b833969fd47a99a788e"/><section>
    <title>WriteSignedPackedBits()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>WriteSignedPackedBits</primary><secondary>Photon.Compression.ArrayPackBitsExt</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArrayPackBitsExt</primary><secondary>WriteSignedPackedBits</secondary></indexterm>
<para><computeroutput>static void Photon.Compression.ArrayPackBitsExt.WriteSignedPackedBits (this ulong[] buffer, int value, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>EXPERIMENTAL: Primary Write packed signed value. </para>
</para>

<para>ZigZag is employed to move the sign to the rightmost position. Packed values work best for serializing fields that have a large possible range, but are mostly hover closer to zero in value. </para>
<para>
Definition at line <link linkend="__array_pack_bits_ext_8cs_source_1l00198">198</link> of file <link linkend="__array_pack_bits_ext_8cs_source">ArrayPackBitsExt.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1a6c2a4459af37d41b70a3f5d88dff7886"/><section>
    <title>WriteSignedPackedBits()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>WriteSignedPackedBits</primary><secondary>Photon.Compression.ArrayPackBitsExt</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArrayPackBitsExt</primary><secondary>WriteSignedPackedBits</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArrayPackBitsExt.WriteSignedPackedBits (ulong * uPtr, int value, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>EXPERIMENTAL: Primary UNSAFE Write packed signed value. </para>
</para>

<para>ZigZag is employed to move the sign to the rightmost position. Packed values work best for serializing fields that have a large possible range, but are mostly hover closer to zero in value. </para>
<para>
Definition at line <link linkend="__array_pack_bits_ext_8cs_source_1l00176">176</link> of file <link linkend="__array_pack_bits_ext_8cs_source">ArrayPackBitsExt.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_pack_bits_ext_a6c2a4459af37d41b70a3f5d88dff7886_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_pack_bits_ext_1aa3968be741b713a9598369bed5c913db"/><section>
    <title>WriteSignedPackedBits64()</title>
<indexterm><primary>WriteSignedPackedBits64</primary><secondary>Photon.Compression.ArrayPackBitsExt</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArrayPackBitsExt</primary><secondary>WriteSignedPackedBits64</secondary></indexterm>
<para><computeroutput>static void Photon.Compression.ArrayPackBitsExt.WriteSignedPackedBits64 (this byte[] buffer, long value, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>EXPERIMENTAL: Primary Write packed signed value. </para>
</para>

<para>ZigZag is employed to move the sign to the rightmost position. Packed values work best for serializing fields that have a large possible range, but are mostly hover closer to zero in value. </para>
<para>
Definition at line <link linkend="__array_pack_bits_ext_8cs_source_1l00264">264</link> of file <link linkend="__array_pack_bits_ext_8cs_source">ArrayPackBitsExt.cs</link>.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/<link linkend="__array_pack_bits_ext_8cs">ArrayPackBitsExt.cs</link></section>
</section>
