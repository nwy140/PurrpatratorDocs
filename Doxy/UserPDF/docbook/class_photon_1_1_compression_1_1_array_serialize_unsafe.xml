<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe" xml:lang="en-US">
<title>Photon.Compression.ArraySerializeUnsafe Class Reference</title>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary></indexterm>
Collaboration diagram for Photon.Compression.ArraySerializeUnsafe:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1aad43a38228ed7e77b5968bc763066d6b">WriteSigned</link> (ulong *buffer, int value, ref int bitposition, int bits)</para>

<para>Writes value to this unsafe buffer. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a617954426c11928e6a29924c86904f5a">AppendSigned</link> (ulong *buffer, int value, ref int bitposition, int bits)</para>

<para>Appends value to this unsafe buffer. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1adca7942800067de6810fcfcd6bb914b0">AddSigned</link> (this int value, ulong *uPtr, ref int bitposition, int bits)</para>

<para>Appends this value to the unsafe buffer. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a85438055b159698a8b89e0da7c2b075b">AddSigned</link> (this short value, ulong *uPtr, ref int bitposition, int bits)</para>

<para>Appends this value to the unsafe buffer. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1aa0ff6c4cfe32ef06ea8e0032f452f173">AddSigned</link> (this sbyte value, ulong *uPtr, ref int bitposition, int bits)</para>

<para>Appends this value to the unsafe buffer. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1aab34e3abe5d73cb6d8db9bcbe4cedfa3">InjectSigned</link> (this int value, ulong *uPtr, ref int bitposition, int bits)</para>

<para>Overwrites this value to the unsafe buffer. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1ad249b0e7b5f309b7de58ff3c8cdc7535">InjectSigned</link> (this short value, ulong *uPtr, ref int bitposition, int bits)</para>

<para>Overwrites this value to the unsafe buffer. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a20b1f202992101366b7e95d8085fa983">InjectSigned</link> (this sbyte value, ulong *uPtr, ref int bitposition, int bits)</para>

<para>Overwrites this value to the unsafe buffer. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1aa6df4cd317240173d82b6f64b87789b0">PokeSigned</link> (this int value, ulong *uPtr, int bitposition, int bits)</para>

<para>Overwrites this value to the unsafe buffer. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7dc1b1dabf93068e2acfbfbb5cd56d87">PokeSigned</link> (this short value, ulong *uPtr, int bitposition, int bits)</para>

<para>Overwrites this value to the unsafe buffer. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a04d0c93ea6e0ec310d9ffd38f05b3134">PokeSigned</link> (this sbyte value, ulong *uPtr, int bitposition, int bits)</para>

<para>Overwrites this value to the unsafe buffer. </para>
</listitem>
            <listitem><para>static unsafe int <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a54c616819e08d226c702608cdfac40d7">ReadSigned</link> (ulong *uPtr, ref int bitposition, int bits)</para>

<para>Returns signed value read from the buffer. </para>
</listitem>
            <listitem><para>static unsafe int <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a918507b8a2f85bea9efb99f1739387f4">PeekSigned</link> (ulong *uPtr, int bitposition, int bits)</para>

<para>Returns signed value read from the buffer. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1af41d5ed8a3567a57dcec561e0f5c9ebd">Append</link> (ulong *uPtr, ulong value, ref int bitposition, int bits)</para>

<para>Primary Append writer. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1">Write</link> (ulong *uPtr, ulong value, ref int bitposition, int bits)</para>

<para>Primary Unsafe writer. </para>
</listitem>
            <listitem><para>static unsafe ulong <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1aed2650eee9804de6bf8b43e12da2748b">Read</link> (ulong *uPtr, ref int bitposition, int bits)</para>

<para>Primary Unsafe Read. </para>
</listitem>
            <listitem><para>static unsafe ulong <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1aac015a19abdb356f790cb158c399d236">Read</link> (ulong *uPtr, int bitposition, int bits)</para>

<para>Primary Unsafe Peek. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a8eed7af214af22ed7d6e1e3f2b2bea7b">Add</link> (this ulong value, ulong *uPtr, int bitposition, int bits)</para>

<para>Append this value to the unsafe uPtr array. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a5e87ce3a31742e47f794b1c0072a228a">Add</link> (this uint value, ulong *uPtr, int bitposition, int bits)</para>

<para>Append this value to the unsafe uPtr array. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1adb70cced0326b78bf193dbb27f6d17b8">Add</link> (this ushort value, ulong *uPtr, int bitposition, int bits)</para>

<para>Append this value to the unsafe uPtr array. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a31ae951acb8e76fbe6d266ac93eea072">Add</link> (this byte value, ulong *uPtr, int bitposition, int bits)</para>

<para>Append this value to the unsafe uPtr array. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1ad01291d204934c02e9f7567826b4fb6a">AddUnsigned</link> (this long value, ulong *uPtr, int bitposition, int bits)</para>

<para>Append this value to the unsafe uPtr array. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a64860382bd4f7498d0702855f4915a1f">AddUnsigned</link> (this int value, ulong *uPtr, int bitposition, int bits)</para>

<para>Append this value to the unsafe uPtr array. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a16bb9f4bf1b4ee997651c6ea96234b69">AddUnsigned</link> (this short value, ulong *uPtr, int bitposition, int bits)</para>

<para>Append this value to the unsafe uPtr array. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a1b5ae3feac77b751f24556f120457bc3">AddUnsigned</link> (this sbyte value, ulong *uPtr, int bitposition, int bits)</para>

<para>Append this value to the unsafe uPtr array. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a5abe80710e4749c531f6fe65f8753820">Inject</link> (this ulong value, ulong *uPtr, ref int bitposition, int bits)</para>

<para>Write this value to the unsafe uPtr array. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1ae1b50d2e1381fd02d5962f282d5ce000">Inject</link> (this uint value, ulong *uPtr, ref int bitposition, int bits)</para>

<para>Write this value to the unsafe uPtr array. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a329c3f02e6b3b655220acd3e4ad44e69">Inject</link> (this ushort value, ulong *uPtr, ref int bitposition, int bits)</para>

<para>Write this value to the unsafe uPtr array. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1aed07bc529f706b9cc0d31655a79e35ac">Inject</link> (this byte value, ulong *uPtr, ref int bitposition, int bits)</para>

<para>Write this value to the unsafe uPtr array. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1ad3f5e32ef0e175a524e917e8e1544ac0">InjectUnsigned</link> (this long value, ulong *uPtr, ref int bitposition, int bits)</para>

<para>Write this value to the unsafe uPtr array. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7fa907b300fdf0fc95f66a6cded17f22">InjectUnsigned</link> (this int value, ulong *uPtr, ref int bitposition, int bits)</para>

<para>Write this value to the unsafe uPtr array. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a1ae390e133fb1b9ce70c54c2d70f224a">InjectUnsigned</link> (this short value, ulong *uPtr, int bitposition, int bits)</para>

<para>Write this value to the unsafe uPtr array. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1aff760ad1506a3d4c236ab7b4fdd5d7cd">InjectUnsigned</link> (this sbyte value, ulong *uPtr, ref int bitposition, int bits)</para>

<para>Write this value to the unsafe uPtr array. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1af2bbd46e555555106cfd395a5df09373">Poke</link> (this ulong value, ulong *uPtr, int bitposition, int bits)</para>

<para>Write this value to the unsafe uPtr array. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1aebc9ea90886b8af4fc06515a194050ce">Poke</link> (this uint value, ulong *uPtr, int bitposition, int bits)</para>

<para>Write this value to the unsafe uPtr array. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7fc2ffb97ae1499104eb44a33c650a4f">Poke</link> (this ushort value, ulong *uPtr, int bitposition, int bits)</para>

<para>Write this value to the unsafe uPtr array. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a3b1c2f21b5952be5177862b1c26552b8">Poke</link> (this byte value, ulong *uPtr, int bitposition, int bits)</para>

<para>Write this value to the unsafe uPtr array. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1aeca6155e6221e0ac642948cde93b64f1">InjectUnsigned</link> (this long value, ulong *uPtr, int bitposition, int bits)</para>

<para>Write this value to the unsafe uPtr array. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a8866cdb143d4df1319dc05aa275d3bf2">InjectUnsigned</link> (this int value, ulong *uPtr, int bitposition, int bits)</para>

<para>Write this value to the unsafe uPtr array. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1aeffb0da43220a32fcc5ccc9def2ba49a">PokeUnsigned</link> (this short value, ulong *uPtr, int bitposition, int bits)</para>

<para>Write this value to the unsafe uPtr array. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a5a17df40fe2c3d8d1861dfbc590e3aec">PokeUnsigned</link> (this sbyte value, ulong *uPtr, int bitposition, int bits)</para>

<para>Write this value to the unsafe uPtr array. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1aa29c7e4c647110ee57afcdd9ccc5d8dd">ReadOutUnsafe</link> (ulong *sourcePtr, int sourcePos, ulong *targetPtr, ref int targetPos, int bits)</para>

<para>Primary ReadOutUnsafe method. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1afaf99c9f84fc1c0f0f10931768bd76af">ReadOutUnsafe</link> (this ulong[] source, int sourcePos, byte[] target, ref int targetPos, int bits)</para>

<para>Read the contents of one bitpacked array to another using Unsafe. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a2870601c5be42e35dbb81baeaa4d8a75">ReadOutUnsafe</link> (this ulong[] source, int sourcePos, uint[] target, ref int targetPos, int bits)</para>

<para>Read the contents of one bitpacked array to another using Unsafe. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a16878d461a48f656e004dbc15483aca1">ReadOutUnsafe</link> (this ulong[] source, int sourcePos, ulong[] target, ref int targetPos, int bits)</para>

<para>Read the contents of one bitpacked array to another using Unsafe. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1aa833cc1c3b10ab0f18ca58690df814a8">ReadOutUnsafe</link> (this uint[] source, int sourcePos, byte[] target, ref int targetPos, int bits)</para>

<para>Read the contents of one bitpacked array to another using Unsafe. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1ad2245200c53099068ed23d4259ed720a">ReadOutUnsafe</link> (this uint[] source, int sourcePos, uint[] target, ref int targetPos, int bits)</para>

<para>Read the contents of one bitpacked array to another using Unsafe. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1ac3c44560ce8b15f8203bbef3c249d46f">ReadOutUnsafe</link> (this uint[] source, int sourcePos, ulong[] target, ref int targetPos, int bits)</para>

<para>Read the contents of one bitpacked array to another using Unsafe. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a1bb8f817269d8af044c064423934edee">ReadOutUnsafe</link> (this byte[] source, int sourcePos, ulong[] target, ref int targetPos, int bits)</para>

<para>Read the contents of one bitpacked array to another using Unsafe. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7081dc037149909905051d9d4a3a44c8">ReadOutUnsafe</link> (this byte[] source, int sourcePos, uint[] target, ref int targetPos, int bits)</para>

<para>Read the contents of one bitpacked array to another using Unsafe. </para>
</listitem>
            <listitem><para>static unsafe void <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1ae5dc5927725bd8713a88e1a039120964">ReadOutUnsafe</link> (this byte[] source, int sourcePos, byte[] target, ref int targetPos, int bits)</para>

<para>Read the contents of one bitpacked array to another using Unsafe. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00036">36</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a31ae951acb8e76fbe6d266ac93eea072"/><section>
    <title>Add()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>Add</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>Add</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.Add (this byte value, ulong * uPtr, int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Append this value to the unsafe uPtr array. </para>
</para>

<para>Use for altering previous writes. Does not preserve existing data past the write. Use for sequential writes only. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00359">359</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_a31ae951acb8e76fbe6d266ac93eea072_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a5e87ce3a31742e47f794b1c0072a228a"/><section>
    <title>Add()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>Add</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>Add</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.Add (this uint value, ulong * uPtr, int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Append this value to the unsafe uPtr array. </para>
</para>

<para>Use for altering previous writes. Does not preserve existing data past the write. Use for sequential writes only. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00341">341</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_a5e87ce3a31742e47f794b1c0072a228a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a8eed7af214af22ed7d6e1e3f2b2bea7b"/><section>
    <title>Add()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>Add</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>Add</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.Add (this ulong value, ulong * uPtr, int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Append this value to the unsafe uPtr array. </para>
</para>

<para>Use for altering previous writes. Does not preserve existing data past the write. Use for sequential writes only. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00332">332</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_a8eed7af214af22ed7d6e1e3f2b2bea7b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1adb70cced0326b78bf193dbb27f6d17b8"/><section>
    <title>Add()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>Add</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>Add</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.Add (this ushort value, ulong * uPtr, int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Append this value to the unsafe uPtr array. </para>
</para>

<para>Use for altering previous writes. Does not preserve existing data past the write. Use for sequential writes only. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00350">350</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_adb70cced0326b78bf193dbb27f6d17b8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1adca7942800067de6810fcfcd6bb914b0"/><section>
    <title>AddSigned()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>AddSigned</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>AddSigned</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.AddSigned (this int value, ulong * uPtr, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Appends this value to the unsafe buffer. </para>
</para>

<para>Uses zigzag encoding to retain the sign value. Existing data past this inject is NOT preserved in exchange for a faster write. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00068">68</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_adca7942800067de6810fcfcd6bb914b0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1aa0ff6c4cfe32ef06ea8e0032f452f173"/><section>
    <title>AddSigned()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>AddSigned</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>AddSigned</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.AddSigned (this sbyte value, ulong * uPtr, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Appends this value to the unsafe buffer. </para>
</para>

<para>Uses zigzag encoding to retain the sign value. Existing data past this inject is NOT preserved in exchange for a faster write. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00086">86</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_aa0ff6c4cfe32ef06ea8e0032f452f173_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a85438055b159698a8b89e0da7c2b075b"/><section>
    <title>AddSigned()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>AddSigned</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>AddSigned</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.AddSigned (this short value, ulong * uPtr, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Appends this value to the unsafe buffer. </para>
</para>

<para>Uses zigzag encoding to retain the sign value. Existing data past this inject is NOT preserved in exchange for a faster write. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00077">77</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_a85438055b159698a8b89e0da7c2b075b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a64860382bd4f7498d0702855f4915a1f"/><section>
    <title>AddUnsigned()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>AddUnsigned</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>AddUnsigned</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.AddUnsigned (this int value, ulong * uPtr, int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Append this value to the unsafe uPtr array. </para>
</para>

<para>Use for altering previous writes. Does not preserve existing data past the write. Use for sequential writes only. Sign is ignored and value is cast to ulong. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00378">378</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_a64860382bd4f7498d0702855f4915a1f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1ad01291d204934c02e9f7567826b4fb6a"/><section>
    <title>AddUnsigned()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>AddUnsigned</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>AddUnsigned</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.AddUnsigned (this long value, ulong * uPtr, int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Append this value to the unsafe uPtr array. </para>
</para>

<para>Use for altering previous writes. Does not preserve existing data past the write. Use for sequential writes only. Sign is ignored and value is cast to ulong. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00369">369</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_ad01291d204934c02e9f7567826b4fb6a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a1b5ae3feac77b751f24556f120457bc3"/><section>
    <title>AddUnsigned()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>AddUnsigned</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>AddUnsigned</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.AddUnsigned (this sbyte value, ulong * uPtr, int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Append this value to the unsafe uPtr array. </para>
</para>

<para>Use for altering previous writes. Does not preserve existing data past the write. Use for sequential writes only. Sign is ignored and value is cast to ulong. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00396">396</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_a1b5ae3feac77b751f24556f120457bc3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a16bb9f4bf1b4ee997651c6ea96234b69"/><section>
    <title>AddUnsigned()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>AddUnsigned</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>AddUnsigned</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.AddUnsigned (this short value, ulong * uPtr, int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Append this value to the unsafe uPtr array. </para>
</para>

<para>Use for altering previous writes. Does not preserve existing data past the write. Use for sequential writes only. Sign is ignored and value is cast to ulong. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00387">387</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_a16bb9f4bf1b4ee997651c6ea96234b69_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1af41d5ed8a3567a57dcec561e0f5c9ebd"/><section>
    <title>Append()</title>
<indexterm><primary>Append</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>Append</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.Append (ulong * uPtr, ulong value, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Primary Append writer. </para>
</para>

<para>Faster method for writing to byte[] or uint[] buffers. Uses unsafe to treat them as ulong[]. Append does not preserve existing buffer data past the write point in exchange for a faster write. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>uPtr</entry><entry>
<para>Cast your byte* or uint* to ulong*</para>
</entry>
                            </row>
                            <row>
<entry>value</entry><entry></entry>
                            </row>
                            <row>
<entry>bitposition</entry><entry></entry>
                            </row>
                            <row>
<entry>bits</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00186">186</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_af41d5ed8a3567a57dcec561e0f5c9ebd_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a617954426c11928e6a29924c86904f5a"/><section>
    <title>AppendSigned()</title>
<indexterm><primary>AppendSigned</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>AppendSigned</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.AppendSigned (ulong * buffer, int value, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Appends value to this unsafe buffer. </para>
</para>

<para>Uses zigzag encoding to retain the sign value. Existing data past this inject is NOT preserved. Only use for sequential writes. Use <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1">Write()</link> or <link linkend="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a5abe80710e4749c531f6fe65f8753820">Inject()</link> for non-linear writes. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00058">58</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_a617954426c11928e6a29924c86904f5a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1aed07bc529f706b9cc0d31655a79e35ac"/><section>
    <title>Inject()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>Inject</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>Inject</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.Inject (this byte value, ulong * uPtr, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Write this value to the unsafe uPtr array. </para>
</para>

<para>Use for altering previous writes. Preserves existing data past the write. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00433">433</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_aed07bc529f706b9cc0d31655a79e35ac_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1ae1b50d2e1381fd02d5962f282d5ce000"/><section>
    <title>Inject()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>Inject</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>Inject</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.Inject (this uint value, ulong * uPtr, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Write this value to the unsafe uPtr array. </para>
</para>

<para>Use for altering previous writes. Preserves existing data past the write. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00417">417</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_ae1b50d2e1381fd02d5962f282d5ce000_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a5abe80710e4749c531f6fe65f8753820"/><section>
    <title>Inject()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>Inject</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>Inject</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.Inject (this ulong value, ulong * uPtr, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Write this value to the unsafe uPtr array. </para>
</para>

<para>Use for altering previous writes. Preserves existing data past the write. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00409">409</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_a5abe80710e4749c531f6fe65f8753820_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a329c3f02e6b3b655220acd3e4ad44e69"/><section>
    <title>Inject()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>Inject</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>Inject</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.Inject (this ushort value, ulong * uPtr, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Write this value to the unsafe uPtr array. </para>
</para>

<para>Use for altering previous writes. Preserves existing data past the write. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00425">425</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_a329c3f02e6b3b655220acd3e4ad44e69_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1aab34e3abe5d73cb6d8db9bcbe4cedfa3"/><section>
    <title>InjectSigned()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>InjectSigned</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>InjectSigned</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.InjectSigned (this int value, ulong * uPtr, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Overwrites this value to the unsafe buffer. </para>
</para>

<para>Uses zigzag encoding to retain the sign value. Existing data past this inject is preserved. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00097">97</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_aab34e3abe5d73cb6d8db9bcbe4cedfa3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a20b1f202992101366b7e95d8085fa983"/><section>
    <title>InjectSigned()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>InjectSigned</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>InjectSigned</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.InjectSigned (this sbyte value, ulong * uPtr, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Overwrites this value to the unsafe buffer. </para>
</para>

<para>Uses zigzag encoding to retain the sign value. Existing data past this inject is preserved. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00115">115</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_a20b1f202992101366b7e95d8085fa983_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1ad249b0e7b5f309b7de58ff3c8cdc7535"/><section>
    <title>InjectSigned()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>InjectSigned</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>InjectSigned</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.InjectSigned (this short value, ulong * uPtr, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Overwrites this value to the unsafe buffer. </para>
</para>

<para>Uses zigzag encoding to retain the sign value. Existing data past this inject is preserved. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00106">106</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_ad249b0e7b5f309b7de58ff3c8cdc7535_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a8866cdb143d4df1319dc05aa275d3bf2"/><section>
    <title>InjectUnsigned()<computeroutput>[1/6]</computeroutput></title>
<indexterm><primary>InjectUnsigned</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>InjectUnsigned</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.InjectUnsigned (this int value, ulong * uPtr, int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Write this value to the unsafe uPtr array. </para>
</para>

<para>Use for altering previous writes. Preserves existing data past the write. Sign is ignored and value is cast to ulong. Same as Inject, only the bitposition is not a ref and is not incremented. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00529">529</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_a8866cdb143d4df1319dc05aa275d3bf2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7fa907b300fdf0fc95f66a6cded17f22"/><section>
    <title>InjectUnsigned()<computeroutput>[2/6]</computeroutput></title>
<indexterm><primary>InjectUnsigned</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>InjectUnsigned</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.InjectUnsigned (this int value, ulong * uPtr, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Write this value to the unsafe uPtr array. </para>
</para>

<para>Use for altering previous writes. Preserves existing data past the write. Sign is ignored and value is cast to ulong. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00451">451</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_a7fa907b300fdf0fc95f66a6cded17f22_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1aeca6155e6221e0ac642948cde93b64f1"/><section>
    <title>InjectUnsigned()<computeroutput>[3/6]</computeroutput></title>
<indexterm><primary>InjectUnsigned</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>InjectUnsigned</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.InjectUnsigned (this long value, ulong * uPtr, int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Write this value to the unsafe uPtr array. </para>
</para>

<para>Use for altering previous writes. Preserves existing data past the write. Sign is ignored and value is cast to ulong. Same as Inject, only the bitposition is not a ref and is not incremented. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00519">519</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_aeca6155e6221e0ac642948cde93b64f1_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1ad3f5e32ef0e175a524e917e8e1544ac0"/><section>
    <title>InjectUnsigned()<computeroutput>[4/6]</computeroutput></title>
<indexterm><primary>InjectUnsigned</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>InjectUnsigned</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.InjectUnsigned (this long value, ulong * uPtr, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Write this value to the unsafe uPtr array. </para>
</para>

<para>Use for altering previous writes. Preserves existing data past the write. Sign is ignored and value is cast to ulong. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00442">442</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_ad3f5e32ef0e175a524e917e8e1544ac0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1aff760ad1506a3d4c236ab7b4fdd5d7cd"/><section>
    <title>InjectUnsigned()<computeroutput>[5/6]</computeroutput></title>
<indexterm><primary>InjectUnsigned</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>InjectUnsigned</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.InjectUnsigned (this sbyte value, ulong * uPtr, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Write this value to the unsafe uPtr array. </para>
</para>

<para>Use for altering previous writes. Preserves existing data past the write. Sign is ignored and value is cast to ulong. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00469">469</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_aff760ad1506a3d4c236ab7b4fdd5d7cd_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a1ae390e133fb1b9ce70c54c2d70f224a"/><section>
    <title>InjectUnsigned()<computeroutput>[6/6]</computeroutput></title>
<indexterm><primary>InjectUnsigned</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>InjectUnsigned</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.InjectUnsigned (this short value, ulong * uPtr, int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Write this value to the unsafe uPtr array. </para>
</para>

<para>Use for altering previous writes. Preserves existing data past the write. Sign is ignored and value is cast to ulong. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00460">460</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_a1ae390e133fb1b9ce70c54c2d70f224a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a918507b8a2f85bea9efb99f1739387f4"/><section>
    <title>PeekSigned()</title>
<indexterm><primary>PeekSigned</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>PeekSigned</secondary></indexterm>
<para><computeroutput>static unsafe int Photon.Compression.ArraySerializeUnsafe.PeekSigned (ulong * uPtr, int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Returns signed value read from the buffer. </para>
</para>

<para>Same as Read, only the bitposition is not incremented. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00168">168</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_a918507b8a2f85bea9efb99f1739387f4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a3b1c2f21b5952be5177862b1c26552b8"/><section>
    <title>Poke()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>Poke</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>Poke</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.Poke (this byte value, ulong * uPtr, int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Write this value to the unsafe uPtr array. </para>
</para>

<para>Use for altering previous writes. Preserves existing data past the write. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00509">509</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_a3b1c2f21b5952be5177862b1c26552b8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1aebc9ea90886b8af4fc06515a194050ce"/><section>
    <title>Poke()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>Poke</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>Poke</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.Poke (this uint value, ulong * uPtr, int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Write this value to the unsafe uPtr array. </para>
</para>

<para>Use for altering previous writes. Preserves existing data past the write. Same as Inject, only the bitposition is not a ref and is not incremented. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00492">492</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_aebc9ea90886b8af4fc06515a194050ce_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1af2bbd46e555555106cfd395a5df09373"/><section>
    <title>Poke()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>Poke</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>Poke</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.Poke (this ulong value, ulong * uPtr, int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Write this value to the unsafe uPtr array. </para>
</para>

<para>Use for altering previous writes. Preserves existing data past the write. Same as Inject, only the bitposition is not a ref and is not incremented. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00483">483</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_af2bbd46e555555106cfd395a5df09373_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7fc2ffb97ae1499104eb44a33c650a4f"/><section>
    <title>Poke()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>Poke</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>Poke</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.Poke (this ushort value, ulong * uPtr, int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Write this value to the unsafe uPtr array. </para>
</para>

<para>Use for altering previous writes. Preserves existing data past the write. Same as Inject, only the bitposition is not a ref and is not incremented. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00501">501</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_a7fc2ffb97ae1499104eb44a33c650a4f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1aa6df4cd317240173d82b6f64b87789b0"/><section>
    <title>PokeSigned()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>PokeSigned</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>PokeSigned</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.PokeSigned (this int value, ulong * uPtr, int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Overwrites this value to the unsafe buffer. </para>
</para>

<para>Uses zigzag encoding to retain the sign value. Unlike Inject, this does not increment the bitposition and is for one-off injections. Existing data past this inject is preserved. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00127">127</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_aa6df4cd317240173d82b6f64b87789b0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a04d0c93ea6e0ec310d9ffd38f05b3134"/><section>
    <title>PokeSigned()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>PokeSigned</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>PokeSigned</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.PokeSigned (this sbyte value, ulong * uPtr, int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Overwrites this value to the unsafe buffer. </para>
</para>

<para>Uses zigzag encoding to retain the sign value. Unlike Inject, this does not increment the bitposition and is for one-off injections. Existing data past this inject is preserved. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00147">147</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_a04d0c93ea6e0ec310d9ffd38f05b3134_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7dc1b1dabf93068e2acfbfbb5cd56d87"/><section>
    <title>PokeSigned()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>PokeSigned</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>PokeSigned</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.PokeSigned (this short value, ulong * uPtr, int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Overwrites this value to the unsafe buffer. </para>
</para>

<para>Uses zigzag encoding to retain the sign value. Unlike Inject, this does not increment the bitposition and is for one-off injections. Existing data past this inject is preserved. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00137">137</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_a7dc1b1dabf93068e2acfbfbb5cd56d87_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a5a17df40fe2c3d8d1861dfbc590e3aec"/><section>
    <title>PokeUnsigned()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>PokeUnsigned</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>PokeUnsigned</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.PokeUnsigned (this sbyte value, ulong * uPtr, int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Write this value to the unsafe uPtr array. </para>
</para>

<para>Use for altering previous writes. Preserves existing data past the write. Sign is ignored and value is cast to ulong. Same as Inject, only the bitposition is not a ref and is not incremented. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00549">549</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_a5a17df40fe2c3d8d1861dfbc590e3aec_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1aeffb0da43220a32fcc5ccc9def2ba49a"/><section>
    <title>PokeUnsigned()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>PokeUnsigned</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>PokeUnsigned</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.PokeUnsigned (this short value, ulong * uPtr, int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Write this value to the unsafe uPtr array. </para>
</para>

<para>Use for altering previous writes. Preserves existing data past the write. Sign is ignored and value is cast to ulong. Same as Inject, only the bitposition is not a ref and is not incremented. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00539">539</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_aeffb0da43220a32fcc5ccc9def2ba49a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1aac015a19abdb356f790cb158c399d236"/><section>
    <title>Read()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>Read</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>Read</secondary></indexterm>
<para><computeroutput>static unsafe ulong Photon.Compression.ArraySerializeUnsafe.Read (ulong * uPtr, int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Primary Unsafe Peek. </para>
</para>

<para>Fast read for byte[] and unit[] by treating them as ulong[]. Reads value at position without incrementing the bitposition. WARNING: There is no bounds checking on this method! </para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>uPtr</entry><entry>
<para>Cast your byte* or uint* to ulong*</para>
</entry>
                            </row>
                            <row>
<entry>bitposition</entry><entry></entry>
                            </row>
                            <row>
<entry>bits</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Returns the read value.</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00307">307</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1aed2650eee9804de6bf8b43e12da2748b"/><section>
    <title>Read()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>Read</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>Read</secondary></indexterm>
<para><computeroutput>static unsafe ulong Photon.Compression.ArraySerializeUnsafe.Read (ulong * uPtr, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Primary Unsafe Read. </para>
</para>

<para>Fast read for byte[] and unit[] by treating them as ulong[]. WARNING: There is no bounds checking on this method! </para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>uPtr</entry><entry>
<para>Cast your byte* or uint* to ulong*</para>
</entry>
                            </row>
                            <row>
<entry>bitposition</entry><entry></entry>
                            </row>
                            <row>
<entry>bits</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Returns the read value.</para>
</formalpara>
</para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00279">279</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_aed2650eee9804de6bf8b43e12da2748b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1ae5dc5927725bd8713a88e1a039120964"/><section>
    <title>ReadOutUnsafe()<computeroutput>[1/10]</computeroutput></title>
<indexterm><primary>ReadOutUnsafe</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>ReadOutUnsafe</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.ReadOutUnsafe (this byte[] source, int sourcePos, byte[] target, ref int targetPos, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Read the contents of one bitpacked array to another using Unsafe. </para>
</para>

<para>This generally requires arrays to have a total byte count divisible by 8, as they will be treated as ulong[] in unsafe. </para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>source</entry><entry></entry>
                            </row>
                            <row>
<entry>sourcePos</entry><entry>
<para>Bitpos of the source array to start read from.</para>
</entry>
                            </row>
                            <row>
<entry>target</entry><entry></entry>
                            </row>
                            <row>
<entry>targetPos</entry><entry>
<para>The target bitposition (that will be incremented with this write).</para>
</entry>
                            </row>
                            <row>
<entry>bits</entry><entry>
<para>Number of bits to copy. This should be the current bitpos of the source.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00882">882</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_ae5dc5927725bd8713a88e1a039120964_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7081dc037149909905051d9d4a3a44c8"/><section>
    <title>ReadOutUnsafe()<computeroutput>[2/10]</computeroutput></title>
<indexterm><primary>ReadOutUnsafe</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>ReadOutUnsafe</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.ReadOutUnsafe (this byte[] source, int sourcePos, uint[] target, ref int targetPos, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Read the contents of one bitpacked array to another using Unsafe. </para>
</para>

<para>This generally requires arrays to have a total byte count divisible by 8, as they will be treated as ulong[] in unsafe. </para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>source</entry><entry></entry>
                            </row>
                            <row>
<entry>sourcePos</entry><entry>
<para>Bitpos of the source array to start read from.</para>
</entry>
                            </row>
                            <row>
<entry>target</entry><entry></entry>
                            </row>
                            <row>
<entry>targetPos</entry><entry>
<para>The target bitposition (that will be incremented with this write).</para>
</entry>
                            </row>
                            <row>
<entry>bits</entry><entry>
<para>Number of bits to copy. This should be the current bitpos of the source.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00846">846</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_a7081dc037149909905051d9d4a3a44c8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a1bb8f817269d8af044c064423934edee"/><section>
    <title>ReadOutUnsafe()<computeroutput>[3/10]</computeroutput></title>
<indexterm><primary>ReadOutUnsafe</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>ReadOutUnsafe</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.ReadOutUnsafe (this byte[] source, int sourcePos, ulong[] target, ref int targetPos, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Read the contents of one bitpacked array to another using Unsafe. </para>
</para>

<para>This generally requires arrays to have a total byte count divisible by 8, as they will be treated as ulong[] in unsafe. </para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>source</entry><entry></entry>
                            </row>
                            <row>
<entry>sourcePos</entry><entry>
<para>Bitpos of the source array to start read from.</para>
</entry>
                            </row>
                            <row>
<entry>target</entry><entry></entry>
                            </row>
                            <row>
<entry>targetPos</entry><entry>
<para>The target bitposition (that will be incremented with this write).</para>
</entry>
                            </row>
                            <row>
<entry>bits</entry><entry>
<para>Number of bits to copy. This should be the current bitpos of the source.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00810">810</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_a1bb8f817269d8af044c064423934edee_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1aa833cc1c3b10ab0f18ca58690df814a8"/><section>
    <title>ReadOutUnsafe()<computeroutput>[4/10]</computeroutput></title>
<indexterm><primary>ReadOutUnsafe</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>ReadOutUnsafe</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.ReadOutUnsafe (this uint[] source, int sourcePos, byte[] target, ref int targetPos, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Read the contents of one bitpacked array to another using Unsafe. </para>
</para>

<para>This generally requires arrays to have a total byte count divisible by 8, as they will be treated as ulong[] in unsafe. </para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>source</entry><entry></entry>
                            </row>
                            <row>
<entry>sourcePos</entry><entry>
<para>Bitpos of the source array to start read from.</para>
</entry>
                            </row>
                            <row>
<entry>target</entry><entry></entry>
                            </row>
                            <row>
<entry>targetPos</entry><entry>
<para>The target bitposition (that will be incremented with this write).</para>
</entry>
                            </row>
                            <row>
<entry>bits</entry><entry>
<para>Number of bits to copy. This should be the current bitpos of the source.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00700">700</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_aa833cc1c3b10ab0f18ca58690df814a8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1ad2245200c53099068ed23d4259ed720a"/><section>
    <title>ReadOutUnsafe()<computeroutput>[5/10]</computeroutput></title>
<indexterm><primary>ReadOutUnsafe</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>ReadOutUnsafe</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.ReadOutUnsafe (this uint[] source, int sourcePos, uint[] target, ref int targetPos, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Read the contents of one bitpacked array to another using Unsafe. </para>
</para>

<para>This generally requires arrays to have a total byte count divisible by 8, as they will be treated as ulong[] in unsafe. </para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>source</entry><entry></entry>
                            </row>
                            <row>
<entry>sourcePos</entry><entry>
<para>Bitpos of the source array to start read from.</para>
</entry>
                            </row>
                            <row>
<entry>target</entry><entry></entry>
                            </row>
                            <row>
<entry>targetPos</entry><entry>
<para>The target bitposition (that will be incremented with this write).</para>
</entry>
                            </row>
                            <row>
<entry>bits</entry><entry>
<para>Number of bits to copy. This should be the current bitpos of the source.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00735">735</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_ad2245200c53099068ed23d4259ed720a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1ac3c44560ce8b15f8203bbef3c249d46f"/><section>
    <title>ReadOutUnsafe()<computeroutput>[6/10]</computeroutput></title>
<indexterm><primary>ReadOutUnsafe</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>ReadOutUnsafe</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.ReadOutUnsafe (this uint[] source, int sourcePos, ulong[] target, ref int targetPos, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Read the contents of one bitpacked array to another using Unsafe. </para>
</para>

<para>This generally requires arrays to have a total byte count divisible by 8, as they will be treated as ulong[] in unsafe. </para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>source</entry><entry></entry>
                            </row>
                            <row>
<entry>sourcePos</entry><entry>
<para>Bitpos of the source array to start read from.</para>
</entry>
                            </row>
                            <row>
<entry>target</entry><entry></entry>
                            </row>
                            <row>
<entry>targetPos</entry><entry>
<para>The target bitposition (that will be incremented with this write).</para>
</entry>
                            </row>
                            <row>
<entry>bits</entry><entry>
<para>Number of bits to copy. This should be the current bitpos of the source.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00771">771</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_ac3c44560ce8b15f8203bbef3c249d46f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1afaf99c9f84fc1c0f0f10931768bd76af"/><section>
    <title>ReadOutUnsafe()<computeroutput>[7/10]</computeroutput></title>
<indexterm><primary>ReadOutUnsafe</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>ReadOutUnsafe</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.ReadOutUnsafe (this ulong[] source, int sourcePos, byte[] target, ref int targetPos, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Read the contents of one bitpacked array to another using Unsafe. </para>
</para>

<para>This generally requires arrays to have a total byte count divisible by 8, as they will be treated as ulong[] in unsafe. </para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>source</entry><entry></entry>
                            </row>
                            <row>
<entry>sourcePos</entry><entry>
<para>Bitpos of the source array to start read from.</para>
</entry>
                            </row>
                            <row>
<entry>target</entry><entry></entry>
                            </row>
                            <row>
<entry>targetPos</entry><entry>
<para>The target bitposition (that will be incremented with this write).</para>
</entry>
                            </row>
                            <row>
<entry>bits</entry><entry>
<para>Number of bits to copy. This should be the current bitpos of the source.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00594">594</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_afaf99c9f84fc1c0f0f10931768bd76af_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a2870601c5be42e35dbb81baeaa4d8a75"/><section>
    <title>ReadOutUnsafe()<computeroutput>[8/10]</computeroutput></title>
<indexterm><primary>ReadOutUnsafe</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>ReadOutUnsafe</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.ReadOutUnsafe (this ulong[] source, int sourcePos, uint[] target, ref int targetPos, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Read the contents of one bitpacked array to another using Unsafe. </para>
</para>

<para>This generally requires arrays to have a total byte count divisible by 8, as they will be treated as ulong[] in unsafe. </para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>source</entry><entry></entry>
                            </row>
                            <row>
<entry>sourcePos</entry><entry>
<para>Bitpos of the source array to start read from.</para>
</entry>
                            </row>
                            <row>
<entry>target</entry><entry></entry>
                            </row>
                            <row>
<entry>targetPos</entry><entry>
<para>The target bitposition (that will be incremented with this write).</para>
</entry>
                            </row>
                            <row>
<entry>bits</entry><entry>
<para>Number of bits to copy. This should be the current bitpos of the source.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00629">629</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_a2870601c5be42e35dbb81baeaa4d8a75_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a16878d461a48f656e004dbc15483aca1"/><section>
    <title>ReadOutUnsafe()<computeroutput>[9/10]</computeroutput></title>
<indexterm><primary>ReadOutUnsafe</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>ReadOutUnsafe</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.ReadOutUnsafe (this ulong[] source, int sourcePos, ulong[] target, ref int targetPos, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Read the contents of one bitpacked array to another using Unsafe. </para>
</para>

<para>This generally requires arrays to have a total byte count divisible by 8, as they will be treated as ulong[] in unsafe. </para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>source</entry><entry></entry>
                            </row>
                            <row>
<entry>sourcePos</entry><entry>
<para>Bitpos of the source array to start read from.</para>
</entry>
                            </row>
                            <row>
<entry>target</entry><entry></entry>
                            </row>
                            <row>
<entry>targetPos</entry><entry>
<para>The target bitposition (that will be incremented with this write).</para>
</entry>
                            </row>
                            <row>
<entry>bits</entry><entry>
<para>Number of bits to copy. This should be the current bitpos of the source.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00663">663</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_a16878d461a48f656e004dbc15483aca1_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1aa29c7e4c647110ee57afcdd9ccc5d8dd"/><section>
    <title>ReadOutUnsafe()<computeroutput>[10/10]</computeroutput></title>
<indexterm><primary>ReadOutUnsafe</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>ReadOutUnsafe</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.ReadOutUnsafe (ulong * sourcePtr, int sourcePos, ulong * targetPtr, ref int targetPos, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Primary ReadOutUnsafe method. </para>
</para>

<para>WARNING: No bounds checking. Use with caution. Cast array pointers to ulong*. </para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>sourcePtr</entry><entry></entry>
                            </row>
                            <row>
<entry>sourcePos</entry><entry></entry>
                            </row>
                            <row>
<entry>targetPtr</entry><entry></entry>
                            </row>
                            <row>
<entry>targetPos</entry><entry></entry>
                            </row>
                            <row>
<entry>bits</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00567">567</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_aa29c7e4c647110ee57afcdd9ccc5d8dd_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a54c616819e08d226c702608cdfac40d7"/><section>
    <title>ReadSigned()</title>
<indexterm><primary>ReadSigned</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>ReadSigned</secondary></indexterm>
<para><computeroutput>static unsafe int Photon.Compression.ArraySerializeUnsafe.ReadSigned (ulong * uPtr, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Returns signed value read from the buffer. </para>
</para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00157">157</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_a54c616819e08d226c702608cdfac40d7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1"/><section>
    <title>Write()</title>
<indexterm><primary>Write</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>Write</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.Write (ulong * uPtr, ulong value, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Primary Unsafe writer. </para>
</para>

<para>Faster method for writing to byte[] or uint[] buffers. Uses unsafe to treat them as ulong[]. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>uPtr</entry><entry>
<para>Cast your byte* or uint* to ulong*</para>
</entry>
                            </row>
                            <row>
<entry>value</entry><entry></entry>
                            </row>
                            <row>
<entry>bitposition</entry><entry></entry>
                            </row>
                            <row>
<entry>bits</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00241">241</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_a7cb429a914dbfd6d416570d712e50ec1_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_photon_1_1_compression_1_1_array_serialize_unsafe_1aad43a38228ed7e77b5968bc763066d6b"/><section>
    <title>WriteSigned()</title>
<indexterm><primary>WriteSigned</primary><secondary>Photon.Compression.ArraySerializeUnsafe</secondary></indexterm>
<indexterm><primary>Photon.Compression.ArraySerializeUnsafe</primary><secondary>WriteSigned</secondary></indexterm>
<para><computeroutput>static unsafe void Photon.Compression.ArraySerializeUnsafe.WriteSigned (ulong * buffer, int value, ref int bitposition, int bits)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Writes value to this unsafe buffer. </para>
</para>

<para>Uses zigzag encoding to retain the sign value. Existing data past this inject is preserved. </para>
<para>
Definition at line <link linkend="__array_serialize_unsafe_8cs_source_1l00047">47</link> of file <link linkend="__array_serialize_unsafe_8cs_source">ArraySerializeUnsafe.cs</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_photon_1_1_compression_1_1_array_serialize_unsafe_aad43a38228ed7e77b5968bc763066d6b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/<link linkend="__array_serialize_unsafe_8cs">ArraySerializeUnsafe.cs</link></section>
</section>
