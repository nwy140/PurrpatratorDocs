<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_interface_photon_1_1_chat_1_1_i_chat_client_listener" xml:lang="en-US">
<title>Photon.Chat.IChatClientListener Interface Reference</title>
<indexterm><primary>Photon.Chat.IChatClientListener</primary></indexterm>
<para>

<para>Callback interface for <link linkend="_namespace_photon_1_1_chat">Chat</link> client side. </para>
 
</para>
Inheritance diagram for Photon.Chat.IChatClientListener:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="interface_photon_1_1_chat_1_1_i_chat_client_listener__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for Photon.Chat.IChatClientListener:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="interface_photon_1_1_chat_1_1_i_chat_client_listener__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_interface_photon_1_1_chat_1_1_i_chat_client_listener_1a4b905d8308b42d3da45d11193f928983">DebugReturn</link> (DebugLevel level, string message)</para>

<para>All debug output of the library will be reported through this method. </para>
</listitem>
            <listitem><para>void <link linkend="_interface_photon_1_1_chat_1_1_i_chat_client_listener_1a8d918edf361f65d6ab749da04604b138">OnDisconnected</link> ()</para>

<para>Disconnection happened. </para>
</listitem>
            <listitem><para>void <link linkend="_interface_photon_1_1_chat_1_1_i_chat_client_listener_1a41d19d1f3440902d92f33566e6e119bd">OnConnected</link> ()</para>

<para>Client is connected now. </para>
</listitem>
            <listitem><para>void <link linkend="_interface_photon_1_1_chat_1_1_i_chat_client_listener_1af2a31683b1810ff56a7e64422b5475dd">OnChatStateChange</link> (<link linkend="_namespace_photon_1_1_chat_1afc6e9ce1b2729658dbf7d583305c6c81">ChatState</link> state)</para>

<para>The <link linkend="_class_photon_1_1_chat_1_1_chat_client">ChatClient</link>&apos;s state changed. </para>
</listitem>
            <listitem><para>void <link linkend="_interface_photon_1_1_chat_1_1_i_chat_client_listener_1a047fefd675fbe4e06dcc31e0bee570d8">OnGetMessages</link> (string channelName, string[] senders, object[] messages)</para>

<para>Notifies app that client got new messages from server Number of senders is equal to number of messages in &apos;messages&apos;. </para>
</listitem>
            <listitem><para>void <link linkend="_interface_photon_1_1_chat_1_1_i_chat_client_listener_1a93f4a071a41e8cbe9eb2f57e20f25219">OnPrivateMessage</link> (string sender, object message, string channelName)</para>

<para>Notifies client about private message </para>
</listitem>
            <listitem><para>void <link linkend="_interface_photon_1_1_chat_1_1_i_chat_client_listener_1a39a2d82cd74d5ed54f7b9c0e0a8cd109">OnSubscribed</link> (string[] channels, bool[] results)</para>

<para>Result of Subscribe operation. </para>
</listitem>
            <listitem><para>void <link linkend="_interface_photon_1_1_chat_1_1_i_chat_client_listener_1a54c546b010d3578316532d0af31ee183">OnUnsubscribed</link> (string[] channels)</para>

<para>Result of Unsubscribe operation. </para>
</listitem>
            <listitem><para>void <link linkend="_interface_photon_1_1_chat_1_1_i_chat_client_listener_1aa420f4365915044e3a3cadba9727b613">OnStatusUpdate</link> (string user, int status, bool gotMessage, object message)</para>

<para>New status of another user (you get updates for users set in your friends list). </para>
</listitem>
            <listitem><para>void <link linkend="_interface_photon_1_1_chat_1_1_i_chat_client_listener_1aa67401171600e8626638314638cb7285">OnUserSubscribed</link> (string channel, string user)</para>

<para>A user has subscribed to a public chat channel </para>
</listitem>
            <listitem><para>void <link linkend="_interface_photon_1_1_chat_1_1_i_chat_client_listener_1ab5b18b3ac592c8c196052063f9c2f2bd">OnUserUnsubscribed</link> (string channel, string user)</para>

<para>A user has unsubscribed from a public chat channel </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Callback interface for <link linkend="_namespace_photon_1_1_chat">Chat</link> client side. </para>



<para>Contains callback methods to notify your app about updates. Must be provided to new <link linkend="_class_photon_1_1_chat_1_1_chat_client">ChatClient</link> in constructor </para>
<para>
Definition at line <link linkend="__i_chat_client_listener_8cs_source_1l00017">17</link> of file <link linkend="__i_chat_client_listener_8cs_source">IChatClientListener.cs</link>.</para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_interface_photon_1_1_chat_1_1_i_chat_client_listener_1a4b905d8308b42d3da45d11193f928983"/><section>
    <title>DebugReturn()</title>
<indexterm><primary>DebugReturn</primary><secondary>Photon.Chat.IChatClientListener</secondary></indexterm>
<indexterm><primary>Photon.Chat.IChatClientListener</primary><secondary>DebugReturn</secondary></indexterm>
<para><computeroutput>void Photon.Chat.IChatClientListener.DebugReturn (DebugLevel level, string message)</computeroutput></para><para>

<para>All debug output of the library will be reported through this method. </para>
</para>

<para>Print it or put it in a buffer to use it on-screen. </para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>level</entry><entry>
<para>DebugLevel (severity) of the message.</para>
</entry>
                            </row>
                            <row>
<entry>message</entry><entry>
<para>Debug text. Print to System.Console or screen.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_interface_photon_1_1_chat_1_1_i_chat_client_listener_1af2a31683b1810ff56a7e64422b5475dd"/><section>
    <title>OnChatStateChange()</title>
<indexterm><primary>OnChatStateChange</primary><secondary>Photon.Chat.IChatClientListener</secondary></indexterm>
<indexterm><primary>Photon.Chat.IChatClientListener</primary><secondary>OnChatStateChange</secondary></indexterm>
<para><computeroutput>void Photon.Chat.IChatClientListener.OnChatStateChange (<link linkend="_namespace_photon_1_1_chat_1afc6e9ce1b2729658dbf7d583305c6c81">ChatState</link> state)</computeroutput></para><para>

<para>The <link linkend="_class_photon_1_1_chat_1_1_chat_client">ChatClient</link>&apos;s state changed. </para>
</para>

<para>Usually, OnConnected and OnDisconnected are the callbacks to react to.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>state</entry><entry>
<para>The new state.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Implemented in <link linkend="_class_photon_1_1_chat_1_1_demo_1_1_chat_gui_1a962c0d76f82ca2aa2d967e5ed1d4e518">Photon.Chat.Demo.ChatGui</link>.</para>
</section>
<anchor xml:id="_interface_photon_1_1_chat_1_1_i_chat_client_listener_1a41d19d1f3440902d92f33566e6e119bd"/><section>
    <title>OnConnected()</title>
<indexterm><primary>OnConnected</primary><secondary>Photon.Chat.IChatClientListener</secondary></indexterm>
<indexterm><primary>Photon.Chat.IChatClientListener</primary><secondary>OnConnected</secondary></indexterm>
<para><computeroutput>void Photon.Chat.IChatClientListener.OnConnected ( )</computeroutput></para><para>

<para>Client is connected now. </para>
</para>

<para>Clients have to be connected before they can send their state, subscribe to channels and send any messages. </para>
<para>
Implemented in <link linkend="_class_photon_1_1_chat_1_1_demo_1_1_chat_gui_1ac18c9607a7e0bb7ccf1780f0de43f768">Photon.Chat.Demo.ChatGui</link>.</para>
</section>
<anchor xml:id="_interface_photon_1_1_chat_1_1_i_chat_client_listener_1a8d918edf361f65d6ab749da04604b138"/><section>
    <title>OnDisconnected()</title>
<indexterm><primary>OnDisconnected</primary><secondary>Photon.Chat.IChatClientListener</secondary></indexterm>
<indexterm><primary>Photon.Chat.IChatClientListener</primary><secondary>OnDisconnected</secondary></indexterm>
<para><computeroutput>void Photon.Chat.IChatClientListener.OnDisconnected ( )</computeroutput></para><para>

<para>Disconnection happened. </para>
</para>
<para>
Implemented in <link linkend="_class_photon_1_1_chat_1_1_demo_1_1_chat_gui_1ad850fcc2f076ecc299f0332388fb624a">Photon.Chat.Demo.ChatGui</link>.</para>
</section>
<anchor xml:id="_interface_photon_1_1_chat_1_1_i_chat_client_listener_1a047fefd675fbe4e06dcc31e0bee570d8"/><section>
    <title>OnGetMessages()</title>
<indexterm><primary>OnGetMessages</primary><secondary>Photon.Chat.IChatClientListener</secondary></indexterm>
<indexterm><primary>Photon.Chat.IChatClientListener</primary><secondary>OnGetMessages</secondary></indexterm>
<para><computeroutput>void Photon.Chat.IChatClientListener.OnGetMessages (string channelName, string[] senders, object[] messages)</computeroutput></para><para>

<para>Notifies app that client got new messages from server Number of senders is equal to number of messages in &apos;messages&apos;. </para>
</para>

<para>Sender with number &apos;0&apos; corresponds to message with number &apos;0&apos;, sender with number &apos;1&apos; corresponds to message with number &apos;1&apos; and so on </para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>channelName</entry><entry>
<para>channel from where messages came</para>
</entry>
                            </row>
                            <row>
<entry>senders</entry><entry>
<para>list of users who sent messages</para>
</entry>
                            </row>
                            <row>
<entry>messages</entry><entry>
<para>list of messages it self</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Implemented in <link linkend="_class_photon_1_1_chat_1_1_demo_1_1_chat_gui_1a95df1a6a0dc53620b9f1127a04208cdd">Photon.Chat.Demo.ChatGui</link>.</para>
</section>
<anchor xml:id="_interface_photon_1_1_chat_1_1_i_chat_client_listener_1a93f4a071a41e8cbe9eb2f57e20f25219"/><section>
    <title>OnPrivateMessage()</title>
<indexterm><primary>OnPrivateMessage</primary><secondary>Photon.Chat.IChatClientListener</secondary></indexterm>
<indexterm><primary>Photon.Chat.IChatClientListener</primary><secondary>OnPrivateMessage</secondary></indexterm>
<para><computeroutput>void Photon.Chat.IChatClientListener.OnPrivateMessage (string sender, object message, string channelName)</computeroutput></para><para>

<para>Notifies client about private message </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>sender</entry><entry>
<para>user who sent this message</para>
</entry>
                            </row>
                            <row>
<entry>message</entry><entry>
<para>message it self</para>
</entry>
                            </row>
                            <row>
<entry>channelName</entry><entry>
<para>channelName for private messages (messages you sent yourself get added to a channel per target username)</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Implemented in <link linkend="_class_photon_1_1_chat_1_1_demo_1_1_chat_gui_1a46a6f35bd601075026d55326799eaf29">Photon.Chat.Demo.ChatGui</link>.</para>
</section>
<anchor xml:id="_interface_photon_1_1_chat_1_1_i_chat_client_listener_1aa420f4365915044e3a3cadba9727b613"/><section>
    <title>OnStatusUpdate()</title>
<indexterm><primary>OnStatusUpdate</primary><secondary>Photon.Chat.IChatClientListener</secondary></indexterm>
<indexterm><primary>Photon.Chat.IChatClientListener</primary><secondary>OnStatusUpdate</secondary></indexterm>
<para><computeroutput>void Photon.Chat.IChatClientListener.OnStatusUpdate (string user, int status, bool gotMessage, object message)</computeroutput></para><para>

<para>New status of another user (you get updates for users set in your friends list). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>user</entry><entry>
<para>Name of the user.</para>
</entry>
                            </row>
                            <row>
<entry>status</entry><entry>
<para>New status of that user.</para>
</entry>
                            </row>
                            <row>
<entry>gotMessage</entry><entry>
<para>True if the status contains a message you should cache locally. False: This status update does not include a message (keep any you have).</para>
</entry>
                            </row>
                            <row>
<entry>message</entry><entry>
<para>Message that user set.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Implemented in <link linkend="_class_photon_1_1_chat_1_1_demo_1_1_chat_gui_1ac7ca0f02c1fddb6e4869ac398b46fb77">Photon.Chat.Demo.ChatGui</link>.</para>
</section>
<anchor xml:id="_interface_photon_1_1_chat_1_1_i_chat_client_listener_1a39a2d82cd74d5ed54f7b9c0e0a8cd109"/><section>
    <title>OnSubscribed()</title>
<indexterm><primary>OnSubscribed</primary><secondary>Photon.Chat.IChatClientListener</secondary></indexterm>
<indexterm><primary>Photon.Chat.IChatClientListener</primary><secondary>OnSubscribed</secondary></indexterm>
<para><computeroutput>void Photon.Chat.IChatClientListener.OnSubscribed (string[] channels, bool[] results)</computeroutput></para><para>

<para>Result of Subscribe operation. </para>
</para>

<para>Returns subscription result for every requested channel name. </para>

<para>If multiple channels sent in Subscribe operation, OnSubscribed may be called several times, each call with part of sent array or with single channel in &quot;channels&quot; parameter. Calls order and order of channels in &quot;channels&quot; parameter may differ from order of channels in &quot;channels&quot; parameter of Subscribe operation. </para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>channels</entry><entry>
<para>Array of channel names.</para>
</entry>
                            </row>
                            <row>
<entry>results</entry><entry>
<para>Per channel result if subscribed.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Implemented in <link linkend="_class_photon_1_1_chat_1_1_demo_1_1_chat_gui_1a23d955970144389370fe34cb6d30cc50">Photon.Chat.Demo.ChatGui</link>.</para>
</section>
<anchor xml:id="_interface_photon_1_1_chat_1_1_i_chat_client_listener_1a54c546b010d3578316532d0af31ee183"/><section>
    <title>OnUnsubscribed()</title>
<indexterm><primary>OnUnsubscribed</primary><secondary>Photon.Chat.IChatClientListener</secondary></indexterm>
<indexterm><primary>Photon.Chat.IChatClientListener</primary><secondary>OnUnsubscribed</secondary></indexterm>
<para><computeroutput>void Photon.Chat.IChatClientListener.OnUnsubscribed (string[] channels)</computeroutput></para><para>

<para>Result of Unsubscribe operation. </para>
</para>

<para>Returns for channel name if the channel is now unsubscribed. </para>

<para>If multiple channels sent in Unsubscribe operation, OnUnsubscribed may be called several times, each call with part of sent array or with single channel in &quot;channels&quot; parameter. Calls order and order of channels in &quot;channels&quot; parameter may differ from order of channels in &quot;channels&quot; parameter of Unsubscribe operation. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>channels</entry><entry>
<para>Array of channel names that are no longer subscribed.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Implemented in <link linkend="_class_photon_1_1_chat_1_1_demo_1_1_chat_gui_1a75998d8e5eed04c3e243e60a9c36fd51">Photon.Chat.Demo.ChatGui</link>.</para>
</section>
<anchor xml:id="_interface_photon_1_1_chat_1_1_i_chat_client_listener_1aa67401171600e8626638314638cb7285"/><section>
    <title>OnUserSubscribed()</title>
<indexterm><primary>OnUserSubscribed</primary><secondary>Photon.Chat.IChatClientListener</secondary></indexterm>
<indexterm><primary>Photon.Chat.IChatClientListener</primary><secondary>OnUserSubscribed</secondary></indexterm>
<para><computeroutput>void Photon.Chat.IChatClientListener.OnUserSubscribed (string channel, string user)</computeroutput></para><para>

<para>A user has subscribed to a public chat channel </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>channel</entry><entry>
<para>Name of the chat channel</para>
</entry>
                            </row>
                            <row>
<entry>user</entry><entry>
<para>UserId of the user who subscribed</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Implemented in <link linkend="_class_photon_1_1_chat_1_1_demo_1_1_chat_gui_1a5ef6b45bbdd05eb8f2be7db7d3bcaaa7">Photon.Chat.Demo.ChatGui</link>.</para>
</section>
<anchor xml:id="_interface_photon_1_1_chat_1_1_i_chat_client_listener_1ab5b18b3ac592c8c196052063f9c2f2bd"/><section>
    <title>OnUserUnsubscribed()</title>
<indexterm><primary>OnUserUnsubscribed</primary><secondary>Photon.Chat.IChatClientListener</secondary></indexterm>
<indexterm><primary>Photon.Chat.IChatClientListener</primary><secondary>OnUserUnsubscribed</secondary></indexterm>
<para><computeroutput>void Photon.Chat.IChatClientListener.OnUserUnsubscribed (string channel, string user)</computeroutput></para><para>

<para>A user has unsubscribed from a public chat channel </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>channel</entry><entry>
<para>Name of the chat channel</para>
</entry>
                            </row>
                            <row>
<entry>user</entry><entry>
<para>UserId of the user who unsubscribed</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Implemented in <link linkend="_class_photon_1_1_chat_1_1_demo_1_1_chat_gui_1ae4a6d26fbbd491401e8848921d7cb0c4">Photon.Chat.Demo.ChatGui</link>.</para>
</section>
<para>
The documentation for this interface was generated from the following file:</para>
C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonChat/Code/<link linkend="__i_chat_client_listener_8cs">IChatClientListener.cs</link></section>
</section>
