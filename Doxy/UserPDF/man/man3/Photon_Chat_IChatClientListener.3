.TH "Photon.Chat.IChatClientListener" 3 "Mon Apr 18 2022" "Purrpatrator User manual" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Photon.Chat.IChatClientListener \- Callback interface for \fBChat\fP client side\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherited by \fBPhoton\&.Chat\&.Demo\&.ChatGui\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBDebugReturn\fP (DebugLevel level, string message)"
.br
.RI "All debug output of the library will be reported through this method\&. "
.ti -1c
.RI "void \fBOnDisconnected\fP ()"
.br
.RI "Disconnection happened\&. "
.ti -1c
.RI "void \fBOnConnected\fP ()"
.br
.RI "Client is connected now\&. "
.ti -1c
.RI "void \fBOnChatStateChange\fP (\fBChatState\fP state)"
.br
.RI "The \fBChatClient\fP's state changed\&. "
.ti -1c
.RI "void \fBOnGetMessages\fP (string channelName, string[] senders, object[] messages)"
.br
.RI "Notifies app that client got new messages from server Number of senders is equal to number of messages in 'messages'\&. "
.ti -1c
.RI "void \fBOnPrivateMessage\fP (string sender, object message, string channelName)"
.br
.RI "Notifies client about private message "
.ti -1c
.RI "void \fBOnSubscribed\fP (string[] channels, bool[] results)"
.br
.RI "Result of Subscribe operation\&. "
.ti -1c
.RI "void \fBOnUnsubscribed\fP (string[] channels)"
.br
.RI "Result of Unsubscribe operation\&. "
.ti -1c
.RI "void \fBOnStatusUpdate\fP (string user, int status, bool gotMessage, object message)"
.br
.RI "New status of another user (you get updates for users set in your friends list)\&. "
.ti -1c
.RI "void \fBOnUserSubscribed\fP (string channel, string user)"
.br
.RI "A user has subscribed to a public chat channel "
.ti -1c
.RI "void \fBOnUserUnsubscribed\fP (string channel, string user)"
.br
.RI "A user has unsubscribed from a public chat channel "
.in -1c
.SH "Detailed Description"
.PP 
Callback interface for \fBChat\fP client side\&. 

Contains callback methods to notify your app about updates\&. Must be provided to new \fBChatClient\fP in constructor 
.PP
Definition at line \fB17\fP of file \fBIChatClientListener\&.cs\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void Photon\&.Chat\&.IChatClientListener\&.DebugReturn (DebugLevel level, string message)"

.PP
All debug output of the library will be reported through this method\&. Print it or put it in a buffer to use it on-screen\&. 
.PP
\fBParameters\fP
.RS 4
\fIlevel\fP DebugLevel (severity) of the message\&.
.br
\fImessage\fP Debug text\&. Print to System\&.Console or screen\&.
.RE
.PP

.SS "void Photon\&.Chat\&.IChatClientListener\&.OnChatStateChange (\fBChatState\fP state)"

.PP
The \fBChatClient\fP's state changed\&. Usually, OnConnected and OnDisconnected are the callbacks to react to\&.
.PP
\fBParameters\fP
.RS 4
\fIstate\fP The new state\&.
.RE
.PP

.PP
Implemented in \fBPhoton\&.Chat\&.Demo\&.ChatGui\fP\&.
.SS "void Photon\&.Chat\&.IChatClientListener\&.OnConnected ()"

.PP
Client is connected now\&. Clients have to be connected before they can send their state, subscribe to channels and send any messages\&. 
.PP
Implemented in \fBPhoton\&.Chat\&.Demo\&.ChatGui\fP\&.
.SS "void Photon\&.Chat\&.IChatClientListener\&.OnDisconnected ()"

.PP
Disconnection happened\&. 
.PP
Implemented in \fBPhoton\&.Chat\&.Demo\&.ChatGui\fP\&.
.SS "void Photon\&.Chat\&.IChatClientListener\&.OnGetMessages (string channelName, string[] senders, object[] messages)"

.PP
Notifies app that client got new messages from server Number of senders is equal to number of messages in 'messages'\&. Sender with number '0' corresponds to message with number '0', sender with number '1' corresponds to message with number '1' and so on 
.PP
\fBParameters\fP
.RS 4
\fIchannelName\fP channel from where messages came
.br
\fIsenders\fP list of users who sent messages
.br
\fImessages\fP list of messages it self
.RE
.PP

.PP
Implemented in \fBPhoton\&.Chat\&.Demo\&.ChatGui\fP\&.
.SS "void Photon\&.Chat\&.IChatClientListener\&.OnPrivateMessage (string sender, object message, string channelName)"

.PP
Notifies client about private message 
.PP
\fBParameters\fP
.RS 4
\fIsender\fP user who sent this message
.br
\fImessage\fP message it self
.br
\fIchannelName\fP channelName for private messages (messages you sent yourself get added to a channel per target username)
.RE
.PP

.PP
Implemented in \fBPhoton\&.Chat\&.Demo\&.ChatGui\fP\&.
.SS "void Photon\&.Chat\&.IChatClientListener\&.OnStatusUpdate (string user, int status, bool gotMessage, object message)"

.PP
New status of another user (you get updates for users set in your friends list)\&. 
.PP
\fBParameters\fP
.RS 4
\fIuser\fP Name of the user\&.
.br
\fIstatus\fP New status of that user\&.
.br
\fIgotMessage\fP True if the status contains a message you should cache locally\&. False: This status update does not include a message (keep any you have)\&.
.br
\fImessage\fP Message that user set\&.
.RE
.PP

.PP
Implemented in \fBPhoton\&.Chat\&.Demo\&.ChatGui\fP\&.
.SS "void Photon\&.Chat\&.IChatClientListener\&.OnSubscribed (string[] channels, bool[] results)"

.PP
Result of Subscribe operation\&. Returns subscription result for every requested channel name\&. 
.PP
If multiple channels sent in Subscribe operation, OnSubscribed may be called several times, each call with part of sent array or with single channel in 'channels' parameter\&. Calls order and order of channels in 'channels' parameter may differ from order of channels in 'channels' parameter of Subscribe operation\&. 
.PP
\fBParameters\fP
.RS 4
\fIchannels\fP Array of channel names\&.
.br
\fIresults\fP Per channel result if subscribed\&.
.RE
.PP

.PP
Implemented in \fBPhoton\&.Chat\&.Demo\&.ChatGui\fP\&.
.SS "void Photon\&.Chat\&.IChatClientListener\&.OnUnsubscribed (string[] channels)"

.PP
Result of Unsubscribe operation\&. Returns for channel name if the channel is now unsubscribed\&. 
.PP
If multiple channels sent in Unsubscribe operation, OnUnsubscribed may be called several times, each call with part of sent array or with single channel in 'channels' parameter\&. Calls order and order of channels in 'channels' parameter may differ from order of channels in 'channels' parameter of Unsubscribe operation\&. 
.PP
\fBParameters\fP
.RS 4
\fIchannels\fP Array of channel names that are no longer subscribed\&.
.RE
.PP

.PP
Implemented in \fBPhoton\&.Chat\&.Demo\&.ChatGui\fP\&.
.SS "void Photon\&.Chat\&.IChatClientListener\&.OnUserSubscribed (string channel, string user)"

.PP
A user has subscribed to a public chat channel 
.PP
\fBParameters\fP
.RS 4
\fIchannel\fP Name of the chat channel
.br
\fIuser\fP UserId of the user who subscribed
.RE
.PP

.PP
Implemented in \fBPhoton\&.Chat\&.Demo\&.ChatGui\fP\&.
.SS "void Photon\&.Chat\&.IChatClientListener\&.OnUserUnsubscribed (string channel, string user)"

.PP
A user has unsubscribed from a public chat channel 
.PP
\fBParameters\fP
.RS 4
\fIchannel\fP Name of the chat channel
.br
\fIuser\fP UserId of the user who unsubscribed
.RE
.PP

.PP
Implemented in \fBPhoton\&.Chat\&.Demo\&.ChatGui\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Purrpatrator User manual from the source code\&.
