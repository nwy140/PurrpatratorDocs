.TH "Photon.Compression.ArraySerializeUnsafe" 3 "Mon Apr 18 2022" "Purrpatrator User manual" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Photon.Compression.ArraySerializeUnsafe
.SH SYNOPSIS
.br
.PP
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static unsafe void \fBWriteSigned\fP (ulong *buffer, int value, ref int bitposition, int bits)"
.br
.RI "Writes value to this unsafe buffer\&. "
.ti -1c
.RI "static unsafe void \fBAppendSigned\fP (ulong *buffer, int value, ref int bitposition, int bits)"
.br
.RI "Appends value to this unsafe buffer\&. "
.ti -1c
.RI "static unsafe void \fBAddSigned\fP (this int value, ulong *uPtr, ref int bitposition, int bits)"
.br
.RI "Appends this value to the unsafe buffer\&. "
.ti -1c
.RI "static unsafe void \fBAddSigned\fP (this short value, ulong *uPtr, ref int bitposition, int bits)"
.br
.RI "Appends this value to the unsafe buffer\&. "
.ti -1c
.RI "static unsafe void \fBAddSigned\fP (this sbyte value, ulong *uPtr, ref int bitposition, int bits)"
.br
.RI "Appends this value to the unsafe buffer\&. "
.ti -1c
.RI "static unsafe void \fBInjectSigned\fP (this int value, ulong *uPtr, ref int bitposition, int bits)"
.br
.RI "Overwrites this value to the unsafe buffer\&. "
.ti -1c
.RI "static unsafe void \fBInjectSigned\fP (this short value, ulong *uPtr, ref int bitposition, int bits)"
.br
.RI "Overwrites this value to the unsafe buffer\&. "
.ti -1c
.RI "static unsafe void \fBInjectSigned\fP (this sbyte value, ulong *uPtr, ref int bitposition, int bits)"
.br
.RI "Overwrites this value to the unsafe buffer\&. "
.ti -1c
.RI "static unsafe void \fBPokeSigned\fP (this int value, ulong *uPtr, int bitposition, int bits)"
.br
.RI "Overwrites this value to the unsafe buffer\&. "
.ti -1c
.RI "static unsafe void \fBPokeSigned\fP (this short value, ulong *uPtr, int bitposition, int bits)"
.br
.RI "Overwrites this value to the unsafe buffer\&. "
.ti -1c
.RI "static unsafe void \fBPokeSigned\fP (this sbyte value, ulong *uPtr, int bitposition, int bits)"
.br
.RI "Overwrites this value to the unsafe buffer\&. "
.ti -1c
.RI "static unsafe int \fBReadSigned\fP (ulong *uPtr, ref int bitposition, int bits)"
.br
.RI "Returns signed value read from the buffer\&. "
.ti -1c
.RI "static unsafe int \fBPeekSigned\fP (ulong *uPtr, int bitposition, int bits)"
.br
.RI "Returns signed value read from the buffer\&. "
.ti -1c
.RI "static unsafe void \fBAppend\fP (ulong *uPtr, ulong value, ref int bitposition, int bits)"
.br
.RI "Primary Append writer\&. "
.ti -1c
.RI "static unsafe void \fBWrite\fP (ulong *uPtr, ulong value, ref int bitposition, int bits)"
.br
.RI "Primary Unsafe writer\&. "
.ti -1c
.RI "static unsafe ulong \fBRead\fP (ulong *uPtr, ref int bitposition, int bits)"
.br
.RI "Primary Unsafe Read\&. "
.ti -1c
.RI "static unsafe ulong \fBRead\fP (ulong *uPtr, int bitposition, int bits)"
.br
.RI "Primary Unsafe Peek\&. "
.ti -1c
.RI "static unsafe void \fBAdd\fP (this ulong value, ulong *uPtr, int bitposition, int bits)"
.br
.RI "Append this value to the unsafe uPtr array\&. "
.ti -1c
.RI "static unsafe void \fBAdd\fP (this uint value, ulong *uPtr, int bitposition, int bits)"
.br
.RI "Append this value to the unsafe uPtr array\&. "
.ti -1c
.RI "static unsafe void \fBAdd\fP (this ushort value, ulong *uPtr, int bitposition, int bits)"
.br
.RI "Append this value to the unsafe uPtr array\&. "
.ti -1c
.RI "static unsafe void \fBAdd\fP (this byte value, ulong *uPtr, int bitposition, int bits)"
.br
.RI "Append this value to the unsafe uPtr array\&. "
.ti -1c
.RI "static unsafe void \fBAddUnsigned\fP (this long value, ulong *uPtr, int bitposition, int bits)"
.br
.RI "Append this value to the unsafe uPtr array\&. "
.ti -1c
.RI "static unsafe void \fBAddUnsigned\fP (this int value, ulong *uPtr, int bitposition, int bits)"
.br
.RI "Append this value to the unsafe uPtr array\&. "
.ti -1c
.RI "static unsafe void \fBAddUnsigned\fP (this short value, ulong *uPtr, int bitposition, int bits)"
.br
.RI "Append this value to the unsafe uPtr array\&. "
.ti -1c
.RI "static unsafe void \fBAddUnsigned\fP (this sbyte value, ulong *uPtr, int bitposition, int bits)"
.br
.RI "Append this value to the unsafe uPtr array\&. "
.ti -1c
.RI "static unsafe void \fBInject\fP (this ulong value, ulong *uPtr, ref int bitposition, int bits)"
.br
.RI "Write this value to the unsafe uPtr array\&. "
.ti -1c
.RI "static unsafe void \fBInject\fP (this uint value, ulong *uPtr, ref int bitposition, int bits)"
.br
.RI "Write this value to the unsafe uPtr array\&. "
.ti -1c
.RI "static unsafe void \fBInject\fP (this ushort value, ulong *uPtr, ref int bitposition, int bits)"
.br
.RI "Write this value to the unsafe uPtr array\&. "
.ti -1c
.RI "static unsafe void \fBInject\fP (this byte value, ulong *uPtr, ref int bitposition, int bits)"
.br
.RI "Write this value to the unsafe uPtr array\&. "
.ti -1c
.RI "static unsafe void \fBInjectUnsigned\fP (this long value, ulong *uPtr, ref int bitposition, int bits)"
.br
.RI "Write this value to the unsafe uPtr array\&. "
.ti -1c
.RI "static unsafe void \fBInjectUnsigned\fP (this int value, ulong *uPtr, ref int bitposition, int bits)"
.br
.RI "Write this value to the unsafe uPtr array\&. "
.ti -1c
.RI "static unsafe void \fBInjectUnsigned\fP (this short value, ulong *uPtr, int bitposition, int bits)"
.br
.RI "Write this value to the unsafe uPtr array\&. "
.ti -1c
.RI "static unsafe void \fBInjectUnsigned\fP (this sbyte value, ulong *uPtr, ref int bitposition, int bits)"
.br
.RI "Write this value to the unsafe uPtr array\&. "
.ti -1c
.RI "static unsafe void \fBPoke\fP (this ulong value, ulong *uPtr, int bitposition, int bits)"
.br
.RI "Write this value to the unsafe uPtr array\&. "
.ti -1c
.RI "static unsafe void \fBPoke\fP (this uint value, ulong *uPtr, int bitposition, int bits)"
.br
.RI "Write this value to the unsafe uPtr array\&. "
.ti -1c
.RI "static unsafe void \fBPoke\fP (this ushort value, ulong *uPtr, int bitposition, int bits)"
.br
.RI "Write this value to the unsafe uPtr array\&. "
.ti -1c
.RI "static unsafe void \fBPoke\fP (this byte value, ulong *uPtr, int bitposition, int bits)"
.br
.RI "Write this value to the unsafe uPtr array\&. "
.ti -1c
.RI "static unsafe void \fBInjectUnsigned\fP (this long value, ulong *uPtr, int bitposition, int bits)"
.br
.RI "Write this value to the unsafe uPtr array\&. "
.ti -1c
.RI "static unsafe void \fBInjectUnsigned\fP (this int value, ulong *uPtr, int bitposition, int bits)"
.br
.RI "Write this value to the unsafe uPtr array\&. "
.ti -1c
.RI "static unsafe void \fBPokeUnsigned\fP (this short value, ulong *uPtr, int bitposition, int bits)"
.br
.RI "Write this value to the unsafe uPtr array\&. "
.ti -1c
.RI "static unsafe void \fBPokeUnsigned\fP (this sbyte value, ulong *uPtr, int bitposition, int bits)"
.br
.RI "Write this value to the unsafe uPtr array\&. "
.ti -1c
.RI "static unsafe void \fBReadOutUnsafe\fP (ulong *sourcePtr, int sourcePos, ulong *targetPtr, ref int targetPos, int bits)"
.br
.RI "Primary ReadOutUnsafe method\&. "
.ti -1c
.RI "static unsafe void \fBReadOutUnsafe\fP (this ulong[] source, int sourcePos, byte[] target, ref int targetPos, int bits)"
.br
.RI "Read the contents of one bitpacked array to another using Unsafe\&. "
.ti -1c
.RI "static unsafe void \fBReadOutUnsafe\fP (this ulong[] source, int sourcePos, uint[] target, ref int targetPos, int bits)"
.br
.RI "Read the contents of one bitpacked array to another using Unsafe\&. "
.ti -1c
.RI "static unsafe void \fBReadOutUnsafe\fP (this ulong[] source, int sourcePos, ulong[] target, ref int targetPos, int bits)"
.br
.RI "Read the contents of one bitpacked array to another using Unsafe\&. "
.ti -1c
.RI "static unsafe void \fBReadOutUnsafe\fP (this uint[] source, int sourcePos, byte[] target, ref int targetPos, int bits)"
.br
.RI "Read the contents of one bitpacked array to another using Unsafe\&. "
.ti -1c
.RI "static unsafe void \fBReadOutUnsafe\fP (this uint[] source, int sourcePos, uint[] target, ref int targetPos, int bits)"
.br
.RI "Read the contents of one bitpacked array to another using Unsafe\&. "
.ti -1c
.RI "static unsafe void \fBReadOutUnsafe\fP (this uint[] source, int sourcePos, ulong[] target, ref int targetPos, int bits)"
.br
.RI "Read the contents of one bitpacked array to another using Unsafe\&. "
.ti -1c
.RI "static unsafe void \fBReadOutUnsafe\fP (this byte[] source, int sourcePos, ulong[] target, ref int targetPos, int bits)"
.br
.RI "Read the contents of one bitpacked array to another using Unsafe\&. "
.ti -1c
.RI "static unsafe void \fBReadOutUnsafe\fP (this byte[] source, int sourcePos, uint[] target, ref int targetPos, int bits)"
.br
.RI "Read the contents of one bitpacked array to another using Unsafe\&. "
.ti -1c
.RI "static unsafe void \fBReadOutUnsafe\fP (this byte[] source, int sourcePos, byte[] target, ref int targetPos, int bits)"
.br
.RI "Read the contents of one bitpacked array to another using Unsafe\&. "
.in -1c
.SH "Detailed Description"
.PP 
Definition at line \fB36\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.Add (this byte value, ulong * uPtr, int bitposition, int bits)\fC [static]\fP"

.PP
Append this value to the unsafe uPtr array\&. Use for altering previous writes\&. Does not preserve existing data past the write\&. Use for sequential writes only\&. WARNING: There is no bounds checking on this\&. If you write too far, you will crash\&. 
.PP
Definition at line \fB359\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.Add (this uint value, ulong * uPtr, int bitposition, int bits)\fC [static]\fP"

.PP
Append this value to the unsafe uPtr array\&. Use for altering previous writes\&. Does not preserve existing data past the write\&. Use for sequential writes only\&. WARNING: There is no bounds checking on this\&. If you write too far, you will crash\&. 
.PP
Definition at line \fB341\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.Add (this ulong value, ulong * uPtr, int bitposition, int bits)\fC [static]\fP"

.PP
Append this value to the unsafe uPtr array\&. Use for altering previous writes\&. Does not preserve existing data past the write\&. Use for sequential writes only\&. WARNING: There is no bounds checking on this\&. If you write too far, you will crash\&. 
.PP
Definition at line \fB332\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.Add (this ushort value, ulong * uPtr, int bitposition, int bits)\fC [static]\fP"

.PP
Append this value to the unsafe uPtr array\&. Use for altering previous writes\&. Does not preserve existing data past the write\&. Use for sequential writes only\&. WARNING: There is no bounds checking on this\&. If you write too far, you will crash\&. 
.PP
Definition at line \fB350\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.AddSigned (this int value, ulong * uPtr, ref int bitposition, int bits)\fC [static]\fP"

.PP
Appends this value to the unsafe buffer\&. Uses zigzag encoding to retain the sign value\&. Existing data past this inject is NOT preserved in exchange for a faster write\&. 
.PP
Definition at line \fB68\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.AddSigned (this sbyte value, ulong * uPtr, ref int bitposition, int bits)\fC [static]\fP"

.PP
Appends this value to the unsafe buffer\&. Uses zigzag encoding to retain the sign value\&. Existing data past this inject is NOT preserved in exchange for a faster write\&. 
.PP
Definition at line \fB86\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.AddSigned (this short value, ulong * uPtr, ref int bitposition, int bits)\fC [static]\fP"

.PP
Appends this value to the unsafe buffer\&. Uses zigzag encoding to retain the sign value\&. Existing data past this inject is NOT preserved in exchange for a faster write\&. 
.PP
Definition at line \fB77\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.AddUnsigned (this int value, ulong * uPtr, int bitposition, int bits)\fC [static]\fP"

.PP
Append this value to the unsafe uPtr array\&. Use for altering previous writes\&. Does not preserve existing data past the write\&. Use for sequential writes only\&. Sign is ignored and value is cast to ulong\&. WARNING: There is no bounds checking on this\&. If you write too far, you will crash\&. 
.PP
Definition at line \fB378\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.AddUnsigned (this long value, ulong * uPtr, int bitposition, int bits)\fC [static]\fP"

.PP
Append this value to the unsafe uPtr array\&. Use for altering previous writes\&. Does not preserve existing data past the write\&. Use for sequential writes only\&. Sign is ignored and value is cast to ulong\&. WARNING: There is no bounds checking on this\&. If you write too far, you will crash\&. 
.PP
Definition at line \fB369\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.AddUnsigned (this sbyte value, ulong * uPtr, int bitposition, int bits)\fC [static]\fP"

.PP
Append this value to the unsafe uPtr array\&. Use for altering previous writes\&. Does not preserve existing data past the write\&. Use for sequential writes only\&. Sign is ignored and value is cast to ulong\&. WARNING: There is no bounds checking on this\&. If you write too far, you will crash\&. 
.PP
Definition at line \fB396\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.AddUnsigned (this short value, ulong * uPtr, int bitposition, int bits)\fC [static]\fP"

.PP
Append this value to the unsafe uPtr array\&. Use for altering previous writes\&. Does not preserve existing data past the write\&. Use for sequential writes only\&. Sign is ignored and value is cast to ulong\&. WARNING: There is no bounds checking on this\&. If you write too far, you will crash\&. 
.PP
Definition at line \fB387\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.Append (ulong * uPtr, ulong value, ref int bitposition, int bits)\fC [static]\fP"

.PP
Primary Append writer\&. Faster method for writing to byte[] or uint[] buffers\&. Uses unsafe to treat them as ulong[]\&. Append does not preserve existing buffer data past the write point in exchange for a faster write\&. WARNING: There is no bounds checking on this\&. If you write too far, you will crash\&. 
.PP
\fBParameters\fP
.RS 4
\fIuPtr\fP Cast your byte* or uint* to ulong*
.br
\fIvalue\fP 
.br
\fIbitposition\fP 
.br
\fIbits\fP 
.RE
.PP

.PP
Definition at line \fB186\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.AppendSigned (ulong * buffer, int value, ref int bitposition, int bits)\fC [static]\fP"

.PP
Appends value to this unsafe buffer\&. Uses zigzag encoding to retain the sign value\&. Existing data past this inject is NOT preserved\&. Only use for sequential writes\&. Use \fBWrite()\fP or \fBInject()\fP for non-linear writes\&. 
.PP
Definition at line \fB58\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.Inject (this byte value, ulong * uPtr, ref int bitposition, int bits)\fC [static]\fP"

.PP
Write this value to the unsafe uPtr array\&. Use for altering previous writes\&. Preserves existing data past the write\&. WARNING: There is no bounds checking on this\&. If you write too far, you will crash\&. 
.PP
Definition at line \fB433\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.Inject (this uint value, ulong * uPtr, ref int bitposition, int bits)\fC [static]\fP"

.PP
Write this value to the unsafe uPtr array\&. Use for altering previous writes\&. Preserves existing data past the write\&. WARNING: There is no bounds checking on this\&. If you write too far, you will crash\&. 
.PP
Definition at line \fB417\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.Inject (this ulong value, ulong * uPtr, ref int bitposition, int bits)\fC [static]\fP"

.PP
Write this value to the unsafe uPtr array\&. Use for altering previous writes\&. Preserves existing data past the write\&. WARNING: There is no bounds checking on this\&. If you write too far, you will crash\&. 
.PP
Definition at line \fB409\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.Inject (this ushort value, ulong * uPtr, ref int bitposition, int bits)\fC [static]\fP"

.PP
Write this value to the unsafe uPtr array\&. Use for altering previous writes\&. Preserves existing data past the write\&. WARNING: There is no bounds checking on this\&. If you write too far, you will crash\&. 
.PP
Definition at line \fB425\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.InjectSigned (this int value, ulong * uPtr, ref int bitposition, int bits)\fC [static]\fP"

.PP
Overwrites this value to the unsafe buffer\&. Uses zigzag encoding to retain the sign value\&. Existing data past this inject is preserved\&. 
.PP
Definition at line \fB97\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.InjectSigned (this sbyte value, ulong * uPtr, ref int bitposition, int bits)\fC [static]\fP"

.PP
Overwrites this value to the unsafe buffer\&. Uses zigzag encoding to retain the sign value\&. Existing data past this inject is preserved\&. 
.PP
Definition at line \fB115\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.InjectSigned (this short value, ulong * uPtr, ref int bitposition, int bits)\fC [static]\fP"

.PP
Overwrites this value to the unsafe buffer\&. Uses zigzag encoding to retain the sign value\&. Existing data past this inject is preserved\&. 
.PP
Definition at line \fB106\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.InjectUnsigned (this int value, ulong * uPtr, int bitposition, int bits)\fC [static]\fP"

.PP
Write this value to the unsafe uPtr array\&. Use for altering previous writes\&. Preserves existing data past the write\&. Sign is ignored and value is cast to ulong\&. Same as Inject, only the bitposition is not a ref and is not incremented\&. WARNING: There is no bounds checking on this\&. If you write too far, you will crash\&. 
.PP
Definition at line \fB529\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.InjectUnsigned (this int value, ulong * uPtr, ref int bitposition, int bits)\fC [static]\fP"

.PP
Write this value to the unsafe uPtr array\&. Use for altering previous writes\&. Preserves existing data past the write\&. Sign is ignored and value is cast to ulong\&. WARNING: There is no bounds checking on this\&. If you write too far, you will crash\&. 
.PP
Definition at line \fB451\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.InjectUnsigned (this long value, ulong * uPtr, int bitposition, int bits)\fC [static]\fP"

.PP
Write this value to the unsafe uPtr array\&. Use for altering previous writes\&. Preserves existing data past the write\&. Sign is ignored and value is cast to ulong\&. Same as Inject, only the bitposition is not a ref and is not incremented\&. WARNING: There is no bounds checking on this\&. If you write too far, you will crash\&. 
.PP
Definition at line \fB519\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.InjectUnsigned (this long value, ulong * uPtr, ref int bitposition, int bits)\fC [static]\fP"

.PP
Write this value to the unsafe uPtr array\&. Use for altering previous writes\&. Preserves existing data past the write\&. Sign is ignored and value is cast to ulong\&. WARNING: There is no bounds checking on this\&. If you write too far, you will crash\&. 
.PP
Definition at line \fB442\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.InjectUnsigned (this sbyte value, ulong * uPtr, ref int bitposition, int bits)\fC [static]\fP"

.PP
Write this value to the unsafe uPtr array\&. Use for altering previous writes\&. Preserves existing data past the write\&. Sign is ignored and value is cast to ulong\&. WARNING: There is no bounds checking on this\&. If you write too far, you will crash\&. 
.PP
Definition at line \fB469\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.InjectUnsigned (this short value, ulong * uPtr, int bitposition, int bits)\fC [static]\fP"

.PP
Write this value to the unsafe uPtr array\&. Use for altering previous writes\&. Preserves existing data past the write\&. Sign is ignored and value is cast to ulong\&. WARNING: There is no bounds checking on this\&. If you write too far, you will crash\&. 
.PP
Definition at line \fB460\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe int Photon\&.Compression\&.ArraySerializeUnsafe\&.PeekSigned (ulong * uPtr, int bitposition, int bits)\fC [static]\fP"

.PP
Returns signed value read from the buffer\&. Same as Read, only the bitposition is not incremented\&. 
.PP
Definition at line \fB168\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.Poke (this byte value, ulong * uPtr, int bitposition, int bits)\fC [static]\fP"

.PP
Write this value to the unsafe uPtr array\&. Use for altering previous writes\&. Preserves existing data past the write\&. WARNING: There is no bounds checking on this\&. If you write too far, you will crash\&. 
.PP
Definition at line \fB509\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.Poke (this uint value, ulong * uPtr, int bitposition, int bits)\fC [static]\fP"

.PP
Write this value to the unsafe uPtr array\&. Use for altering previous writes\&. Preserves existing data past the write\&. Same as Inject, only the bitposition is not a ref and is not incremented\&. WARNING: There is no bounds checking on this\&. If you write too far, you will crash\&. 
.PP
Definition at line \fB492\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.Poke (this ulong value, ulong * uPtr, int bitposition, int bits)\fC [static]\fP"

.PP
Write this value to the unsafe uPtr array\&. Use for altering previous writes\&. Preserves existing data past the write\&. Same as Inject, only the bitposition is not a ref and is not incremented\&. WARNING: There is no bounds checking on this\&. If you write too far, you will crash\&. 
.PP
Definition at line \fB483\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.Poke (this ushort value, ulong * uPtr, int bitposition, int bits)\fC [static]\fP"

.PP
Write this value to the unsafe uPtr array\&. Use for altering previous writes\&. Preserves existing data past the write\&. Same as Inject, only the bitposition is not a ref and is not incremented\&. WARNING: There is no bounds checking on this\&. If you write too far, you will crash\&. 
.PP
Definition at line \fB501\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.PokeSigned (this int value, ulong * uPtr, int bitposition, int bits)\fC [static]\fP"

.PP
Overwrites this value to the unsafe buffer\&. Uses zigzag encoding to retain the sign value\&. Unlike Inject, this does not increment the bitposition and is for one-off injections\&. Existing data past this inject is preserved\&. 
.PP
Definition at line \fB127\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.PokeSigned (this sbyte value, ulong * uPtr, int bitposition, int bits)\fC [static]\fP"

.PP
Overwrites this value to the unsafe buffer\&. Uses zigzag encoding to retain the sign value\&. Unlike Inject, this does not increment the bitposition and is for one-off injections\&. Existing data past this inject is preserved\&. 
.PP
Definition at line \fB147\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.PokeSigned (this short value, ulong * uPtr, int bitposition, int bits)\fC [static]\fP"

.PP
Overwrites this value to the unsafe buffer\&. Uses zigzag encoding to retain the sign value\&. Unlike Inject, this does not increment the bitposition and is for one-off injections\&. Existing data past this inject is preserved\&. 
.PP
Definition at line \fB137\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.PokeUnsigned (this sbyte value, ulong * uPtr, int bitposition, int bits)\fC [static]\fP"

.PP
Write this value to the unsafe uPtr array\&. Use for altering previous writes\&. Preserves existing data past the write\&. Sign is ignored and value is cast to ulong\&. Same as Inject, only the bitposition is not a ref and is not incremented\&. WARNING: There is no bounds checking on this\&. If you write too far, you will crash\&. 
.PP
Definition at line \fB549\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.PokeUnsigned (this short value, ulong * uPtr, int bitposition, int bits)\fC [static]\fP"

.PP
Write this value to the unsafe uPtr array\&. Use for altering previous writes\&. Preserves existing data past the write\&. Sign is ignored and value is cast to ulong\&. Same as Inject, only the bitposition is not a ref and is not incremented\&. WARNING: There is no bounds checking on this\&. If you write too far, you will crash\&. 
.PP
Definition at line \fB539\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe ulong Photon\&.Compression\&.ArraySerializeUnsafe\&.Read (ulong * uPtr, int bitposition, int bits)\fC [static]\fP"

.PP
Primary Unsafe Peek\&. Fast read for byte[] and unit[] by treating them as ulong[]\&. Reads value at position without incrementing the bitposition\&. WARNING: There is no bounds checking on this method! 
.PP
\fBParameters\fP
.RS 4
\fIuPtr\fP Cast your byte* or uint* to ulong*
.br
\fIbitposition\fP 
.br
\fIbits\fP 
.RE
.PP
\fBReturns\fP
.RS 4
Returns the read value\&.
.RE
.PP

.PP
Definition at line \fB307\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe ulong Photon\&.Compression\&.ArraySerializeUnsafe\&.Read (ulong * uPtr, ref int bitposition, int bits)\fC [static]\fP"

.PP
Primary Unsafe Read\&. Fast read for byte[] and unit[] by treating them as ulong[]\&. WARNING: There is no bounds checking on this method! 
.PP
\fBParameters\fP
.RS 4
\fIuPtr\fP Cast your byte* or uint* to ulong*
.br
\fIbitposition\fP 
.br
\fIbits\fP 
.RE
.PP
\fBReturns\fP
.RS 4
Returns the read value\&.
.RE
.PP

.PP
Definition at line \fB279\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.ReadOutUnsafe (this byte[] source, int sourcePos, byte[] target, ref int targetPos, int bits)\fC [static]\fP"

.PP
Read the contents of one bitpacked array to another using Unsafe\&. This generally requires arrays to have a total byte count divisible by 8, as they will be treated as ulong[] in unsafe\&. 
.PP
\fBParameters\fP
.RS 4
\fIsource\fP 
.br
\fIsourcePos\fP Bitpos of the source array to start read from\&.
.br
\fItarget\fP 
.br
\fItargetPos\fP The target bitposition (that will be incremented with this write)\&.
.br
\fIbits\fP Number of bits to copy\&. This should be the current bitpos of the source\&.
.RE
.PP

.PP
Definition at line \fB882\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.ReadOutUnsafe (this byte[] source, int sourcePos, uint[] target, ref int targetPos, int bits)\fC [static]\fP"

.PP
Read the contents of one bitpacked array to another using Unsafe\&. This generally requires arrays to have a total byte count divisible by 8, as they will be treated as ulong[] in unsafe\&. 
.PP
\fBParameters\fP
.RS 4
\fIsource\fP 
.br
\fIsourcePos\fP Bitpos of the source array to start read from\&.
.br
\fItarget\fP 
.br
\fItargetPos\fP The target bitposition (that will be incremented with this write)\&.
.br
\fIbits\fP Number of bits to copy\&. This should be the current bitpos of the source\&.
.RE
.PP

.PP
Definition at line \fB846\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.ReadOutUnsafe (this byte[] source, int sourcePos, ulong[] target, ref int targetPos, int bits)\fC [static]\fP"

.PP
Read the contents of one bitpacked array to another using Unsafe\&. This generally requires arrays to have a total byte count divisible by 8, as they will be treated as ulong[] in unsafe\&. 
.PP
\fBParameters\fP
.RS 4
\fIsource\fP 
.br
\fIsourcePos\fP Bitpos of the source array to start read from\&.
.br
\fItarget\fP 
.br
\fItargetPos\fP The target bitposition (that will be incremented with this write)\&.
.br
\fIbits\fP Number of bits to copy\&. This should be the current bitpos of the source\&.
.RE
.PP

.PP
Definition at line \fB810\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.ReadOutUnsafe (this uint[] source, int sourcePos, byte[] target, ref int targetPos, int bits)\fC [static]\fP"

.PP
Read the contents of one bitpacked array to another using Unsafe\&. This generally requires arrays to have a total byte count divisible by 8, as they will be treated as ulong[] in unsafe\&. 
.PP
\fBParameters\fP
.RS 4
\fIsource\fP 
.br
\fIsourcePos\fP Bitpos of the source array to start read from\&.
.br
\fItarget\fP 
.br
\fItargetPos\fP The target bitposition (that will be incremented with this write)\&.
.br
\fIbits\fP Number of bits to copy\&. This should be the current bitpos of the source\&.
.RE
.PP

.PP
Definition at line \fB700\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.ReadOutUnsafe (this uint[] source, int sourcePos, uint[] target, ref int targetPos, int bits)\fC [static]\fP"

.PP
Read the contents of one bitpacked array to another using Unsafe\&. This generally requires arrays to have a total byte count divisible by 8, as they will be treated as ulong[] in unsafe\&. 
.PP
\fBParameters\fP
.RS 4
\fIsource\fP 
.br
\fIsourcePos\fP Bitpos of the source array to start read from\&.
.br
\fItarget\fP 
.br
\fItargetPos\fP The target bitposition (that will be incremented with this write)\&.
.br
\fIbits\fP Number of bits to copy\&. This should be the current bitpos of the source\&.
.RE
.PP

.PP
Definition at line \fB735\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.ReadOutUnsafe (this uint[] source, int sourcePos, ulong[] target, ref int targetPos, int bits)\fC [static]\fP"

.PP
Read the contents of one bitpacked array to another using Unsafe\&. This generally requires arrays to have a total byte count divisible by 8, as they will be treated as ulong[] in unsafe\&. 
.PP
\fBParameters\fP
.RS 4
\fIsource\fP 
.br
\fIsourcePos\fP Bitpos of the source array to start read from\&.
.br
\fItarget\fP 
.br
\fItargetPos\fP The target bitposition (that will be incremented with this write)\&.
.br
\fIbits\fP Number of bits to copy\&. This should be the current bitpos of the source\&.
.RE
.PP

.PP
Definition at line \fB771\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.ReadOutUnsafe (this ulong[] source, int sourcePos, byte[] target, ref int targetPos, int bits)\fC [static]\fP"

.PP
Read the contents of one bitpacked array to another using Unsafe\&. This generally requires arrays to have a total byte count divisible by 8, as they will be treated as ulong[] in unsafe\&. 
.PP
\fBParameters\fP
.RS 4
\fIsource\fP 
.br
\fIsourcePos\fP Bitpos of the source array to start read from\&.
.br
\fItarget\fP 
.br
\fItargetPos\fP The target bitposition (that will be incremented with this write)\&.
.br
\fIbits\fP Number of bits to copy\&. This should be the current bitpos of the source\&.
.RE
.PP

.PP
Definition at line \fB594\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.ReadOutUnsafe (this ulong[] source, int sourcePos, uint[] target, ref int targetPos, int bits)\fC [static]\fP"

.PP
Read the contents of one bitpacked array to another using Unsafe\&. This generally requires arrays to have a total byte count divisible by 8, as they will be treated as ulong[] in unsafe\&. 
.PP
\fBParameters\fP
.RS 4
\fIsource\fP 
.br
\fIsourcePos\fP Bitpos of the source array to start read from\&.
.br
\fItarget\fP 
.br
\fItargetPos\fP The target bitposition (that will be incremented with this write)\&.
.br
\fIbits\fP Number of bits to copy\&. This should be the current bitpos of the source\&.
.RE
.PP

.PP
Definition at line \fB629\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.ReadOutUnsafe (this ulong[] source, int sourcePos, ulong[] target, ref int targetPos, int bits)\fC [static]\fP"

.PP
Read the contents of one bitpacked array to another using Unsafe\&. This generally requires arrays to have a total byte count divisible by 8, as they will be treated as ulong[] in unsafe\&. 
.PP
\fBParameters\fP
.RS 4
\fIsource\fP 
.br
\fIsourcePos\fP Bitpos of the source array to start read from\&.
.br
\fItarget\fP 
.br
\fItargetPos\fP The target bitposition (that will be incremented with this write)\&.
.br
\fIbits\fP Number of bits to copy\&. This should be the current bitpos of the source\&.
.RE
.PP

.PP
Definition at line \fB663\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.ReadOutUnsafe (ulong * sourcePtr, int sourcePos, ulong * targetPtr, ref int targetPos, int bits)\fC [static]\fP"

.PP
Primary ReadOutUnsafe method\&. WARNING: No bounds checking\&. Use with caution\&. Cast array pointers to ulong*\&. 
.PP
\fBParameters\fP
.RS 4
\fIsourcePtr\fP 
.br
\fIsourcePos\fP 
.br
\fItargetPtr\fP 
.br
\fItargetPos\fP 
.br
\fIbits\fP 
.RE
.PP

.PP
Definition at line \fB567\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe int Photon\&.Compression\&.ArraySerializeUnsafe\&.ReadSigned (ulong * uPtr, ref int bitposition, int bits)\fC [static]\fP"

.PP
Returns signed value read from the buffer\&. 
.PP
Definition at line \fB157\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.Write (ulong * uPtr, ulong value, ref int bitposition, int bits)\fC [static]\fP"

.PP
Primary Unsafe writer\&. Faster method for writing to byte[] or uint[] buffers\&. Uses unsafe to treat them as ulong[]\&. WARNING: There is no bounds checking on this\&. If you write too far, you will crash\&. 
.PP
\fBParameters\fP
.RS 4
\fIuPtr\fP Cast your byte* or uint* to ulong*
.br
\fIvalue\fP 
.br
\fIbitposition\fP 
.br
\fIbits\fP 
.RE
.PP

.PP
Definition at line \fB241\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.
.SS "static unsafe void Photon\&.Compression\&.ArraySerializeUnsafe\&.WriteSigned (ulong * buffer, int value, ref int bitposition, int bits)\fC [static]\fP"

.PP
Writes value to this unsafe buffer\&. Uses zigzag encoding to retain the sign value\&. Existing data past this inject is preserved\&. 
.PP
Definition at line \fB47\fP of file \fBArraySerializeUnsafe\&.cs\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Purrpatrator User manual from the source code\&.
