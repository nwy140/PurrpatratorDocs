.TH "Photon.Compression.CompressedMatrix" 3 "Mon Apr 18 2022" "Purrpatrator User manual" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Photon.Compression.CompressedMatrix \- This class contains \fBCompressedElement\fP classes for the compressed Position, Rotation and Scale, and exposes methods for comparing, copying, serialiing and deserializing the entire collection in one call\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits IEquatable< CompressedMatrix >\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCompressedMatrix\fP ()"
.br
.ti -1c
.RI "\fBCompressedMatrix\fP (\fBTransformCrusher\fP \fBcrusher\fP)"
.br
.ti -1c
.RI "\fBCompressedMatrix\fP (\fBTransformCrusher\fP \fBcrusher\fP, \fBCompressedElement\fP \fBcPos\fP, \fBCompressedElement\fP \fBcRot\fP, \fBCompressedElement\fP \fBcScl\fP)"
.br
.ti -1c
.RI "\fBCompressedMatrix\fP (\fBTransformCrusher\fP \fBcrusher\fP, ref \fBCompressedElement\fP \fBcPos\fP, ref \fBCompressedElement\fP \fBcRot\fP, ref \fBCompressedElement\fP \fBcScl\fP, int pBits, int rBits, int sBits)"
.br
.ti -1c
.RI "void \fBCopyTo\fP (\fBCompressedMatrix\fP copyTarget)"
.br
.ti -1c
.RI "void \fBCopyFrom\fP (\fBCompressedMatrix\fP copySource)"
.br
.ti -1c
.RI "void \fBClear\fP ()"
.br
.ti -1c
.RI "ulong[] \fBAsArray64\fP (BitCullingLevel bcl=BitCullingLevel\&.NoCulling)"
.br
.RI "Serializes the \fBCompressedMatrix\fP into an array\&. "
.ti -1c
.RI "void \fBAsArray64\fP (ulong[] nonalloc, BitCullingLevel bcl=BitCullingLevel\&.NoCulling)"
.br
.RI "Serializes the \fBCompressedMatrix\fP into supplied nonalloc array\&. "
.ti -1c
.RI "uint[] \fBAsArray32\fP (BitCullingLevel bcl=BitCullingLevel\&.NoCulling)"
.br
.RI "Serializes the \fBCompressedMatrix\fP into an array\&. "
.ti -1c
.RI "void \fBAsArray32\fP (uint[] nonalloc, BitCullingLevel bcl=BitCullingLevel\&.NoCulling)"
.br
.RI "Serializes the \fBCompressedMatrix\fP into supplied nonalloc array\&. "
.ti -1c
.RI "byte[] \fBAsArray8\fP (BitCullingLevel bcl=BitCullingLevel\&.NoCulling)"
.br
.RI "Serializes the \fBCompressedMatrix\fP into an array\&. "
.ti -1c
.RI "void \fBAsArray8\fP (byte[] nonalloc, BitCullingLevel bcl=BitCullingLevel\&.NoCulling)"
.br
.RI "Serializes the \fBCompressedMatrix\fP into supplied nonalloc array\&. "
.ti -1c
.RI "void \fBDecompress\fP (\fBMatrix\fP nonalloc)"
.br
.RI "Decompress this \fBCompressedMatrix\fP into the supplied nonalloc \fBMatrix\fP class\&. "
.ti -1c
.RI "\fBMatrix\fP \fBDecompress\fP ()"
.br
.RI "Decompress this \fBCompressedMatrix\fP into a recycled \fBMatrix\fP class\&. "
.ti -1c
.RI "void \fBApply\fP ()"
.br
.ti -1c
.RI "void \fBApply\fP (Transform t)"
.br
.RI "Convenience method\&. "
.ti -1c
.RI "void \fBApply\fP (Rigidbody rb)"
.br
.RI "Convenience method\&. "
.ti -1c
.RI "void \fBSet\fP (Rigidbody rb)"
.br
.RI "Convenience method\&. "
.ti -1c
.RI "void \fBMove\fP (Rigidbody rb)"
.br
.RI "Convenience method\&. "
.ti -1c
.RI "override bool \fBEquals\fP (object obj)"
.br
.ti -1c
.RI "bool \fBEquals\fP (\fBCompressedMatrix\fP other)"
.br
.RI "Compare the values of this \fBCompressedMatrix\fP with the values of another\&. "
.ti -1c
.RI "override int \fBGetHashCode\fP ()"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBoperator ulong\fP (\fBCompressedMatrix\fP cm)"
.br
.ti -1c
.RI "static \fBoperator uint\fP (\fBCompressedMatrix\fP cm)"
.br
.ti -1c
.RI "static \fBoperator ushort\fP (\fBCompressedMatrix\fP cm)"
.br
.ti -1c
.RI "static \fBoperator byte\fP (\fBCompressedMatrix\fP cm)"
.br
.ti -1c
.RI "static \fBoperator ulong[]\fP (\fBCompressedMatrix\fP cm)"
.br
.ti -1c
.RI "static \fBoperator uint[]\fP (\fBCompressedMatrix\fP cm)"
.br
.ti -1c
.RI "static \fBoperator byte[]\fP (\fBCompressedMatrix\fP cm)"
.br
.ti -1c
.RI "static bool \fBoperator==\fP (\fBCompressedMatrix\fP a, \fBCompressedMatrix\fP b)"
.br
.ti -1c
.RI "static bool \fBoperator!=\fP (\fBCompressedMatrix\fP a, \fBCompressedMatrix\fP b)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBCompressedElement\fP \fBcPos\fP = new \fBCompressedElement\fP()"
.br
.ti -1c
.RI "\fBCompressedElement\fP \fBcRot\fP = new \fBCompressedElement\fP()"
.br
.ti -1c
.RI "\fBCompressedElement\fP \fBcScl\fP = new \fBCompressedElement\fP()"
.br
.ti -1c
.RI "\fBTransformCrusher\fP \fBcrusher\fP"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static \fBCompressedMatrix\fP \fBreusable\fP = new \fBCompressedMatrix\fP()"
.br
.in -1c
.SS "Static Protected Attributes"

.in +1c
.ti -1c
.RI "static readonly ulong[] \fBreusableArray64\fP = new ulong[6]"
.br
.ti -1c
.RI "static readonly uint[] \fBreusableArray32\fP = new uint[12]"
.br
.ti -1c
.RI "static readonly byte[] \fBreusableArray8\fP = new byte[24]"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class contains \fBCompressedElement\fP classes for the compressed Position, Rotation and Scale, and exposes methods for comparing, copying, serialiing and deserializing the entire collection in one call\&. 


.PP
Definition at line \fB21\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Photon\&.Compression\&.CompressedMatrix\&.CompressedMatrix ()"

.PP
Definition at line \fB34\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "Photon\&.Compression\&.CompressedMatrix\&.CompressedMatrix (\fBTransformCrusher\fP crusher)"

.PP
Definition at line \fB38\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "Photon\&.Compression\&.CompressedMatrix\&.CompressedMatrix (\fBTransformCrusher\fP crusher, \fBCompressedElement\fP cPos, \fBCompressedElement\fP cRot, \fBCompressedElement\fP cScl)"

.PP
Definition at line \fB43\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "Photon\&.Compression\&.CompressedMatrix\&.CompressedMatrix (\fBTransformCrusher\fP crusher, ref \fBCompressedElement\fP cPos, ref \fBCompressedElement\fP cRot, ref \fBCompressedElement\fP cScl, int pBits, int rBits, int sBits)"

.PP
Definition at line \fB52\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void Photon\&.Compression\&.CompressedMatrix\&.Apply ()"

.PP
Definition at line \fB255\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "void Photon\&.Compression\&.CompressedMatrix\&.Apply (Rigidbody rb)"

.PP
Convenience method\&. For the most direct call use crusher\&.Apply(rigidbody, compressedmatrix) instead\&. 
.PP
Definition at line \fB273\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "void Photon\&.Compression\&.CompressedMatrix\&.Apply (Transform t)"

.PP
Convenience method\&. For the most direct call use crusher\&.Apply(transform, compressedmatrix) instead\&. 
.PP
Definition at line \fB263\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "uint[] Photon\&.Compression\&.CompressedMatrix\&.AsArray32 (BitCullingLevel bcl = \fCBitCullingLevel\&.NoCulling\fP)"

.PP
Serializes the \fBCompressedMatrix\fP into an array\&. WARNING: The returned array is recycled - so the values are subject to change\&. Use contents immediately\&.
.PP
If you want to store the returned value, supply a nonalloc array as an argument\&.
.PP
Definition at line \fB120\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "void Photon\&.Compression\&.CompressedMatrix\&.AsArray32 (uint[] nonalloc, BitCullingLevel bcl = \fCBitCullingLevel\&.NoCulling\fP)"

.PP
Serializes the \fBCompressedMatrix\fP into supplied nonalloc array\&. NOTE: Contents of the nonalloc array will be overwritten\&.
.PP
Definition at line \fB132\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "ulong[] Photon\&.Compression\&.CompressedMatrix\&.AsArray64 (BitCullingLevel bcl = \fCBitCullingLevel\&.NoCulling\fP)"

.PP
Serializes the \fBCompressedMatrix\fP into an array\&. WARNING: The returned array is recycled - so the values are subject to change\&. Use contents immediately\&.
.PP
If you want to store the returned value, supply a nonalloc array as an argument\&.
.PP
Definition at line \fB95\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "void Photon\&.Compression\&.CompressedMatrix\&.AsArray64 (ulong[] nonalloc, BitCullingLevel bcl = \fCBitCullingLevel\&.NoCulling\fP)"

.PP
Serializes the \fBCompressedMatrix\fP into supplied nonalloc array\&. NOTE: Contents of the nonalloc array will be overwritten\&.
.PP
Definition at line \fB107\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "byte[] Photon\&.Compression\&.CompressedMatrix\&.AsArray8 (BitCullingLevel bcl = \fCBitCullingLevel\&.NoCulling\fP)"

.PP
Serializes the \fBCompressedMatrix\fP into an array\&. WARNING: The returned array is recycled - so the values are subject to change\&. Use contents immediately\&.
.PP
If you want to store the returned value, supply a nonalloc array as an argument\&.
.PP
Definition at line \fB145\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "void Photon\&.Compression\&.CompressedMatrix\&.AsArray8 (byte[] nonalloc, BitCullingLevel bcl = \fCBitCullingLevel\&.NoCulling\fP)"

.PP
Serializes the \fBCompressedMatrix\fP into supplied nonalloc array\&. NOTE: Contents of the nonalloc array will be overwritten\&.
.PP
Definition at line \fB157\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "void Photon\&.Compression\&.CompressedMatrix\&.Clear ()"

.PP
Definition at line \fB75\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "void Photon\&.Compression\&.CompressedMatrix\&.CopyFrom (\fBCompressedMatrix\fP copySource)"

.PP
Definition at line \fB68\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "void Photon\&.Compression\&.CompressedMatrix\&.CopyTo (\fBCompressedMatrix\fP copyTarget)"

.PP
Definition at line \fB62\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "\fBMatrix\fP Photon\&.Compression\&.CompressedMatrix\&.Decompress ()"

.PP
Decompress this \fBCompressedMatrix\fP into a recycled \fBMatrix\fP class\&. WARNING: No \fBMatrix\fP is provided in this overload, so a reusable internal \fBMatrix\fP ref is used\&. Use immediately\&.
.PP
Definition at line \fB248\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "void Photon\&.Compression\&.CompressedMatrix\&.Decompress (\fBMatrix\fP nonalloc)"

.PP
Decompress this \fBCompressedMatrix\fP into the supplied nonalloc \fBMatrix\fP class\&. 
.PP
\fBParameters\fP
.RS 4
\fInonalloc\fP The target for the uncompressed TRS\&.
.RE
.PP

.PP
Definition at line \fB236\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "bool Photon\&.Compression\&.CompressedMatrix\&.Equals (\fBCompressedMatrix\fP other)"

.PP
Compare the values of this \fBCompressedMatrix\fP with the values of another\&. 
.PP
\fBParameters\fP
.RS 4
\fIother\fP 
.RE
.PP
\fBReturns\fP
.RS 4
True if the values match, false if not\&.
.RE
.PP

.PP
Definition at line \fB336\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "override bool Photon\&.Compression\&.CompressedMatrix\&.Equals (object obj)"

.PP
Definition at line \fB326\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "override int Photon\&.Compression\&.CompressedMatrix\&.GetHashCode ()"

.PP
Definition at line \fB345\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "void Photon\&.Compression\&.CompressedMatrix\&.Move (Rigidbody rb)"

.PP
Convenience method\&. For the most direct call use crusher\&.Move(rigidbody, compressedmatrix) instead\&. 
.PP
Definition at line \fB289\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "static Photon\&.Compression\&.CompressedMatrix\&.operator byte (\fBCompressedMatrix\fP cm)\fC [explicit]\fP, \fC [static]\fP"

.PP
Definition at line \fB204\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "static Photon\&.Compression\&.CompressedMatrix\&.operator byte[] (\fBCompressedMatrix\fP cm)\fC [explicit]\fP, \fC [static]\fP"

.PP
Definition at line \fB224\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "static Photon\&.Compression\&.CompressedMatrix\&.operator uint (\fBCompressedMatrix\fP cm)\fC [explicit]\fP, \fC [static]\fP"

.PP
Definition at line \fB180\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "static Photon\&.Compression\&.CompressedMatrix\&.operator uint[] (\fBCompressedMatrix\fP cm)\fC [explicit]\fP, \fC [static]\fP"

.PP
Definition at line \fB220\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "static Photon\&.Compression\&.CompressedMatrix\&.operator ulong (\fBCompressedMatrix\fP cm)\fC [explicit]\fP, \fC [static]\fP"

.PP
Definition at line \fB168\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "static Photon\&.Compression\&.CompressedMatrix\&.operator ulong[] (\fBCompressedMatrix\fP cm)\fC [explicit]\fP, \fC [static]\fP"

.PP
Definition at line \fB216\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "static Photon\&.Compression\&.CompressedMatrix\&.operator ushort (\fBCompressedMatrix\fP cm)\fC [explicit]\fP, \fC [static]\fP"

.PP
Definition at line \fB192\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "static bool Photon\&.Compression\&.CompressedMatrix\&.operator!= (\fBCompressedMatrix\fP a, \fBCompressedMatrix\fP b)\fC [static]\fP"

.PP
Definition at line \fB302\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "static bool Photon\&.Compression\&.CompressedMatrix\&.operator== (\fBCompressedMatrix\fP a, \fBCompressedMatrix\fP b)\fC [static]\fP"

.PP
Definition at line \fB295\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "void Photon\&.Compression\&.CompressedMatrix\&.Set (Rigidbody rb)"

.PP
Convenience method\&. For the most direct call use crusher\&.Set(rigidbody, compressedmatrix) instead\&. 
.PP
Definition at line \fB281\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBCompressedElement\fP Photon\&.Compression\&.CompressedMatrix\&.cPos = new \fBCompressedElement\fP()"

.PP
Definition at line \fB23\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "\fBCompressedElement\fP Photon\&.Compression\&.CompressedMatrix\&.cRot = new \fBCompressedElement\fP()"

.PP
Definition at line \fB24\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "\fBTransformCrusher\fP Photon\&.Compression\&.CompressedMatrix\&.crusher"

.PP
Definition at line \fB27\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "\fBCompressedElement\fP Photon\&.Compression\&.CompressedMatrix\&.cScl = new \fBCompressedElement\fP()"

.PP
Definition at line \fB25\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "\fBCompressedMatrix\fP Photon\&.Compression\&.CompressedMatrix\&.reusable = new \fBCompressedMatrix\fP()\fC [static]\fP"

.PP
Definition at line \fB29\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "readonly uint [] Photon\&.Compression\&.CompressedMatrix\&.reusableArray32 = new uint[12]\fC [static]\fP, \fC [protected]\fP"

.PP
Definition at line \fB86\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "readonly ulong [] Photon\&.Compression\&.CompressedMatrix\&.reusableArray64 = new ulong[6]\fC [static]\fP, \fC [protected]\fP"

.PP
Definition at line \fB85\fP of file \fBCompressedMatrix\&.cs\fP\&.
.SS "readonly byte [] Photon\&.Compression\&.CompressedMatrix\&.reusableArray8 = new byte[24]\fC [static]\fP, \fC [protected]\fP"

.PP
Definition at line \fB87\fP of file \fBCompressedMatrix\&.cs\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Purrpatrator User manual from the source code\&.
