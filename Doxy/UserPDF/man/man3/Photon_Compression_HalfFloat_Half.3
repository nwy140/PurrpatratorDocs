.TH "Photon.Compression.HalfFloat.Half" 3 "Mon Apr 18 2022" "Purrpatrator User manual" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Photon.Compression.HalfFloat.Half \- A half precision (16 bit) floating point value\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits IConvertible, IComparable, IComparable< Half >, System\&.IEquatable< Half >, and IFormattable\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBHalf\fP (float value)"
.br
.RI "Initializes a new instance of the T:SlimMath\&.Half structure\&. "
.ti -1c
.RI "override string \fBToString\fP ()"
.br
.RI "Converts the value of the object to its equivalent string representation\&. "
.ti -1c
.RI "string \fBToString\fP (string format)"
.br
.RI "Returns a System\&.String that represents this instance\&. "
.ti -1c
.RI "string \fBToString\fP (IFormatProvider formatProvider)"
.br
.RI "Returns a System\&.String that represents this instance\&. "
.ti -1c
.RI "string \fBToString\fP (string format, IFormatProvider formatProvider)"
.br
.RI "Returns a System\&.String that represents this instance\&. "
.ti -1c
.RI "override int \fBGetHashCode\fP ()"
.br
.RI "Returns the hash code for this instance\&. "
.ti -1c
.RI "int \fBCompareTo\fP (\fBHalf\fP value)"
.br
.RI "Compares this instance to another instance of the same type\&. "
.ti -1c
.RI "int \fBCompareTo\fP (object value)"
.br
.RI "Compares this instance to another instance of another type\&. "
.ti -1c
.RI "bool \fBEquals\fP (\fBHalf\fP other)"
.br
.RI "Returns a value that indicates whether the current instance is equal to the specified object\&. "
.ti -1c
.RI "override bool \fBEquals\fP (object obj)"
.br
.RI "Returns a value that indicates whether the current instance is equal to a specified object\&. "
.ti -1c
.RI "TypeCode \fBGetTypeCode\fP ()"
.br
.RI "Returns the System\&.TypeCode for value type\&. "
.ti -1c
.RI "bool IConvertible\&. \fBToBoolean\fP (IFormatProvider provider)"
.br
.ti -1c
.RI "byte IConvertible\&. \fBToByte\fP (IFormatProvider provider)"
.br
.ti -1c
.RI "char IConvertible\&. \fBToChar\fP (IFormatProvider provider)"
.br
.ti -1c
.RI "DateTime IConvertible\&. \fBToDateTime\fP (IFormatProvider provider)"
.br
.ti -1c
.RI "decimal IConvertible\&. \fBToDecimal\fP (IFormatProvider provider)"
.br
.ti -1c
.RI "double IConvertible\&. \fBToDouble\fP (IFormatProvider provider)"
.br
.ti -1c
.RI "short IConvertible\&. \fBToInt16\fP (IFormatProvider provider)"
.br
.ti -1c
.RI "int IConvertible\&. \fBToInt32\fP (IFormatProvider provider)"
.br
.ti -1c
.RI "long IConvertible\&. \fBToInt64\fP (IFormatProvider provider)"
.br
.ti -1c
.RI "sbyte IConvertible\&. \fBToSByte\fP (IFormatProvider provider)"
.br
.ti -1c
.RI "float IConvertible\&. \fBToSingle\fP (IFormatProvider provider)"
.br
.ti -1c
.RI "object IConvertible\&. \fBToType\fP (Type type, IFormatProvider provider)"
.br
.ti -1c
.RI "ushort IConvertible\&. \fBToUInt16\fP (IFormatProvider provider)"
.br
.ti -1c
.RI "uint IConvertible\&. \fBToUInt32\fP (IFormatProvider provider)"
.br
.ti -1c
.RI "ulong IConvertible\&. \fBToUInt64\fP (IFormatProvider provider)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static float[] \fBConvertToFloat\fP (\fBHalf\fP[] values)"
.br
.RI "Converts an array of half precision values into full precision values\&. "
.ti -1c
.RI "static \fBHalf\fP[] \fBConvertToHalf\fP (float[] values)"
.br
.RI "Converts an array of full precision values into half precision values\&. "
.ti -1c
.RI "static bool \fBIsInfinity\fP (\fBHalf\fP half)"
.br
.RI "Returns a value indicating whether the specified number evaluates to negative or positive infinity\&. "
.ti -1c
.RI "static bool \fBIsNaN\fP (\fBHalf\fP half)"
.br
.RI "Returns a value indicating whether the specified number evaluates to NaN\&. "
.ti -1c
.RI "static bool \fBIsNegativeInfinity\fP (\fBHalf\fP half)"
.br
.RI "Returns a value indicating whether the specified number evaluates to negative infinity\&. "
.ti -1c
.RI "static bool \fBIsPositiveInfinity\fP (\fBHalf\fP half)"
.br
.RI "Returns a value indicating whether the specified number evaluates to positive infinity\&. "
.ti -1c
.RI "static bool \fBoperator<\fP (\fBHalf\fP left, \fBHalf\fP right)"
.br
.RI "Returns a value that indicates whether a specified value is less than another specified value\&. "
.ti -1c
.RI "static bool \fBoperator>\fP (\fBHalf\fP left, \fBHalf\fP right)"
.br
.RI "Returns a value that indicates whether a specified value is greater than another specified value\&. "
.ti -1c
.RI "static bool \fBoperator<=\fP (\fBHalf\fP left, \fBHalf\fP right)"
.br
.RI "Returns a value that indicates whether a specified value is less than or equal to another specified value\&. "
.ti -1c
.RI "static bool \fBoperator>=\fP (\fBHalf\fP left, \fBHalf\fP right)"
.br
.RI "Returns a value that indicates whether a specified value is greater than or equal to another specified value\&. "
.ti -1c
.RI "static bool \fBoperator==\fP (\fBHalf\fP left, \fBHalf\fP right)"
.br
.RI "Tests for equality between two objects\&. "
.ti -1c
.RI "static bool \fBoperator!=\fP (\fBHalf\fP left, \fBHalf\fP right)"
.br
.RI "Tests for inequality between two objects\&. "
.ti -1c
.RI "static \fBoperator Half\fP (float value)"
.br
.RI "Performs an explicit conversion from T:System\&.Single to T:SlimMath\&.Half\&. "
.ti -1c
.RI "static implicit \fBoperator float\fP (\fBHalf\fP value)"
.br
.RI "Performs an implicit conversion from T:SlimMath\&.Half to T:System\&.Single\&. "
.ti -1c
.RI "static bool \fBEquals\fP (ref \fBHalf\fP value1, ref \fBHalf\fP value2)"
.br
.RI "Determines whether the specified object instances are considered equal\&. "
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "const int \fBPrecisionDigits\fP = 3"
.br
.RI "Number of decimal digits of precision\&. "
.ti -1c
.RI "const int \fBMantissaBits\fP = 11"
.br
.RI "Number of bits in the mantissa\&. "
.ti -1c
.RI "const int \fBMaximumDecimalExponent\fP = 4"
.br
.RI "Maximum decimal exponent\&. "
.ti -1c
.RI "const int \fBMaximumBinaryExponent\fP = 15"
.br
.RI "Maximum binary exponent\&. "
.ti -1c
.RI "const int \fBMinimumDecimalExponent\fP = \-4"
.br
.RI "Minimum decimal exponent\&. "
.ti -1c
.RI "const int \fBMinimumBinaryExponent\fP = \-14"
.br
.RI "Minimum binary exponent\&. "
.ti -1c
.RI "const int \fBExponentRadix\fP = 2"
.br
.RI "Exponent radix\&. "
.ti -1c
.RI "const int \fBAdditionRounding\fP = 1"
.br
.RI "Additional rounding\&. "
.ti -1c
.RI "static readonly \fBHalf\fP \fBEpsilon\fP = new \fBHalf\fP(0\&.0004887581f)"
.br
.RI "Smallest value such that 1\&.0 + epsilon != 1\&.0 "
.ti -1c
.RI "static readonly \fBHalf\fP \fBMaxValue\fP = new \fBHalf\fP(65504f)"
.br
.RI "Maximum value of the number\&. "
.ti -1c
.RI "static readonly \fBHalf\fP \fBMinValue\fP = new \fBHalf\fP(6\&.103516E\-05f)"
.br
.RI "Minimum value of the number\&. "
.ti -1c
.RI "static readonly \fBHalf\fP \fBNaN\fP = new \fBHalf\fP(0\&.0f / 0\&.0f)"
.br
.RI "Represents not a number (NaN)\&. "
.ti -1c
.RI "static readonly \fBHalf\fP \fBNegativeInfinity\fP = new \fBHalf\fP(\-1\&.0f / 0\&.0f)"
.br
.RI "Represents negative infinity\&. "
.ti -1c
.RI "static readonly \fBHalf\fP \fBPositiveInfinity\fP = new \fBHalf\fP(1\&.0f / 0\&.0f)"
.br
.RI "Represents positive infinity\&. "
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "ushort \fBRawValue\fP\fC [get]\fP"
.br
.RI "Gets the raw 16 bit value used to back this half-float\&. "
.in -1c
.SH "Detailed Description"
.PP 
A half precision (16 bit) floating point value\&. 


.PP
Definition at line \fB35\fP of file \fBHalf\&.cs\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Photon\&.Compression\&.HalfFloat\&.Half\&.Half (float value)"

.PP
Initializes a new instance of the T:SlimMath\&.Half structure\&. 
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP The floating point value that should be stored in 16 bit format\&.
.RE
.PP

.PP
Definition at line \fB113\fP of file \fBHalf\&.cs\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "int Photon\&.Compression\&.HalfFloat\&.Half\&.CompareTo (\fBHalf\fP value)"

.PP
Compares this instance to another instance of the same type\&. 
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP The other value to compare to this instance\&.
.RE
.PP
\fBReturns\fP
.RS 4
A value that specifies if this instance is greater than, less than, or equal to \fIvalue\fP \&.
.RE
.PP

.PP
Definition at line \fB351\fP of file \fBHalf\&.cs\fP\&.
.SS "int Photon\&.Compression\&.HalfFloat\&.Half\&.CompareTo (object value)"

.PP
Compares this instance to another instance of another type\&. 
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP The other value to compare to this instance\&.
.RE
.PP
\fBReturns\fP
.RS 4
A value that specifies if this instance is greater than, less than, or equal to \fIvalue\fP \&.
.RE
.PP

.PP
Definition at line \fB384\fP of file \fBHalf\&.cs\fP\&.
.SS "static float[] Photon\&.Compression\&.HalfFloat\&.Half\&.ConvertToFloat (\fBHalf\fP[] values)\fC [static]\fP"

.PP
Converts an array of half precision values into full precision values\&. 
.PP
\fBParameters\fP
.RS 4
\fIvalues\fP The values to be converted\&.
.RE
.PP
\fBReturns\fP
.RS 4
An array of converted values\&.
.RE
.PP

.PP
Definition at line \fB132\fP of file \fBHalf\&.cs\fP\&.
.SS "static \fBHalf\fP[] Photon\&.Compression\&.HalfFloat\&.Half\&.ConvertToHalf (float[] values)\fC [static]\fP"

.PP
Converts an array of full precision values into half precision values\&. 
.PP
\fBParameters\fP
.RS 4
\fIvalues\fP The values to be converted\&.
.RE
.PP
\fBReturns\fP
.RS 4
An array of converted values\&.
.RE
.PP

.PP
Definition at line \fB147\fP of file \fBHalf\&.cs\fP\&.
.SS "bool Photon\&.Compression\&.HalfFloat\&.Half\&.Equals (\fBHalf\fP other)"

.PP
Returns a value that indicates whether the current instance is equal to the specified object\&. 
.PP
\fBParameters\fP
.RS 4
\fIother\fP Object to make the comparison with\&.
.RE
.PP
\fBReturns\fP
.RS 4
\fCtrue\fP if the current instance is equal to the specified object; \fCfalse\fP otherwise\&.
.RE
.PP

.PP
Definition at line \fB443\fP of file \fBHalf\&.cs\fP\&.
.SS "override bool Photon\&.Compression\&.HalfFloat\&.Half\&.Equals (object obj)"

.PP
Returns a value that indicates whether the current instance is equal to a specified object\&. 
.PP
\fBParameters\fP
.RS 4
\fIobj\fP Object to make the comparison with\&.
.RE
.PP
\fBReturns\fP
.RS 4
\fCtrue\fP if the current instance is equal to the specified object; \fCfalse\fP otherwise\&.
.RE
.PP

.PP
Definition at line \fB454\fP of file \fBHalf\&.cs\fP\&.
.SS "static bool Photon\&.Compression\&.HalfFloat\&.Half\&.Equals (ref \fBHalf\fP value1, ref \fBHalf\fP value2)\fC [static]\fP"

.PP
Determines whether the specified object instances are considered equal\&. 
.PP
\fBParameters\fP
.RS 4
\fIvalue1\fP 
.br
\fIvalue2\fP 
.RE
.PP
\fBReturns\fP
.RS 4
\fCtrue\fP if \fIvalue1\fP  is the same instance as \fIvalue2\fP  or if both are \fCnull\fP references or if \fCvalue1\&.Equals(value2)\fP returns \fCtrue\fP; otherwise, \fCfalse\fP\&. 
.RE
.PP

.PP
Definition at line \fB432\fP of file \fBHalf\&.cs\fP\&.
.SS "override int Photon\&.Compression\&.HalfFloat\&.Half\&.GetHashCode ()"

.PP
Returns the hash code for this instance\&. 
.PP
\fBReturns\fP
.RS 4
A 32-bit signed integer hash code\&.
.RE
.PP

.PP
Definition at line \fB341\fP of file \fBHalf\&.cs\fP\&.
.SS "TypeCode Photon\&.Compression\&.HalfFloat\&.Half\&.GetTypeCode ()"

.PP
Returns the System\&.TypeCode for value type\&. 
.PP
\fBReturns\fP
.RS 4
The type code\&.
.RE
.PP

.PP
Definition at line \fB469\fP of file \fBHalf\&.cs\fP\&.
.SS "static bool Photon\&.Compression\&.HalfFloat\&.Half\&.IsInfinity (\fBHalf\fP half)\fC [static]\fP"

.PP
Returns a value indicating whether the specified number evaluates to negative or positive infinity\&. 
.PP
\fBReturns\fP
.RS 4
\fCtrue\fP if \fIhalf\fP  evaluates to positive or negative infinity; otherwise, \fCfalse\fP\&.
.RE
.PP

.PP
Definition at line \fB161\fP of file \fBHalf\&.cs\fP\&.
.SS "static bool Photon\&.Compression\&.HalfFloat\&.Half\&.IsNaN (\fBHalf\fP half)\fC [static]\fP"

.PP
Returns a value indicating whether the specified number evaluates to NaN\&. 
.PP
\fBReturns\fP
.RS 4
\fCtrue\fP if \fIhalf\fP  evaluates to NaN; otherwise, \fCfalse\fP\&.
.RE
.PP

.PP
Definition at line \fB170\fP of file \fBHalf\&.cs\fP\&.
.SS "static bool Photon\&.Compression\&.HalfFloat\&.Half\&.IsNegativeInfinity (\fBHalf\fP half)\fC [static]\fP"

.PP
Returns a value indicating whether the specified number evaluates to negative infinity\&. 
.PP
\fBReturns\fP
.RS 4
\fCtrue\fP if \fIhalf\fP  evaluates to negative infinity; otherwise, \fCfalse\fP\&.
.RE
.PP

.PP
Definition at line \fB179\fP of file \fBHalf\&.cs\fP\&.
.SS "static bool Photon\&.Compression\&.HalfFloat\&.Half\&.IsPositiveInfinity (\fBHalf\fP half)\fC [static]\fP"

.PP
Returns a value indicating whether the specified number evaluates to positive infinity\&. 
.PP
\fBReturns\fP
.RS 4
\fCtrue\fP if \fIhalf\fP  evaluates to positive infinity; otherwise, \fCfalse\fP\&.
.RE
.PP

.PP
Definition at line \fB188\fP of file \fBHalf\&.cs\fP\&.
.SS "static implicit Photon\&.Compression\&.HalfFloat\&.Half\&.operator float (\fBHalf\fP value)\fC [static]\fP"

.PP
Performs an implicit conversion from T:SlimMath\&.Half to T:System\&.Single\&. 
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP The value to be converted\&.
.RE
.PP
\fBReturns\fP
.RS 4
The converted value\&.
.RE
.PP

.PP
Definition at line \fB280\fP of file \fBHalf\&.cs\fP\&.
.SS "static Photon\&.Compression\&.HalfFloat\&.Half\&.operator \fBHalf\fP (float value)\fC [explicit]\fP, \fC [static]\fP"

.PP
Performs an explicit conversion from T:System\&.Single to T:SlimMath\&.Half\&. 
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP The value to be converted\&.
.RE
.PP
\fBReturns\fP
.RS 4
The converted value\&.
.RE
.PP

.PP
Definition at line \fB270\fP of file \fBHalf\&.cs\fP\&.
.SS "static bool Photon\&.Compression\&.HalfFloat\&.Half\&.operator!= (\fBHalf\fP left, \fBHalf\fP right)\fC [static]\fP"

.PP
Tests for inequality between two objects\&. 
.PP
\fBParameters\fP
.RS 4
\fIleft\fP The first value to compare\&.
.br
\fIright\fP The second value to compare\&.
.RE
.PP
\fBReturns\fP
.RS 4
\fCtrue\fP if \fIleft\fP  has a different value than \fIright\fP ; otherwise, \fCfalse\fP\&.
.RE
.PP

.PP
Definition at line \fB260\fP of file \fBHalf\&.cs\fP\&.
.SS "static bool Photon\&.Compression\&.HalfFloat\&.Half\&.operator< (\fBHalf\fP left, \fBHalf\fP right)\fC [static]\fP"

.PP
Returns a value that indicates whether a specified value is less than another specified value\&. 
.PP
\fBParameters\fP
.RS 4
\fIleft\fP The first value to compare\&.
.br
\fIright\fP The second value to compare\&.
.RE
.PP
\fBReturns\fP
.RS 4
\fCtrue\fP if \fIleft\fP  is less than \fIright\fP ; otherwise, \fCfalse\fP\&.
.RE
.PP

.PP
Definition at line \fB200\fP of file \fBHalf\&.cs\fP\&.
.SS "static bool Photon\&.Compression\&.HalfFloat\&.Half\&.operator<= (\fBHalf\fP left, \fBHalf\fP right)\fC [static]\fP"

.PP
Returns a value that indicates whether a specified value is less than or equal to another specified value\&. 
.PP
\fBParameters\fP
.RS 4
\fIleft\fP The first value to compare\&.
.br
\fIright\fP The second value to compare\&.
.RE
.PP
\fBReturns\fP
.RS 4
\fCtrue\fP if \fIleft\fP  is less than or equal to \fIright\fP ; otherwise, \fCfalse\fP\&.
.RE
.PP

.PP
Definition at line \fB224\fP of file \fBHalf\&.cs\fP\&.
.SS "static bool Photon\&.Compression\&.HalfFloat\&.Half\&.operator== (\fBHalf\fP left, \fBHalf\fP right)\fC [static]\fP"

.PP
Tests for equality between two objects\&. 
.PP
\fBParameters\fP
.RS 4
\fIleft\fP The first value to compare\&.
.br
\fIright\fP The second value to compare\&.
.RE
.PP
\fBReturns\fP
.RS 4
\fCtrue\fP if \fIleft\fP  has the same value as \fIright\fP ; otherwise, \fCfalse\fP\&.
.RE
.PP

.PP
Definition at line \fB248\fP of file \fBHalf\&.cs\fP\&.
.SS "static bool Photon\&.Compression\&.HalfFloat\&.Half\&.operator> (\fBHalf\fP left, \fBHalf\fP right)\fC [static]\fP"

.PP
Returns a value that indicates whether a specified value is greater than another specified value\&. 
.PP
\fBParameters\fP
.RS 4
\fIleft\fP The first value to compare\&.
.br
\fIright\fP The second value to compare\&.
.RE
.PP
\fBReturns\fP
.RS 4
\fCtrue\fP if \fIleft\fP  is greater than \fIright\fP ; otherwise, \fCfalse\fP\&.
.RE
.PP

.PP
Definition at line \fB212\fP of file \fBHalf\&.cs\fP\&.
.SS "static bool Photon\&.Compression\&.HalfFloat\&.Half\&.operator>= (\fBHalf\fP left, \fBHalf\fP right)\fC [static]\fP"

.PP
Returns a value that indicates whether a specified value is greater than or equal to another specified value\&. 
.PP
\fBParameters\fP
.RS 4
\fIleft\fP The first value to compare\&.
.br
\fIright\fP The second value to compare\&.
.RE
.PP
\fBReturns\fP
.RS 4
\fCtrue\fP if \fIleft\fP  is greater than or equal to right; otherwise, \fCfalse\fP\&.
.RE
.PP

.PP
Definition at line \fB236\fP of file \fBHalf\&.cs\fP\&.
.SS "bool IConvertible\&. Photon\&.Compression\&.HalfFloat\&.Half\&.ToBoolean (IFormatProvider provider)"

.PP
Definition at line \fB474\fP of file \fBHalf\&.cs\fP\&.
.SS "byte IConvertible\&. Photon\&.Compression\&.HalfFloat\&.Half\&.ToByte (IFormatProvider provider)"

.PP
Definition at line \fB479\fP of file \fBHalf\&.cs\fP\&.
.SS "char IConvertible\&. Photon\&.Compression\&.HalfFloat\&.Half\&.ToChar (IFormatProvider provider)"

.PP
Definition at line \fB484\fP of file \fBHalf\&.cs\fP\&.
.SS "DateTime IConvertible\&. Photon\&.Compression\&.HalfFloat\&.Half\&.ToDateTime (IFormatProvider provider)"

.PP
Definition at line \fB489\fP of file \fBHalf\&.cs\fP\&.
.SS "decimal IConvertible\&. Photon\&.Compression\&.HalfFloat\&.Half\&.ToDecimal (IFormatProvider provider)"

.PP
Definition at line \fB494\fP of file \fBHalf\&.cs\fP\&.
.SS "double IConvertible\&. Photon\&.Compression\&.HalfFloat\&.Half\&.ToDouble (IFormatProvider provider)"

.PP
Definition at line \fB499\fP of file \fBHalf\&.cs\fP\&.
.SS "short IConvertible\&. Photon\&.Compression\&.HalfFloat\&.Half\&.ToInt16 (IFormatProvider provider)"

.PP
Definition at line \fB504\fP of file \fBHalf\&.cs\fP\&.
.SS "int IConvertible\&. Photon\&.Compression\&.HalfFloat\&.Half\&.ToInt32 (IFormatProvider provider)"

.PP
Definition at line \fB509\fP of file \fBHalf\&.cs\fP\&.
.SS "long IConvertible\&. Photon\&.Compression\&.HalfFloat\&.Half\&.ToInt64 (IFormatProvider provider)"

.PP
Definition at line \fB514\fP of file \fBHalf\&.cs\fP\&.
.SS "sbyte IConvertible\&. Photon\&.Compression\&.HalfFloat\&.Half\&.ToSByte (IFormatProvider provider)"

.PP
Definition at line \fB519\fP of file \fBHalf\&.cs\fP\&.
.SS "float IConvertible\&. Photon\&.Compression\&.HalfFloat\&.Half\&.ToSingle (IFormatProvider provider)"

.PP
Definition at line \fB524\fP of file \fBHalf\&.cs\fP\&.
.SS "override string Photon\&.Compression\&.HalfFloat\&.Half\&.ToString ()"

.PP
Converts the value of the object to its equivalent string representation\&. 
.PP
\fBReturns\fP
.RS 4
The string representation of the value of this instance\&.
.RE
.PP

.PP
Definition at line \fB289\fP of file \fBHalf\&.cs\fP\&.
.SS "string Photon\&.Compression\&.HalfFloat\&.Half\&.ToString (IFormatProvider formatProvider)"

.PP
Returns a System\&.String that represents this instance\&. 
.PP
\fBParameters\fP
.RS 4
\fIformatProvider\fP The format provider\&.
.RE
.PP
\fBReturns\fP
.RS 4
A System\&.String that represents this instance\&. 
.RE
.PP

.PP
Definition at line \fB316\fP of file \fBHalf\&.cs\fP\&.
.SS "string Photon\&.Compression\&.HalfFloat\&.Half\&.ToString (string format)"

.PP
Returns a System\&.String that represents this instance\&. 
.PP
\fBParameters\fP
.RS 4
\fIformat\fP The format\&.
.RE
.PP
\fBReturns\fP
.RS 4
A System\&.String that represents this instance\&. 
.RE
.PP

.PP
Definition at line \fB301\fP of file \fBHalf\&.cs\fP\&.
.SS "string Photon\&.Compression\&.HalfFloat\&.Half\&.ToString (string format, IFormatProvider formatProvider)"

.PP
Returns a System\&.String that represents this instance\&. 
.PP
\fBParameters\fP
.RS 4
\fIformat\fP The format\&.
.br
\fIformatProvider\fP The format provider\&.
.RE
.PP
\fBReturns\fP
.RS 4
A System\&.String that represents this instance\&. 
.RE
.PP

.PP
Definition at line \fB329\fP of file \fBHalf\&.cs\fP\&.
.SS "object IConvertible\&. Photon\&.Compression\&.HalfFloat\&.Half\&.ToType (Type type, IFormatProvider provider)"

.PP
Definition at line \fB529\fP of file \fBHalf\&.cs\fP\&.
.SS "ushort IConvertible\&. Photon\&.Compression\&.HalfFloat\&.Half\&.ToUInt16 (IFormatProvider provider)"

.PP
Definition at line \fB534\fP of file \fBHalf\&.cs\fP\&.
.SS "uint IConvertible\&. Photon\&.Compression\&.HalfFloat\&.Half\&.ToUInt32 (IFormatProvider provider)"

.PP
Definition at line \fB539\fP of file \fBHalf\&.cs\fP\&.
.SS "ulong IConvertible\&. Photon\&.Compression\&.HalfFloat\&.Half\&.ToUInt64 (IFormatProvider provider)"

.PP
Definition at line \fB544\fP of file \fBHalf\&.cs\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "const int Photon\&.Compression\&.HalfFloat\&.Half\&.AdditionRounding = 1\fC [static]\fP"

.PP
Additional rounding\&. 
.PP
Definition at line \fB77\fP of file \fBHalf\&.cs\fP\&.
.SS "readonly \fBHalf\fP Photon\&.Compression\&.HalfFloat\&.Half\&.Epsilon = new \fBHalf\fP(0\&.0004887581f)\fC [static]\fP"

.PP
Smallest value such that 1\&.0 + epsilon != 1\&.0 
.PP
Definition at line \fB82\fP of file \fBHalf\&.cs\fP\&.
.SS "const int Photon\&.Compression\&.HalfFloat\&.Half\&.ExponentRadix = 2\fC [static]\fP"

.PP
Exponent radix\&. 
.PP
Definition at line \fB72\fP of file \fBHalf\&.cs\fP\&.
.SS "const int Photon\&.Compression\&.HalfFloat\&.Half\&.MantissaBits = 11\fC [static]\fP"

.PP
Number of bits in the mantissa\&. 
.PP
Definition at line \fB47\fP of file \fBHalf\&.cs\fP\&.
.SS "const int Photon\&.Compression\&.HalfFloat\&.Half\&.MaximumBinaryExponent = 15\fC [static]\fP"

.PP
Maximum binary exponent\&. 
.PP
Definition at line \fB57\fP of file \fBHalf\&.cs\fP\&.
.SS "const int Photon\&.Compression\&.HalfFloat\&.Half\&.MaximumDecimalExponent = 4\fC [static]\fP"

.PP
Maximum decimal exponent\&. 
.PP
Definition at line \fB52\fP of file \fBHalf\&.cs\fP\&.
.SS "readonly \fBHalf\fP Photon\&.Compression\&.HalfFloat\&.Half\&.MaxValue = new \fBHalf\fP(65504f)\fC [static]\fP"

.PP
Maximum value of the number\&. 
.PP
Definition at line \fB87\fP of file \fBHalf\&.cs\fP\&.
.SS "const int Photon\&.Compression\&.HalfFloat\&.Half\&.MinimumBinaryExponent = \-14\fC [static]\fP"

.PP
Minimum binary exponent\&. 
.PP
Definition at line \fB67\fP of file \fBHalf\&.cs\fP\&.
.SS "const int Photon\&.Compression\&.HalfFloat\&.Half\&.MinimumDecimalExponent = \-4\fC [static]\fP"

.PP
Minimum decimal exponent\&. 
.PP
Definition at line \fB62\fP of file \fBHalf\&.cs\fP\&.
.SS "readonly \fBHalf\fP Photon\&.Compression\&.HalfFloat\&.Half\&.MinValue = new \fBHalf\fP(6\&.103516E\-05f)\fC [static]\fP"

.PP
Minimum value of the number\&. 
.PP
Definition at line \fB92\fP of file \fBHalf\&.cs\fP\&.
.SS "readonly \fBHalf\fP Photon\&.Compression\&.HalfFloat\&.Half\&.NaN = new \fBHalf\fP(0\&.0f / 0\&.0f)\fC [static]\fP"

.PP
Represents not a number (NaN)\&. 
.PP
Definition at line \fB97\fP of file \fBHalf\&.cs\fP\&.
.SS "readonly \fBHalf\fP Photon\&.Compression\&.HalfFloat\&.Half\&.NegativeInfinity = new \fBHalf\fP(\-1\&.0f / 0\&.0f)\fC [static]\fP"

.PP
Represents negative infinity\&. 
.PP
Definition at line \fB102\fP of file \fBHalf\&.cs\fP\&.
.SS "readonly \fBHalf\fP Photon\&.Compression\&.HalfFloat\&.Half\&.PositiveInfinity = new \fBHalf\fP(1\&.0f / 0\&.0f)\fC [static]\fP"

.PP
Represents positive infinity\&. 
.PP
Definition at line \fB107\fP of file \fBHalf\&.cs\fP\&.
.SS "const int Photon\&.Compression\&.HalfFloat\&.Half\&.PrecisionDigits = 3\fC [static]\fP"

.PP
Number of decimal digits of precision\&. 
.PP
Definition at line \fB42\fP of file \fBHalf\&.cs\fP\&.
.SH "Property Documentation"
.PP 
.SS "ushort Photon\&.Compression\&.HalfFloat\&.Half\&.RawValue\fC [get]\fP"

.PP
Gets the raw 16 bit value used to back this half-float\&. 
.PP
Definition at line \fB122\fP of file \fBHalf\&.cs\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Purrpatrator User manual from the source code\&.
