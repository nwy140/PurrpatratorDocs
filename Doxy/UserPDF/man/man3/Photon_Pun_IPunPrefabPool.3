.TH "Photon.Pun.IPunPrefabPool" 3 "Mon Apr 18 2022" "Purrpatrator User manual" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Photon.Pun.IPunPrefabPool \- Defines an interface for object pooling, used in \fBPhotonNetwork\&.Instantiate\fP and \fBPhotonNetwork\&.Destroy\fP\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherited by \fBPhoton\&.Pun\&.DefaultPool\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "GameObject \fBInstantiate\fP (string prefabId, Vector3 position, Quaternion rotation)"
.br
.RI "Called to get an instance of a prefab\&. "
.ti -1c
.RI "void \fBDestroy\fP (GameObject gameObject)"
.br
.RI "Called to destroy (or just return) the instance of a prefab\&. "
.in -1c
.SH "Detailed Description"
.PP 
Defines an interface for object pooling, used in \fBPhotonNetwork\&.Instantiate\fP and \fBPhotonNetwork\&.Destroy\fP\&. 

To apply your custom \fBIPunPrefabPool\fP, set \fBPhotonNetwork\&.PrefabPool\fP\&.
.PP
The pool has to return a valid, disabled GameObject when PUN calls Instantiate\&. Also, the position and rotation must be applied\&.
.PP
Note that Awake and Start are only called once by Unity, so scripts on re-used GameObjects should make use of OnEnable and or OnDisable\&. When OnEnable gets called, the \fBPhotonView\fP is already updated to the new values\&.
.PP
To be able to enable a GameObject, Instantiate must return an inactive object\&.
.PP
Before PUN 'destroys' GameObjects, it will disable them\&.
.PP
If a component implements \fBIPunInstantiateMagicCallback\fP, PUN will call OnPhotonInstantiate when the networked object gets instantiated\&. If no components implement this on a prefab, PUN will optimize the instantiation and no longer looks up \fBIPunInstantiateMagicCallback\fP via GetComponents\&. 
.PP
Definition at line \fB120\fP of file \fBIPunCallbacks\&.cs\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void Photon\&.Pun\&.IPunPrefabPool\&.Destroy (GameObject gameObject)"

.PP
Called to destroy (or just return) the instance of a prefab\&. It's disabled and the pool may reset and cache it for later use in Instantiate\&. 
.PP
A pool needs some way to find out which type of GameObject got returned via \fBDestroy()\fP\&. It could be a tag, name, a component or anything similar\&. 
.PP
\fBParameters\fP
.RS 4
\fIgameObject\fP The instance to destroy\&.
.RE
.PP

.PP
Implemented in \fBPhoton\&.Pun\&.DefaultPool\fP\&.
.SS "GameObject Photon\&.Pun\&.IPunPrefabPool\&.Instantiate (string prefabId, Vector3 position, Quaternion rotation)"

.PP
Called to get an instance of a prefab\&. Must return valid, disabled GameObject with \fBPhotonView\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIprefabId\fP The id of this prefab\&.
.br
\fIposition\fP The position for the instance\&.
.br
\fIrotation\fP The rotation for the instance\&.
.RE
.PP
\fBReturns\fP
.RS 4
A disabled instance to use by PUN or null if the prefabId is unknown\&.
.RE
.PP

.PP
Implemented in \fBPhoton\&.Pun\&.DefaultPool\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Purrpatrator User manual from the source code\&.
