.TH "Photon.Pun.PhotonTransformViewClassic" 3 "Mon Apr 18 2022" "Purrpatrator User manual" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Photon.Pun.PhotonTransformViewClassic \- This class helps you to synchronize position, rotation and scale of a GameObject\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBPhoton\&.Pun\&.MonoBehaviourPun\fP, and \fBPhoton\&.Pun\&.IPunObservable\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBSetSynchronizedValues\fP (Vector3 speed, float turnSpeed)"
.br
.RI "These values are synchronized to the remote objects if the interpolation mode or the extrapolation mode SynchronizeValues is used\&. "
.ti -1c
.RI "void \fBOnPhotonSerializeView\fP (\fBPhotonStream\fP stream, \fBPhotonMessageInfo\fP info)"
.br
.RI "Called by PUN several times per second, so that your script can write and read synchronization data for the \fBPhotonView\fP\&. "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBPhotonTransformViewPositionModel\fP \fBm_PositionModel\fP = new \fBPhotonTransformViewPositionModel\fP()"
.br
.ti -1c
.RI "\fBPhotonTransformViewRotationModel\fP \fBm_RotationModel\fP = new \fBPhotonTransformViewRotationModel\fP()"
.br
.ti -1c
.RI "\fBPhotonTransformViewScaleModel\fP \fBm_ScaleModel\fP = new \fBPhotonTransformViewScaleModel\fP()"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
This class helps you to synchronize position, rotation and scale of a GameObject\&. 

It also gives you many different options to make the synchronized values appear smooth, even when the data is only send a couple of times per second\&. Simply add the component to your GameObject and make sure that the \fBPhotonTransformViewClassic\fP is added to the list of observed components 
.PP
Definition at line \fB27\fP of file \fBPhotonTransformViewClassic\&.cs\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void Photon\&.Pun\&.PhotonTransformViewClassic\&.OnPhotonSerializeView (\fBPhotonStream\fP stream, \fBPhotonMessageInfo\fP info)"

.PP
Called by PUN several times per second, so that your script can write and read synchronization data for the \fBPhotonView\fP\&. This method will be called in scripts that are assigned as Observed component of a \fBPhotonView\fP\&.
.br
 \fBPhotonNetwork\&.SerializationRate\fP affects how often this method is called\&.
.br
 \fBPhotonNetwork\&.SendRate\fP affects how often packages are sent by this client\&.
.br
.PP
Implementing this method, you can customize which data a \fBPhotonView\fP regularly synchronizes\&. Your code defines what is being sent (content) and how your data is used by receiving clients\&.
.PP
Unlike other callbacks, \fIOnPhotonSerializeView only gets called when it is assigned to a \fBPhotonView\fP\fP as PhotonView\&.observed script\&.
.PP
To make use of this method, the \fBPhotonStream\fP is essential\&. It will be in 'writing' mode' on the
client that controls a PhotonView (PhotonStream\&.IsWriting == true) and in 'reading mode' on the
remote clients that just receive that the controlling client sends\&.

If you skip writing any value into the stream, PUN will skip the update\&. Used carefully, this can
conserve bandwidth and messages (which have a limit per room/second)\&.

Note that OnPhotonSerializeView is not called on remote clients when the sender does not send
any update\&. This can't be used as 'x-times per second Update()"\&. 
.PP
Implements \fBPhoton\&.Pun\&.IPunObservable\fP\&.
.PP
Definition at line \fB126\fP of file \fBPhotonTransformViewClassic\&.cs\fP\&.
.SS "void Photon\&.Pun\&.PhotonTransformViewClassic\&.SetSynchronizedValues (Vector3 speed, float turnSpeed)"

.PP
These values are synchronized to the remote objects if the interpolation mode or the extrapolation mode SynchronizeValues is used\&. Your movement script should pass on the current speed (in units/second) and turning speed (in angles/second) so the remote object can use them to predict the objects movement\&. 
.PP
\fBParameters\fP
.RS 4
\fIspeed\fP The current movement vector of the object in units/second\&.
.br
\fIturnSpeed\fP The current turn speed of the object in angles/second\&.
.RE
.PP

.PP
Definition at line \fB120\fP of file \fBPhotonTransformViewClassic\&.cs\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBPhotonTransformViewPositionModel\fP Photon\&.Pun\&.PhotonTransformViewClassic\&.m_PositionModel = new \fBPhotonTransformViewPositionModel\fP()"

.PP
Definition at line \fB35\fP of file \fBPhotonTransformViewClassic\&.cs\fP\&.
.SS "\fBPhotonTransformViewRotationModel\fP Photon\&.Pun\&.PhotonTransformViewClassic\&.m_RotationModel = new \fBPhotonTransformViewRotationModel\fP()"

.PP
Definition at line \fB38\fP of file \fBPhotonTransformViewClassic\&.cs\fP\&.
.SS "\fBPhotonTransformViewScaleModel\fP Photon\&.Pun\&.PhotonTransformViewClassic\&.m_ScaleModel = new \fBPhotonTransformViewScaleModel\fP()"

.PP
Definition at line \fB41\fP of file \fBPhotonTransformViewClassic\&.cs\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Purrpatrator User manual from the source code\&.
