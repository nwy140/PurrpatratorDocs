.TH "Photon.Pun.PhotonView" 3 "Mon Apr 18 2022" "Purrpatrator User manual" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Photon.Pun.PhotonView \- A \fBPhotonView\fP identifies an object across the network (viewID) and configures how the controlling client updates remote instances\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits MonoBehaviour\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBObservableSearch\fP { \fBManual\fP, \fBAutoFindActive\fP, \fBAutoFindAll\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBOnPreNetDestroy\fP (\fBPhotonView\fP rootView)"
.br
.ti -1c
.RI "void \fBRequestOwnership\fP ()"
.br
.RI "Depending on the \fBPhotonView\fP's OwnershipTransfer setting, any client can request to become owner of the \fBPhotonView\fP\&. "
.ti -1c
.RI "void \fBTransferOwnership\fP (\fBPlayer\fP newOwner)"
.br
.RI "Transfers the ownership of this \fBPhotonView\fP (and GameObject) to another player\&. "
.ti -1c
.RI "void \fBTransferOwnership\fP (int newOwnerId)"
.br
.RI "Transfers the ownership of this \fBPhotonView\fP (and GameObject) to another player\&. "
.ti -1c
.RI "void \fBFindObservables\fP (bool force=false)"
.br
.RI "Will find \fBIPunObservable\fP components on this GameObject and nested children and add them to the ObservedComponents list\&. "
.ti -1c
.RI "void \fBSerializeView\fP (\fBPhotonStream\fP stream, \fBPhotonMessageInfo\fP info)"
.br
.ti -1c
.RI "void \fBDeserializeView\fP (\fBPhotonStream\fP stream, \fBPhotonMessageInfo\fP info)"
.br
.ti -1c
.RI "void \fBRefreshRpcMonoBehaviourCache\fP ()"
.br
.RI "Can be used to refesh the list of MonoBehaviours on this GameObject while \fBPhotonNetwork\&.UseRpcMonoBehaviourCache\fP is true\&. "
.ti -1c
.RI "void \fBRPC\fP (string methodName, \fBRpcTarget\fP target, params object[] parameters)"
.br
.RI "Call a RPC method of this GameObject on remote clients of this room (or on all, including this client)\&. "
.ti -1c
.RI "void \fBRpcSecure\fP (string methodName, \fBRpcTarget\fP target, bool encrypt, params object[] parameters)"
.br
.RI "Call a RPC method of this GameObject on remote clients of this room (or on all, including this client)\&. "
.ti -1c
.RI "void \fBRPC\fP (string methodName, \fBPlayer\fP targetPlayer, params object[] parameters)"
.br
.RI "Call a RPC method of this GameObject on remote clients of this room (or on all, including this client)\&. "
.ti -1c
.RI "void \fBRpcSecure\fP (string methodName, \fBPlayer\fP targetPlayer, bool encrypt, params object[] parameters)"
.br
.RI "Call a RPC method of this GameObject on remote clients of this room (or on all, including this client)\&. "
.ti -1c
.RI "void \fBAddCallbackTarget\fP (\fBIPhotonViewCallback\fP obj)"
.br
.RI "Add object to all applicable callback interfaces\&. "
.ti -1c
.RI "void \fBRemoveCallbackTarget\fP (\fBIPhotonViewCallback\fP obj)"
.br
.RI "Remove object from all applicable callback interfaces\&. "
.ti -1c
.RI "void \fBAddCallback< T >\fP (\fBIPhotonViewCallback\fP obj)"
.br
.RI "Add object to this \fBPhotonView\fP's callback\&. "
.ti -1c
.RI "void \fBRemoveCallback< T >\fP (\fBIPhotonViewCallback\fP obj)"
.br
.RI "Remove object from this \fBPhotonView\fP's callback list for T\&. "
.ti -1c
.RI "override string \fBToString\fP ()"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBPhotonView\fP \fBGet\fP (Component component)"
.br
.ti -1c
.RI "static \fBPhotonView\fP \fBGet\fP (GameObject gameObj)"
.br
.ti -1c
.RI "static \fBPhotonView\fP \fBFind\fP (int viewID)"
.br
.RI "Finds the \fBPhotonView\fP Component with a viewID in the scene "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "byte \fBGroup\fP = 0"
.br
.ti -1c
.RI "int \fBprefixField\fP = \-1"
.br
.ti -1c
.RI "\fBViewSynchronization\fP \fBSynchronization\fP = \fBViewSynchronization\&.UnreliableOnChange\fP"
.br
.ti -1c
.RI "\fBOwnershipOption\fP \fBOwnershipTransfer\fP = \fBOwnershipOption\&.Fixed\fP"
.br
.RI "Defines if ownership of this \fBPhotonView\fP is fixed, can be requested or simply taken\&. "
.ti -1c
.RI "\fBObservableSearch\fP \fBobservableSearch\fP = \fBObservableSearch\&.Manual\fP"
.br
.RI "Default to manual so existing PVs in projects default to same as before\&. Reset() changes this to AutoAll for new implementations\&. "
.ti -1c
.RI "List< Component > \fBObservedComponents\fP"
.br
.ti -1c
.RI "int \fBsceneViewId\fP = 0"
.br
.RI "This field is the Scene ViewID (0 if not used)\&. loaded with the scene, used in Awake()\&. "
.ti -1c
.RI "int \fBInstantiationId\fP"
.br
.ti -1c
.RI "bool \fBisRuntimeInstantiated\fP"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "int \fBPrefix\fP\fC [getset]\fP"
.br
.ti -1c
.RI "object[] \fBInstantiationData\fP\fC [getset]\fP"
.br
.RI "This is the InstantiationData that was passed when calling \fBPhotonNetwork\&.Instantiate\fP* (if that was used to spawn this prefab) "
.ti -1c
.RI "bool \fBIsSceneView\fP\fC [get]\fP"
.br
.ti -1c
.RI "bool \fBIsRoomView\fP\fC [get]\fP"
.br
.RI "True if the \fBPhotonView\fP was loaded with the scene (game object) or instantiated with InstantiateRoomObject\&. "
.ti -1c
.RI "bool \fBIsOwnerActive\fP\fC [get]\fP"
.br
.ti -1c
.RI "bool \fBIsMine\fP\fC [get]\fP"
.br
.RI "True if the \fBPhotonView\fP is 'mine' and can be controlled by this client\&. "
.ti -1c
.RI "bool \fBAmController\fP\fC [get]\fP"
.br
.ti -1c
.RI "\fBPlayer\fP \fBController\fP\fC [get]\fP"
.br
.ti -1c
.RI "int \fBCreatorActorNr\fP\fC [get]\fP"
.br
.ti -1c
.RI "bool \fBAmOwner\fP\fC [get]\fP"
.br
.ti -1c
.RI "\fBPlayer\fP \fBOwner\fP\fC [get]\fP"
.br
.RI "The owner of a \fBPhotonView\fP is the creator of an object by default Ownership can be transferred and the owner may not be in the room anymore\&. "
.ti -1c
.RI "int?? \fBOwnerActorNr\fP\fC [getset]\fP"
.br
.ti -1c
.RI "int?? \fBControllerActorNr\fP\fC [getset]\fP"
.br
.ti -1c
.RI "int \fBViewID\fP\fC [getset]\fP"
.br
.RI "The ID of the \fBPhotonView\fP\&. "
.in -1c
.SH "Detailed Description"
.PP 
A \fBPhotonView\fP identifies an object across the network (viewID) and configures how the controlling client updates remote instances\&. 


.PP
Definition at line \fB29\fP of file \fBPhotonView\&.cs\fP\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBPhoton\&.Pun\&.PhotonView\&.ObservableSearch\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIManual \fP\fP
.TP
\fB\fIAutoFindActive \fP\fP
.TP
\fB\fIAutoFindAll \fP\fP
.PP
Definition at line \fB137\fP of file \fBPhotonView\&.cs\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void Photon\&.Pun\&.PhotonView\&.AddCallback< T > (\fBIPhotonViewCallback\fP obj)"

.PP
Add object to this \fBPhotonView\fP's callback\&. T is the IOnPhotonViewCallback derived interface you want added to its associated callback list\&. Supplying IOnPhotonViewCallback (the interface base class) as T will add ALL implemented IOnPhotonViewCallback Interfaces found on the object\&. 
.PP
\fBType Constraints\fP
.TP
\fIT\fP : \fIclass\fP
.TP
\fIT\fP : \fIIPhotonViewCallback\fP
.PP
Definition at line \fB747\fP of file \fBPhotonView\&.cs\fP\&.
.SS "void Photon\&.Pun\&.PhotonView\&.AddCallbackTarget (\fBIPhotonViewCallback\fP obj)"

.PP
Add object to all applicable callback interfaces\&. Object must implement at least one IOnPhotonViewCallback derived interface\&. 
.PP
\fBParameters\fP
.RS 4
\fIobj\fP An object that implements OnPhotonView callback interface(s)\&.
.RE
.PP

.PP
Definition at line \fB728\fP of file \fBPhotonView\&.cs\fP\&.
.SS "void Photon\&.Pun\&.PhotonView\&.DeserializeView (\fBPhotonStream\fP stream, \fBPhotonMessageInfo\fP info)"

.PP
Definition at line \fB526\fP of file \fBPhotonView\&.cs\fP\&.
.SS "static \fBPhotonView\fP Photon\&.Pun\&.PhotonView\&.Find (int viewID)\fC [static]\fP"

.PP
Finds the \fBPhotonView\fP Component with a viewID in the scene 
.PP
\fBParameters\fP
.RS 4
\fIviewID\fP 
.RE
.PP
\fBReturns\fP
.RS 4
The \fBPhotonView\fP with ViewID\&. Returns null if none found
.RE
.PP

.PP
Definition at line \fB695\fP of file \fBPhotonView\&.cs\fP\&.
.SS "void Photon\&.Pun\&.PhotonView\&.FindObservables (bool force = \fCfalse\fP)"

.PP
Will find \fBIPunObservable\fP components on this GameObject and nested children and add them to the ObservedComponents list\&. This is called via PhotonView\&.Awake(), which in turn is called immediately by the engine's AddComponent method\&.
.PP
Changing the ObservedComponents of a \fBPhotonView\fP at runtime can be problematic, if other clients are not also updating their list\&. 
.PP
\fBParameters\fP
.RS 4
\fIforce\fP If true, FindObservables will work as if observableSearch is AutoFindActive\&.
.RE
.PP

.PP
Definition at line \fB493\fP of file \fBPhotonView\&.cs\fP\&.
.SS "static \fBPhotonView\fP Photon\&.Pun\&.PhotonView\&.Get (Component component)\fC [static]\fP"

.PP
Definition at line \fB680\fP of file \fBPhotonView\&.cs\fP\&.
.SS "static \fBPhotonView\fP Photon\&.Pun\&.PhotonView\&.Get (GameObject gameObj)\fC [static]\fP"

.PP
Definition at line \fB685\fP of file \fBPhotonView\&.cs\fP\&.
.SS "void Photon\&.Pun\&.PhotonView\&.OnPreNetDestroy (\fBPhotonView\fP rootView)"

.PP
Definition at line \fB387\fP of file \fBPhotonView\&.cs\fP\&.
.SS "void Photon\&.Pun\&.PhotonView\&.RefreshRpcMonoBehaviourCache ()"

.PP
Can be used to refesh the list of MonoBehaviours on this GameObject while \fBPhotonNetwork\&.UseRpcMonoBehaviourCache\fP is true\&. Set \fBPhotonNetwork\&.UseRpcMonoBehaviourCache\fP to true to enable the caching\&. Uses this\&.GetComponents<MonoBehaviour>() to get a list of MonoBehaviours to call RPCs on (potentially)\&.
.PP
While \fBPhotonNetwork\&.UseRpcMonoBehaviourCache\fP is false, this method has no effect, because the list is refreshed when a RPC gets called\&. 
.PP
Definition at line \fB576\fP of file \fBPhotonView\&.cs\fP\&.
.SS "void Photon\&.Pun\&.PhotonView\&.RemoveCallback< T > (\fBIPhotonViewCallback\fP obj)"

.PP
Remove object from this \fBPhotonView\fP's callback list for T\&. T is the IOnPhotonViewCallback derived interface you want removed from its associated callback list\&. Supplying IOnPhotonViewCallback (the interface base class) as T will remove ALL implemented IOnPhotonViewCallback Interfaces found on the object\&. 
.PP
\fBType Constraints\fP
.TP
\fIT\fP : \fIclass\fP
.TP
\fIT\fP : \fIIPhotonViewCallback\fP
.PP
Definition at line \fB757\fP of file \fBPhotonView\&.cs\fP\&.
.SS "void Photon\&.Pun\&.PhotonView\&.RemoveCallbackTarget (\fBIPhotonViewCallback\fP obj)"

.PP
Remove object from all applicable callback interfaces\&. Object must implement at least one IOnPhotonViewCallback derived interface\&. 
.PP
\fBParameters\fP
.RS 4
\fIobj\fP An object that implements OnPhotonView callback interface(s)\&.
.RE
.PP

.PP
Definition at line \fB737\fP of file \fBPhotonView\&.cs\fP\&.
.SS "void Photon\&.Pun\&.PhotonView\&.RequestOwnership ()"

.PP
Depending on the \fBPhotonView\fP's OwnershipTransfer setting, any client can request to become owner of the \fBPhotonView\fP\&. Requesting ownership can give you control over a \fBPhotonView\fP, if the OwnershipTransfer setting allows that\&. The current owner might have to implement IPunCallbacks\&.OnOwnershipRequest to react to the ownership request\&.
.PP
The owner/controller of a \fBPhotonView\fP is also the client which sends position updates of the GameObject\&. 
.PP
Definition at line \fB421\fP of file \fBPhotonView\&.cs\fP\&.
.SS "void Photon\&.Pun\&.PhotonView\&.RPC (string methodName, \fBPlayer\fP targetPlayer, params object[] parameters)"

.PP
Call a RPC method of this GameObject on remote clients of this room (or on all, including this client)\&. \fBRemote Procedure Calls\fP are an essential tool in making multiplayer games with PUN\&. It enables you to make every client in a room call a specific method\&.
.PP
This method allows you to make an RPC calls on a specific player's client\&. Of course, calls are affected by this client's lag and that of remote clients\&.
.PP
Each call automatically is routed to the same \fBPhotonView\fP (and GameObject) that was used on the originating client\&.
.PP
See: \fBRemote Procedure Calls\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fImethodName\fP The name of a fitting method that was has the RPC attribute\&.
.br
\fItargetPlayer\fP The group of targets and the way the RPC gets sent\&.
.br
\fIparameters\fP The parameters that the RPC method has (must fit this call!)\&.
.RE
.PP

.PP
Definition at line \fB651\fP of file \fBPhotonView\&.cs\fP\&.
.SS "void Photon\&.Pun\&.PhotonView\&.RPC (string methodName, \fBRpcTarget\fP target, params object[] parameters)"

.PP
Call a RPC method of this GameObject on remote clients of this room (or on all, including this client)\&. \fBRemote Procedure Calls\fP are an essential tool in making multiplayer games with PUN\&. It enables you to make every client in a room call a specific method\&.
.PP
RPC calls can target 'All' or the 'Others'\&. Usually, the target 'All' gets executed locally immediately after sending the RPC\&. The '*ViaServer' options send the RPC to the server and execute it on this client when it's sent back\&. Of course, calls are affected by this client's lag and that of remote clients\&.
.PP
Each call automatically is routed to the same \fBPhotonView\fP (and GameObject) that was used on the originating client\&.
.PP
See: \fBRemote Procedure Calls\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fImethodName\fP The name of a fitting method that was has the RPC attribute\&.
.br
\fItarget\fP The group of targets and the way the RPC gets sent\&.
.br
\fIparameters\fP The parameters that the RPC method has (must fit this call!)\&.
.RE
.PP

.PP
Definition at line \fB602\fP of file \fBPhotonView\&.cs\fP\&.
.SS "void Photon\&.Pun\&.PhotonView\&.RpcSecure (string methodName, \fBPlayer\fP targetPlayer, bool encrypt, params object[] parameters)"

.PP
Call a RPC method of this GameObject on remote clients of this room (or on all, including this client)\&. \fBRemote Procedure Calls\fP are an essential tool in making multiplayer games with PUN\&. It enables you to make every client in a room call a specific method\&.
.PP
This method allows you to make an RPC calls on a specific player's client\&. Of course, calls are affected by this client's lag and that of remote clients\&.
.PP
Each call automatically is routed to the same \fBPhotonView\fP (and GameObject) that was used on the originating client\&.
.PP
See: \fBRemote Procedure Calls\fP\&. 
.PP
param name='methodName'>The name of a fitting method that was has the RPC attribute\&.
.PP
param name='targetPlayer'>The group of targets and the way the RPC gets sent\&.
.PP
param name='encrypt'> 
.PP
param name='parameters'>The parameters that the RPC method has (must fit this call!)\&.
.PP
Definition at line \fB675\fP of file \fBPhotonView\&.cs\fP\&.
.SS "void Photon\&.Pun\&.PhotonView\&.RpcSecure (string methodName, \fBRpcTarget\fP target, bool encrypt, params object[] parameters)"

.PP
Call a RPC method of this GameObject on remote clients of this room (or on all, including this client)\&. \fBRemote Procedure Calls\fP are an essential tool in making multiplayer games with PUN\&. It enables you to make every client in a room call a specific method\&.
.PP
RPC calls can target 'All' or the 'Others'\&. Usually, the target 'All' gets executed locally immediately after sending the RPC\&. The '*ViaServer' options send the RPC to the server and execute it on this client when it's sent back\&. Of course, calls are affected by this client's lag and that of remote clients\&.
.PP
Each call automatically is routed to the same \fBPhotonView\fP (and GameObject) that was used on the originating client\&.
.PP
See: \fBRemote Procedure Calls\fP\&. 
.PP
param name='methodName'>The name of a fitting method that was has the RPC attribute\&.
.PP
param name='target'>The group of targets and the way the RPC gets sent\&.
.PP
param name='encrypt'> 
.PP
param name='parameters'>The parameters that the RPC method has (must fit this call!)\&.
.PP
Definition at line \fB628\fP of file \fBPhotonView\&.cs\fP\&.
.SS "void Photon\&.Pun\&.PhotonView\&.SerializeView (\fBPhotonStream\fP stream, \fBPhotonMessageInfo\fP info)"

.PP
Definition at line \fB513\fP of file \fBPhotonView\&.cs\fP\&.
.SS "override string Photon\&.Pun\&.PhotonView\&.ToString ()"

.PP
Definition at line \fB821\fP of file \fBPhotonView\&.cs\fP\&.
.SS "void Photon\&.Pun\&.PhotonView\&.TransferOwnership (int newOwnerId)"

.PP
Transfers the ownership of this \fBPhotonView\fP (and GameObject) to another player\&. The owner/controller of a \fBPhotonView\fP is also the client which sends position updates of the GameObject\&. 
.PP
Definition at line \fB463\fP of file \fBPhotonView\&.cs\fP\&.
.SS "void Photon\&.Pun\&.PhotonView\&.TransferOwnership (\fBPlayer\fP newOwner)"

.PP
Transfers the ownership of this \fBPhotonView\fP (and GameObject) to another player\&. The owner/controller of a \fBPhotonView\fP is also the client which sends position updates of the GameObject\&. 
.PP
Definition at line \fB443\fP of file \fBPhotonView\&.cs\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "byte Photon\&.Pun\&.PhotonView\&.Group = 0"

.PP
Definition at line \fB76\fP of file \fBPhotonView\&.cs\fP\&.
.SS "int Photon\&.Pun\&.PhotonView\&.InstantiationId"

.PP
Definition at line \fB325\fP of file \fBPhotonView\&.cs\fP\&.
.SS "bool Photon\&.Pun\&.PhotonView\&.isRuntimeInstantiated"

.PP
Definition at line \fB329\fP of file \fBPhotonView\&.cs\fP\&.
.SS "\fBObservableSearch\fP Photon\&.Pun\&.PhotonView\&.observableSearch = \fBObservableSearch\&.Manual\fP"

.PP
Default to manual so existing PVs in projects default to same as before\&. Reset() changes this to AutoAll for new implementations\&. 
.PP
Definition at line \fB140\fP of file \fBPhotonView\&.cs\fP\&.
.SS "List<Component> Photon\&.Pun\&.PhotonView\&.ObservedComponents"

.PP
Definition at line \fB142\fP of file \fBPhotonView\&.cs\fP\&.
.SS "\fBOwnershipOption\fP Photon\&.Pun\&.PhotonView\&.OwnershipTransfer = \fBOwnershipOption\&.Fixed\fP"

.PP
Defines if ownership of this \fBPhotonView\fP is fixed, can be requested or simply taken\&. Note that you can't edit this value at runtime\&. The options are described in enum OwnershipOption\&. The current owner has to implement IPunCallbacks\&.OnOwnershipRequest to react to the ownership request\&. 
.PP
Definition at line \fB134\fP of file \fBPhotonView\&.cs\fP\&.
.SS "int Photon\&.Pun\&.PhotonView\&.prefixField = \-1"

.PP
Definition at line \fB96\fP of file \fBPhotonView\&.cs\fP\&.
.SS "int Photon\&.Pun\&.PhotonView\&.sceneViewId = 0"

.PP
This field is the Scene ViewID (0 if not used)\&. loaded with the scene, used in Awake()\&. 
.PP
Definition at line \fB277\fP of file \fBPhotonView\&.cs\fP\&.
.SS "\fBViewSynchronization\fP Photon\&.Pun\&.PhotonView\&.Synchronization = \fBViewSynchronization\&.UnreliableOnChange\fP"

.PP
Definition at line \fB123\fP of file \fBPhotonView\&.cs\fP\&.
.SH "Property Documentation"
.PP 
.SS "bool Photon\&.Pun\&.PhotonView\&.AmController\fC [get]\fP"

.PP
Definition at line \fB181\fP of file \fBPhotonView\&.cs\fP\&.
.SS "bool Photon\&.Pun\&.PhotonView\&.AmOwner\fC [get]\fP"

.PP
Definition at line \fB190\fP of file \fBPhotonView\&.cs\fP\&.
.SS "\fBPlayer\fP Photon\&.Pun\&.PhotonView\&.Controller\fC [get]\fP"

.PP
Definition at line \fB186\fP of file \fBPhotonView\&.cs\fP\&.
.SS "int?? Photon\&.Pun\&.PhotonView\&.ControllerActorNr\fC [get]\fP, \fC [set]\fP"

.PP
Definition at line \fB242\fP of file \fBPhotonView\&.cs\fP\&.
.SS "int Photon\&.Pun\&.PhotonView\&.CreatorActorNr\fC [get]\fP"

.PP
Definition at line \fB188\fP of file \fBPhotonView\&.cs\fP\&.
.SS "object [] Photon\&.Pun\&.PhotonView\&.InstantiationData\fC [get]\fP, \fC [set]\fP"

.PP
This is the InstantiationData that was passed when calling \fBPhotonNetwork\&.Instantiate\fP* (if that was used to spawn this prefab) 
.PP
Definition at line \fB103\fP of file \fBPhotonView\&.cs\fP\&.
.SS "bool Photon\&.Pun\&.PhotonView\&.IsMine\fC [get]\fP"

.PP
True if the \fBPhotonView\fP is 'mine' and can be controlled by this client\&. PUN has an ownership concept that defines who can control and destroy each \fBPhotonView\fP\&. True in case the controller matches the local Player\&. True if this is a scene photonview (null owner and ownerId == 0) on the Master client\&. 
.PP
Definition at line \fB180\fP of file \fBPhotonView\&.cs\fP\&.
.SS "bool Photon\&.Pun\&.PhotonView\&.IsOwnerActive\fC [get]\fP"

.PP
Definition at line \fB167\fP of file \fBPhotonView\&.cs\fP\&.
.SS "bool Photon\&.Pun\&.PhotonView\&.IsRoomView\fC [get]\fP"

.PP
True if the \fBPhotonView\fP was loaded with the scene (game object) or instantiated with InstantiateRoomObject\&. Room objects are not owned by a particular player but belong to the scene\&. Thus they don't get destroyed when their creator leaves the game and the current Master Client can control them (whoever that is)\&. The ownerId is 0 (player IDs are 1 and up)\&. 
.PP
Definition at line \fB162\fP of file \fBPhotonView\&.cs\fP\&.
.SS "bool Photon\&.Pun\&.PhotonView\&.IsSceneView\fC [get]\fP"

.PP
Definition at line \fB151\fP of file \fBPhotonView\&.cs\fP\&.
.SS "\fBPlayer\fP Photon\&.Pun\&.PhotonView\&.Owner\fC [get]\fP"

.PP
The owner of a \fBPhotonView\fP is the creator of an object by default Ownership can be transferred and the owner may not be in the room anymore\&. Objects in the scene don't have an owner\&. 
.PP
The owner/controller of a \fBPhotonView\fP is also the client which sends position updates of the GameObject\&.
.PP
Ownership can be transferred to another player with \fBPhotonView\&.TransferOwnership\fP or any player can request ownership by calling the \fBPhotonView\fP's RequestOwnership method\&. The current owner has to implement IPunCallbacks\&.OnOwnershipRequest to react to the ownership request\&. 
.PP
Definition at line \fB203\fP of file \fBPhotonView\&.cs\fP\&.
.SS "int?? Photon\&.Pun\&.PhotonView\&.OwnerActorNr\fC [get]\fP, \fC [set]\fP"

.PP
Definition at line \fB210\fP of file \fBPhotonView\&.cs\fP\&.
.SS "int Photon\&.Pun\&.PhotonView\&.Prefix\fC [get]\fP, \fC [set]\fP"

.PP
Definition at line \fB80\fP of file \fBPhotonView\&.cs\fP\&.
.SS "int Photon\&.Pun\&.PhotonView\&.ViewID\fC [get]\fP, \fC [set]\fP"

.PP
The ID of the \fBPhotonView\fP\&. Identifies it in a networked game (per room)\&. 
.PP
See: \fBNetwork Instantiation\fP
.PP
Definition at line \fB288\fP of file \fBPhotonView\&.cs\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Purrpatrator User manual from the source code\&.
