.TH "Photon.Pun.Simple.Inventory< T >" 3 "Mon Apr 18 2022" "Purrpatrator User manual" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Photon.Pun.Simple.Inventory< T > \- Base class for the inventory system\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBPhoton\&.Pun\&.Simple\&.NetComponent\fP, and \fBPhoton\&.Pun\&.Simple\&.IInventorySystem< T >\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "override void \fBOnAwakeInitialize\fP (bool isNetObject)"
.br
.RI "Awake code that will run whether or not a \fBNetObject\fP Exists "
.ti -1c
.RI "override void \fBOnStart\fP ()"
.br
.ti -1c
.RI "virtual \fBConsumption\fP \fBTryTrigger\fP (\fBIContactReactor\fP reactor, \fBContactEvent\fP contactEvent, int compatibleMounts)"
.br
.ti -1c
.RI "virtual \fBMount\fP \fBTryPickup\fP (\fBIContactReactor\fP reactor, \fBContactEvent\fP contactEvent)"
.br
.ti -1c
.RI "virtual bool \fBTestCapacity\fP (\fBIInventoryable\fP< T > inventoryable)"
.br
.RI "Return if the object being picked up exceeds remaining inventory\&. "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBMountSelector\fP \fBdefaultMounting\fP = new \fBMountSelector\fP(0)"
.br
.ti -1c
.RI "\fBContactGroupMaskSelector\fP \fBcontactGroups\fP = new \fBContactGroupMaskSelector\fP()"
.br
.ti -1c
.RI "\fBMountsManager\fP \fBmountsLookup\fP"
.br
.ti -1c
.RI "int \fBdefaultMountingMask\fP"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "\fBMount\fP \fBDefaultMount\fP\fC [getset]\fP"
.br
.ti -1c
.RI "\fBIContactGroupMask\fP \fBValidContactGroups\fP\fC [get]\fP"
.br
.ti -1c
.RI "byte \fBSystemIndex\fP\fC [getset]\fP"
.br
.ti -1c
.RI "int \fBValidMountsMask\fP\fC [get]\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Base class for the inventory system\&. 

You can extend this class using your own T to define how capacity is defined, and override any of the virtual methods to customize checks for triggering, pickup and having capacity\&. If you are feeling pro level, you can define your own class using the IInventory<> interface yourself\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP 
.RE
.PP

.PP
Definition at line \fB23\fP of file \fBInventoryT\&.cs\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "override void \fBPhoton\&.Pun\&.Simple\&.Inventory\fP< T >\&.OnAwakeInitialize (bool isNetObject)\fC [virtual]\fP"

.PP
Awake code that will run whether or not a \fBNetObject\fP Exists 
.PP
\fBReturns\fP
.RS 4
Returns true if this is a \fBNetObject\fP
.RE
.PP

.PP
Reimplemented from \fBPhoton\&.Pun\&.Simple\&.NetComponent\fP\&.
.PP
Definition at line \fB47\fP of file \fBInventoryT\&.cs\fP\&.
.SS "override void \fBPhoton\&.Pun\&.Simple\&.Inventory\fP< T >\&.OnStart ()\fC [virtual]\fP"

.PP
Reimplemented from \fBPhoton\&.Pun\&.Simple\&.NetComponent\fP\&.
.PP
Definition at line \fB57\fP of file \fBInventoryT\&.cs\fP\&.
.SS "virtual bool \fBPhoton\&.Pun\&.Simple\&.Inventory\fP< T >\&.TestCapacity (\fBIInventoryable\fP< T > inventoryable)\fC [virtual]\fP"

.PP
Return if the object being picked up exceeds remaining inventory\&. Default implementation always just returns true\&. Override to create real tests\&. 
.PP
\fBParameters\fP
.RS 4
\fIinventoryable\fP 
.RE
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.PP
Definition at line \fB120\fP of file \fBInventoryT\&.cs\fP\&.
.SS "virtual \fBMount\fP \fBPhoton\&.Pun\&.Simple\&.Inventory\fP< T >\&.TryPickup (\fBIContactReactor\fP reactor, \fBContactEvent\fP contactEvent)\fC [virtual]\fP"

.PP
Implements \fBPhoton\&.Pun\&.Simple\&.IContactSystem\fP\&.
.PP
Definition at line \fB110\fP of file \fBInventoryT\&.cs\fP\&.
.SS "virtual \fBConsumption\fP \fBPhoton\&.Pun\&.Simple\&.Inventory\fP< T >\&.TryTrigger (\fBIContactReactor\fP reactor, \fBContactEvent\fP contactEvent, int compatibleMounts)\fC [virtual]\fP"
Return if the object being picked up exceeds remaining inventory\&.
.PP
If both are set to 0 (Root) then consider that a match, otherwise zero for one but not the other is a mismatch (for now)
.PP
Implements \fBPhoton\&.Pun\&.Simple\&.IContactSystem\fP\&.
.PP
Definition at line \fB67\fP of file \fBInventoryT\&.cs\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBContactGroupMaskSelector\fP \fBPhoton\&.Pun\&.Simple\&.Inventory\fP< T >\&.contactGroups = new \fBContactGroupMaskSelector\fP()\fC [protected]\fP"

.PP
Definition at line \fB34\fP of file \fBInventoryT\&.cs\fP\&.
.SS "\fBMountSelector\fP \fBPhoton\&.Pun\&.Simple\&.Inventory\fP< T >\&.defaultMounting = new \fBMountSelector\fP(0)\fC [protected]\fP"

.PP
Definition at line \fB30\fP of file \fBInventoryT\&.cs\fP\&.
.SS "int \fBPhoton\&.Pun\&.Simple\&.Inventory\fP< T >\&.defaultMountingMask\fC [protected]\fP"

.PP
Definition at line \fB44\fP of file \fBInventoryT\&.cs\fP\&.
.SS "\fBMountsManager\fP \fBPhoton\&.Pun\&.Simple\&.Inventory\fP< T >\&.mountsLookup\fC [protected]\fP"

.PP
Definition at line \fB43\fP of file \fBInventoryT\&.cs\fP\&.
.SH "Property Documentation"
.PP 
.SS "\fBMount\fP \fBPhoton\&.Pun\&.Simple\&.Inventory\fP< T >\&.DefaultMount\fC [get]\fP, \fC [set]\fP"

.PP
Definition at line \fB31\fP of file \fBInventoryT\&.cs\fP\&.
.SS "byte \fBPhoton\&.Pun\&.Simple\&.Inventory\fP< T >\&.SystemIndex\fC [get]\fP, \fC [set]\fP"

.PP
Definition at line \fB40\fP of file \fBInventoryT\&.cs\fP\&.
.SS "\fBIContactGroupMask\fP \fBPhoton\&.Pun\&.Simple\&.Inventory\fP< T >\&.ValidContactGroups\fC [get]\fP"

.PP
Definition at line \fB35\fP of file \fBInventoryT\&.cs\fP\&.
.SS "int \fBPhoton\&.Pun\&.Simple\&.Inventory\fP< T >\&.ValidMountsMask\fC [get]\fP"

.PP
Definition at line \fB45\fP of file \fBInventoryT\&.cs\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Purrpatrator User manual from the source code\&.
