.TH "Photon.Pun.Simple.MaskLogic" 3 "Mon Apr 18 2022" "Purrpatrator User manual" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Photon.Pun.Simple.MaskLogic \- Extend this class and define the overrides to produce a mask logic\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherited by \fBPhoton\&.Pun\&.Simple\&.ObjStateLogic\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBOperator\fP { \fBEQUALS\fP, \fBAND\fP, \fBOR\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMaskLogic\fP ()"
.br
.ti -1c
.RI "void \fBRecalculateMasks\fP ()"
.br
.RI "This likely is not needed to be run, but will clean up any possible errors from the editor\&. "
.ti -1c
.RI "bool \fBEvaluate\fP (int state)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBOperator\fP \fBoperation\fP = \fBOperator\&.AND\fP"
.br
.ti -1c
.RI "int \fBstateMask\fP"
.br
.ti -1c
.RI "int \fBnotMask\fP = 0"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "int \fBtrueMask\fP"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "abstract string[] \fBEnumNames\fP\fC [get]\fP"
.br
.ti -1c
.RI "abstract int[] \fBEnumValues\fP\fC [get]\fP"
.br
.ti -1c
.RI "abstract bool \fBDefinesZero\fP\fC [get]\fP"
.br
.ti -1c
.RI "abstract int \fBDefaultValue\fP\fC [get]\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Extend this class and define the overrides to produce a mask logic\&. 

Call DrawGUI in Editor code to inline the GUI\&. 
.PP
Definition at line \fB20\fP of file \fBMaskLogic\&.cs\fP\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBPhoton\&.Pun\&.Simple\&.MaskLogic\&.Operator\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIEQUALS \fP\fP
.TP
\fB\fIAND \fP\fP
.TP
\fB\fIOR \fP\fP
.PP
Definition at line \fB22\fP of file \fBMaskLogic\&.cs\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Photon\&.Pun\&.Simple\&.MaskLogic\&.MaskLogic ()"

.PP
Definition at line \fB35\fP of file \fBMaskLogic\&.cs\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "bool Photon\&.Pun\&.Simple\&.MaskLogic\&.Evaluate (int state)"
This quick check allows all unchecked to work no matter the operator\&.
.PP
Change a bad operation value to default\&.
.PP
Definition at line \fB60\fP of file \fBMaskLogic\&.cs\fP\&.
.SS "void Photon\&.Pun\&.Simple\&.MaskLogic\&.RecalculateMasks ()"

.PP
This likely is not needed to be run, but will clean up any possible errors from the editor\&. Bootstrap this on implementation Awakes\&. making sure notMask isn't retaining any value from edit mode\&. Likely not needed\&.
.PP
Make sure only valid bits are true in the notMask (not enforced in editor code)
.PP
Remove not bits from the stateMask for AND/OR operations, they will be handled by the notMask test
.PP
Definition at line \fB43\fP of file \fBMaskLogic\&.cs\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "int Photon\&.Pun\&.Simple\&.MaskLogic\&.notMask = 0"

.PP
Definition at line \fB25\fP of file \fBMaskLogic\&.cs\fP\&.
.SS "\fBOperator\fP Photon\&.Pun\&.Simple\&.MaskLogic\&.operation = \fBOperator\&.AND\fP"

.PP
Definition at line \fB23\fP of file \fBMaskLogic\&.cs\fP\&.
.SS "int Photon\&.Pun\&.Simple\&.MaskLogic\&.stateMask"

.PP
Definition at line \fB24\fP of file \fBMaskLogic\&.cs\fP\&.
.SS "int Photon\&.Pun\&.Simple\&.MaskLogic\&.trueMask\fC [protected]\fP"

.PP
Definition at line \fB28\fP of file \fBMaskLogic\&.cs\fP\&.
.SH "Property Documentation"
.PP 
.SS "abstract int Photon\&.Pun\&.Simple\&.MaskLogic\&.DefaultValue\fC [get]\fP, \fC [protected]\fP"

.PP
Definition at line \fB33\fP of file \fBMaskLogic\&.cs\fP\&.
.SS "abstract bool Photon\&.Pun\&.Simple\&.MaskLogic\&.DefinesZero\fC [get]\fP, \fC [protected]\fP"

.PP
Definition at line \fB32\fP of file \fBMaskLogic\&.cs\fP\&.
.SS "abstract string [] Photon\&.Pun\&.Simple\&.MaskLogic\&.EnumNames\fC [get]\fP, \fC [protected]\fP"

.PP
Definition at line \fB30\fP of file \fBMaskLogic\&.cs\fP\&.
.SS "abstract int [] Photon\&.Pun\&.Simple\&.MaskLogic\&.EnumValues\fC [get]\fP, \fC [protected]\fP"

.PP
Definition at line \fB31\fP of file \fBMaskLogic\&.cs\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Purrpatrator User manual from the source code\&.
