.TH "Photon.Pun.Simple.SyncState" 3 "Mon Apr 18 2022" "Purrpatrator User manual" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Photon.Pun.Simple.SyncState
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBPhoton\&.Pun\&.Simple\&.SyncObject< SyncState\&.Frame >\fP, \fBPhoton\&.Pun\&.Simple\&.IMountable\fP, \fBPhoton\&.Pun\&.Simple\&.IOnCaptureState\fP, \fBPhoton\&.Pun\&.Simple\&.IOnNetSerialize\fP, \fBPhoton\&.Pun\&.Simple\&.IOnSnapshot\fP, \fBPhoton\&.Pun\&.Simple\&.IReadyable\fP, \fBPhoton\&.Pun\&.Simple\&.IOnNetObjReady\fP, and \fBPhoton\&.Pun\&.Simple\&.IUseKeyframes\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBFrame\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "override void \fBOnAwake\fP ()"
.br
.RI "Be sure to use base\&.OnAwake() when overriding\&. "
.ti -1c
.RI "override void \fBOnStart\fP ()"
.br
.ti -1c
.RI "override void \fBOnJoinedRoom\fP ()"
.br
.ti -1c
.RI "override void \fBOnAuthorityChanged\fP (bool isMine, bool controllerChanged)"
.br
.RI "Updates authority values on authority changes\&. "
.ti -1c
.RI "virtual void \fBOnNetObjReadyChange\fP (bool ready)"
.br
.RI "Respond to \fBNetObject\fP changes in Ready here\&. "
.ti -1c
.RI "void \fBSoftMount\fP (\fBMount\fP attachTo)"
.br
.ti -1c
.RI "void \fBHardMount\fP (\fBMount\fP mountTo)"
.br
.ti -1c
.RI "void \fBSpawn\fP ()"
.br
.ti -1c
.RI "void \fBRespawn\fP (bool immediate)"
.br
.ti -1c
.RI "void \fBDespawn\fP (bool immediate)"
.br
.ti -1c
.RI "void \fBImmediateUnmount\fP ()"
.br
.RI "Handler that unparents this object from any mount immediately (rather than on the next tick Capture)\&. "
.ti -1c
.RI "void \fBDrop\fP (\fBMount\fP newMount, bool force=false)"
.br
.ti -1c
.RI "void \fBThrow\fP (Vector3 position, Quaternion rotation, Vector3 velocity)"
.br
.ti -1c
.RI "void \fBThrowLocal\fP (Transform origin, Vector3 offset, Vector3 velocity)"
.br
.ti -1c
.RI "virtual void \fBQueueStateChange\fP (\fBObjState\fP newState, \fBMount\fP newMount, bool force)"
.br
.ti -1c
.RI "virtual void \fBQueueStateChange\fP (\fBObjState\fP newState, \fBMount\fP newMount, Vector3 offset, Vector3 velocity, bool force)"
.br
.ti -1c
.RI "virtual bool \fBChangeMount\fP (int newMountId)"
.br
.RI "Attempt to change to a different \fBMount\fP on the same object\&. "
.ti -1c
.RI "void \fBOnCaptureCurrentState\fP (int frameId)"
.br
.ti -1c
.RI "\fBSerializationFlags\fP \fBOnNetSerialize\fP (int frameId, byte[] buffer, ref int bitposition, \fBSerializationFlags\fP writeFlags)"
.br
.ti -1c
.RI "\fBSerializationFlags\fP \fBOnNetDeserialize\fP (int originFrameId, byte[] buffer, ref int bitposition, \fBFrameArrival\fP arrival)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBMount\fP \fBGetMount\fP (int? viewID, int? mountId)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBObjState\fP \fBinitialState\fP = \fBObjState\&.Despawned\fP"
.br
.ti -1c
.RI "\fBObjState\fP \fBrespawnState\fP = \fBObjState\&.Visible\fP"
.br
.ti -1c
.RI "\fBObjState\fP \fBreadyState\fP = \fBObjState\&.Visible\fP"
.br
.ti -1c
.RI "\fBObjState\fP \fBunreadyState\fP = \fBObjState\&.Despawned\fP"
.br
.ti -1c
.RI "\fBMountMaskSelector\fP \fBmountableTo\fP"
.br
.ti -1c
.RI "bool \fBautoReset\fP = true"
.br
.ti -1c
.RI "bool \fBautoOwnerChange\fP = true"
.br
.ti -1c
.RI "bool \fBmountReliable\fP = true"
.br
.ti -1c
.RI "List< \fBIOnStateChange\fP > \fBonStateChangeCallbacks\fP = new List<\fBIOnStateChange\fP>()"
.br
.ti -1c
.RI "List< \fBIFlagTeleport\fP > \fBflagTeleportCallbacks\fP = new List<\fBIFlagTeleport\fP>()"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBDequeueStateChanges\fP ()"
.br
.ti -1c
.RI "virtual void \fBChangeState\fP (\fBStateChangeInfo\fP stateChangeInfo)"
.br
.RI "Call this method to change the state of this object\&. "
.ti -1c
.RI "virtual void \fBInvalidMountHandler\fP (\fBObjState\fP newState, \fBMount\fP newMount, bool force)"
.br
.RI "Modify StateChange call if the mount was invalid (\fBMount\fP likely destroyed)\&. "
.ti -1c
.RI "override void \fBApplySnapshot\fP (\fBFrame\fP snapframe, \fBFrame\fP targframe, bool snapIsValid, bool targIsValid)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBFrame\fP \fBcurrentState\fP = new \fBFrame\fP()"
.br
.ti -1c
.RI "\fBMount\fP \fBcurrentMount\fP = null"
.br
.ti -1c
.RI "bool \fBnetObjIsReady\fP"
.br
.ti -1c
.RI "\fBMountsManager\fP \fBmountsLookup\fP"
.br
.ti -1c
.RI "\fBSyncTransform\fP \fBsyncTransform\fP"
.br
.ti -1c
.RI "\fBSyncOwner\fP \fBsyncOwner\fP"
.br
.ti -1c
.RI "\fBISpawnController\fP \fBiSpawnController\fP"
.br
.ti -1c
.RI "Dictionary< int, int > \fBmountTypeIdToIndex\fP = new Dictionary<int, int>()"
.br
.RI "[mountTypeId, index] "
.ti -1c
.RI "int[] \fBindexToMountTypeId\fP"
.br
.ti -1c
.RI "int \fBbitsForMountType\fP"
.br
.ti -1c
.RI "\fBStateChangeInfo\fP \fBrespawnStateInfo\fP"
.br
.RI "The state to which this object will be set when Respawn is called\&. "
.ti -1c
.RI "Queue< \fBStateChangeInfo\fP > \fBstateChangeQueue\fP = new Queue<\fBStateChangeInfo\fP>()"
.br
.ti -1c
.RI "\fBFrame\fP \fBprevSerializedFrame\fP"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "override int \fBApplyOrder\fP\fC [get]\fP"
.br
.ti -1c
.RI "\fBMount\fP \fBCurrentMount\fP\fC [getset]\fP"
.br
.ti -1c
.RI "bool \fBIsThrowable\fP\fC [get]\fP"
.br
.ti -1c
.RI "bool \fBIsDroppable\fP\fC [get]\fP"
.br
.ti -1c
.RI "Rigidbody \fBRb\fP\fC [get]\fP"
.br
.ti -1c
.RI "Rigidbody2D \fBRb2d\fP\fC [get]\fP"
.br
.ti -1c
.RI "override bool \fBAllowReconstructionOfEmpty\fP\fC [get]\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line \fB22\fP of file \fBSyncState\&.cs\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "override void Photon\&.Pun\&.Simple\&.SyncState\&.ApplySnapshot (\fBFrame\fP snapframe, \fBFrame\fP targframe, bool snapIsValid, bool targIsValid)\fC [protected]\fP"
Notifying the \fBSyncTransform\fP of any parent changes, since they are managed here\&. Less than ideal, but the alternative is to completely move parent handing to \fBSyncTransform\fP\&. If the frame being passed is the snapFrame (we aren't doing some kind of rewind), notify the transform sync of upcoming parent changes
.PP
Definition at line \fB886\fP of file \fBSyncState\&.cs\fP\&.
.SS "virtual bool Photon\&.Pun\&.Simple\&.SyncState\&.ChangeMount (int newMountId)\fC [virtual]\fP"

.PP
Attempt to change to a different \fBMount\fP on the same object\&. 
.PP
\fBParameters\fP
.RS 4
\fInewMountId\fP 
.RE
.PP

.PP
Definition at line \fB664\fP of file \fBSyncState\&.cs\fP\&.
.SS "virtual void Photon\&.Pun\&.Simple\&.SyncState\&.ChangeState (\fBStateChangeInfo\fP stateChangeInfo)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Call this method to change the state of this object\&. This state will be synced over the network, and callbacks will trigger locally and remotely\&. Typically it is preferred to call \fBQueueStateChange()\fP, which will defer the ChangeState application until the appropriate timing\&. Assuming first Visible after a despawn is a Respawn - this is here to handle lost teleport packets
.PP
Test nothing has changed
.PP
Handling for attached without a valid \fBMount\fP - Test for if we have a reference to a \fBMount\fP, but it is null (Unity destroyed)\&. Sets to hard null and reruns this method\&.
.PP
The State is mounted
.PP
Attaching to a mount
.PP
Detaching from a mount
.PP
Send out callbacks
.PP
Definition at line \fB393\fP of file \fBSyncState\&.cs\fP\&.
.SS "virtual void Photon\&.Pun\&.Simple\&.SyncState\&.DequeueStateChanges ()\fC [protected]\fP, \fC [virtual]\fP"
TODO: TEST removed, only letting this change on new owners snapshot currently\&. May be able to readd this safely\&.
.PP
Definition at line \fB368\fP of file \fBSyncState\&.cs\fP\&.
.SS "void Photon\&.Pun\&.Simple\&.SyncState\&.Despawn (bool immediate)"

.PP
Definition at line \fB307\fP of file \fBSyncState\&.cs\fP\&.
.SS "void Photon\&.Pun\&.Simple\&.SyncState\&.Drop (\fBMount\fP newMount, bool force = \fCfalse\fP)"

.PP
Definition at line \fB327\fP of file \fBSyncState\&.cs\fP\&.
.SS "static \fBMount\fP Photon\&.Pun\&.Simple\&.SyncState\&.GetMount (int? viewID, int? mountId)\fC [static]\fP"

.PP
Definition at line \fB1003\fP of file \fBSyncState\&.cs\fP\&.
.SS "void Photon\&.Pun\&.Simple\&.SyncState\&.HardMount (\fBMount\fP mountTo)"

.PP

.PP
\fBParameters\fP
.RS 4
\fImountTo\fP 
.RE
.PP

.PP
Definition at line \fB280\fP of file \fBSyncState\&.cs\fP\&.
.SS "void Photon\&.Pun\&.Simple\&.SyncState\&.ImmediateUnmount ()"

.PP
Handler that unparents this object from any mount immediately (rather than on the next tick Capture)\&. Put in place for handling despawning of objects, so that mounts on NetObjects can unmount all objects before self-destructing\&. 
.PP
Implements \fBPhoton\&.Pun\&.Simple\&.IMountable\fP\&.
.PP
Definition at line \fB320\fP of file \fBSyncState\&.cs\fP\&.
.SS "virtual void Photon\&.Pun\&.Simple\&.SyncState\&.InvalidMountHandler (\fBObjState\fP newState, \fBMount\fP newMount, bool force)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Modify StateChange call if the mount was invalid (\fBMount\fP likely destroyed)\&. 
.PP
Definition at line \fB654\fP of file \fBSyncState\&.cs\fP\&.
.SS "override void Photon\&.Pun\&.Simple\&.SyncState\&.OnAuthorityChanged (bool isMine, bool controllerChanged)\fC [virtual]\fP"

.PP
Updates authority values on authority changes\&. 
.PP
\fBParameters\fP
.RS 4
\fIcontrollerChanged\fP 
.RE
.PP
Clear the queue, because there may be some items that never got consumed due to an authority change at startup\&.
.PP
TEST: added because multiple ownership changes were not detecting mount change for force reliable\&.
.PP
Reimplemented from \fBPhoton\&.Pun\&.Simple\&.NetComponent\fP\&.
.PP
Definition at line \fB207\fP of file \fBSyncState\&.cs\fP\&.
.SS "override void Photon\&.Pun\&.Simple\&.SyncState\&.OnAwake ()\fC [virtual]\fP"

.PP
Be sure to use base\&.OnAwake() when overriding\&. This is called when the \fBNetObject\fP runs \fBAwake()\fP\&. All code that depends on the NetObj being initialized should use this rather than \fBAwake()\fP; 
.PP
Reimplemented from \fBPhoton\&.Pun\&.Simple\&.NetComponent\fP\&.
.PP
Definition at line \fB148\fP of file \fBSyncState\&.cs\fP\&.
.SS "void Photon\&.Pun\&.Simple\&.SyncState\&.OnCaptureCurrentState (int frameId)"

.PP
Implements \fBPhoton\&.Pun\&.Simple\&.IOnCaptureState\fP\&.
.PP
Definition at line \fB695\fP of file \fBSyncState\&.cs\fP\&.
.SS "override void Photon\&.Pun\&.Simple\&.SyncState\&.OnJoinedRoom ()\fC [virtual]\fP"

.PP
Reimplemented from \fBPhoton\&.Pun\&.Simple\&.NetComponent\fP\&.
.PP
Definition at line \fB195\fP of file \fBSyncState\&.cs\fP\&.
.SS "\fBSerializationFlags\fP Photon\&.Pun\&.Simple\&.SyncState\&.OnNetDeserialize (int originFrameId, byte[] buffer, ref int bitposition, \fBFrameArrival\fP arrival)"
Read State
.PP
Read attached
.PP
State is attached, but because this is a delta frame the parent info is missing
.PP
Implements \fBPhoton\&.Pun\&.Simple\&.IOnNetSerialize\fP\&.
.PP
Definition at line \fB805\fP of file \fBSyncState\&.cs\fP\&.
.SS "virtual void Photon\&.Pun\&.Simple\&.SyncState\&.OnNetObjReadyChange (bool ready)\fC [virtual]\fP"

.PP
Respond to \fBNetObject\fP changes in Ready here\&. We only want to change the state if the state currently matches unready\&. Otherwise authority changes trigger the default states\&.
.PP
Implements \fBPhoton\&.Pun\&.Simple\&.IOnNetObjReady\fP\&.
.PP
Definition at line \fB220\fP of file \fBSyncState\&.cs\fP\&.
.SS "\fBSerializationFlags\fP Photon\&.Pun\&.Simple\&.SyncState\&.OnNetSerialize (int frameId, byte[] buffer, ref int bitposition, \fBSerializationFlags\fP writeFlags)"
Don't transmit data if this component is disabled\&. Allows for muting components Simply by disabling them at the authority side\&.
.PP
Write State - it is cheap enough to send it every tick
.PP
Write HasMount info bit
.PP
Write HasMount info bit
.PP
Implements \fBPhoton\&.Pun\&.Simple\&.IOnNetSerialize\fP\&.
.PP
Definition at line \fB718\fP of file \fBSyncState\&.cs\fP\&.
.SS "override void Photon\&.Pun\&.Simple\&.SyncState\&.OnStart ()\fC [virtual]\fP"
TEST - this code fixed startup rendering, but not fully tested\&. Likely needs to stay here\&.
.PP
Cache values for mountType serialization\&. We get the total possible mount options from this objects \fBSyncState\fP
.PP
Reimplemented from \fBPhoton\&.Pun\&.Simple\&.NetComponent\fP\&.
.PP
Definition at line \fB163\fP of file \fBSyncState\&.cs\fP\&.
.SS "virtual void Photon\&.Pun\&.Simple\&.SyncState\&.QueueStateChange (\fBObjState\fP newState, \fBMount\fP newMount, bool force)\fC [virtual]\fP"

.PP
Definition at line \fB352\fP of file \fBSyncState\&.cs\fP\&.
.SS "virtual void Photon\&.Pun\&.Simple\&.SyncState\&.QueueStateChange (\fBObjState\fP newState, \fBMount\fP newMount, Vector3 offset, Vector3 velocity, bool force)\fC [virtual]\fP"

.PP
Definition at line \fB360\fP of file \fBSyncState\&.cs\fP\&.
.SS "void Photon\&.Pun\&.Simple\&.SyncState\&.Respawn (bool immediate)"

.PP
Definition at line \fB296\fP of file \fBSyncState\&.cs\fP\&.
.SS "void Photon\&.Pun\&.Simple\&.SyncState\&.SoftMount (\fBMount\fP attachTo)"

.PP
Definition at line \fB266\fP of file \fBSyncState\&.cs\fP\&.
.SS "void Photon\&.Pun\&.Simple\&.SyncState\&.Spawn ()"

.PP
Definition at line \fB291\fP of file \fBSyncState\&.cs\fP\&.
.SS "void Photon\&.Pun\&.Simple\&.SyncState\&.Throw (Vector3 position, Quaternion rotation, Vector3 velocity)"

.PP
Definition at line \fB333\fP of file \fBSyncState\&.cs\fP\&.
.SS "void Photon\&.Pun\&.Simple\&.SyncState\&.ThrowLocal (Transform origin, Vector3 offset, Vector3 velocity)"

.PP
Definition at line \fB339\fP of file \fBSyncState\&.cs\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "bool Photon\&.Pun\&.Simple\&.SyncState\&.autoOwnerChange = true"

.PP
Definition at line \fB48\fP of file \fBSyncState\&.cs\fP\&.
.SS "bool Photon\&.Pun\&.Simple\&.SyncState\&.autoReset = true"

.PP
Definition at line \fB45\fP of file \fBSyncState\&.cs\fP\&.
.SS "int Photon\&.Pun\&.Simple\&.SyncState\&.bitsForMountType\fC [protected]\fP"

.PP
Definition at line \fB81\fP of file \fBSyncState\&.cs\fP\&.
.SS "\fBMount\fP Photon\&.Pun\&.Simple\&.SyncState\&.currentMount = null\fC [protected]\fP"

.PP
Definition at line \fB56\fP of file \fBSyncState\&.cs\fP\&.
.SS "\fBFrame\fP Photon\&.Pun\&.Simple\&.SyncState\&.currentState = new \fBFrame\fP()\fC [protected]\fP"

.PP
Definition at line \fB55\fP of file \fBSyncState\&.cs\fP\&.
.SS "List<\fBIFlagTeleport\fP> Photon\&.Pun\&.Simple\&.SyncState\&.flagTeleportCallbacks = new List<\fBIFlagTeleport\fP>()"

.PP
Definition at line \fB91\fP of file \fBSyncState\&.cs\fP\&.
.SS "int [] Photon\&.Pun\&.Simple\&.SyncState\&.indexToMountTypeId\fC [protected]\fP"

.PP
Definition at line \fB80\fP of file \fBSyncState\&.cs\fP\&.
.SS "\fBObjState\fP Photon\&.Pun\&.Simple\&.SyncState\&.initialState = \fBObjState\&.Despawned\fP"

.PP
Definition at line \fB36\fP of file \fBSyncState\&.cs\fP\&.
.SS "\fBISpawnController\fP Photon\&.Pun\&.Simple\&.SyncState\&.iSpawnController\fC [protected]\fP"

.PP
Definition at line \fB74\fP of file \fBSyncState\&.cs\fP\&.
.SS "\fBMountMaskSelector\fP Photon\&.Pun\&.Simple\&.SyncState\&.mountableTo"

.PP
Definition at line \fB42\fP of file \fBSyncState\&.cs\fP\&.
.SS "bool Photon\&.Pun\&.Simple\&.SyncState\&.mountReliable = true"

.PP
Definition at line \fB51\fP of file \fBSyncState\&.cs\fP\&.
.SS "\fBMountsManager\fP Photon\&.Pun\&.Simple\&.SyncState\&.mountsLookup\fC [protected]\fP"

.PP
Definition at line \fB71\fP of file \fBSyncState\&.cs\fP\&.
.SS "Dictionary<int, int> Photon\&.Pun\&.Simple\&.SyncState\&.mountTypeIdToIndex = new Dictionary<int, int>()\fC [protected]\fP"

.PP
[mountTypeId, index] 
.PP
Definition at line \fB79\fP of file \fBSyncState\&.cs\fP\&.
.SS "bool Photon\&.Pun\&.Simple\&.SyncState\&.netObjIsReady\fC [protected]\fP"

.PP
Definition at line \fB57\fP of file \fBSyncState\&.cs\fP\&.
.SS "List<\fBIOnStateChange\fP> Photon\&.Pun\&.Simple\&.SyncState\&.onStateChangeCallbacks = new List<\fBIOnStateChange\fP>()"

.PP
Definition at line \fB90\fP of file \fBSyncState\&.cs\fP\&.
.SS "\fBFrame\fP Photon\&.Pun\&.Simple\&.SyncState\&.prevSerializedFrame\fC [protected]\fP"

.PP
Definition at line \fB716\fP of file \fBSyncState\&.cs\fP\&.
.SS "\fBObjState\fP Photon\&.Pun\&.Simple\&.SyncState\&.readyState = \fBObjState\&.Visible\fP"

.PP
Definition at line \fB38\fP of file \fBSyncState\&.cs\fP\&.
.SS "\fBObjState\fP Photon\&.Pun\&.Simple\&.SyncState\&.respawnState = \fBObjState\&.Visible\fP"

.PP
Definition at line \fB37\fP of file \fBSyncState\&.cs\fP\&.
.SS "\fBStateChangeInfo\fP Photon\&.Pun\&.Simple\&.SyncState\&.respawnStateInfo\fC [protected]\fP"

.PP
The state to which this object will be set when Respawn is called\&. 
.PP
Definition at line \fB88\fP of file \fBSyncState\&.cs\fP\&.
.SS "Queue<\fBStateChangeInfo\fP> Photon\&.Pun\&.Simple\&.SyncState\&.stateChangeQueue = new Queue<\fBStateChangeInfo\fP>()\fC [protected]\fP"

.PP
Definition at line \fB348\fP of file \fBSyncState\&.cs\fP\&.
.SS "\fBSyncOwner\fP Photon\&.Pun\&.Simple\&.SyncState\&.syncOwner\fC [protected]\fP"

.PP
Definition at line \fB73\fP of file \fBSyncState\&.cs\fP\&.
.SS "\fBSyncTransform\fP Photon\&.Pun\&.Simple\&.SyncState\&.syncTransform\fC [protected]\fP"

.PP
Definition at line \fB72\fP of file \fBSyncState\&.cs\fP\&.
.SS "\fBObjState\fP Photon\&.Pun\&.Simple\&.SyncState\&.unreadyState = \fBObjState\&.Despawned\fP"

.PP
Definition at line \fB39\fP of file \fBSyncState\&.cs\fP\&.
.SH "Property Documentation"
.PP 
.SS "override bool Photon\&.Pun\&.Simple\&.SyncState\&.AllowReconstructionOfEmpty\fC [get]\fP"

.PP
Definition at line \fB83\fP of file \fBSyncState\&.cs\fP\&.
.SS "override int Photon\&.Pun\&.Simple\&.SyncState\&.ApplyOrder\fC [get]\fP"

.PP
Definition at line \fB32\fP of file \fBSyncState\&.cs\fP\&.
.SS "\fBMount\fP Photon\&.Pun\&.Simple\&.SyncState\&.CurrentMount\fC [get]\fP, \fC [set]\fP"

.PP
Definition at line \fB61\fP of file \fBSyncState\&.cs\fP\&.
.SS "bool Photon\&.Pun\&.Simple\&.SyncState\&.IsDroppable\fC [get]\fP"

.PP
Definition at line \fB63\fP of file \fBSyncState\&.cs\fP\&.
.SS "bool Photon\&.Pun\&.Simple\&.SyncState\&.IsThrowable\fC [get]\fP"

.PP
Definition at line \fB62\fP of file \fBSyncState\&.cs\fP\&.
.SS "Rigidbody Photon\&.Pun\&.Simple\&.SyncState\&.Rb\fC [get]\fP"

.PP
Definition at line \fB64\fP of file \fBSyncState\&.cs\fP\&.
.SS "Rigidbody2D Photon\&.Pun\&.Simple\&.SyncState\&.Rb2d\fC [get]\fP"

.PP
Definition at line \fB65\fP of file \fBSyncState\&.cs\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Purrpatrator User manual from the source code\&.
