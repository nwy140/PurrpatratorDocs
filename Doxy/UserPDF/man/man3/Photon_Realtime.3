.TH "Photon.Realtime" 3 "Mon Apr 18 2022" "Purrpatrator User manual" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Photon.Realtime
.SH SYNOPSIS
.br
.PP
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBDemo\fP"
.br
.in -1c
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBActorProperties\fP"
.br
.RI "Class for constants\&. "
.ti -1c
.RI "class \fBAppSettings\fP"
.br
.RI "Settings for \fBPhoton\fP application(s) and the server to connect to\&. "
.ti -1c
.RI "class \fBAuthenticationValues\fP"
.br
.RI "Container for user authentication in \fBPhoton\fP\&. "
.ti -1c
.RI "class \fBConnectionCallbacksContainer\fP"
.br
.RI "Container type for callbacks defined by \fBIConnectionCallbacks\fP\&. "
.ti -1c
.RI "class \fBConnectionHandler\fP"
.br
.ti -1c
.RI "class \fBEnterRoomParams\fP"
.br
.RI "Parameters for creating rooms\&."
.ti -1c
.RI "class \fBErrorCode\fP"
.br
.RI "\fBErrorCode\fP defines the default codes associated with \fBPhoton\fP client/server communication\&. "
.ti -1c
.RI "class \fBErrorInfo\fP"
.br
.RI "Class wrapping the received \fBEventCode\&.ErrorInfo\fP event\&. "
.ti -1c
.RI "class \fBErrorInfoCallbacksContainer\fP"
.br
.RI "Container type for callbacks defined by \fBIErrorInfoCallback\fP\&. "
.ti -1c
.RI "class \fBEventCode\fP"
.br
.RI "Class for constants\&. "
.ti -1c
.RI "class \fBExtensions\fP"
.br
.RI "This static class defines some useful extension methods for several existing classes (e\&.g\&. "
.ti -1c
.RI "class \fBFindFriendsOptions\fP"
.br
.RI "Options for OpFindFriends can be combined to filter which rooms of friends are returned\&. "
.ti -1c
.RI "class \fBFriendInfo\fP"
.br
.RI "Used to store info about a friend's online state and in which room he/she is\&. "
.ti -1c
.RI "class \fBGamePropertyKey\fP"
.br
.RI "Class for constants\&. "
.ti -1c
.RI "interface \fBIConnectionCallbacks\fP"
.br
.RI "Collection of 'organizational' callbacks for the \fBRealtime\fP Api to cover: Connection and Regions\&. "
.ti -1c
.RI "interface \fBIErrorInfoCallback\fP"
.br
.RI "Interface for \fBEventCode\&.ErrorInfo\fP event callback for the \fBRealtime\fP Api\&. "
.ti -1c
.RI "interface \fBIInRoomCallbacks\fP"
.br
.RI "Collection of 'in room' callbacks for the \fBRealtime\fP Api to cover: Players entering or leaving, property updates and Master Client switching\&. "
.ti -1c
.RI "interface \fBILobbyCallbacks\fP"
.br
.RI "Collection of 'organizational' callbacks for the \fBRealtime\fP Api to cover the Lobby\&. "
.ti -1c
.RI "interface \fBIMatchmakingCallbacks\fP"
.br
.RI "Collection of 'organizational' callbacks for the \fBRealtime\fP Api to cover Matchmaking\&. "
.ti -1c
.RI "class \fBInRoomCallbacksContainer\fP"
.br
.RI "Container type for callbacks defined by \fBIInRoomCallbacks\fP\&. "
.ti -1c
.RI "interface \fBIOnEventCallback\fP"
.br
.RI "Event callback for the \fBRealtime\fP Api\&. "
.ti -1c
.RI "interface \fBIWebRpcCallback\fP"
.br
.RI "Interface for 'WebRpc' callbacks for the \fBRealtime\fP Api\&. "
.ti -1c
.RI "class \fBLoadBalancingClient\fP"
.br
.RI "This class implements the \fBPhoton\fP LoadBalancing workflow by using a \fBLoadBalancingPeer\fP\&. "
.ti -1c
.RI "class \fBLoadBalancingPeer\fP"
.br
.RI "A \fBLoadBalancingPeer\fP provides the operations and enum definitions needed to use the LoadBalancing server application which is also used in \fBPhoton\fP Cloud\&. "
.ti -1c
.RI "class \fBLobbyCallbacksContainer\fP"
.br
.RI "Container type for callbacks defined by \fBILobbyCallbacks\fP\&. "
.ti -1c
.RI "class \fBMatchMakingCallbacksContainer\fP"
.br
.RI "Container type for callbacks defined by \fBIMatchmakingCallbacks\fP\&. "
.ti -1c
.RI "class \fBOperationCode\fP"
.br
.RI "Class for constants\&. "
.ti -1c
.RI "class \fBOpJoinRandomRoomParams\fP"
.br
.RI "Parameters for the matchmaking of JoinRandomRoom and JoinRandomOrCreateRoom\&. "
.ti -1c
.RI "class \fBParameterCode\fP"
.br
.RI "Class for constants\&. "
.ti -1c
.RI "class \fBPhotonAppSettings\fP"
.br
.RI "Collection of connection-relevant settings, used internally by PhotonNetwork\&.ConnectUsingSettings\&. "
.ti -1c
.RI "class \fBPhotonPing\fP"
.br
.RI "Abstract implementation of \fBPhotonPing\fP, ase for pinging servers to find the 'Best Region'\&. "
.ti -1c
.RI "struct \fBPhotonPortDefinition\fP"
.br
.RI "Container for port definitions\&."
.ti -1c
.RI "class \fBPingMono\fP"
.br
.RI "Uses C# Socket class from System\&.Net\&.Sockets (as Unity usually does)\&. "
.ti -1c
.RI "class \fBPlayer\fP"
.br
.RI "Summarizes a 'player' within a room, identified (in that room) by ID (or 'actorNumber')\&. "
.ti -1c
.RI "class \fBRaiseEventOptions\fP"
.br
.RI "Aggregates several less-often used options for operation RaiseEvent\&. See field descriptions for usage details\&."
.ti -1c
.RI "class \fBRegion\fP"
.br
.ti -1c
.RI "class \fBRegionHandler\fP"
.br
.RI "Provides methods to work with \fBPhoton\fP's regions (\fBPhoton\fP Cloud) and can be use to find the one with best ping\&. "
.ti -1c
.RI "class \fBRegionPinger\fP"
.br
.ti -1c
.RI "class \fBRoom\fP"
.br
.RI "This class represents a room a client joins/joined\&. "
.ti -1c
.RI "class \fBRoomInfo\fP"
.br
.RI "A simplified room with just the info required to list and join, used for the room listing in the lobby\&. "
.ti -1c
.RI "class \fBRoomOptions\fP"
.br
.RI "Wraps up common room properties needed when you create rooms\&. "
.ti -1c
.RI "class \fBSupportLogger\fP"
.br
.RI "Helper class to debug log basic information about \fBPhoton\fP client and vital traffic statistics\&. "
.ti -1c
.RI "class \fBTypedLobby\fP"
.br
.RI "Refers to a specific lobby on the server\&. "
.ti -1c
.RI "class \fBTypedLobbyInfo\fP"
.br
.RI "Info for a lobby on the server\&. "
.ti -1c
.RI "class \fBWebFlags\fP"
.br
.RI "Optional flags to be used in \fBPhoton\fP client SDKs with Op RaiseEvent and Op SetProperties\&. "
.ti -1c
.RI "class \fBWebRpcCallbacksContainer\fP"
.br
.RI "Container type for callbacks defined by \fBIWebRpcCallback\fP\&. "
.ti -1c
.RI "class \fBWebRpcResponse\fP"
.br
.RI "Reads an operation response of a WebRpc and provides convenient access to most common values\&. "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "using \fBSupportClass\fP = ExitGames\&.Client\&.Photon\&.SupportClass"
.br
.ti -1c
.RI "using \fBStopwatch\fP = System\&.Diagnostics\&.Stopwatch"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBClientState\fP { \fBClientState\&.PeerCreated\fP, \fBClientState\&.Authenticating\fP, \fBClientState\&.Authenticated\fP, \fBClientState\&.JoiningLobby\fP, \fBClientState\&.JoinedLobby\fP, \fBClientState\&.DisconnectingFromMasterServer\fP, \fBClientState\&.DisconnectingFromMasterserver\fP = DisconnectingFromMasterServer, \fBClientState\&.ConnectingToGameServer\fP, \fBClientState\&.ConnectingToGameserver\fP = ConnectingToGameServer, \fBClientState\&.ConnectedToGameServer\fP, \fBClientState\&.ConnectedToGameserver\fP = ConnectedToGameServer, \fBClientState\&.Joining\fP, \fBClientState\&.Joined\fP, \fBClientState\&.Leaving\fP, \fBClientState\&.DisconnectingFromGameServer\fP, \fBClientState\&.DisconnectingFromGameserver\fP = DisconnectingFromGameServer, \fBClientState\&.ConnectingToMasterServer\fP, \fBClientState\&.ConnectingToMasterserver\fP = ConnectingToMasterServer, \fBClientState\&.Disconnecting\fP, \fBClientState\&.Disconnected\fP, \fBClientState\&.ConnectedToMasterServer\fP, \fBClientState\&.ConnectedToMasterserver\fP = ConnectedToMasterServer, \fBClientState\&.ConnectedToMaster\fP = ConnectedToMasterServer, \fBClientState\&.ConnectingToNameServer\fP, \fBClientState\&.ConnectedToNameServer\fP, \fBClientState\&.DisconnectingFromNameServer\fP, \fBClientState\&.ConnectWithFallbackProtocol\fP }"
.br
.RI "State values for a client, which handles switching \fBPhoton\fP server types, some operations, etc\&. "
.ti -1c
.RI "enum \fBDisconnectCause\fP { \fBNone\fP, \fBExceptionOnConnect\fP, \fBDnsExceptionOnConnect\fP, \fBServerAddressInvalid\fP, \fBException\fP, \fBServerTimeout\fP, \fBClientTimeout\fP, \fBDisconnectByServerLogic\fP, \fBDisconnectByServerReasonUnknown\fP, \fBInvalidAuthentication\fP, \fBCustomAuthenticationFailed\fP, \fBAuthenticationTicketExpired\fP, \fBMaxCcuReached\fP, \fBInvalidRegion\fP, \fBOperationNotAllowedInCurrentState\fP, \fBDisconnectByClientLogic\fP, \fBDisconnectByOperationLimit\fP, \fBDisconnectByDisconnectMessage\fP }"
.br
.RI "Enumeration of causes for Disconnects (used in LoadBalancingClient\&.DisconnectedCause)\&. "
.ti -1c
.RI "enum \fBServerConnection\fP { \fBMasterServer\fP, \fBGameServer\fP, \fBNameServer\fP }"
.br
.RI "Available server (types) for internally used field: server\&. "
.ti -1c
.RI "enum \fBClientAppType\fP { \fBRealtime\fP, \fBVoice\fP, \fBFusion\fP }"
.br
.RI "Defines which sort of app the LoadBalancingClient is used for: Realtime or Voice\&."
.ti -1c
.RI "enum \fBEncryptionMode\fP { \fBPayloadEncryption\fP, \fBDatagramEncryption\fP = 10, \fBDatagramEncryptionRandomSequence\fP = 11, \fBDatagramEncryptionGCM\fP = 13 }"
.br
.RI "Defines how the communication gets encrypted\&. "
.ti -1c
.RI "enum \fBJoinMode\fP : byte { \fBDefault\fP = 0, \fBCreateIfNotExists\fP = 1, \fBJoinOrRejoin\fP = 2, \fBRejoinOnly\fP = 3 }"
.br
.RI "Defines possible values for OpJoinRoom and OpJoinOrCreate\&. "
.ti -1c
.RI "enum \fBMatchmakingMode\fP : byte { \fBFillRoom\fP = 0, \fBSerialMatching\fP = 1, \fBRandomMatching\fP = 2 }"
.br
.RI "Options for matchmaking rules for OpJoinRandom\&. "
.ti -1c
.RI "enum \fBReceiverGroup\fP : byte { \fBOthers\fP = 0, \fBAll\fP = 1, \fBMasterClient\fP = 2 }"
.br
.RI "Lite - OpRaiseEvent lets you chose which actors in the room should receive events\&. "
.ti -1c
.RI "enum \fBEventCaching\fP : byte { \fBDoNotCache\fP = 0, \fBMergeCache\fP = 1, \fBReplaceCache\fP = 2, \fBRemoveCache\fP = 3, \fBAddToRoomCache\fP = 4, \fBAddToRoomCacheGlobal\fP = 5, \fBRemoveFromRoomCache\fP = 6, \fBRemoveFromRoomCacheForActorsLeft\fP = 7, \fBSliceIncreaseIndex\fP = 10, \fBSliceSetIndex\fP = 11, \fBSlicePurgeIndex\fP = 12, \fBSlicePurgeUpToIndex\fP = 13 }"
.br
.RI "Lite - OpRaiseEvent allows you to cache events and automatically send them to joining players in a room\&. "
.ti -1c
.RI "enum \fBPropertyTypeFlag\fP : byte { \fBNone\fP = 0x00, \fBGame\fP = 0x01, \fBActor\fP = 0x02, \fBGameAndActor\fP = Game | Actor }"
.br
.RI "Flags for 'types of properties', being used as filter in OpGetProperties\&. "
.ti -1c
.RI "enum \fBLobbyType\fP : byte { \fBDefault\fP = 0, \fBSqlLobby\fP = 2, \fBAsyncRandomLobby\fP = 3 }"
.br
.RI "Types of lobbies define their behaviour and capabilities\&. "
.ti -1c
.RI "enum \fBAuthModeOption\fP { \fBAuth\fP, \fBAuthOnce\fP, \fBAuthOnceWss\fP }"
.br
.RI "Options for authentication modes\&. "
.ti -1c
.RI "enum \fBCustomAuthenticationType\fP : byte { \fBCustom\fP = 0, \fBSteam\fP = 1, \fBFacebook\fP = 2, \fBOculus\fP = 3, \fBPlayStation4\fP = 4, \fBPlayStation\fP = 4, \fBXbox\fP = 5, \fBViveport\fP = 10, \fBNintendoSwitch\fP = 11, \fBPlayStation5\fP = 12, \fBPlaystation5\fP = 12, \fBEpic\fP = 13, \fBFacebookGaming\fP = 15, \fBNone\fP = byte\&.MaxValue }"
.br
.RI "Options for optional 'Custom Authentication' services used with \fBPhoton\fP\&. "
.in -1c
.SH "Typedef Documentation"
.PP 
.SS "using \fBPhoton\&.Realtime\&.Stopwatch\fP = typedef System\&.Diagnostics\&.Stopwatch"

.PP
Definition at line \fB26\fP of file \fBSupportLogger\&.cs\fP\&.
.SS "using \fBPhoton\&.Realtime\&.SupportClass\fP = typedef ExitGames\&.Client\&.Photon\&.SupportClass"

.PP
Definition at line \fB21\fP of file \fBConnectionHandler\&.cs\fP\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBPhoton\&.Realtime\&.AuthModeOption\fP"

.PP
Options for authentication modes\&. From 'classic' auth on each server to AuthOnce (on NameServer)\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIAuth \fP\fP
.TP
\fB\fIAuthOnce \fP\fP
.TP
\fB\fIAuthOnceWss \fP\fP
.PP
Definition at line \fB2060\fP of file \fBLoadbalancingPeer\&.cs\fP\&.
.SS "enum \fBPhoton\&.Realtime\&.ClientAppType\fP"

.PP
Defines which sort of app the \fBLoadBalancingClient\fP is used for: \fBRealtime\fP or Voice\&.
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIRealtime \fP\fP
\fBRealtime\fP apps are for gaming / interaction\&. Also used by PUN 2\&.
.TP
\fB\fIVoice \fP\fP
Voice apps stream audio\&.
.TP
\fB\fIFusion \fP\fP
Fusion clients are for matchmaking and relay in \fBPhoton\fP Fusion\&.
.PP
Definition at line \fB209\fP of file \fBLoadBalancingClient\&.cs\fP\&.
.SS "enum \fBPhoton\&.Realtime\&.CustomAuthenticationType\fP : byte"

.PP
Options for optional 'Custom Authentication' services used with \fBPhoton\fP\&. Used by OpAuthenticate after connecting to \fBPhoton\fP\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fICustom \fP\fP
Use a custom authentication service\&. Currently the only implemented option\&.
.TP
\fB\fISteam \fP\fP
Authenticates users by their Steam Account\&. Set Steam's ticket as 'ticket' via AddAuthParameter()\&.
.TP
\fB\fIFacebook \fP\fP
Authenticates users by their Facebook Account\&. Set Facebooks's tocken as 'token' via AddAuthParameter()\&.
.TP
\fB\fIOculus \fP\fP
Authenticates users by their Oculus Account and token\&. Set Oculus' userid as 'userid' and nonce as 'nonce' via AddAuthParameter()\&.
.TP
\fB\fIPlayStation4 \fP\fP
Authenticates users by their PSN Account and token on PS4\&. Set token as 'token', env as 'env' and userName as 'userName' via AddAuthParameter()\&.
.TP
\fB\fIPlayStation \fP\fP
.TP
\fB\fIXbox \fP\fP
Authenticates users by their Xbox Account\&. Pass the XSTS token via SetAuthPostData()\&.
.TP
\fB\fIViveport \fP\fP
Authenticates users by their HTC Viveport Account\&. Set userToken as 'userToken' via AddAuthParameter()\&.
.TP
\fB\fINintendoSwitch \fP\fP
Authenticates users by their NSA ID\&. Set token as 'token' and appversion as 'appversion' via AddAuthParameter()\&. The appversion is optional\&.
.TP
\fB\fIPlayStation5 \fP\fP
Authenticates users by their PSN Account and token on PS5\&. Set token as 'token', env as 'env' and userName as 'userName' via AddAuthParameter()\&.
.TP
\fB\fIPlaystation5 \fP\fP
.TP
\fB\fIEpic \fP\fP
Authenticates users with Epic Online Services (EOS)\&. Set token as 'token' and ownershipToken as 'ownershipToken' via AddAuthParameter()\&. The ownershipToken is optional\&.
.TP
\fB\fIFacebookGaming \fP\fP
Authenticates users with Facebook Gaming api\&. Set token as 'token' via AddAuthParameter()\&.
.TP
\fB\fINone \fP\fP
Disables custom authentication\&. Same as not providing any \fBAuthenticationValues\fP for connect (more precisely for: OpAuthenticate)\&.
.PP
Definition at line \fB2066\fP of file \fBLoadbalancingPeer\&.cs\fP\&.
.SS "enum \fBPhoton\&.Realtime\&.DisconnectCause\fP"

.PP
Enumeration of causes for Disconnects (used in \fBLoadBalancingClient\&.DisconnectedCause\fP)\&. Read the individual descriptions to find out what to do about this type of disconnect\&.
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINone \fP\fP
No error was tracked\&.
.TP
\fB\fIExceptionOnConnect \fP\fP
OnStatusChanged: The server is not available or the address is wrong\&. Make sure the port is provided and the server is up\&.
.TP
\fB\fIDnsExceptionOnConnect \fP\fP
OnStatusChanged: Dns resolution for a hostname failed\&. The exception for this is being catched and logged with error level\&.
.TP
\fB\fIServerAddressInvalid \fP\fP
OnStatusChanged: The server address was parsed as IPv4 illegally\&. An illegal address would be e\&.g\&. 192\&.168\&.1\&.300\&. IPAddress\&.TryParse() will let this pass but our check won't\&.
.TP
\fB\fIException \fP\fP
OnStatusChanged: Some internal exception caused the socket code to fail\&. This may happen if you attempt to connect locally but the server is not available\&. In doubt: Contact Exit Games\&.
.TP
\fB\fIServerTimeout \fP\fP
OnStatusChanged: The server disconnected this client due to timing out (missing acknowledgement from the client)\&.
.TP
\fB\fIClientTimeout \fP\fP
OnStatusChanged: This client detected that the server's responses are not received in due time\&.
.TP
\fB\fIDisconnectByServerLogic \fP\fP
OnStatusChanged: The server disconnected this client from within the room's logic (the C# code)\&.
.TP
\fB\fIDisconnectByServerReasonUnknown \fP\fP
OnStatusChanged: The server disconnected this client for unknown reasons\&.
.TP
\fB\fIInvalidAuthentication \fP\fP
OnOperationResponse: Authenticate in the \fBPhoton\fP Cloud with invalid AppId\&. Update your subscription or contact Exit Games\&.
.TP
\fB\fICustomAuthenticationFailed \fP\fP
OnOperationResponse: Authenticate in the \fBPhoton\fP Cloud with invalid client values or custom authentication setup in Cloud Dashboard\&.
.TP
\fB\fIAuthenticationTicketExpired \fP\fP
The authentication ticket should provide access to any \fBPhoton\fP Cloud server without doing another authentication-service call\&. However, the ticket expired\&.
.TP
\fB\fIMaxCcuReached \fP\fP
OnOperationResponse: Authenticate (temporarily) failed when using a \fBPhoton\fP Cloud subscription without CCU Burst\&. Update your subscription\&.
.TP
\fB\fIInvalidRegion \fP\fP
OnOperationResponse: Authenticate when the app's \fBPhoton\fP Cloud subscription is locked to some (other) region(s)\&. Update your subscription or master server address\&.
.TP
\fB\fIOperationNotAllowedInCurrentState \fP\fP
OnOperationResponse: Operation that's (currently) not available for this client (not authorized usually)\&. Only tracked for op Authenticate\&.
.TP
\fB\fIDisconnectByClientLogic \fP\fP
OnStatusChanged: The client disconnected from within the logic (the C# code)\&.
.TP
\fB\fIDisconnectByOperationLimit \fP\fP
The client called an operation too frequently and got disconnected due to hitting the OperationLimit\&. This triggers a client-side disconnect, too\&.
.PP
To protect the server, some operations have a limit\&. When an OperationResponse fails with \fBErrorCode\&.OperationLimitReached\fP, the client disconnects\&.
.TP
\fB\fIDisconnectByDisconnectMessage \fP\fP
The client received a 'Disconnect Message' from the server\&. Check the debug logs for details\&.
.PP
Definition at line \fB138\fP of file \fBLoadBalancingClient\&.cs\fP\&.
.SS "enum \fBPhoton\&.Realtime\&.EncryptionMode\fP"

.PP
Defines how the communication gets encrypted\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIPayloadEncryption \fP\fP
This is the default encryption mode: Messages get encrypted only on demand (when you send operations with the 'encrypt' parameter set to true)\&. 
.TP
\fB\fIDatagramEncryption \fP\fP
With this encryption mode for UDP, the connection gets setup and all further datagrams get encrypted almost entirely\&. On-demand message encryption (like in PayloadEncryption) is unavailable\&. 
.TP
\fB\fIDatagramEncryptionRandomSequence \fP\fP
With this encryption mode for UDP, the connection gets setup with random sequence numbers and all further datagrams get encrypted almost entirely\&. On-demand message encryption (like in PayloadEncryption) is unavailable\&. 
.TP
\fB\fIDatagramEncryptionGCM \fP\fP
Datagram Encryption with GCM\&. 
.PP
Definition at line \fB222\fP of file \fBLoadBalancingClient\&.cs\fP\&.
.SS "enum \fBPhoton\&.Realtime\&.EventCaching\fP : byte"

.PP
Lite - OpRaiseEvent allows you to cache events and automatically send them to joining players in a room\&. Events are cached per event code and player: Event 100 (example!) can be stored once per player\&. Cached events can be modified, replaced and removed\&. 
.PP
Caching works only combination with ReceiverGroup options Others and All\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIDoNotCache \fP\fP
Default value (not sent)\&.
.TP
\fB\fIMergeCache \fP\fP
Will merge this event's keys with those already cached\&.
.TP
\fB\fIReplaceCache \fP\fP
Replaces the event cache for this eventCode with this event's content\&.
.TP
\fB\fIRemoveCache \fP\fP
Removes this event (by eventCode) from the cache\&.
.TP
\fB\fIAddToRoomCache \fP\fP
Adds an event to the room's cache
.TP
\fB\fIAddToRoomCacheGlobal \fP\fP
Adds this event to the cache for actor 0 (becoming a 'globally owned' event in the cache)\&.
.TP
\fB\fIRemoveFromRoomCache \fP\fP
Remove fitting event from the room's cache\&.
.TP
\fB\fIRemoveFromRoomCacheForActorsLeft \fP\fP
Removes events of players who already left the room (cleaning up)\&.
.TP
\fB\fISliceIncreaseIndex \fP\fP
Increase the index of the sliced cache\&.
.TP
\fB\fISliceSetIndex \fP\fP
Set the index of the sliced cache\&. You must set RaiseEventOptions\&.CacheSliceIndex for this\&.
.TP
\fB\fISlicePurgeIndex \fP\fP
Purge cache slice with index\&. Exactly one slice is removed from cache\&. You must set RaiseEventOptions\&.CacheSliceIndex for this\&.
.TP
\fB\fISlicePurgeUpToIndex \fP\fP
Purge cache slices with specified index and anything lower than that\&. You must set RaiseEventOptions\&.CacheSliceIndex for this\&.
.PP
Definition at line \fB1742\fP of file \fBLoadbalancingPeer\&.cs\fP\&.
.SS "enum \fBPhoton\&.Realtime\&.JoinMode\fP : byte"

.PP
Defines possible values for OpJoinRoom and OpJoinOrCreate\&. It tells the server if the room can be only be joined normally, created implicitly or found on a web-service for Turnbased games\&.
.PP
These values are not directly used by a game but implicitly set\&.
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIDefault \fP\fP
Regular join\&. The room must exist\&.
.TP
\fB\fICreateIfNotExists \fP\fP
Join or create the room if it's not existing\&. Used for OpJoinOrCreate for example\&.
.TP
\fB\fIJoinOrRejoin \fP\fP
The room might be out of memory and should be loaded (if possible) from a Turnbased web-service\&.
.TP
\fB\fIRejoinOnly \fP\fP
Only re-join will be allowed\&. If the user is not yet in the room, this will fail\&.
.PP
Definition at line \fB1685\fP of file \fBLoadbalancingPeer\&.cs\fP\&.
.SS "enum \fBPhoton\&.Realtime\&.LobbyType\fP : byte"

.PP
Types of lobbies define their behaviour and capabilities\&. Check each value for details\&.
.PP
Values of this enum must be matched by the server\&.
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIDefault \fP\fP
Standard type and behaviour: While joined to this lobby clients get room-lists and JoinRandomRoom can use a simple filter to match properties (perfectly)\&.
.TP
\fB\fISqlLobby \fP\fP
This lobby type lists rooms like Default but JoinRandom has a parameter for SQL-like 'where' clauses for filtering\&. This allows bigger, less, or and and combinations\&.
.TP
\fB\fIAsyncRandomLobby \fP\fP
This lobby does not send lists of games\&. It is only used for OpJoinRandomRoom\&. It keeps rooms available for a while when there are only inactive users left\&.
.PP
Definition at line \fB1960\fP of file \fBLoadbalancingPeer\&.cs\fP\&.
.SS "enum \fBPhoton\&.Realtime\&.MatchmakingMode\fP : byte"

.PP
Options for matchmaking rules for OpJoinRandom\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIFillRoom \fP\fP
Fills up rooms (oldest first) to get players together as fast as possible\&. Default\&.
.PP
Makes most sense with MaxPlayers > 0 and games that can only start with more players\&.
.TP
\fB\fISerialMatching \fP\fP
Distributes players across available rooms sequentially but takes filter into account\&. Without filter, rooms get players evenly distributed\&.
.TP
\fB\fIRandomMatching \fP\fP
Joins a (fully) random room\&. Expected properties must match but aside from this, any available room might be selected\&.
.PP
Definition at line \fB1703\fP of file \fBLoadbalancingPeer\&.cs\fP\&.
.SS "enum \fBPhoton\&.Realtime\&.PropertyTypeFlag\fP : byte"

.PP
Flags for 'types of properties', being used as filter in OpGetProperties\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINone \fP\fP
(0x00) Flag type for no property type\&.
.TP
\fB\fIGame \fP\fP
(0x01) Flag type for game-attached properties\&.
.TP
\fB\fIActor \fP\fP
(0x02) Flag type for actor related propeties\&.
.TP
\fB\fIGameAndActor \fP\fP
(0x01) Flag type for game AND actor properties\&. Equal to 'Game'
.PP
Definition at line \fB1788\fP of file \fBLoadbalancingPeer\&.cs\fP\&.
.SS "enum \fBPhoton\&.Realtime\&.ReceiverGroup\fP : byte"

.PP
Lite - OpRaiseEvent lets you chose which actors in the room should receive events\&. By default, events are sent to 'Others' but you can overrule this\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIOthers \fP\fP
Default value (not sent)\&. Anyone else gets my event\&.
.TP
\fB\fIAll \fP\fP
Everyone in the current room (including this peer) will get this event\&.
.TP
\fB\fIMasterClient \fP\fP
The server sends this event only to the actor with the lowest actorNumber\&. The 'master client' does not have special rights but is the one who is in this room the longest time\&.
.PP
Definition at line \fB1721\fP of file \fBLoadbalancingPeer\&.cs\fP\&.
.SS "enum \fBPhoton\&.Realtime\&.ServerConnection\fP"

.PP
Available server (types) for internally used field: server\&. \fBPhoton\fP uses 3 different roles of servers: Name Server, Master Server and Game Server\&.
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMasterServer \fP\fP
This server is where matchmaking gets done and where clients can get lists of rooms in lobbies\&.
.TP
\fB\fIGameServer \fP\fP
This server handles a number of rooms to execute and relay the messages between players (in a room)\&.
.TP
\fB\fINameServer \fP\fP
This server is used initially to get the address (IP) of a Master Server for a specific region\&. Not used for \fBPhoton\fP OnPremise (self hosted)\&.
.PP
Definition at line \fB198\fP of file \fBLoadBalancingClient\&.cs\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Purrpatrator User manual from the source code\&.
