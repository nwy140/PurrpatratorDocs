.TH "Photon.Realtime.IOnEventCallback" 3 "Mon Apr 18 2022" "Purrpatrator User manual" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Photon.Realtime.IOnEventCallback \- Event callback for the \fBRealtime\fP Api\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherited by \fBPhoton\&.Pun\&.UtilityScripts\&.PunTurnManager\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBOnEvent\fP (EventData photonEvent)"
.br
.RI "Called for any incoming events\&. "
.in -1c
.SH "Detailed Description"
.PP 
Event callback for the \fBRealtime\fP Api\&. 

Covers events from the server and those sent by clients via OpRaiseEvent\&. 
.PP
Classes that implement this interface must be registered to get callbacks for various situations\&.
.PP
To register for callbacks, call \fBLoadBalancingClient\&.AddCallbackTarget\fP and pass the class implementing this interface To stop getting callbacks, call \fBLoadBalancingClient\&.RemoveCallbackTarget\fP and pass the class implementing this interface
.PP
Definition at line \fB3924\fP of file \fBLoadBalancingClient\&.cs\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void Photon\&.Realtime\&.IOnEventCallback\&.OnEvent (EventData photonEvent)"

.PP
Called for any incoming events\&. To receive events, implement \fBIOnEventCallback\fP in any class and register it via AddCallbackTarget (either in \fBLoadBalancingClient\fP or PhotonNetwork)\&.
.PP
With the EventData\&.Sender you can look up the \fBPlayer\fP who sent the event\&.
.PP
It is best practice to assign an eventCode for each different type of content and action, so the Code will be essential to read the incoming events\&. 
.PP
Implemented in \fBPhoton\&.Pun\&.UtilityScripts\&.PunTurnManager\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Purrpatrator User manual from the source code\&.
