.TH "Photon.Realtime.Player" 3 "Mon Apr 18 2022" "Purrpatrator User manual" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Photon.Realtime.Player \- Summarizes a 'player' within a room, identified (in that room) by ID (or 'actorNumber')\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPlayer\fP \fBGet\fP (int id)"
.br
.RI "Get a \fBPlayer\fP by ActorNumber (Player\&.ID)\&. "
.ti -1c
.RI "\fBPlayer\fP \fBGetNext\fP ()"
.br
.RI "Gets this \fBPlayer\fP's next \fBPlayer\fP, as sorted by ActorNumber (Player\&.ID)\&. "
.ti -1c
.RI "\fBPlayer\fP \fBGetNextFor\fP (\fBPlayer\fP currentPlayer)"
.br
.RI "Gets a \fBPlayer\fP's next \fBPlayer\fP, as sorted by ActorNumber (Player\&.ID)\&. "
.ti -1c
.RI "\fBPlayer\fP \fBGetNextFor\fP (int currentPlayerId)"
.br
.RI "Gets a \fBPlayer\fP's next \fBPlayer\fP, as sorted by ActorNumber (Player\&.ID)\&. "
.ti -1c
.RI "override string \fBToString\fP ()"
.br
.RI "Brief summary string of the \fBPlayer\fP: ActorNumber and NickName "
.ti -1c
.RI "string \fBToStringFull\fP ()"
.br
.RI "String summary of the \fBPlayer\fP: player\&.ID, name and all custom properties of this user\&. "
.ti -1c
.RI "override bool \fBEquals\fP (object p)"
.br
.RI "If players are equal (by GetHasCode, which returns this\&.ID)\&. "
.ti -1c
.RI "override int \fBGetHashCode\fP ()"
.br
.RI "Accompanies Equals, using the ID (actorNumber) as HashCode to return\&. "
.ti -1c
.RI "bool \fBSetCustomProperties\fP (\fBHashtable\fP propertiesToSet, \fBHashtable\fP expectedValues=null, \fBWebFlags\fP webFlags=null)"
.br
.RI "Updates and synchronizes this \fBPlayer\fP's Custom Properties\&. "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "readonly bool \fBIsLocal\fP"
.br
.RI "Only one player is controlled by each client\&. Others are not local\&."
.ti -1c
.RI "object \fBTagObject\fP"
.br
.RI "Can be used to store a reference that's useful to know 'by player'\&. "
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "int \fBActorNumber\fP\fC [get]\fP"
.br
.RI "Identifier of this player in current room\&. "
.ti -1c
.RI "bool \fBHasRejoined\fP\fC [getset]\fP"
.br
.ti -1c
.RI "string \fBNickName\fP\fC [getset]\fP"
.br
.RI "Non-unique nickname of this player\&. "
.ti -1c
.RI "string \fBUserId\fP\fC [getset]\fP"
.br
.RI "UserId of the player, available when the room got created with \fBRoomOptions\&.PublishUserId\fP = true\&. "
.ti -1c
.RI "bool \fBIsMasterClient\fP\fC [get]\fP"
.br
.RI "True if this player is the Master Client of the current room\&. "
.ti -1c
.RI "bool \fBIsInactive\fP\fC [getset]\fP"
.br
.RI "If this player is active in the room (and getting events which are currently being sent)\&. "
.ti -1c
.RI "\fBHashtable\fP \fBCustomProperties\fP\fC [getset]\fP"
.br
.RI "Read-only cache for custom properties of player\&. "
.in -1c
.SH "Detailed Description"
.PP 
Summarizes a 'player' within a room, identified (in that room) by ID (or 'actorNumber')\&. 

Each player has a actorNumber, valid for that room\&. It's -1 until assigned by server (and client logic)\&. 
.PP
Definition at line \fB40\fP of file \fBPlayer\&.cs\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "override bool Photon\&.Realtime\&.Player\&.Equals (object p)"

.PP
If players are equal (by GetHasCode, which returns this\&.ID)\&. 
.PP
Definition at line \fB312\fP of file \fBPlayer\&.cs\fP\&.
.SS "\fBPlayer\fP Photon\&.Realtime\&.Player\&.Get (int id)"

.PP
Get a \fBPlayer\fP by ActorNumber (Player\&.ID)\&. 
.PP
\fBParameters\fP
.RS 4
\fIid\fP ActorNumber of the a player in this room\&.
.RE
.PP
\fBReturns\fP
.RS 4
\fBPlayer\fP or null\&.
.RE
.PP

.PP
Definition at line \fB177\fP of file \fBPlayer\&.cs\fP\&.
.SS "override int Photon\&.Realtime\&.Player\&.GetHashCode ()"

.PP
Accompanies Equals, using the ID (actorNumber) as HashCode to return\&. 
.PP
Definition at line \fB321\fP of file \fBPlayer\&.cs\fP\&.
.SS "\fBPlayer\fP Photon\&.Realtime\&.Player\&.GetNext ()"

.PP
Gets this \fBPlayer\fP's next \fBPlayer\fP, as sorted by ActorNumber (Player\&.ID)\&. Wraps around\&.
.PP
\fBReturns\fP
.RS 4
\fBPlayer\fP or null\&.
.RE
.PP

.PP
Definition at line \fB189\fP of file \fBPlayer\&.cs\fP\&.
.SS "\fBPlayer\fP Photon\&.Realtime\&.Player\&.GetNextFor (int currentPlayerId)"

.PP
Gets a \fBPlayer\fP's next \fBPlayer\fP, as sorted by ActorNumber (Player\&.ID)\&. Wraps around\&.
.PP
Useful when you pass something to the next player\&. For example: passing the turn to the next player\&.
.PP
\fBParameters\fP
.RS 4
\fIcurrentPlayerId\fP The ActorNumber (Player\&.ID) for which the next is being needed\&.
.RE
.PP
\fBReturns\fP
.RS 4
\fBPlayer\fP or null\&.
.RE
.PP

.PP
Definition at line \fB211\fP of file \fBPlayer\&.cs\fP\&.
.SS "\fBPlayer\fP Photon\&.Realtime\&.Player\&.GetNextFor (\fBPlayer\fP currentPlayer)"

.PP
Gets a \fBPlayer\fP's next \fBPlayer\fP, as sorted by ActorNumber (Player\&.ID)\&. Wraps around\&.
.PP
Useful when you pass something to the next player\&. For example: passing the turn to the next player\&.
.PP
\fBParameters\fP
.RS 4
\fIcurrentPlayer\fP The \fBPlayer\fP for which the next is being needed\&.
.RE
.PP
\fBReturns\fP
.RS 4
\fBPlayer\fP or null\&.
.RE
.PP

.PP
Definition at line \fB198\fP of file \fBPlayer\&.cs\fP\&.
.SS "bool Photon\&.Realtime\&.Player\&.SetCustomProperties (\fBHashtable\fP propertiesToSet, \fBHashtable\fP expectedValues = \fCnull\fP, \fBWebFlags\fP webFlags = \fCnull\fP)"

.PP
Updates and synchronizes this \fBPlayer\fP's Custom Properties\&. Optionally, expectedProperties can be provided as condition\&. 
.PP
Custom Properties are a set of string keys and arbitrary values which is synchronized for the players in a \fBRoom\fP\&. They are available when the client enters the room, as they are in the response of OpJoin and OpCreate\&.
.PP
Custom Properties either relate to the (current) \fBRoom\fP or a \fBPlayer\fP (in that \fBRoom\fP)\&.
.PP
Both classes locally cache the current key/values and make them available as property: CustomProperties\&. This is provided only to read them\&. You must use the method SetCustomProperties to set/modify them\&.
.PP
Any client can set any Custom Properties anytime (when in a room)\&. It's up to the game logic to organize how they are best used\&.
.PP
You should call SetCustomProperties only with key/values that are new or changed\&. This reduces traffic and performance\&.
.PP
Unless you define some expectedProperties, setting key/values is always permitted\&. In this case, the property-setting client will not receive the new values from the server but instead update its local cache in SetCustomProperties\&.
.PP
If you define expectedProperties, the server will skip updates if the server property-cache does not contain all expectedProperties with the same values\&. In this case, the property-setting client will get an update from the server and update it's cached key/values at about the same time as everyone else\&.
.PP
The benefit of using expectedProperties can be only one client successfully sets a key from one known value to another\&. As example: Store who owns an item in a Custom Property 'ownedBy'\&. It's 0 initally\&. When multiple players reach the item, they all attempt to change 'ownedBy' from 0 to their actorNumber\&. If you use expectedProperties {'ownedBy', 0} as condition, the first player to take the item will have it (and the others fail to set the ownership)\&.
.PP
Properties get saved with the game state for Turnbased games (which use IsPersistent = true)\&. 
.PP
\fBParameters\fP
.RS 4
\fIpropertiesToSet\fP Hashtable of Custom Properties to be set\&. 
.br
\fIexpectedValues\fP If non-null, these are the property-values the server will check as condition for this update\&.
.br
\fIwebFlags\fP Defines if this SetCustomProperties-operation gets forwarded to your WebHooks\&. Client must be in room\&.
.RE
.PP
\fBReturns\fP
.RS 4
False if propertiesToSet is null or empty or have zero string keys\&. True in offline mode even if expectedProperties or webFlags are used\&. If not in a room, returns true if local player and expectedValues and webFlags are null\&. (Use this to cache properties to be sent when joining a room)\&. Otherwise, returns if this operation could be sent to the server\&. 
.RE
.PP

.PP
Definition at line \fB390\fP of file \fBPlayer\&.cs\fP\&.
.SS "override string Photon\&.Realtime\&.Player\&.ToString ()"

.PP
Brief summary string of the \fBPlayer\fP: ActorNumber and NickName 
.PP
Definition at line \fB292\fP of file \fBPlayer\&.cs\fP\&.
.SS "string Photon\&.Realtime\&.Player\&.ToStringFull ()"

.PP
String summary of the \fBPlayer\fP: player\&.ID, name and all custom properties of this user\&. Use with care and not every frame! Converts the customProperties to a String on every single call\&. 
.PP
Definition at line \fB304\fP of file \fBPlayer\&.cs\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "readonly bool Photon\&.Realtime\&.Player\&.IsLocal"

.PP
Only one player is controlled by each client\&. Others are not local\&.
.PP
Definition at line \fB60\fP of file \fBPlayer\&.cs\fP\&.
.SS "object Photon\&.Realtime\&.Player\&.TagObject"

.PP
Can be used to store a reference that's useful to know 'by player'\&. Example: Set a player's character as Tag by assigning the GameObject on Instantiate\&.
.PP
Definition at line \fB139\fP of file \fBPlayer\&.cs\fP\&.
.SH "Property Documentation"
.PP 
.SS "int Photon\&.Realtime\&.Player\&.ActorNumber\fC [get]\fP"

.PP
Identifier of this player in current room\&. Also known as: actorNumber or actorNumber\&. It's -1 outside of rooms\&.
.PP
The ID is assigned per room and only valid in that context\&. It will change even on leave and re-join\&. IDs are never re-used per room\&.
.PP
Definition at line \fB53\fP of file \fBPlayer\&.cs\fP\&.
.SS "\fBHashtable\fP Photon\&.Realtime\&.Player\&.CustomProperties\fC [get]\fP, \fC [set]\fP"

.PP
Read-only cache for custom properties of player\&. Set via \fBPlayer\&.SetCustomProperties\fP\&.
.PP
Don't modify the content of this Hashtable\&. Use SetCustomProperties and the properties of this class to modify values\&. When you use those, the client will sync values with the server\&. 
.PP
\fBSetCustomProperties\fP 
.PP
Definition at line \fB135\fP of file \fBPlayer\&.cs\fP\&.
.SS "bool Photon\&.Realtime\&.Player\&.HasRejoined\fC [get]\fP, \fC [set]\fP"

.PP
Definition at line \fB63\fP of file \fBPlayer\&.cs\fP\&.
.SS "bool Photon\&.Realtime\&.Player\&.IsInactive\fC [get]\fP, \fC [set]\fP"

.PP
If this player is active in the room (and getting events which are currently being sent)\&. Inactive players keep their spot in a room but otherwise behave as if offline (no matter what their actual connection status is)\&. The room needs a PlayerTTL != 0\&. If a player is inactive for longer than PlayerTTL, the server will remove this player from the room\&. For a client 'rejoining' a room, is the same as joining it: It gets properties, cached events and then the live events\&. 
.PP
Definition at line \fB126\fP of file \fBPlayer\&.cs\fP\&.
.SS "bool Photon\&.Realtime\&.Player\&.IsMasterClient\fC [get]\fP"

.PP
True if this player is the Master Client of the current room\&. 
.PP
Definition at line \fB107\fP of file \fBPlayer\&.cs\fP\&.
.SS "string Photon\&.Realtime\&.Player\&.NickName\fC [get]\fP, \fC [set]\fP"

.PP
Non-unique nickname of this player\&. Synced automatically in a room\&.
.PP
A player might change his own playername in a room (it's only a property)\&. Setting this value updates the server and other players (using an operation)\&. 
.PP
Definition at line \fB77\fP of file \fBPlayer\&.cs\fP\&.
.SS "string Photon\&.Realtime\&.Player\&.UserId\fC [get]\fP, \fC [set]\fP"

.PP
UserId of the player, available when the room got created with \fBRoomOptions\&.PublishUserId\fP = true\&. Useful for \fBLoadBalancingClient\&.OpFindFriends\fP and blocking slots in a room for expected players (e\&.g\&. in \fBLoadBalancingClient\&.OpCreateRoom\fP)\&.
.PP
Definition at line \fB102\fP of file \fBPlayer\&.cs\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Purrpatrator User manual from the source code\&.
