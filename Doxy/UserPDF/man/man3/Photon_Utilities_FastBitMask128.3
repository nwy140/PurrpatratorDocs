.TH "Photon.Utilities.FastBitMask128" 3 "Mon Apr 18 2022" "Purrpatrator User manual" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Photon.Utilities.FastBitMask128 \- Very unchecked, and exposed alternative to BitArray for masks in the 65-128 bit range\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBFastBitMask128\fP (int bitcount)"
.br
.ti -1c
.RI "\fBFastBitMask128\fP (\fBFastBitMask128\fP copyFrom)"
.br
.ti -1c
.RI "bool \fBGet\fP (int bit)"
.br
.ti -1c
.RI "void \fBSet\fP (int bit, bool value)"
.br
.ti -1c
.RI "void \fBSetTrue\fP (int bit)"
.br
.ti -1c
.RI "void \fBSetFalse\fP (int bit)"
.br
.ti -1c
.RI "void \fBSetAllTrue\fP ()"
.br
.ti -1c
.RI "void \fBSetAllFalse\fP ()"
.br
.ti -1c
.RI "void \fBOR\fP (\fBFastBitMask128\fP other)"
.br
.ti -1c
.RI "void \fBOR\fP (\fBFastBitMask128\fP other, int otherOffset)"
.br
.ti -1c
.RI "void \fBAND\fP (\fBFastBitMask128\fP other)"
.br
.ti -1c
.RI "void \fBXOR\fP (\fBFastBitMask128\fP other)"
.br
.ti -1c
.RI "\fBFastBitMask128\fP \fBNOT\fP ()"
.br
.RI "Returns a FastMask with all bits flipped\&. "
.ti -1c
.RI "int \fBCountTrue\fP ()"
.br
.ti -1c
.RI "int \fBCountFalse\fP ()"
.br
.ti -1c
.RI "void \fBClearBitsBefore\fP (int start, int count)"
.br
.RI "Non-inclusive clearning of X bits working back from start\&. "
.ti -1c
.RI "int \fBCountValidRange\fP (int start, int lookahead)"
.br
.RI "Inclusively get relative distance to most future true bit in the range\&. "
.ti -1c
.RI "void \fBCopy\fP (\fBFastBitMask128\fP other)"
.br
.ti -1c
.RI "bool \fBCompare\fP (\fBFastBitMask128\fP other)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBFastBitMask128\fP \fBoperator|\fP (\fBFastBitMask128\fP a, \fBFastBitMask128\fP b)"
.br
.ti -1c
.RI "static \fBFastBitMask128\fP \fBoperator&\fP (\fBFastBitMask128\fP a, \fBFastBitMask128\fP b)"
.br
.ti -1c
.RI "static \fBFastBitMask128\fP \fBoperator^\fP (\fBFastBitMask128\fP a, \fBFastBitMask128\fP b)"
.br
.ti -1c
.RI "static \fBFastBitMask128\fP \fBoperator!\fP (\fBFastBitMask128\fP a)"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "ulong \fBSeg1\fP\fC [get]\fP"
.br
.ti -1c
.RI "ulong \fBSeg2\fP\fC [get]\fP"
.br
.ti -1c
.RI "ulong \fBAllTrue1\fP\fC [get]\fP"
.br
.ti -1c
.RI "ulong \fBAllTrue2\fP\fC [get]\fP"
.br
.ti -1c
.RI "int????? \fBBitCount\fP\fC [getset]\fP"
.br
.RI "Changing the bitcount with this property recalculates the masks, and sets any unused bits in the backing fields to 0; "
.ti -1c
.RI "bool \fBthis[int bit]\fP\fC [getset]\fP"
.br
.ti -1c
.RI "bool \fBAllAreFalse\fP\fC [get]\fP"
.br
.RI "All of the backing ulongs == 0 "
.ti -1c
.RI "bool \fBAllAreTrue\fP\fC [get]\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Very unchecked, and exposed alternative to BitArray for masks in the 65-128 bit range\&. 

Zero-based indexes\&. Specifically made for use with ring buffers\&. 
.PP
Definition at line \fB15\fP of file \fBFastBitMask128\&.cs\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Photon\&.Utilities\&.FastBitMask128\&.FastBitMask128 (int bitcount)"

.PP
Definition at line \fB73\fP of file \fBFastBitMask128\&.cs\fP\&.
.SS "Photon\&.Utilities\&.FastBitMask128\&.FastBitMask128 (\fBFastBitMask128\fP copyFrom)"

.PP
Definition at line \fB94\fP of file \fBFastBitMask128\&.cs\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void Photon\&.Utilities\&.FastBitMask128\&.AND (\fBFastBitMask128\fP other)"

.PP
Definition at line \fB254\fP of file \fBFastBitMask128\&.cs\fP\&.
.SS "void Photon\&.Utilities\&.FastBitMask128\&.ClearBitsBefore (int start, int count)"

.PP
Non-inclusive clearning of X bits working back from start\&. Max count of 64\&. 
.PP
\fBParameters\fP
.RS 4
\fIstart\fP 
.RE
.PP
\fBReturns\fP
.RS 4
.RE
.PP
Account for possiblity of wrapping back around to seg 1
.PP
if we are only using the first ulong (64 or less bits)
.PP
Definition at line \fB396\fP of file \fBFastBitMask128\&.cs\fP\&.
.SS "bool Photon\&.Utilities\&.FastBitMask128\&.Compare (\fBFastBitMask128\fP other)"

.PP
Definition at line \fB488\fP of file \fBFastBitMask128\&.cs\fP\&.
.SS "void Photon\&.Utilities\&.FastBitMask128\&.Copy (\fBFastBitMask128\fP other)"

.PP
Definition at line \fB477\fP of file \fBFastBitMask128\&.cs\fP\&.
.SS "int Photon\&.Utilities\&.FastBitMask128\&.CountFalse ()"

.PP
Definition at line \fB346\fP of file \fBFastBitMask128\&.cs\fP\&.
.SS "int Photon\&.Utilities\&.FastBitMask128\&.CountTrue ()"

.PP
Definition at line \fB304\fP of file \fBFastBitMask128\&.cs\fP\&.
.SS "int Photon\&.Utilities\&.FastBitMask128\&.CountValidRange (int start, int lookahead)"

.PP
Inclusively get relative distance to most future true bit in the range\&. Start with the farthest, and work backwards until we find a true\&.
.PP
Definition at line \fB447\fP of file \fBFastBitMask128\&.cs\fP\&.
.SS "bool Photon\&.Utilities\&.FastBitMask128\&.Get (int bit)"

.PP
Definition at line \fB142\fP of file \fBFastBitMask128\&.cs\fP\&.
.SS "\fBFastBitMask128\fP Photon\&.Utilities\&.FastBitMask128\&.NOT ()"

.PP
Returns a FastMask with all bits flipped\&. Unused bits remain as zeros\&. 
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.PP
Definition at line \fB290\fP of file \fBFastBitMask128\&.cs\fP\&.
.SS "static \fBFastBitMask128\fP Photon\&.Utilities\&.FastBitMask128\&.operator! (\fBFastBitMask128\fP a)\fC [static]\fP"

.PP
Definition at line \fB281\fP of file \fBFastBitMask128\&.cs\fP\&.
.SS "static \fBFastBitMask128\fP Photon\&.Utilities\&.FastBitMask128\&.operator& (\fBFastBitMask128\fP a, \fBFastBitMask128\fP b)\fC [static]\fP"

.PP
Definition at line \fB271\fP of file \fBFastBitMask128\&.cs\fP\&.
.SS "static \fBFastBitMask128\fP Photon\&.Utilities\&.FastBitMask128\&.operator^ (\fBFastBitMask128\fP a, \fBFastBitMask128\fP b)\fC [static]\fP"

.PP
Definition at line \fB276\fP of file \fBFastBitMask128\&.cs\fP\&.
.SS "static \fBFastBitMask128\fP Photon\&.Utilities\&.FastBitMask128\&.operator| (\fBFastBitMask128\fP a, \fBFastBitMask128\fP b)\fC [static]\fP"

.PP
Definition at line \fB266\fP of file \fBFastBitMask128\&.cs\fP\&.
.SS "void Photon\&.Utilities\&.FastBitMask128\&.OR (\fBFastBitMask128\fP other)"

.PP
Definition at line \fB218\fP of file \fBFastBitMask128\&.cs\fP\&.
.SS "void Photon\&.Utilities\&.FastBitMask128\&.OR (\fBFastBitMask128\fP other, int otherOffset)"

.PP
Definition at line \fB224\fP of file \fBFastBitMask128\&.cs\fP\&.
.SS "void Photon\&.Utilities\&.FastBitMask128\&.Set (int bit, bool value)"

.PP
Definition at line \fB154\fP of file \fBFastBitMask128\&.cs\fP\&.
.SS "void Photon\&.Utilities\&.FastBitMask128\&.SetAllFalse ()"

.PP
Definition at line \fB206\fP of file \fBFastBitMask128\&.cs\fP\&.
.SS "void Photon\&.Utilities\&.FastBitMask128\&.SetAllTrue ()"

.PP
Definition at line \fB200\fP of file \fBFastBitMask128\&.cs\fP\&.
.SS "void Photon\&.Utilities\&.FastBitMask128\&.SetFalse (int bit)"

.PP
Definition at line \fB188\fP of file \fBFastBitMask128\&.cs\fP\&.
.SS "void Photon\&.Utilities\&.FastBitMask128\&.SetTrue (int bit)"

.PP
Definition at line \fB176\fP of file \fBFastBitMask128\&.cs\fP\&.
.SS "void Photon\&.Utilities\&.FastBitMask128\&.XOR (\fBFastBitMask128\fP other)"

.PP
Definition at line \fB260\fP of file \fBFastBitMask128\&.cs\fP\&.
.SH "Property Documentation"
.PP 
.SS "bool Photon\&.Utilities\&.FastBitMask128\&.AllAreFalse\fC [get]\fP"

.PP
All of the backing ulongs == 0 
.PP
Definition at line \fB215\fP of file \fBFastBitMask128\&.cs\fP\&.
.SS "bool Photon\&.Utilities\&.FastBitMask128\&.AllAreTrue\fC [get]\fP"

.PP
Definition at line \fB216\fP of file \fBFastBitMask128\&.cs\fP\&.
.SS "ulong Photon\&.Utilities\&.FastBitMask128\&.AllTrue1\fC [get]\fP"

.PP
Definition at line \fB23\fP of file \fBFastBitMask128\&.cs\fP\&.
.SS "ulong Photon\&.Utilities\&.FastBitMask128\&.AllTrue2\fC [get]\fP"

.PP
Definition at line \fB24\fP of file \fBFastBitMask128\&.cs\fP\&.
.SS "int????? Photon\&.Utilities\&.FastBitMask128\&.BitCount\fC [get]\fP, \fC [set]\fP"

.PP
Changing the bitcount with this property recalculates the masks, and sets any unused bits in the backing fields to 0; 
.PP
Definition at line \fB29\fP of file \fBFastBitMask128\&.cs\fP\&.
.SS "ulong Photon\&.Utilities\&.FastBitMask128\&.Seg1\fC [get]\fP"

.PP
Definition at line \fB21\fP of file \fBFastBitMask128\&.cs\fP\&.
.SS "ulong Photon\&.Utilities\&.FastBitMask128\&.Seg2\fC [get]\fP"

.PP
Definition at line \fB22\fP of file \fBFastBitMask128\&.cs\fP\&.
.SS "bool Photon\&.Utilities\&.FastBitMask128\&.this[int bit]\fC [get]\fP, \fC [set]\fP"

.PP
Definition at line \fB105\fP of file \fBFastBitMask128\&.cs\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Purrpatrator User manual from the source code\&.
