.TH "Photon.Utilities.FastBitMask64" 3 "Mon Apr 18 2022" "Purrpatrator User manual" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Photon.Utilities.FastBitMask64 \- Very unchecked, and exposed alternative to BitArray for masks in the 65-128 bit range\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBFastBitMask64\fP (int bitcount)"
.br
.ti -1c
.RI "bool \fBGet\fP (int bit)"
.br
.ti -1c
.RI "void \fBSet\fP (int bit, bool value)"
.br
.ti -1c
.RI "void \fBSetTrue\fP (int bit)"
.br
.ti -1c
.RI "void \fBSetFalse\fP (int bit)"
.br
.ti -1c
.RI "void \fBSetAllTrue\fP ()"
.br
.ti -1c
.RI "void \fBSetAllFalse\fP ()"
.br
.ti -1c
.RI "void \fBOR\fP (\fBFastBitMask64\fP other)"
.br
.ti -1c
.RI "void \fBAND\fP (\fBFastBitMask64\fP other)"
.br
.ti -1c
.RI "void \fBXOR\fP (\fBFastBitMask64\fP other)"
.br
.ti -1c
.RI "int \fBCountTrue\fP ()"
.br
.ti -1c
.RI "int \fBCountFalse\fP ()"
.br
.ti -1c
.RI "void \fBClearBitsBefore\fP (int start, int count)"
.br
.RI "Non-inclusive clearning of X bits working back from start\&. "
.ti -1c
.RI "int \fBCountValidRange\fP (int start, int lookahead)"
.br
.RI "Inclusively get relative distance to most future true bit in the range\&. "
.ti -1c
.RI "void \fBCopy\fP (\fBFastBitMask64\fP other)"
.br
.ti -1c
.RI "bool \fBCompare\fP (\fBFastBitMask64\fP other)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "ulong \fBbitmask\fP"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "int? \fBBitCount\fP\fC [getset]\fP"
.br
.RI "Changing the bitcount with this property recalculates the masks, and sets any unused bits in the backing fields to 0; "
.ti -1c
.RI "bool \fBthis[int bit]\fP\fC [getset]\fP"
.br
.ti -1c
.RI "bool \fBAllAreFalse\fP\fC [get]\fP"
.br
.RI "All of the backing ulongs == 0 "
.ti -1c
.RI "bool \fBAllAreTrue\fP\fC [get]\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Very unchecked, and exposed alternative to BitArray for masks in the 65-128 bit range\&. 

Zero-based indexes\&. Specifically made for use with ring buffers\&. 
.PP
Definition at line \fB15\fP of file \fBFastBitMask64\&.cs\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Photon\&.Utilities\&.FastBitMask64\&.FastBitMask64 (int bitcount)"

.PP
Definition at line \fB60\fP of file \fBFastBitMask64\&.cs\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void Photon\&.Utilities\&.FastBitMask64\&.AND (\fBFastBitMask64\fP other)"

.PP
Definition at line \fB174\fP of file \fBFastBitMask64\&.cs\fP\&.
.SS "void Photon\&.Utilities\&.FastBitMask64\&.ClearBitsBefore (int start, int count)"

.PP
Non-inclusive clearning of X bits working back from start\&. Max count of 64\&. 
.PP
\fBParameters\fP
.RS 4
\fIstart\fP 
.RE
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.PP
Definition at line \fB236\fP of file \fBFastBitMask64\&.cs\fP\&.
.SS "bool Photon\&.Utilities\&.FastBitMask64\&.Compare (\fBFastBitMask64\fP other)"

.PP
Definition at line \fB291\fP of file \fBFastBitMask64\&.cs\fP\&.
.SS "void Photon\&.Utilities\&.FastBitMask64\&.Copy (\fBFastBitMask64\fP other)"

.PP
Definition at line \fB284\fP of file \fBFastBitMask64\&.cs\fP\&.
.SS "int Photon\&.Utilities\&.FastBitMask64\&.CountFalse ()"

.PP
Definition at line \fB212\fP of file \fBFastBitMask64\&.cs\fP\&.
.SS "int Photon\&.Utilities\&.FastBitMask64\&.CountTrue ()"

.PP
Definition at line \fB186\fP of file \fBFastBitMask64\&.cs\fP\&.
.SS "int Photon\&.Utilities\&.FastBitMask64\&.CountValidRange (int start, int lookahead)"

.PP
Inclusively get relative distance to most future true bit in the range\&. Start with the farthest, and work backwards until we find a true\&.
.PP
Definition at line \fB264\fP of file \fBFastBitMask64\&.cs\fP\&.
.SS "bool Photon\&.Utilities\&.FastBitMask64\&.Get (int bit)"

.PP
Definition at line \fB109\fP of file \fBFastBitMask64\&.cs\fP\&.
.SS "void Photon\&.Utilities\&.FastBitMask64\&.OR (\fBFastBitMask64\fP other)"

.PP
Definition at line \fB169\fP of file \fBFastBitMask64\&.cs\fP\&.
.SS "void Photon\&.Utilities\&.FastBitMask64\&.Set (int bit, bool value)"

.PP
Definition at line \fB118\fP of file \fBFastBitMask64\&.cs\fP\&.
.SS "void Photon\&.Utilities\&.FastBitMask64\&.SetAllFalse ()"

.PP
Definition at line \fB158\fP of file \fBFastBitMask64\&.cs\fP\&.
.SS "void Photon\&.Utilities\&.FastBitMask64\&.SetAllTrue ()"

.PP
Definition at line \fB153\fP of file \fBFastBitMask64\&.cs\fP\&.
.SS "void Photon\&.Utilities\&.FastBitMask64\&.SetFalse (int bit)"

.PP
Definition at line \fB144\fP of file \fBFastBitMask64\&.cs\fP\&.
.SS "void Photon\&.Utilities\&.FastBitMask64\&.SetTrue (int bit)"

.PP
Definition at line \fB135\fP of file \fBFastBitMask64\&.cs\fP\&.
.SS "void Photon\&.Utilities\&.FastBitMask64\&.XOR (\fBFastBitMask64\fP other)"

.PP
Definition at line \fB179\fP of file \fBFastBitMask64\&.cs\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "ulong Photon\&.Utilities\&.FastBitMask64\&.bitmask"

.PP
Definition at line \fB17\fP of file \fBFastBitMask64\&.cs\fP\&.
.SH "Property Documentation"
.PP 
.SS "bool Photon\&.Utilities\&.FastBitMask64\&.AllAreFalse\fC [get]\fP"

.PP
All of the backing ulongs == 0 
.PP
Definition at line \fB166\fP of file \fBFastBitMask64\&.cs\fP\&.
.SS "bool Photon\&.Utilities\&.FastBitMask64\&.AllAreTrue\fC [get]\fP"

.PP
Definition at line \fB167\fP of file \fBFastBitMask64\&.cs\fP\&.
.SS "int? Photon\&.Utilities\&.FastBitMask64\&.BitCount\fC [get]\fP, \fC [set]\fP"

.PP
Changing the bitcount with this property recalculates the masks, and sets any unused bits in the backing fields to 0; 
.PP
Definition at line \fB24\fP of file \fBFastBitMask64\&.cs\fP\&.
.SS "bool Photon\&.Utilities\&.FastBitMask64\&.this[int bit]\fC [get]\fP, \fC [set]\fP"

.PP
Definition at line \fB81\fP of file \fBFastBitMask64\&.cs\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Purrpatrator User manual from the source code\&.
