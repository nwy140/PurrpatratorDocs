<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="class_photon_1_1_compression_1_1_array_serialize_unsafe" kind="class" language="C#" prot="public">
    <compoundname>Photon::Compression::ArraySerializeUnsafe</compoundname>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a8d1820322be8d32078189764fc3f5181" prot="private" static="yes" mutable="no">
        <type>const string</type>
        <definition>const string Photon.Compression.ArraySerializeUnsafe.bufferOverrunMsg</definition>
        <argsstring></argsstring>
        <name>bufferOverrunMsg</name>
        <initializer>= &quot;Byte buffer overrun. Dataloss will occur.&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="38" column="22" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aad43a38228ed7e77b5968bc763066d6b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.WriteSigned</definition>
        <argsstring>(ulong *buffer, int value, ref int bitposition, int bits)</argsstring>
        <name>WriteSigned</name>
        <param>
          <type>ulong *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ref int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Writes value to this unsafe buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Uses zigzag encoding to retain the sign value. Existing data past this inject is preserved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="47" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="47" bodyend="51"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a617954426c11928e6a29924c86904f5a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.AppendSigned</definition>
        <argsstring>(ulong *buffer, int value, ref int bitposition, int bits)</argsstring>
        <name>AppendSigned</name>
        <param>
          <type>ulong *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ref int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Appends value to this unsafe buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Uses zigzag encoding to retain the sign value. Existing data past this inject is NOT preserved. Only use for sequential writes. Use <ref refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" kindref="member">Write()</ref> or <ref refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a5abe80710e4749c531f6fe65f8753820" kindref="member">Inject()</ref> for non-linear writes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="58" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="58" bodyend="62"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1af41d5ed8a3567a57dcec561e0f5c9ebd" compoundref="_array_serialize_unsafe_8cs" startline="186" endline="203">Photon.Compression.ArraySerializeUnsafe.Append</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1adca7942800067de6810fcfcd6bb914b0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.AddSigned</definition>
        <argsstring>(this int value, ulong *uPtr, ref int bitposition, int bits)</argsstring>
        <name>AddSigned</name>
        <param>
          <type>this int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>ref int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Appends this value to the unsafe buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Uses zigzag encoding to retain the sign value. Existing data past this inject is NOT preserved in exchange for a faster write. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="68" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="68" bodyend="72"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1af41d5ed8a3567a57dcec561e0f5c9ebd" compoundref="_array_serialize_unsafe_8cs" startline="186" endline="203">Photon.Compression.ArraySerializeUnsafe.Append</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a85438055b159698a8b89e0da7c2b075b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.AddSigned</definition>
        <argsstring>(this short value, ulong *uPtr, ref int bitposition, int bits)</argsstring>
        <name>AddSigned</name>
        <param>
          <type>this short</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>ref int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Appends this value to the unsafe buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Uses zigzag encoding to retain the sign value. Existing data past this inject is NOT preserved in exchange for a faster write. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="77" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="77" bodyend="81"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1af41d5ed8a3567a57dcec561e0f5c9ebd" compoundref="_array_serialize_unsafe_8cs" startline="186" endline="203">Photon.Compression.ArraySerializeUnsafe.Append</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aa0ff6c4cfe32ef06ea8e0032f452f173" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.AddSigned</definition>
        <argsstring>(this sbyte value, ulong *uPtr, ref int bitposition, int bits)</argsstring>
        <name>AddSigned</name>
        <param>
          <type>this sbyte</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>ref int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Appends this value to the unsafe buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Uses zigzag encoding to retain the sign value. Existing data past this inject is NOT preserved in exchange for a faster write. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="86" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="86" bodyend="90"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1af41d5ed8a3567a57dcec561e0f5c9ebd" compoundref="_array_serialize_unsafe_8cs" startline="186" endline="203">Photon.Compression.ArraySerializeUnsafe.Append</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aab34e3abe5d73cb6d8db9bcbe4cedfa3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.InjectSigned</definition>
        <argsstring>(this int value, ulong *uPtr, ref int bitposition, int bits)</argsstring>
        <name>InjectSigned</name>
        <param>
          <type>this int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>ref int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Overwrites this value to the unsafe buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Uses zigzag encoding to retain the sign value. Existing data past this inject is preserved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="97" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="97" bodyend="101"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1ad249b0e7b5f309b7de58ff3c8cdc7535" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.InjectSigned</definition>
        <argsstring>(this short value, ulong *uPtr, ref int bitposition, int bits)</argsstring>
        <name>InjectSigned</name>
        <param>
          <type>this short</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>ref int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Overwrites this value to the unsafe buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Uses zigzag encoding to retain the sign value. Existing data past this inject is preserved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="106" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="106" bodyend="110"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a20b1f202992101366b7e95d8085fa983" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.InjectSigned</definition>
        <argsstring>(this sbyte value, ulong *uPtr, ref int bitposition, int bits)</argsstring>
        <name>InjectSigned</name>
        <param>
          <type>this sbyte</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>ref int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Overwrites this value to the unsafe buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Uses zigzag encoding to retain the sign value. Existing data past this inject is preserved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="115" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="115" bodyend="119"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aa6df4cd317240173d82b6f64b87789b0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.PokeSigned</definition>
        <argsstring>(this int value, ulong *uPtr, int bitposition, int bits)</argsstring>
        <name>PokeSigned</name>
        <param>
          <type>this int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Overwrites this value to the unsafe buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Uses zigzag encoding to retain the sign value. Unlike Inject, this does not increment the bitposition and is for one-off injections. Existing data past this inject is preserved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="127" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="127" bodyend="131"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7dc1b1dabf93068e2acfbfbb5cd56d87" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.PokeSigned</definition>
        <argsstring>(this short value, ulong *uPtr, int bitposition, int bits)</argsstring>
        <name>PokeSigned</name>
        <param>
          <type>this short</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Overwrites this value to the unsafe buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Uses zigzag encoding to retain the sign value. Unlike Inject, this does not increment the bitposition and is for one-off injections. Existing data past this inject is preserved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="137" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="137" bodyend="141"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a04d0c93ea6e0ec310d9ffd38f05b3134" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.PokeSigned</definition>
        <argsstring>(this sbyte value, ulong *uPtr, int bitposition, int bits)</argsstring>
        <name>PokeSigned</name>
        <param>
          <type>this sbyte</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Overwrites this value to the unsafe buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Uses zigzag encoding to retain the sign value. Unlike Inject, this does not increment the bitposition and is for one-off injections. Existing data past this inject is preserved. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="147" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="147" bodyend="151"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a54c616819e08d226c702608cdfac40d7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe int</type>
        <definition>static unsafe int Photon.Compression.ArraySerializeUnsafe.ReadSigned</definition>
        <argsstring>(ulong *uPtr, ref int bitposition, int bits)</argsstring>
        <name>ReadSigned</name>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>ref int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Returns signed value read from the buffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="157" column="26" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="157" bodyend="162"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aed2650eee9804de6bf8b43e12da2748b" compoundref="_array_serialize_unsafe_8cs" startline="279" endline="296">Photon.Compression.ArraySerializeUnsafe.Read</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a918507b8a2f85bea9efb99f1739387f4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe int</type>
        <definition>static unsafe int Photon.Compression.ArraySerializeUnsafe.PeekSigned</definition>
        <argsstring>(ulong *uPtr, int bitposition, int bits)</argsstring>
        <name>PeekSigned</name>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Returns signed value read from the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Same as Read, only the bitposition is not incremented. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="168" column="26" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="168" bodyend="173"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aed2650eee9804de6bf8b43e12da2748b" compoundref="_array_serialize_unsafe_8cs" startline="279" endline="296">Photon.Compression.ArraySerializeUnsafe.Read</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1af41d5ed8a3567a57dcec561e0f5c9ebd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.Append</definition>
        <argsstring>(ulong *uPtr, ulong value, ref int bitposition, int bits)</argsstring>
        <name>Append</name>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>ulong</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ref int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Primary Append writer. </para>
        </briefdescription>
        <detaileddescription>
<para>Faster method for writing to byte[] or uint[] buffers. Uses unsafe to treat them as ulong[]. Append does not preserve existing buffer data past the write point in exchange for a faster write. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Cast your byte* or uint* to ulong*</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitposition</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bits</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="186" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="186" bodyend="203"/>
        <referencedby refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a8eed7af214af22ed7d6e1e3f2b2bea7b" compoundref="_array_serialize_unsafe_8cs" startline="332" endline="335">Photon.Compression.ArraySerializeUnsafe.Add</referencedby>
        <referencedby refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1adca7942800067de6810fcfcd6bb914b0" compoundref="_array_serialize_unsafe_8cs" startline="68" endline="72">Photon.Compression.ArraySerializeUnsafe.AddSigned</referencedby>
        <referencedby refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1ad01291d204934c02e9f7567826b4fb6a" compoundref="_array_serialize_unsafe_8cs" startline="369" endline="372">Photon.Compression.ArraySerializeUnsafe.AddUnsigned</referencedby>
        <referencedby refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a617954426c11928e6a29924c86904f5a" compoundref="_array_serialize_unsafe_8cs" startline="58" endline="62">Photon.Compression.ArraySerializeUnsafe.AppendSigned</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.Write</definition>
        <argsstring>(ulong *uPtr, ulong value, ref int bitposition, int bits)</argsstring>
        <name>Write</name>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>ulong</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ref int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Primary Unsafe writer. </para>
        </briefdescription>
        <detaileddescription>
<para>Faster method for writing to byte[] or uint[] buffers. Uses unsafe to treat them as ulong[]. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Cast your byte* or uint* to ulong*</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitposition</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bits</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="241" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="241" bodyend="269"/>
        <referencedby refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a5abe80710e4749c531f6fe65f8753820" compoundref="_array_serialize_unsafe_8cs" startline="409" endline="412">Photon.Compression.ArraySerializeUnsafe.Inject</referencedby>
        <referencedby refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aab34e3abe5d73cb6d8db9bcbe4cedfa3" compoundref="_array_serialize_unsafe_8cs" startline="97" endline="101">Photon.Compression.ArraySerializeUnsafe.InjectSigned</referencedby>
        <referencedby refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1ad3f5e32ef0e175a524e917e8e1544ac0" compoundref="_array_serialize_unsafe_8cs" startline="442" endline="445">Photon.Compression.ArraySerializeUnsafe.InjectUnsigned</referencedby>
        <referencedby refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1af2bbd46e555555106cfd395a5df09373" compoundref="_array_serialize_unsafe_8cs" startline="483" endline="486">Photon.Compression.ArraySerializeUnsafe.Poke</referencedby>
        <referencedby refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aa6df4cd317240173d82b6f64b87789b0" compoundref="_array_serialize_unsafe_8cs" startline="127" endline="131">Photon.Compression.ArraySerializeUnsafe.PokeSigned</referencedby>
        <referencedby refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aeffb0da43220a32fcc5ccc9def2ba49a" compoundref="_array_serialize_unsafe_8cs" startline="539" endline="542">Photon.Compression.ArraySerializeUnsafe.PokeUnsigned</referencedby>
        <referencedby refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aa29c7e4c647110ee57afcdd9ccc5d8dd" compoundref="_array_serialize_unsafe_8cs" startline="567" endline="583">Photon.Compression.ArraySerializeUnsafe.ReadOutUnsafe</referencedby>
        <referencedby refid="class_photon_1_1_compression_1_1_array_pack_bits_ext_1a7aa4bf5228a942524e44499747ea30f7" compoundref="_array_pack_bits_ext_8cs" startline="42" endline="53">Photon.Compression.ArrayPackBitsExt.WritePackedBits</referencedby>
        <referencedby refid="class_photon_1_1_compression_1_1_array_pack_bytes_ext_1a179b27d80930ed160627d753d4a12717" compoundref="_array_pack_bytes_ext_8cs" startline="41" endline="55">Photon.Compression.ArrayPackBytesExt.WritePackedBytes</referencedby>
        <referencedby refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aad43a38228ed7e77b5968bc763066d6b" compoundref="_array_serialize_unsafe_8cs" startline="47" endline="51">Photon.Compression.ArraySerializeUnsafe.WriteSigned</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aed2650eee9804de6bf8b43e12da2748b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe ulong</type>
        <definition>static unsafe ulong Photon.Compression.ArraySerializeUnsafe.Read</definition>
        <argsstring>(ulong *uPtr, ref int bitposition, int bits)</argsstring>
        <name>Read</name>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>ref int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Primary Unsafe Read. </para>
        </briefdescription>
        <detaileddescription>
<para>Fast read for byte[] and unit[] by treating them as ulong[]. WARNING: There is no bounds checking on this method! </para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Cast your byte* or uint* to ulong*</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitposition</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bits</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the read value.</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="279" column="28" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="279" bodyend="296"/>
        <referencedby refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a918507b8a2f85bea9efb99f1739387f4" compoundref="_array_serialize_unsafe_8cs" startline="168" endline="173">Photon.Compression.ArraySerializeUnsafe.PeekSigned</referencedby>
        <referencedby refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aa29c7e4c647110ee57afcdd9ccc5d8dd" compoundref="_array_serialize_unsafe_8cs" startline="567" endline="583">Photon.Compression.ArraySerializeUnsafe.ReadOutUnsafe</referencedby>
        <referencedby refid="class_photon_1_1_compression_1_1_array_pack_bits_ext_1a47724a2140489273a73215fb045ed016" compoundref="_array_pack_bits_ext_8cs" startline="109" endline="118">Photon.Compression.ArrayPackBitsExt.ReadPackedBits</referencedby>
        <referencedby refid="class_photon_1_1_compression_1_1_array_pack_bytes_ext_1aa6896584b72385f1a9d0aaa06c39318e" compoundref="_array_pack_bytes_ext_8cs" startline="119" endline="128">Photon.Compression.ArrayPackBytesExt.ReadPackedBytes</referencedby>
        <referencedby refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a54c616819e08d226c702608cdfac40d7" compoundref="_array_serialize_unsafe_8cs" startline="157" endline="162">Photon.Compression.ArraySerializeUnsafe.ReadSigned</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aac015a19abdb356f790cb158c399d236" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe ulong</type>
        <definition>static unsafe ulong Photon.Compression.ArraySerializeUnsafe.Read</definition>
        <argsstring>(ulong *uPtr, int bitposition, int bits)</argsstring>
        <name>Read</name>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Primary Unsafe Peek. </para>
        </briefdescription>
        <detaileddescription>
<para>Fast read for byte[] and unit[] by treating them as ulong[]. Reads value at position without incrementing the bitposition. WARNING: There is no bounds checking on this method! </para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Cast your byte* or uint* to ulong*</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitposition</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bits</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the read value.</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="307" column="28" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="307" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a8eed7af214af22ed7d6e1e3f2b2bea7b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.Add</definition>
        <argsstring>(this ulong value, ulong *uPtr, int bitposition, int bits)</argsstring>
        <name>Add</name>
        <param>
          <type>this ulong</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Append this value to the unsafe uPtr array. </para>
        </briefdescription>
        <detaileddescription>
<para>Use for altering previous writes. Does not preserve existing data past the write. Use for sequential writes only. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="332" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="332" bodyend="335"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1af41d5ed8a3567a57dcec561e0f5c9ebd" compoundref="_array_serialize_unsafe_8cs" startline="186" endline="203">Photon.Compression.ArraySerializeUnsafe.Append</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a5e87ce3a31742e47f794b1c0072a228a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.Add</definition>
        <argsstring>(this uint value, ulong *uPtr, int bitposition, int bits)</argsstring>
        <name>Add</name>
        <param>
          <type>this uint</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Append this value to the unsafe uPtr array. </para>
        </briefdescription>
        <detaileddescription>
<para>Use for altering previous writes. Does not preserve existing data past the write. Use for sequential writes only. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="341" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="341" bodyend="344"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1af41d5ed8a3567a57dcec561e0f5c9ebd" compoundref="_array_serialize_unsafe_8cs" startline="186" endline="203">Photon.Compression.ArraySerializeUnsafe.Append</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1adb70cced0326b78bf193dbb27f6d17b8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.Add</definition>
        <argsstring>(this ushort value, ulong *uPtr, int bitposition, int bits)</argsstring>
        <name>Add</name>
        <param>
          <type>this ushort</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Append this value to the unsafe uPtr array. </para>
        </briefdescription>
        <detaileddescription>
<para>Use for altering previous writes. Does not preserve existing data past the write. Use for sequential writes only. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="350" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="350" bodyend="353"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1af41d5ed8a3567a57dcec561e0f5c9ebd" compoundref="_array_serialize_unsafe_8cs" startline="186" endline="203">Photon.Compression.ArraySerializeUnsafe.Append</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a31ae951acb8e76fbe6d266ac93eea072" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.Add</definition>
        <argsstring>(this byte value, ulong *uPtr, int bitposition, int bits)</argsstring>
        <name>Add</name>
        <param>
          <type>this byte</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Append this value to the unsafe uPtr array. </para>
        </briefdescription>
        <detaileddescription>
<para>Use for altering previous writes. Does not preserve existing data past the write. Use for sequential writes only. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="359" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="359" bodyend="362"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1af41d5ed8a3567a57dcec561e0f5c9ebd" compoundref="_array_serialize_unsafe_8cs" startline="186" endline="203">Photon.Compression.ArraySerializeUnsafe.Append</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1ad01291d204934c02e9f7567826b4fb6a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.AddUnsigned</definition>
        <argsstring>(this long value, ulong *uPtr, int bitposition, int bits)</argsstring>
        <name>AddUnsigned</name>
        <param>
          <type>this long</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Append this value to the unsafe uPtr array. </para>
        </briefdescription>
        <detaileddescription>
<para>Use for altering previous writes. Does not preserve existing data past the write. Use for sequential writes only. Sign is ignored and value is cast to ulong. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="369" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="369" bodyend="372"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1af41d5ed8a3567a57dcec561e0f5c9ebd" compoundref="_array_serialize_unsafe_8cs" startline="186" endline="203">Photon.Compression.ArraySerializeUnsafe.Append</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a64860382bd4f7498d0702855f4915a1f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.AddUnsigned</definition>
        <argsstring>(this int value, ulong *uPtr, int bitposition, int bits)</argsstring>
        <name>AddUnsigned</name>
        <param>
          <type>this int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Append this value to the unsafe uPtr array. </para>
        </briefdescription>
        <detaileddescription>
<para>Use for altering previous writes. Does not preserve existing data past the write. Use for sequential writes only. Sign is ignored and value is cast to ulong. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="378" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="378" bodyend="381"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1af41d5ed8a3567a57dcec561e0f5c9ebd" compoundref="_array_serialize_unsafe_8cs" startline="186" endline="203">Photon.Compression.ArraySerializeUnsafe.Append</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a16bb9f4bf1b4ee997651c6ea96234b69" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.AddUnsigned</definition>
        <argsstring>(this short value, ulong *uPtr, int bitposition, int bits)</argsstring>
        <name>AddUnsigned</name>
        <param>
          <type>this short</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Append this value to the unsafe uPtr array. </para>
        </briefdescription>
        <detaileddescription>
<para>Use for altering previous writes. Does not preserve existing data past the write. Use for sequential writes only. Sign is ignored and value is cast to ulong. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="387" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="387" bodyend="390"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1af41d5ed8a3567a57dcec561e0f5c9ebd" compoundref="_array_serialize_unsafe_8cs" startline="186" endline="203">Photon.Compression.ArraySerializeUnsafe.Append</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a1b5ae3feac77b751f24556f120457bc3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.AddUnsigned</definition>
        <argsstring>(this sbyte value, ulong *uPtr, int bitposition, int bits)</argsstring>
        <name>AddUnsigned</name>
        <param>
          <type>this sbyte</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Append this value to the unsafe uPtr array. </para>
        </briefdescription>
        <detaileddescription>
<para>Use for altering previous writes. Does not preserve existing data past the write. Use for sequential writes only. Sign is ignored and value is cast to ulong. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="396" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="396" bodyend="399"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1af41d5ed8a3567a57dcec561e0f5c9ebd" compoundref="_array_serialize_unsafe_8cs" startline="186" endline="203">Photon.Compression.ArraySerializeUnsafe.Append</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a5abe80710e4749c531f6fe65f8753820" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.Inject</definition>
        <argsstring>(this ulong value, ulong *uPtr, ref int bitposition, int bits)</argsstring>
        <name>Inject</name>
        <param>
          <type>this ulong</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>ref int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Write this value to the unsafe uPtr array. </para>
        </briefdescription>
        <detaileddescription>
<para>Use for altering previous writes. Preserves existing data past the write. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="409" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="409" bodyend="412"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1ae1b50d2e1381fd02d5962f282d5ce000" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.Inject</definition>
        <argsstring>(this uint value, ulong *uPtr, ref int bitposition, int bits)</argsstring>
        <name>Inject</name>
        <param>
          <type>this uint</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>ref int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Write this value to the unsafe uPtr array. </para>
        </briefdescription>
        <detaileddescription>
<para>Use for altering previous writes. Preserves existing data past the write. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="417" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="417" bodyend="420"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a329c3f02e6b3b655220acd3e4ad44e69" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.Inject</definition>
        <argsstring>(this ushort value, ulong *uPtr, ref int bitposition, int bits)</argsstring>
        <name>Inject</name>
        <param>
          <type>this ushort</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>ref int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Write this value to the unsafe uPtr array. </para>
        </briefdescription>
        <detaileddescription>
<para>Use for altering previous writes. Preserves existing data past the write. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="425" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="425" bodyend="428"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aed07bc529f706b9cc0d31655a79e35ac" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.Inject</definition>
        <argsstring>(this byte value, ulong *uPtr, ref int bitposition, int bits)</argsstring>
        <name>Inject</name>
        <param>
          <type>this byte</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>ref int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Write this value to the unsafe uPtr array. </para>
        </briefdescription>
        <detaileddescription>
<para>Use for altering previous writes. Preserves existing data past the write. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="433" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="433" bodyend="436"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1ad3f5e32ef0e175a524e917e8e1544ac0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.InjectUnsigned</definition>
        <argsstring>(this long value, ulong *uPtr, ref int bitposition, int bits)</argsstring>
        <name>InjectUnsigned</name>
        <param>
          <type>this long</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>ref int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Write this value to the unsafe uPtr array. </para>
        </briefdescription>
        <detaileddescription>
<para>Use for altering previous writes. Preserves existing data past the write. Sign is ignored and value is cast to ulong. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="442" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="442" bodyend="445"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7fa907b300fdf0fc95f66a6cded17f22" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.InjectUnsigned</definition>
        <argsstring>(this int value, ulong *uPtr, ref int bitposition, int bits)</argsstring>
        <name>InjectUnsigned</name>
        <param>
          <type>this int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>ref int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Write this value to the unsafe uPtr array. </para>
        </briefdescription>
        <detaileddescription>
<para>Use for altering previous writes. Preserves existing data past the write. Sign is ignored and value is cast to ulong. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="451" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="451" bodyend="454"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a1ae390e133fb1b9ce70c54c2d70f224a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.InjectUnsigned</definition>
        <argsstring>(this short value, ulong *uPtr, int bitposition, int bits)</argsstring>
        <name>InjectUnsigned</name>
        <param>
          <type>this short</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Write this value to the unsafe uPtr array. </para>
        </briefdescription>
        <detaileddescription>
<para>Use for altering previous writes. Preserves existing data past the write. Sign is ignored and value is cast to ulong. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="460" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="460" bodyend="463"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aff760ad1506a3d4c236ab7b4fdd5d7cd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.InjectUnsigned</definition>
        <argsstring>(this sbyte value, ulong *uPtr, ref int bitposition, int bits)</argsstring>
        <name>InjectUnsigned</name>
        <param>
          <type>this sbyte</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>ref int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Write this value to the unsafe uPtr array. </para>
        </briefdescription>
        <detaileddescription>
<para>Use for altering previous writes. Preserves existing data past the write. Sign is ignored and value is cast to ulong. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="469" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="469" bodyend="472"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1af2bbd46e555555106cfd395a5df09373" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.Poke</definition>
        <argsstring>(this ulong value, ulong *uPtr, int bitposition, int bits)</argsstring>
        <name>Poke</name>
        <param>
          <type>this ulong</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Write this value to the unsafe uPtr array. </para>
        </briefdescription>
        <detaileddescription>
<para>Use for altering previous writes. Preserves existing data past the write. Same as Inject, only the bitposition is not a ref and is not incremented. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="483" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="483" bodyend="486"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aebc9ea90886b8af4fc06515a194050ce" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.Poke</definition>
        <argsstring>(this uint value, ulong *uPtr, int bitposition, int bits)</argsstring>
        <name>Poke</name>
        <param>
          <type>this uint</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Write this value to the unsafe uPtr array. </para>
        </briefdescription>
        <detaileddescription>
<para>Use for altering previous writes. Preserves existing data past the write. Same as Inject, only the bitposition is not a ref and is not incremented. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="492" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="492" bodyend="495"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7fc2ffb97ae1499104eb44a33c650a4f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.Poke</definition>
        <argsstring>(this ushort value, ulong *uPtr, int bitposition, int bits)</argsstring>
        <name>Poke</name>
        <param>
          <type>this ushort</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Write this value to the unsafe uPtr array. </para>
        </briefdescription>
        <detaileddescription>
<para>Use for altering previous writes. Preserves existing data past the write. Same as Inject, only the bitposition is not a ref and is not incremented. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="501" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="501" bodyend="504"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a3b1c2f21b5952be5177862b1c26552b8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.Poke</definition>
        <argsstring>(this byte value, ulong *uPtr, int bitposition, int bits)</argsstring>
        <name>Poke</name>
        <param>
          <type>this byte</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Write this value to the unsafe uPtr array. </para>
        </briefdescription>
        <detaileddescription>
<para>Use for altering previous writes. Preserves existing data past the write. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="509" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="509" bodyend="512"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aeca6155e6221e0ac642948cde93b64f1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.InjectUnsigned</definition>
        <argsstring>(this long value, ulong *uPtr, int bitposition, int bits)</argsstring>
        <name>InjectUnsigned</name>
        <param>
          <type>this long</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Write this value to the unsafe uPtr array. </para>
        </briefdescription>
        <detaileddescription>
<para>Use for altering previous writes. Preserves existing data past the write. Sign is ignored and value is cast to ulong. Same as Inject, only the bitposition is not a ref and is not incremented. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="519" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="519" bodyend="522"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a8866cdb143d4df1319dc05aa275d3bf2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.InjectUnsigned</definition>
        <argsstring>(this int value, ulong *uPtr, int bitposition, int bits)</argsstring>
        <name>InjectUnsigned</name>
        <param>
          <type>this int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Write this value to the unsafe uPtr array. </para>
        </briefdescription>
        <detaileddescription>
<para>Use for altering previous writes. Preserves existing data past the write. Sign is ignored and value is cast to ulong. Same as Inject, only the bitposition is not a ref and is not incremented. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="529" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="529" bodyend="532"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aeffb0da43220a32fcc5ccc9def2ba49a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.PokeUnsigned</definition>
        <argsstring>(this short value, ulong *uPtr, int bitposition, int bits)</argsstring>
        <name>PokeUnsigned</name>
        <param>
          <type>this short</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Write this value to the unsafe uPtr array. </para>
        </briefdescription>
        <detaileddescription>
<para>Use for altering previous writes. Preserves existing data past the write. Sign is ignored and value is cast to ulong. Same as Inject, only the bitposition is not a ref and is not incremented. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="539" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="539" bodyend="542"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a5a17df40fe2c3d8d1861dfbc590e3aec" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.PokeUnsigned</definition>
        <argsstring>(this sbyte value, ulong *uPtr, int bitposition, int bits)</argsstring>
        <name>PokeUnsigned</name>
        <param>
          <type>this sbyte</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>uPtr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bitposition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Write this value to the unsafe uPtr array. </para>
        </briefdescription>
        <detaileddescription>
<para>Use for altering previous writes. Preserves existing data past the write. Sign is ignored and value is cast to ulong. Same as Inject, only the bitposition is not a ref and is not incremented. WARNING: There is no bounds checking on this. If you write too far, you will crash. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="549" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="549" bodyend="552"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aa29c7e4c647110ee57afcdd9ccc5d8dd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.ReadOutUnsafe</definition>
        <argsstring>(ulong *sourcePtr, int sourcePos, ulong *targetPtr, ref int targetPos, int bits)</argsstring>
        <name>ReadOutUnsafe</name>
        <param>
          <type>ulong *</type>
          <declname>sourcePtr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sourcePos</declname>
        </param>
        <param>
          <type>ulong *</type>
          <declname>targetPtr</declname>
        </param>
        <param>
          <type>ref int</type>
          <declname>targetPos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Primary ReadOutUnsafe method. </para>
        </briefdescription>
        <detaileddescription>
<para>WARNING: No bounds checking. Use with caution. Cast array pointers to ulong*. </para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sourcePtr</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sourcePos</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>targetPtr</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>targetPos</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bits</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="567" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="567" bodyend="583"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aed2650eee9804de6bf8b43e12da2748b" compoundref="_array_serialize_unsafe_8cs" startline="279" endline="296">Photon.Compression.ArraySerializeUnsafe.Read</references>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1afaf99c9f84fc1c0f0f10931768bd76af" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.ReadOutUnsafe</definition>
        <argsstring>(this ulong[] source, int sourcePos, byte[] target, ref int targetPos, int bits)</argsstring>
        <name>ReadOutUnsafe</name>
        <param>
          <type>this ulong[]</type>
          <declname>source</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sourcePos</declname>
        </param>
        <param>
          <type>byte[]</type>
          <declname>target</declname>
        </param>
        <param>
          <type>ref int</type>
          <declname>targetPos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Read the contents of one bitpacked array to another using Unsafe. </para>
        </briefdescription>
        <detaileddescription>
<para>This generally requires arrays to have a total byte count divisible by 8, as they will be treated as ulong[] in unsafe. </para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sourcePos</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitpos of the source array to start read from.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>targetPos</parametername>
</parameternamelist>
<parameterdescription>
<para>The target bitposition (that will be incremented with this write).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits to copy. This should be the current bitpos of the source.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="594" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="594" bodyend="618"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aed2650eee9804de6bf8b43e12da2748b" compoundref="_array_serialize_unsafe_8cs" startline="279" endline="296">Photon.Compression.ArraySerializeUnsafe.Read</references>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a2870601c5be42e35dbb81baeaa4d8a75" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.ReadOutUnsafe</definition>
        <argsstring>(this ulong[] source, int sourcePos, uint[] target, ref int targetPos, int bits)</argsstring>
        <name>ReadOutUnsafe</name>
        <param>
          <type>this ulong[]</type>
          <declname>source</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sourcePos</declname>
        </param>
        <param>
          <type>uint[]</type>
          <declname>target</declname>
        </param>
        <param>
          <type>ref int</type>
          <declname>targetPos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Read the contents of one bitpacked array to another using Unsafe. </para>
        </briefdescription>
        <detaileddescription>
<para>This generally requires arrays to have a total byte count divisible by 8, as they will be treated as ulong[] in unsafe. </para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sourcePos</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitpos of the source array to start read from.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>targetPos</parametername>
</parameternamelist>
<parameterdescription>
<para>The target bitposition (that will be incremented with this write).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits to copy. This should be the current bitpos of the source.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="629" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="629" bodyend="653"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aed2650eee9804de6bf8b43e12da2748b" compoundref="_array_serialize_unsafe_8cs" startline="279" endline="296">Photon.Compression.ArraySerializeUnsafe.Read</references>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a16878d461a48f656e004dbc15483aca1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.ReadOutUnsafe</definition>
        <argsstring>(this ulong[] source, int sourcePos, ulong[] target, ref int targetPos, int bits)</argsstring>
        <name>ReadOutUnsafe</name>
        <param>
          <type>this ulong[]</type>
          <declname>source</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sourcePos</declname>
        </param>
        <param>
          <type>ulong[]</type>
          <declname>target</declname>
        </param>
        <param>
          <type>ref int</type>
          <declname>targetPos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Read the contents of one bitpacked array to another using Unsafe. </para>
        </briefdescription>
        <detaileddescription>
<para>This generally requires arrays to have a total byte count divisible by 8, as they will be treated as ulong[] in unsafe. </para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sourcePos</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitpos of the source array to start read from.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>targetPos</parametername>
</parameternamelist>
<parameterdescription>
<para>The target bitposition (that will be incremented with this write).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits to copy. This should be the current bitpos of the source.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="663" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="663" bodyend="685"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aed2650eee9804de6bf8b43e12da2748b" compoundref="_array_serialize_unsafe_8cs" startline="279" endline="296">Photon.Compression.ArraySerializeUnsafe.Read</references>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aa833cc1c3b10ab0f18ca58690df814a8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.ReadOutUnsafe</definition>
        <argsstring>(this uint[] source, int sourcePos, byte[] target, ref int targetPos, int bits)</argsstring>
        <name>ReadOutUnsafe</name>
        <param>
          <type>this uint[]</type>
          <declname>source</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sourcePos</declname>
        </param>
        <param>
          <type>byte[]</type>
          <declname>target</declname>
        </param>
        <param>
          <type>ref int</type>
          <declname>targetPos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Read the contents of one bitpacked array to another using Unsafe. </para>
        </briefdescription>
        <detaileddescription>
<para>This generally requires arrays to have a total byte count divisible by 8, as they will be treated as ulong[] in unsafe. </para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sourcePos</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitpos of the source array to start read from.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>targetPos</parametername>
</parameternamelist>
<parameterdescription>
<para>The target bitposition (that will be incremented with this write).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits to copy. This should be the current bitpos of the source.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="700" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="700" bodyend="725"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aed2650eee9804de6bf8b43e12da2748b" compoundref="_array_serialize_unsafe_8cs" startline="279" endline="296">Photon.Compression.ArraySerializeUnsafe.Read</references>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1ad2245200c53099068ed23d4259ed720a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.ReadOutUnsafe</definition>
        <argsstring>(this uint[] source, int sourcePos, uint[] target, ref int targetPos, int bits)</argsstring>
        <name>ReadOutUnsafe</name>
        <param>
          <type>this uint[]</type>
          <declname>source</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sourcePos</declname>
        </param>
        <param>
          <type>uint[]</type>
          <declname>target</declname>
        </param>
        <param>
          <type>ref int</type>
          <declname>targetPos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Read the contents of one bitpacked array to another using Unsafe. </para>
        </briefdescription>
        <detaileddescription>
<para>This generally requires arrays to have a total byte count divisible by 8, as they will be treated as ulong[] in unsafe. </para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sourcePos</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitpos of the source array to start read from.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>targetPos</parametername>
</parameternamelist>
<parameterdescription>
<para>The target bitposition (that will be incremented with this write).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits to copy. This should be the current bitpos of the source.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="735" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="735" bodyend="761"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aed2650eee9804de6bf8b43e12da2748b" compoundref="_array_serialize_unsafe_8cs" startline="279" endline="296">Photon.Compression.ArraySerializeUnsafe.Read</references>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1ac3c44560ce8b15f8203bbef3c249d46f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.ReadOutUnsafe</definition>
        <argsstring>(this uint[] source, int sourcePos, ulong[] target, ref int targetPos, int bits)</argsstring>
        <name>ReadOutUnsafe</name>
        <param>
          <type>this uint[]</type>
          <declname>source</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sourcePos</declname>
        </param>
        <param>
          <type>ulong[]</type>
          <declname>target</declname>
        </param>
        <param>
          <type>ref int</type>
          <declname>targetPos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Read the contents of one bitpacked array to another using Unsafe. </para>
        </briefdescription>
        <detaileddescription>
<para>This generally requires arrays to have a total byte count divisible by 8, as they will be treated as ulong[] in unsafe. </para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sourcePos</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitpos of the source array to start read from.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>targetPos</parametername>
</parameternamelist>
<parameterdescription>
<para>The target bitposition (that will be incremented with this write).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits to copy. This should be the current bitpos of the source.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="771" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="771" bodyend="795"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aed2650eee9804de6bf8b43e12da2748b" compoundref="_array_serialize_unsafe_8cs" startline="279" endline="296">Photon.Compression.ArraySerializeUnsafe.Read</references>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a1bb8f817269d8af044c064423934edee" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.ReadOutUnsafe</definition>
        <argsstring>(this byte[] source, int sourcePos, ulong[] target, ref int targetPos, int bits)</argsstring>
        <name>ReadOutUnsafe</name>
        <param>
          <type>this byte[]</type>
          <declname>source</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sourcePos</declname>
        </param>
        <param>
          <type>ulong[]</type>
          <declname>target</declname>
        </param>
        <param>
          <type>ref int</type>
          <declname>targetPos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Read the contents of one bitpacked array to another using Unsafe. </para>
        </briefdescription>
        <detaileddescription>
<para>This generally requires arrays to have a total byte count divisible by 8, as they will be treated as ulong[] in unsafe. </para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sourcePos</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitpos of the source array to start read from.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>targetPos</parametername>
</parameternamelist>
<parameterdescription>
<para>The target bitposition (that will be incremented with this write).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits to copy. This should be the current bitpos of the source.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="810" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="810" bodyend="835"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aed2650eee9804de6bf8b43e12da2748b" compoundref="_array_serialize_unsafe_8cs" startline="279" endline="296">Photon.Compression.ArraySerializeUnsafe.Read</references>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7081dc037149909905051d9d4a3a44c8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.ReadOutUnsafe</definition>
        <argsstring>(this byte[] source, int sourcePos, uint[] target, ref int targetPos, int bits)</argsstring>
        <name>ReadOutUnsafe</name>
        <param>
          <type>this byte[]</type>
          <declname>source</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sourcePos</declname>
        </param>
        <param>
          <type>uint[]</type>
          <declname>target</declname>
        </param>
        <param>
          <type>ref int</type>
          <declname>targetPos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Read the contents of one bitpacked array to another using Unsafe. </para>
        </briefdescription>
        <detaileddescription>
<para>This generally requires arrays to have a total byte count divisible by 8, as they will be treated as ulong[] in unsafe. </para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sourcePos</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitpos of the source array to start read from.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>targetPos</parametername>
</parameternamelist>
<parameterdescription>
<para>The target bitposition (that will be incremented with this write).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits to copy. This should be the current bitpos of the source.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="846" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="846" bodyend="872"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aed2650eee9804de6bf8b43e12da2748b" compoundref="_array_serialize_unsafe_8cs" startline="279" endline="296">Photon.Compression.ArraySerializeUnsafe.Read</references>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      <memberdef kind="function" id="class_photon_1_1_compression_1_1_array_serialize_unsafe_1ae5dc5927725bd8713a88e1a039120964" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsafe void</type>
        <definition>static unsafe void Photon.Compression.ArraySerializeUnsafe.ReadOutUnsafe</definition>
        <argsstring>(this byte[] source, int sourcePos, byte[] target, ref int targetPos, int bits)</argsstring>
        <name>ReadOutUnsafe</name>
        <param>
          <type>this byte[]</type>
          <declname>source</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sourcePos</declname>
        </param>
        <param>
          <type>byte[]</type>
          <declname>target</declname>
        </param>
        <param>
          <type>ref int</type>
          <declname>targetPos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Read the contents of one bitpacked array to another using Unsafe. </para>
        </briefdescription>
        <detaileddescription>
<para>This generally requires arrays to have a total byte count divisible by 8, as they will be treated as ulong[] in unsafe. </para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sourcePos</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitpos of the source array to start read from.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>targetPos</parametername>
</parameternamelist>
<parameterdescription>
<para>The target bitposition (that will be incremented with this write).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits to copy. This should be the current bitpos of the source.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="882" column="27" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="882" bodyend="908"/>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aed2650eee9804de6bf8b43e12da2748b" compoundref="_array_serialize_unsafe_8cs" startline="279" endline="296">Photon.Compression.ArraySerializeUnsafe.Read</references>
        <references refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" compoundref="_array_serialize_unsafe_8cs" startline="241" endline="269">Photon.Compression.ArraySerializeUnsafe.Write</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>Photon.Compression.ArraySerializeUnsafe</label>
        <link refid="class_photon_1_1_compression_1_1_array_serialize_unsafe"/>
      </node>
    </collaborationgraph>
    <location file="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" line="36" column="15" bodyfile="C:/_SSDSPEEDUP/2021/GPS/gps2_purrpatrator/GPS2_Purrpatrator/Assets/Photon/PhotonUtilities/Compression/Bitpackers/ArraySerializeUnsafe.cs" bodystart="37" bodyend="911"/>
    <listofallmembers>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a8eed7af214af22ed7d6e1e3f2b2bea7b" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>Add</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a5e87ce3a31742e47f794b1c0072a228a" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>Add</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1adb70cced0326b78bf193dbb27f6d17b8" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>Add</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a31ae951acb8e76fbe6d266ac93eea072" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>Add</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1adca7942800067de6810fcfcd6bb914b0" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>AddSigned</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a85438055b159698a8b89e0da7c2b075b" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>AddSigned</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aa0ff6c4cfe32ef06ea8e0032f452f173" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>AddSigned</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1ad01291d204934c02e9f7567826b4fb6a" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>AddUnsigned</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a64860382bd4f7498d0702855f4915a1f" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>AddUnsigned</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a16bb9f4bf1b4ee997651c6ea96234b69" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>AddUnsigned</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a1b5ae3feac77b751f24556f120457bc3" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>AddUnsigned</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1af41d5ed8a3567a57dcec561e0f5c9ebd" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>Append</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a617954426c11928e6a29924c86904f5a" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>AppendSigned</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a8d1820322be8d32078189764fc3f5181" prot="private" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>bufferOverrunMsg</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a5abe80710e4749c531f6fe65f8753820" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>Inject</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1ae1b50d2e1381fd02d5962f282d5ce000" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>Inject</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a329c3f02e6b3b655220acd3e4ad44e69" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>Inject</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aed07bc529f706b9cc0d31655a79e35ac" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>Inject</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aab34e3abe5d73cb6d8db9bcbe4cedfa3" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>InjectSigned</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1ad249b0e7b5f309b7de58ff3c8cdc7535" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>InjectSigned</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a20b1f202992101366b7e95d8085fa983" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>InjectSigned</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1ad3f5e32ef0e175a524e917e8e1544ac0" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>InjectUnsigned</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7fa907b300fdf0fc95f66a6cded17f22" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>InjectUnsigned</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a1ae390e133fb1b9ce70c54c2d70f224a" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>InjectUnsigned</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aff760ad1506a3d4c236ab7b4fdd5d7cd" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>InjectUnsigned</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aeca6155e6221e0ac642948cde93b64f1" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>InjectUnsigned</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a8866cdb143d4df1319dc05aa275d3bf2" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>InjectUnsigned</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a918507b8a2f85bea9efb99f1739387f4" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>PeekSigned</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1af2bbd46e555555106cfd395a5df09373" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>Poke</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aebc9ea90886b8af4fc06515a194050ce" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>Poke</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7fc2ffb97ae1499104eb44a33c650a4f" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>Poke</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a3b1c2f21b5952be5177862b1c26552b8" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>Poke</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aa6df4cd317240173d82b6f64b87789b0" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>PokeSigned</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7dc1b1dabf93068e2acfbfbb5cd56d87" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>PokeSigned</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a04d0c93ea6e0ec310d9ffd38f05b3134" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>PokeSigned</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aeffb0da43220a32fcc5ccc9def2ba49a" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>PokeUnsigned</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a5a17df40fe2c3d8d1861dfbc590e3aec" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>PokeUnsigned</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aed2650eee9804de6bf8b43e12da2748b" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>Read</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aac015a19abdb356f790cb158c399d236" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>Read</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aa29c7e4c647110ee57afcdd9ccc5d8dd" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>ReadOutUnsafe</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1afaf99c9f84fc1c0f0f10931768bd76af" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>ReadOutUnsafe</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a2870601c5be42e35dbb81baeaa4d8a75" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>ReadOutUnsafe</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a16878d461a48f656e004dbc15483aca1" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>ReadOutUnsafe</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aa833cc1c3b10ab0f18ca58690df814a8" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>ReadOutUnsafe</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1ad2245200c53099068ed23d4259ed720a" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>ReadOutUnsafe</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1ac3c44560ce8b15f8203bbef3c249d46f" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>ReadOutUnsafe</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a1bb8f817269d8af044c064423934edee" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>ReadOutUnsafe</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7081dc037149909905051d9d4a3a44c8" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>ReadOutUnsafe</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1ae5dc5927725bd8713a88e1a039120964" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>ReadOutUnsafe</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a54c616819e08d226c702608cdfac40d7" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>ReadSigned</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1a7cb429a914dbfd6d416570d712e50ec1" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>Write</name></member>
      <member refid="class_photon_1_1_compression_1_1_array_serialize_unsafe_1aad43a38228ed7e77b5968bc763066d6b" prot="public" virt="non-virtual"><scope>Photon::Compression::ArraySerializeUnsafe</scope><name>WriteSigned</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
